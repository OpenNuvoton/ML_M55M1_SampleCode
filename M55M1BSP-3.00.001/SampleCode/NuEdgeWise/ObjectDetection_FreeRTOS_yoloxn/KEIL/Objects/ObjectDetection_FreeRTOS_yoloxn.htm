<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\ObjectDetection_FreeRTOS_yoloxn.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\ObjectDetection_FreeRTOS_yoloxn.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6220000: Last Updated: Fri Jul  5 11:20:56 2024
<BR><P>
<H3>Maximum Stack Usage =       1168 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main_task(void*) &rArr; arm::app::Model::Init(unsigned char*, unsigned int, unsigned char const*, unsigned int, tflite::MicroAllocator*) &rArr; tflite::MicroInterpreter::AllocateTensors() &rArr; tflite::MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer() &rArr; tflite::GetRegistrationFromOpCode(tflite::OperatorCode const*, tflite::MicroOpResolver const&, TFLMRegistration const**) &rArr; MicroPrintf(char const*, ...) &rArr; (anonymous namespace)::VDebugLog(char const*, ...) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[7c]">ACMP01_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7c]">ACMP01_IRQHandler</a><BR>
 <LI><a href="#[23a]">std::__2::__forward_list_node&lang;arm::app::image::Detection, void*&rang;* std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;::__sort&lang;arm::app::image::CalculateNMS(std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&, int, float)::$_0&rang;(std::__2::__forward_list_node&lang;arm::app::image::Detection, void*&rang;*, int, arm::app::image::CalculateNMS(std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&, int, float)::$_0&)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23a]">std::__2::__forward_list_node&lang;arm::app::image::Detection, void*&rang;* std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;::__sort&lang;arm::app::image::CalculateNMS(std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&, int, float)::$_0&rang;(std::__2::__forward_list_node&lang;arm::app::image::Detection, void*&rang;*, int, arm::app::image::CalculateNMS(std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&, int, float)::$_0&)</a><BR>
 <LI><a href="#[225]">std::__2::__forward_list_node&lang;arm::app::image::Detection, void*&rang;* std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;::__sort&lang;arm::app::object_detection::DetectorPostprocessing::GetNetworkBoxes(arm::app::object_detection::Network&, int, int, float, std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&)::$_0&rang;(std::__2::__forward_list_node&lang;arm::app::image::Detection, void*&rang;*, int, arm::app::object_detection::DetectorPostprocessing::GetNetworkBoxes(arm::app::object_detection::Network&, int, int, float, std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&)::$_0&)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[225]">std::__2::__forward_list_node&lang;arm::app::image::Detection, void*&rang;* std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;::__sort&lang;arm::app::object_detection::DetectorPostprocessing::GetNetworkBoxes(arm::app::object_detection::Network&, int, int, float, std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&)::$_0&rang;(std::__2::__forward_list_node&lang;arm::app::image::Detection, void*&rang;*, int, arm::app::object_detection::DetectorPostprocessing::GetNetworkBoxes(arm::app::object_detection::Network&, int, int, float, std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&)::$_0&)</a><BR>
 <LI><a href="#[2cb]">tflite::AllocationInfoBuilder::MarkSubgraphLifetimesIfNecessary(tflite::Operator const*, tflite::internal::ScratchBufferRequest*, tflite::ScratchBufferHandle*, tflite::SubgraphAllocations*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2ab]">tflite::AllocationInfoBuilder::MarkAllocationLifetimes(int, tflite::internal::ScratchBufferRequest*, tflite::ScratchBufferHandle*, tflite::SubgraphAllocations*)</a><BR>
 <LI><a href="#[29d]">void tflite::reference_ops::transpose_internal::TransposeImpl&lang;int&rang;(int, int, int const*, int const*, int const*, int*, int const*, int const*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29d]">void tflite::reference_ops::transpose_internal::TransposeImpl&lang;int&rang;(int, int, int const*, int const*, int const*, int*, int const*, int const*)</a><BR>
 <LI><a href="#[29c]">void tflite::reference_ops::transpose_internal::TransposeImpl&lang;signed char&rang;(int, int, int const*, signed char const*, int const*, signed char*, int const*, int const*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29c]">void tflite::reference_ops::transpose_internal::TransposeImpl&lang;signed char&rang;(int, int, int const*, signed char const*, int const*, signed char*, int const*, int const*)</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[7c]">ACMP01_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[7d]">ACMP23_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[8d]">AWF_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[12]">BODOUT_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[37]">BPWM0_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[38]">BPWM1_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[2f]">BRAKE0_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[33]">BRAKE1_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[b]">BusFault_Handler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[78]">CANFD00_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[79]">CANFD01_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[7a]">CANFD10_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[7b]">CANFD11_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[76]">CCAP_IRQHandler</a> from imagesensor.o(.text.CCAP_IRQHandler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[16]">CKFAIL_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[7e]">CRC_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[77]">CRYPTO_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[84]">DAC01_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[6d]">DMIC0VAD_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[6c]">DMIC0_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[f]">DebugMon_Handler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[97]">Delay</a> from sensor_hm1055.o(.text.Delay) referenced 2 times from sensor_hm1055.o(.text.InitHM1055_VGA_YUV422)
 <LI><a href="#[7f]">EADC00_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[80]">EADC01_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[81]">EADC02_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[82]">EADC03_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[89]">ECAP0_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[8a]">ECAP1_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[8b]">ECAP2_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[8c]">ECAP3_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[1f]">EINT0_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[20]">EINT1_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[21]">EINT2_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[22]">EINT3_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[23]">EINT4_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[24]">EINT5_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[5f]">EINT6_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[60]">EINT7_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[4c]">EMAC0_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[30]">EPWM0P0_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[31]">EPWM0P1_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[32]">EPWM0P2_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[34]">EPWM1P0_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[35]">EPWM1P1_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[36]">EPWM1P2_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[85]">EQEI0_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[86]">EQEI1_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[87]">EQEI2_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[88]">EQEI3_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[8f]">ETI_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[90]">GDMACH0_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[91]">GDMACH1_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[25]">GPA_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[26]">GPB_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[27]">GPC_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[28]">GPD_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[29]">GPE_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[2a]">GPF_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[2b]">GPG_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[2c]">GPH_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[2d]">GPI_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[2e]">GPJ_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[4b]">HSOTG_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[4a]">HSUSBD_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[49]">HSUSBH_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[9]">HardFault_Handler</a> from startup_m55m1.o(.text.HardFault_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[62]">I2C0_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[63]">I2C1_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[64]">I2C2_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[65]">I2C3_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[6e]">I2S0_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[6f]">I2S1_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[71]">I3C0_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[13]">IRC_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[17]">ISP_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[0]">InitHM1055_VGA_YUV422</a> from sensor_hm1055.o(.text.InitHM1055_VGA_YUV422) referenced 2 times from sensor_hm1055.o(.data.g_sSensorHM1055_VGA_YUV422)
 <LI><a href="#[73]">KPI_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[3c]">KS_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[83]">LPADC0_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[66]">LPI2C0_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[3b]">LPPDMA_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[53]">LPSPI0_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[41]">LPTMR0_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[42]">LPTMR1_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[61]">LPUART0_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[a]">MemManage_Handler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[8]">NMI_Handler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[1e]">NPU_IRQHandler</a> from ethosu_npu_init.o(.text.NPU_IRQHandler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[72]">OTFC0_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[39]">PDMA0_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[3a]">PDMA1_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[14]">PMC_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[6b]">PSIO_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[10]">PendSV_Handler</a> from portasm.o(.text.PendSV_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[4d]">QSPI0_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[4e]">QSPI1_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[19]">RTCTAMPER_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[18]">RTC_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[7]">Reset_Handler</a> from startup_m55m1.o(.text.Reset_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[68]">SC0_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[69]">SC1_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[6a]">SC2_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[74]">SDH0_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[75]">SDH1_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[4f]">SPI0_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[50]">SPI1_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[51]">SPI2_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[52]">SPI3_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[54]">SPIM0_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[15]">SRAMPERR_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[e]">SVC_Handler</a> from portasm.o(.text.SVC_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[d]">SecureFault_Handler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[11]">SysTick_Handler</a> from port.o(.text.SysTick_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[ad]">SystemInit</a> from system_m55m1.o(.text.SystemInit) referenced from system_m55m1.o(.init_array)
 <LI><a href="#[3d]">TIMER0_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[3e]">TIMER1_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[3f]">TIMER2_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[40]">TIMER3_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[70]">TRNG_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[43]">TTMR0_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[44]">TTMR1_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[55]">UART0_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[56]">UART1_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[57]">UART2_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[58]">UART3_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[59]">UART4_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[5a]">UART5_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[5b]">UART6_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[5c]">UART7_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[5d]">UART8_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[5e]">UART9_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[47]">USBD_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[45]">USBH0_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[46]">USBH1_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[48]">USBOTG_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[67]">USCI0_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[8e]">UTCPD_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[c]">UsageFault_Handler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[1a]">WDT0_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[1c]">WDT1_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[1b]">WWDT0_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[1d]">WWDT1_IRQHandler</a> from startup_m55m1.o(.text.Default_Handler) referenced from startup_m55m1.o(RESET)
 <LI><a href="#[ae]">_GLOBAL__sub_I_main.cpp</a> from main.o(.text._GLOBAL__sub_I_main.cpp) referenced from main.o(.init_array)
 <LI><a href="#[9a]">inferenceProcessTask(void*)</a> from inferencetask.o(.text._Z20inferenceProcessTaskPv) referenced 2 times from main.o(.text._ZL9main_taskPv)
 <LI><a href="#[9c]">main_task(void*)</a> from main.o(.text._ZL9main_taskPv) referenced 2 times from main.o(.text.main)
 <LI><a href="#[a3]">arm::app::YoloXnanoNu::GetOpResolver()</a> from yoloxnanonu.o(.text._ZN3arm3app11YoloXnanoNu13GetOpResolverEv) referenced from yoloxnanonu.o(.rodata._ZTVN3arm3app11YoloXnanoNuE)
 <LI><a href="#[a4]">arm::app::YoloXnanoNu::EnlistOperations()</a> from yoloxnanonu.o(.text._ZN3arm3app11YoloXnanoNu16EnlistOperationsEv) referenced from yoloxnanonu.o(.rodata._ZTVN3arm3app11YoloXnanoNuE)
 <LI><a href="#[a1]">arm::app::YoloXnanoNu::~YoloXnanoNu__deallocating()</a> from yoloxnanonu.o(.text._ZN3arm3app11YoloXnanoNuD0Ev) referenced from yoloxnanonu.o(.rodata._ZTVN3arm3app11YoloXnanoNuE)
 <LI><a href="#[a0]">arm::app::YoloXnanoNu::~YoloXnanoNu__sub_object()</a> from yoloxnanonu.o(.text._ZN3arm3app11YoloXnanoNuD2Ev) referenced from yoloxnanonu.o(.rodata._ZTVN3arm3app11YoloXnanoNuE)
 <LI><a href="#[a2]">arm::app::Model::RunInference()</a> from model.o(.text._ZN3arm3app5Model12RunInferenceEv) referenced from yoloxnanonu.o(.rodata._ZTVN3arm3app11YoloXnanoNuE)
 <LI><a href="#[a2]">arm::app::Model::RunInference()</a> from model.o(.text._ZN3arm3app5Model12RunInferenceEv) referenced from model.o(.rodata._ZTVN3arm3app5ModelE)
 <LI><a href="#[a6]">arm::app::Model::~Model__deallocating()</a> from model.o(.text._ZN3arm3app5ModelD0Ev) referenced from model.o(.rodata._ZTVN3arm3app5ModelE)
 <LI><a href="#[a5]">arm::app::Model::~Model__sub_object()</a> from model.o(.text._ZN3arm3app5ModelD2Ev) referenced from model.o(.rodata._ZTVN3arm3app5ModelE)
 <LI><a href="#[be]">tflite::(anonymous namespace)::TransposeEval(TfLiteContext*, TfLiteNode*)</a> from transpose.o(.text._ZN6tflite12_GLOBAL__N_113TransposeEvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from transpose.o(.text._ZN6tflite18Register_TRANSPOSEEv)
 <LI><a href="#[bd]">tflite::(anonymous namespace)::TransposePrepare(TfLiteContext*, TfLiteNode*)</a> from transpose.o(.text._ZN6tflite12_GLOBAL__N_116TransposePrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from transpose.o(.text._ZN6tflite18Register_TRANSPOSEEv)
 <LI><a href="#[b0]">tflite::(anonymous namespace)::MicroBuiltinDataAllocator::Deallocate(void*)</a> from micro_allocator.o(.text._ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv) referenced from micro_allocator.o(.text._ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE)
 <LI><a href="#[af]">tflite::(anonymous namespace)::MicroBuiltinDataAllocator::Allocate(unsigned int, unsigned int)</a> from micro_allocator.o(.text._ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEjj) referenced from micro_allocator.o(.text._ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE)
 <LI><a href="#[b2]">tflite::(anonymous namespace)::MicroBuiltinDataAllocator::~MicroBuiltinDataAllocator__deallocating()</a> from micro_allocator.o(.text._ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev) referenced from micro_allocator.o(.text._ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE)
 <LI><a href="#[b5]">tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</a> from ethosu.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from ethosu.o(.text._ZN6tflite15Register_ETHOSUEv)
 <LI><a href="#[b3]">tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</a> from ethosu.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj) referenced 2 times from ethosu.o(.text._ZN6tflite15Register_ETHOSUEv)
 <LI><a href="#[b4]">tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</a> from ethosu.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from ethosu.o(.text._ZN6tflite15Register_ETHOSUEv)
 <LI><a href="#[d0]">tflite::ErrorReporter::~ErrorReporter__sub_object()</a> from micro_error_reporter.o(.text._ZN6tflite13ErrorReporterD2Ev) referenced from micro_error_reporter.o(.rodata._ZTVN6tflite18MicroErrorReporterE)
 <LI><a href="#[cb]">tflite::MicroAllocator::AllocateVariables(tflite::SubGraph const*, TfLiteEvalTensor*, int const*)</a> from micro_allocator.o(.text._ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKi) referenced from micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
 <LI><a href="#[c2]">tflite::MicroAllocator::AllocateTempBuffer(unsigned int, unsigned int)</a> from micro_allocator.o(.text._ZN6tflite14MicroAllocator18AllocateTempBufferEjj) referenced from micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
 <LI><a href="#[c3]">tflite::MicroAllocator::DeallocateTempBuffer(unsigned char*)</a> from micro_allocator.o(.text._ZN6tflite14MicroAllocator20DeallocateTempBufferEPh) referenced from micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
 <LI><a href="#[c5]">tflite::MicroAllocator::IsAllTempDeallocated()</a> from micro_allocator.o(.text._ZN6tflite14MicroAllocator20IsAllTempDeallocatedEv) referenced from micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
 <LI><a href="#[c4]">tflite::MicroAllocator::ResetTempAllocations()</a> from micro_allocator.o(.text._ZN6tflite14MicroAllocator20ResetTempAllocationsEv) referenced from micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
 <LI><a href="#[ce]">tflite::MicroAllocator::CommitStaticMemoryPlan(tflite::Model const*, tflite::SubgraphAllocations*, tflite::ScratchBufferHandle*)</a> from micro_allocator.o(.text._ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE) referenced from micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
 <LI><a href="#[c6]">tflite::MicroAllocator::AllocatePersistentBuffer(unsigned int)</a> from micro_allocator.o(.text._ZN6tflite14MicroAllocator24AllocatePersistentBufferEj) referenced from micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
 <LI><a href="#[c0]">tflite::MicroAllocator::AllocateTempTfLiteTensor(tflite::Model const*, tflite::SubgraphAllocations const*, int, int)</a> from micro_allocator.o(.text._ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii) referenced from micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
 <LI><a href="#[ca]">tflite::MicroAllocator::AllocateTfLiteEvalTensors(tflite::Model const*, tflite::SubgraphAllocations*)</a> from micro_allocator.o(.text._ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE) referenced from micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
 <LI><a href="#[c1]">tflite::MicroAllocator::DeallocateTempTfLiteTensor(TfLiteTensor*)</a> from micro_allocator.o(.text._ZN6tflite14MicroAllocator26DeallocateTempTfLiteTensorEP12TfLiteTensor) referenced from micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
 <LI><a href="#[c9]">tflite::MicroAllocator::AllocateNodeAndRegistrations(tflite::Model const*, tflite::SubgraphAllocations*)</a> from micro_allocator.o(.text._ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE) referenced from micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
 <LI><a href="#[cf]">tflite::MicroAllocator::AllocateScratchBufferHandles(tflite::ScratchBufferHandle**, unsigned int)</a> from micro_allocator.o(.text._ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj) referenced from micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
 <LI><a href="#[bf]">tflite::MicroAllocator::AllocatePersistentTfLiteTensor(tflite::Model const*, tflite::SubgraphAllocations const*, int, int)</a> from micro_allocator.o(.text._ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii) referenced from micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
 <LI><a href="#[cd]">tflite::MicroAllocator::PopulateTfLiteTensorFromFlatbuffer(tflite::Model const*, TfLiteTensor*, int, int, bool)</a> from micro_allocator.o(.text._ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib) referenced from micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
 <LI><a href="#[cc]">tflite::MicroAllocator::AllocatePersistentTfLiteTensorInternal()</a> from micro_allocator.o(.text._ZN6tflite14MicroAllocator38AllocatePersistentTfLiteTensorInternalEv) referenced from micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
 <LI><a href="#[c8]">tflite::MicroAllocator::~MicroAllocator__deallocating()</a> from micro_allocator.o(.text._ZN6tflite14MicroAllocatorD0Ev) referenced from micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
 <LI><a href="#[c7]">tflite::MicroAllocator::~MicroAllocator__sub_object()</a> from micro_allocator.o(.text._ZN6tflite14MicroAllocatorD2Ev) referenced from micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
 <LI><a href="#[9b]">tflite::ParseTranspose(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite14ParseTransposeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from yoloxnanonu.o(.text._ZN6tflite22MicroMutableOpResolverILj2EE12AddTransposeEv)
 <LI><a href="#[ab]">tflite::MicroOpResolver::~MicroOpResolver__sub_object()</a> from main.o(.text._ZN6tflite15MicroOpResolverD2Ev) referenced from main.o(.rodata._ZTVN6tflite22MicroMutableOpResolverILj2EEE)
 <LI><a href="#[d2]">tflite::MicroErrorReporter::Report(char const*, std::__va_list)</a> from micro_error_reporter.o(.text._ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list) referenced from micro_error_reporter.o(.rodata._ZTVN6tflite18MicroErrorReporterE)
 <LI><a href="#[d1]">tflite::MicroErrorReporter::~MicroErrorReporter__deallocating()</a> from micro_error_reporter.o(.text._ZN6tflite18MicroErrorReporterD0Ev) referenced from micro_error_reporter.o(.rodata._ZTVN6tflite18MicroErrorReporterE)
 <LI><a href="#[e6]">tflite::MicroMemoryPlanner::PrintMemoryPlan()</a> from linear_memory_planner.o(.text._ZN6tflite18MicroMemoryPlanner15PrintMemoryPlanEv) referenced from linear_memory_planner.o(.rodata._ZTVN6tflite19LinearMemoryPlannerE)
 <LI><a href="#[e4]">tflite::MicroMemoryPlanner::Init(unsigned char*, int)</a> from linear_memory_planner.o(.text._ZN6tflite18MicroMemoryPlanner4InitEPhi) referenced from linear_memory_planner.o(.rodata._ZTVN6tflite19LinearMemoryPlannerE)
 <LI><a href="#[e0]">tflite::MicroMemoryPlanner::AddBuffer(int, int, int, int)</a> from linear_memory_planner.o(.text._ZN6tflite18MicroMemoryPlanner9AddBufferEiiii) referenced from linear_memory_planner.o(.rodata._ZTVN6tflite19LinearMemoryPlannerE)
 <LI><a href="#[d8]">tflite::GreedyMemoryPlanner::GetBufferCount()</a> from greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv) referenced from greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
 <LI><a href="#[dc]">tflite::GreedyMemoryPlanner::PrintMemoryPlan()</a> from greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv) referenced from greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
 <LI><a href="#[d9]">tflite::GreedyMemoryPlanner::GetOffsetForBuffer(int, int*)</a> from greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEiPi) referenced from greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
 <LI><a href="#[d7]">tflite::GreedyMemoryPlanner::GetMaximumMemorySize()</a> from greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv) referenced from greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
 <LI><a href="#[da]">tflite::GreedyMemoryPlanner::Init(unsigned char*, int)</a> from greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlanner4InitEPhi) referenced from greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
 <LI><a href="#[d5]">tflite::GreedyMemoryPlanner::AddBuffer(int, int, int)</a> from greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlanner9AddBufferEiii) referenced from greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
 <LI><a href="#[d6]">tflite::GreedyMemoryPlanner::AddBuffer(int, int, int, int)</a> from greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlanner9AddBufferEiiii) referenced from greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
 <LI><a href="#[d4]">tflite::GreedyMemoryPlanner::~GreedyMemoryPlanner__deallocating()</a> from greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlannerD0Ev) referenced from greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
 <LI><a href="#[d3]">tflite::GreedyMemoryPlanner::~GreedyMemoryPlanner__sub_object()</a> from greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlannerD2Ev) referenced from greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
 <LI><a href="#[e2]">tflite::LinearMemoryPlanner::GetBufferCount()</a> from linear_memory_planner.o(.text._ZN6tflite19LinearMemoryPlanner14GetBufferCountEv) referenced from linear_memory_planner.o(.rodata._ZTVN6tflite19LinearMemoryPlannerE)
 <LI><a href="#[e3]">tflite::LinearMemoryPlanner::GetOffsetForBuffer(int, int*)</a> from linear_memory_planner.o(.text._ZN6tflite19LinearMemoryPlanner18GetOffsetForBufferEiPi) referenced from linear_memory_planner.o(.rodata._ZTVN6tflite19LinearMemoryPlannerE)
 <LI><a href="#[e1]">tflite::LinearMemoryPlanner::GetMaximumMemorySize()</a> from linear_memory_planner.o(.text._ZN6tflite19LinearMemoryPlanner20GetMaximumMemorySizeEv) referenced from linear_memory_planner.o(.rodata._ZTVN6tflite19LinearMemoryPlannerE)
 <LI><a href="#[df]">tflite::LinearMemoryPlanner::AddBuffer(int, int, int)</a> from linear_memory_planner.o(.text._ZN6tflite19LinearMemoryPlanner9AddBufferEiii) referenced from linear_memory_planner.o(.rodata._ZTVN6tflite19LinearMemoryPlannerE)
 <LI><a href="#[de]">tflite::LinearMemoryPlanner::~LinearMemoryPlanner__deallocating()</a> from linear_memory_planner.o(.text._ZN6tflite19LinearMemoryPlannerD0Ev) referenced from linear_memory_planner.o(.rodata._ZTVN6tflite19LinearMemoryPlannerE)
 <LI><a href="#[dd]">tflite::LinearMemoryPlanner::~LinearMemoryPlanner__sub_object()</a> from linear_memory_planner.o(.text._ZN6tflite19LinearMemoryPlannerD2Ev) referenced from linear_memory_planner.o(.rodata._ZTVN6tflite19LinearMemoryPlannerE)
 <LI><a href="#[b1]">tflite::BuiltinDataAllocator::~BuiltinDataAllocator__sub_object()</a> from micro_allocator.o(.text._ZN6tflite20BuiltinDataAllocatorD2Ev) referenced from micro_allocator.o(.text._ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE)
 <LI><a href="#[b6]">tflite::MicroContextGetTensor(TfLiteContext const*, int)</a> from micro_interpreter.o(.text._ZN6tflite21MicroContextGetTensorEPK13TfLiteContexti) referenced 2 times from micro_interpreter.o(.text._ZN6tflite16MicroInterpreterC2EPKNS_5ModelERKNS_15MicroOpResolverEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesEPNS_22MicroProfilerInterfaceE)
 <LI><a href="#[ee]">tflite::MicroInterpreterGraph::NumSubgraphs()</a> from micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraph12NumSubgraphsEv) referenced from micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
 <LI><a href="#[f3]">tflite::MicroInterpreterGraph::FreeSubgraphs()</a> from micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraph13FreeSubgraphsEv) referenced from micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
 <LI><a href="#[f0]">tflite::MicroInterpreterGraph::InitSubgraphs()</a> from micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraph13InitSubgraphsEv) referenced from micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
 <LI><a href="#[e9]">tflite::MicroInterpreterGraph::InvokeSubgraph(int)</a> from micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi) referenced from micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
 <LI><a href="#[f2]">tflite::MicroInterpreterGraph::ResetSubgraphs()</a> from micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraph14ResetSubgraphsEv) referenced from micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
 <LI><a href="#[eb]">tflite::MicroInterpreterGraph::GetSubgraphInput(int, int)</a> from micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraph16GetSubgraphInputEii) referenced from micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
 <LI><a href="#[f1]">tflite::MicroInterpreterGraph::PrepareSubgraphs()</a> from micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraph16PrepareSubgraphsEv) referenced from micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
 <LI><a href="#[ed]">tflite::MicroInterpreterGraph::GetSubgraphOutput(int, int)</a> from micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraph17GetSubgraphOutputEii) referenced from micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
 <LI><a href="#[ea]">tflite::MicroInterpreterGraph::NumSubgraphInputs(int)</a> from micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraph17NumSubgraphInputsEi) referenced from micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
 <LI><a href="#[ec]">tflite::MicroInterpreterGraph::NumSubgraphOutputs(int)</a> from micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraph18NumSubgraphOutputsEi) referenced from micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
 <LI><a href="#[ef]">tflite::MicroInterpreterGraph::GetResourceVariables()</a> from micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraph20GetResourceVariablesEv) referenced from micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
 <LI><a href="#[f4]">tflite::MicroInterpreterGraph::ResetVariableTensors()</a> from micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv) referenced from micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
 <LI><a href="#[e8]">tflite::MicroInterpreterGraph::~MicroInterpreterGraph__deallocating()</a> from micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraphD0Ev) referenced from micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
 <LI><a href="#[e7]">tflite::MicroInterpreterGraph::~MicroInterpreterGraph__sub_object()</a> from micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraphD2Ev) referenced from micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
 <LI><a href="#[ac]">tflite::MicroMutableOpResolver&lang;2u&rang;::~MicroMutableOpResolver__deallocating()</a> from main.o(.text._ZN6tflite22MicroMutableOpResolverILj2EED0Ev) referenced from main.o(.rodata._ZTVN6tflite22MicroMutableOpResolverILj2EEE)
 <LI><a href="#[fe]">tflite::MicroInterpreterContext::GetEvalTensor(int)</a> from micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContext13GetEvalTensorEi) referenced from micro_interpreter_context.o(.rodata._ZTVN6tflite23MicroInterpreterContextE)
 <LI><a href="#[f9]">tflite::MicroInterpreterContext::GetScratchBuffer(int)</a> from micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContext16GetScratchBufferEi) referenced from micro_interpreter_context.o(.rodata._ZTVN6tflite23MicroInterpreterContextE)
 <LI><a href="#[100]">tflite::MicroInterpreterContext::external_context()</a> from micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContext16external_contextEv) referenced from micro_interpreter_context.o(.rodata._ZTVN6tflite23MicroInterpreterContextE)
 <LI><a href="#[fc]">tflite::MicroInterpreterContext::AllocateTempBuffer(unsigned int, unsigned int)</a> from micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContext18AllocateTempBufferEjj) referenced from micro_interpreter_context.o(.rodata._ZTVN6tflite23MicroInterpreterContextE)
 <LI><a href="#[fd]">tflite::MicroInterpreterContext::DeallocateTempBuffer(unsigned char*)</a> from micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContext20DeallocateTempBufferEPh) referenced from micro_interpreter_context.o(.rodata._ZTVN6tflite23MicroInterpreterContextE)
 <LI><a href="#[ff]">tflite::MicroInterpreterContext::set_external_context(void*)</a> from micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContext20set_external_contextEPv) referenced from micro_interpreter_context.o(.rodata._ZTVN6tflite23MicroInterpreterContextE)
 <LI><a href="#[f7]">tflite::MicroInterpreterContext::AllocatePersistentBuffer(unsigned int)</a> from micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContext24AllocatePersistentBufferEj) referenced from micro_interpreter_context.o(.rodata._ZTVN6tflite23MicroInterpreterContextE)
 <LI><a href="#[fa]">tflite::MicroInterpreterContext::AllocateTempTfLiteTensor(int)</a> from micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContext24AllocateTempTfLiteTensorEi) referenced from micro_interpreter_context.o(.rodata._ZTVN6tflite23MicroInterpreterContextE)
 <LI><a href="#[fb]">tflite::MicroInterpreterContext::DeallocateTempTfLiteTensor(TfLiteTensor*)</a> from micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContext26DeallocateTempTfLiteTensorEP12TfLiteTensor) referenced from micro_interpreter_context.o(.rodata._ZTVN6tflite23MicroInterpreterContextE)
 <LI><a href="#[f8]">tflite::MicroInterpreterContext::RequestScratchBufferInArena(unsigned int, int*)</a> from micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContext27RequestScratchBufferInArenaEjPi) referenced from micro_interpreter_context.o(.rodata._ZTVN6tflite23MicroInterpreterContextE)
 <LI><a href="#[101]">tflite::MicroInterpreterContext::graph()</a> from micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContext5graphEv) referenced from micro_interpreter_context.o(.rodata._ZTVN6tflite23MicroInterpreterContextE)
 <LI><a href="#[f6]">tflite::MicroInterpreterContext::~MicroInterpreterContext__deallocating()</a> from micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContextD0Ev) referenced from micro_interpreter_context.o(.rodata._ZTVN6tflite23MicroInterpreterContextE)
 <LI><a href="#[f5]">tflite::MicroInterpreterContext::~MicroInterpreterContext__sub_object()</a> from micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContextD2Ev) referenced from micro_interpreter_context.o(.rodata._ZTVN6tflite23MicroInterpreterContextE)
 <LI><a href="#[b7]">tflite::MicroContextGetEvalTensor(TfLiteContext const*, int)</a> from micro_interpreter.o(.text._ZN6tflite25MicroContextGetEvalTensorEPK13TfLiteContexti) referenced 2 times from micro_interpreter.o(.text._ZN6tflite16MicroInterpreterC2EPKNS_5ModelERKNS_15MicroOpResolverEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesEPNS_22MicroProfilerInterfaceE)
 <LI><a href="#[b8]">tflite::MicroContextReportOpError(TfLiteContext*, char const*, ...)</a> from micro_context.o(.text._ZN6tflite25MicroContextReportOpErrorEP13TfLiteContextPKcz) referenced 2 times from micro_interpreter.o(.text._ZN6tflite16MicroInterpreterC2EPKNS_5ModelERKNS_15MicroOpResolverEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesEPNS_22MicroProfilerInterfaceE)
 <LI><a href="#[104]">tflite::SingleArenaBufferAllocator::AllocateTemp(unsigned int, unsigned int)</a> from single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator12AllocateTempEjj) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[109]">tflite::SingleArenaBufferAllocator::ResizeBuffer(unsigned char*, unsigned int, unsigned int)</a> from single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator12ResizeBufferEPhjj) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[105]">tflite::SingleArenaBufferAllocator::DeallocateTemp(unsigned char*)</a> from single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator14DeallocateTempEPh) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[106]">tflite::SingleArenaBufferAllocator::IsAllTempDeallocated()</a> from single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator20IsAllTempDeallocatedEv) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[107]">tflite::SingleArenaBufferAllocator::ResetTempAllocations()</a> from single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator20ResetTempAllocationsEv) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[108]">tflite::SingleArenaBufferAllocator::AllocateResizableBuffer(unsigned int, unsigned int)</a> from single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator23AllocateResizableBufferEjj) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[10f]">tflite::SingleArenaBufferAllocator::AllocatePersistentBuffer(unsigned int, unsigned int)</a> from single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator24AllocatePersistentBufferEjj) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[10a]">tflite::SingleArenaBufferAllocator::DeallocateResizableBuffer(unsigned char*)</a> from single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator25DeallocateResizableBufferEPh) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[10c]">tflite::SingleArenaBufferAllocator::ReserveNonPersistentOverlayMemory(unsigned int, unsigned int)</a> from single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator33ReserveNonPersistentOverlayMemoryEjj) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[103]">tflite::SingleArenaBufferAllocator::~SingleArenaBufferAllocator__deallocating()</a> from single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocatorD0Ev) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[102]">tflite::SingleArenaBufferAllocator::~SingleArenaBufferAllocator__sub_object()</a> from single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocatorD2Ev) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[bc]">tflite::MicroContextGetScratchBuffer(TfLiteContext*, int)</a> from micro_interpreter.o(.text._ZN6tflite28MicroContextGetScratchBufferEP13TfLiteContexti) referenced 2 times from micro_interpreter.o(.text._ZN6tflite16MicroInterpreterC2EPKNS_5ModelERKNS_15MicroOpResolverEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesEPNS_22MicroProfilerInterfaceE)
 <LI><a href="#[b9]">tflite::MicroContextGetExternalContext(TfLiteContext*, TfLiteExternalContextType)</a> from micro_interpreter.o(.text._ZN6tflite30MicroContextGetExternalContextEP13TfLiteContext25TfLiteExternalContextType) referenced 2 times from micro_interpreter.o(.text._ZN6tflite16MicroInterpreterC2EPKNS_5ModelERKNS_15MicroOpResolverEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesEPNS_22MicroProfilerInterfaceE)
 <LI><a href="#[ba]">tflite::MicroContextAllocatePersistentBuffer(TfLiteContext*, unsigned int)</a> from micro_interpreter.o(.text._ZN6tflite36MicroContextAllocatePersistentBufferEP13TfLiteContextj) referenced 2 times from micro_interpreter.o(.text._ZN6tflite16MicroInterpreterC2EPKNS_5ModelERKNS_15MicroOpResolverEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesEPNS_22MicroProfilerInterfaceE)
 <LI><a href="#[bb]">tflite::MicroContextRequestScratchBufferInArena(TfLiteContext*, unsigned int, int*)</a> from micro_interpreter.o(.text._ZN6tflite39MicroContextRequestScratchBufferInArenaEP13TfLiteContextjPi) referenced 2 times from micro_interpreter.o(.text._ZN6tflite16MicroInterpreterC2EPKNS_5ModelERKNS_15MicroOpResolverEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesEPNS_22MicroProfilerInterfaceE)
 <LI><a href="#[db]">tflite::GreedyMemoryPlanner::preserves_all_tensors() const</a> from greedy_memory_planner.o(.text._ZNK6tflite19GreedyMemoryPlanner21preserves_all_tensorsEv) referenced from greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
 <LI><a href="#[e5]">tflite::LinearMemoryPlanner::preserves_all_tensors() const</a> from linear_memory_planner.o(.text._ZNK6tflite19LinearMemoryPlanner21preserves_all_tensorsEv) referenced from linear_memory_planner.o(.rodata._ZTVN6tflite19LinearMemoryPlannerE)
 <LI><a href="#[aa]">tflite::MicroMutableOpResolver&lang;2u&rang;::GetOpDataParser(tflite::BuiltinOperator) const</a> from main.o(.text._ZNK6tflite22MicroMutableOpResolverILj2EE15GetOpDataParserENS_15BuiltinOperatorE) referenced from main.o(.rodata._ZTVN6tflite22MicroMutableOpResolverILj2EEE)
 <LI><a href="#[a8]">tflite::MicroMutableOpResolver&lang;2u&rang;::FindOp(tflite::BuiltinOperator) const</a> from main.o(.text._ZNK6tflite22MicroMutableOpResolverILj2EE6FindOpENS_15BuiltinOperatorE) referenced from main.o(.rodata._ZTVN6tflite22MicroMutableOpResolverILj2EEE)
 <LI><a href="#[a9]">tflite::MicroMutableOpResolver&lang;2u&rang;::FindOp(char const*) const</a> from main.o(.text._ZNK6tflite22MicroMutableOpResolverILj2EE6FindOpEPKc) referenced from main.o(.rodata._ZTVN6tflite22MicroMutableOpResolverILj2EEE)
 <LI><a href="#[10e]">tflite::SingleArenaBufferAllocator::GetAvailableMemory(unsigned int) const</a> from single_arena_buffer_allocator.o(.text._ZNK6tflite26SingleArenaBufferAllocator18GetAvailableMemoryEj) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[110]">tflite::SingleArenaBufferAllocator::GetPersistentUsedBytes() const</a> from single_arena_buffer_allocator.o(.text._ZNK6tflite26SingleArenaBufferAllocator22GetPersistentUsedBytesEv) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[10b]">tflite::SingleArenaBufferAllocator::GetOverlayMemoryAddress() const</a> from single_arena_buffer_allocator.o(.text._ZNK6tflite26SingleArenaBufferAllocator23GetOverlayMemoryAddressEv) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[10d]">tflite::SingleArenaBufferAllocator::GetNonPersistentUsedBytes() const</a> from single_arena_buffer_allocator.o(.text._ZNK6tflite26SingleArenaBufferAllocator25GetNonPersistentUsedBytesEv) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[113]">non-virtual thunk to tflite::SingleArenaBufferAllocator::AllocatePersistentBuffer(unsigned int, unsigned int)</a> from single_arena_buffer_allocator.o(.text._ZThn4_N6tflite26SingleArenaBufferAllocator24AllocatePersistentBufferEjj) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[112]">non-virtual thunk to tflite::SingleArenaBufferAllocator::~SingleArenaBufferAllocator__deallocating()</a> from single_arena_buffer_allocator.o(.text._ZThn4_N6tflite26SingleArenaBufferAllocatorD0Ev) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[111]">non-virtual thunk to tflite::SingleArenaBufferAllocator::~SingleArenaBufferAllocator()</a> from single_arena_buffer_allocator.o(.text._ZThn4_N6tflite26SingleArenaBufferAllocatorD1Ev) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[114]">non-virtual thunk to tflite::SingleArenaBufferAllocator::GetPersistentUsedBytes() const</a> from single_arena_buffer_allocator.o(.text._ZThn4_NK6tflite26SingleArenaBufferAllocator22GetPersistentUsedBytesEv) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[a7]">__cxa_pure_virtual</a> from cxa_virtual.cpp.o(.text.__cxa_pure_virtual) referenced 2 times from model.o(.rodata._ZTVN3arm3app5ModelE)
 <LI><a href="#[99]">__cxx_global_array_dtor</a> from main.o(.text.__cxx_global_array_dtor) referenced 2 times from main.o(.text._GLOBAL__sub_I_main.cpp)
 <LI><a href="#[96]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[94]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[92]">_snputc</a> from _snputc.o(.text) referenced 2 times from vsnprintf.o(.text)
 <LI><a href="#[93]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
 <LI><a href="#[95]">fputc</a> from fputc.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[1]">fsa506_init</a> from lcd_fsa506.o(.text.fsa506_init) referenced 2 times from lcd_fsa506.o(.data.g_s_WQVGA_FSA506)
 <LI><a href="#[6]">fsa506_put_char8x16</a> from lcd_fsa506.o(.text.fsa506_put_char8x16) referenced 2 times from lcd_fsa506.o(.data.g_s_WQVGA_FSA506)
 <LI><a href="#[5]">fsa506_send_pixels</a> from lcd_fsa506.o(.text.fsa506_send_pixels) referenced 2 times from lcd_fsa506.o(.data.g_s_WQVGA_FSA506)
 <LI><a href="#[3]">fsa506_set_column</a> from lcd_fsa506.o(.text.fsa506_set_column) referenced 2 times from lcd_fsa506.o(.data.g_s_WQVGA_FSA506)
 <LI><a href="#[4]">fsa506_set_page</a> from lcd_fsa506.o(.text.fsa506_set_page) referenced 2 times from lcd_fsa506.o(.data.g_s_WQVGA_FSA506)
 <LI><a href="#[2]">fsa506_write_reg</a> from lcd_fsa506.o(.text.fsa506_write_reg) referenced 2 times from lcd_fsa506.o(.data.g_s_WQVGA_FSA506)
 <LI><a href="#[9e]">prvIdleTask</a> from tasks.o(.text.prvIdleTask) referenced 2 times from tasks.o(.text.vTaskStartScheduler)
 <LI><a href="#[9d]">prvTaskExitError</a> from port.o(.text.prvTaskExitError) referenced 2 times from port.o(.text.pxPortInitialiseStack)
 <LI><a href="#[9f]">prvTimerTask</a> from timers.o(.text.prvTimerTask) referenced 2 times from timers.o(.text.xTimerCreateTimerTask)
 <LI><a href="#[98]">vPortSVCHandler_C</a> from port.o(.text.vPortSVCHandler_C) referenced from portasm.o(.text.SVC_Handler)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[116]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler_Main
</UL>

<P><STRONG><a name="[118]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[11a]"></a>__scatterload_rt2</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2ea]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2eb]"></a>__scatterload_loop</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2ec]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[2ed]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[2ee]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, __scatter.o(!!handler_null), UNUSED)

<P><STRONG><a name="[2ef]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[11b]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[16b]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[11d]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[11f]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[121]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[122]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[123]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[2f0]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[125]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[127]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[128]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[129]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[12b]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[12d]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[12f]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[130]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[131]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[133]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[2f1]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[135]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[137]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[139]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[13b]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[2f2]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[14e]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[13d]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[13f]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit5.o(.ARM.Collect$$libinit$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __sig_exit &rArr; _sys_exit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[2f3]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[2f4]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[2f5]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[141]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))
<BR><BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[2f6]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[2f7]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[2f8]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[143]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[2f9]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[2fa]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[144]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000018))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[2fb]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[2fc]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[2fd]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[2fe]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[2ff]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[300]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[301]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[146]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000026))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; __rt_SIGRTRED &rArr; __sig_exit &rArr; _sys_exit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[302]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[303]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[148]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[304]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[305]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[306]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[307]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[153]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[149]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_2 &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[308]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[14b]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[309]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[30a]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[30b]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[30c]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[30d]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[30e]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[119]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[30f]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[310]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry7.o(.ARM.Collect$$rtentry$$00000007))

<P><STRONG><a name="[14d]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[311]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[14f]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; BoardInit() &rArr; arm_ethosu_npu_init &rArr; ethosu_get_hw_info &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[312]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[1b6]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[152]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[313]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[154]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = __rt_exit_exit &rArr; _sys_exit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[185]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flexbuffers::Reference::AsInt64() const
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoll
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoull
</UL>

<P><STRONG><a name="[314]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[315]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_dev_init
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator_new_impl(unsigned int)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[159]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_dev_init
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[15a]"></a>vsnprintf</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLog
</UL>

<P><STRONG><a name="[15c]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::Model::RunInference()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::YoloXnanoNu::EnlistOperations()
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageSensor_Config
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::Model::Init(unsigned char*, unsigned int, unsigned char const*, unsigned int, tflite::MicroAllocator*)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task(void*)
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_ethosu_npu_init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit()
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPreDefMPURegion
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessHardFault
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHM1055_VGA_YUV422
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyperRAM_TrainingDelayNumber
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::Model::LogTensorInfo(TfLiteTensor*)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::Model::LogInterpreterInfo()
</UL>

<P><STRONG><a name="[15e]"></a>__2fprintf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2fprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_release_driver
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_invoke_async
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_wait
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_request_power
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_init
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_dev_verify_optimizer_config
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_dev_print_err_status
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_dev_soft_reset
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_dev_init
</UL>

<P><STRONG><a name="[15f]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task(void*)
</UL>

<P><STRONG><a name="[160]"></a>__2snprintf</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, __2snprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[162]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>

<P><STRONG><a name="[163]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>

<P><STRONG><a name="[161]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[126]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[12e]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[168]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[12c]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[134]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[11e]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[169]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[16c]"></a>strtoll</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, strtoll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtoll &rArr; __strtoll &rArr; _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoll
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flexbuffers::Reference::AsInt64() const
</UL>

<P><STRONG><a name="[16e]"></a>puts</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, puts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = puts &rArr; fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::Model::RunInference()
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::Model::Init(unsigned char*, unsigned int, unsigned char const*, unsigned int, tflite::MicroAllocator*)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task(void*)
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_ethosu_npu_init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessHardFault
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHM1055_VGA_YUV422
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::Model::LogTensorInfo(TfLiteTensor*)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::Model::LogInterpreterInfo()
</UL>

<P><STRONG><a name="[16f]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__libcpp_verbose_abort(char const*, ...)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroMutableOpResolver&lang;2u&rang;::GetOpDataParser(tflite::BuiltinOperator) const
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>

<P><STRONG><a name="[171]"></a>__cxa_atexit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cxa_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[173]"></a>__aeabi_assert</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, assert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::Model::GetInputShape(unsigned int) const
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::Model::GetOutputTensor(unsigned int) const
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::Model::GetInputTensor(unsigned int) const
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::Model::Init(unsigned char*, unsigned int, unsigned char const*, unsigned int, tflite::MicroAllocator*)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHOSU_PMU_Set_EVTYPER
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_get_hw_info
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_get_driver_version
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_dev_run_command_stream
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::Model::LogTensorInfo(TfLiteTensor*)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::Model::LogInterpreterInfo()
</UL>

<P><STRONG><a name="[316]"></a>__assert</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, assert.o(.text), UNUSED)

<P><STRONG><a name="[1d3]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyperRAM_TrainingDelayNumber
</UL>

<P><STRONG><a name="[1f8]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;* std::__2::vector&lang;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;, std::__2::allocator&lang;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;&rang;::__emplace_back_slow_path&lang;char const*&&rang;(char const*&)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLabelsVector(std::__2::vector&lang;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;, std::__2::allocator&lang;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;&rang;&)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task(void*)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::Model::LogInterpreterInfo()
</UL>

<P><STRONG><a name="[2cc]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::GetOfflinePlannedOffsets(int const**)
</UL>

<P><STRONG><a name="[178]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>

<P><STRONG><a name="[175]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[317]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[1f9]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;* std::__2::vector&lang;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;, std::__2::allocator&lang;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;&rang;::__emplace_back_slow_path&lang;char const*&&rang;(char const*&)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLabelsVector(std::__2::vector&lang;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;, std::__2::allocator&lang;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;&rang;&)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::Model::LogInterpreterInfo()
</UL>

<P><STRONG><a name="[177]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[318]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;* std::__2::vector&lang;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;, std::__2::allocator&lang;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;&rang;::__emplace_back_slow_path&lang;char const*&&rang;(char const*&)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::object_detection::DetectorPostprocessing::InsertTopNDetections(std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&, arm::app::image::Detection&)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::object_detection::DetectorPostprocessing::GetNetworkBoxes(arm::app::object_detection::Network&, int, int, float, std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLabelsVector(std::__2::vector&lang;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;, std::__2::allocator&lang;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;&rang;&)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;TfLiteTensor*, std::__2::allocator&lang;TfLiteTensor*&rang;&rang;::__append(unsigned int)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[22a]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy8
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::object_detection::DetectorPostprocessing::RunPostProcessing(unsigned int, unsigned int, unsigned int, unsigned int, TfLiteTensor*, std::__2::vector&lang;arm::app::object_detection::DetectionResult, std::__2::allocator&lang;arm::app::object_detection::DetectionResult&rang;&rang;&)
</UL>

<P><STRONG><a name="[319]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[31a]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[31b]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[31c]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[179]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[31d]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::ResetVariableTensors()
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroResourceVariables::ResetAll()
</UL>

<P><STRONG><a name="[17d]"></a>__aeabi_memset4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memset4 &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GreedyMemoryPlanner::PrintMemoryPlan()
</UL>

<P><STRONG><a name="[31e]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_memset4.o(.text), UNUSED)

<P><STRONG><a name="[239]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::Model::Init(unsigned char*, unsigned int, unsigned char const*, unsigned int, tflite::MicroAllocator*)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[31f]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>_memset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[197]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::MicroInterpreter(tflite::Model const*, tflite::MicroOpResolver const&, tflite::MicroAllocator*, tflite::MicroResourceVariables*, tflite::MicroProfilerInterface*)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::Model::Model__sub_object()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;TfLiteTensor*, std::__2::allocator&lang;TfLiteTensor*&rang;&rang;::__append(unsigned int)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[1d0]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;framebuffer_init0
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyperRAM_TrainingDelayNumber
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_pmu_init
</UL>

<P><STRONG><a name="[320]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>

<P><STRONG><a name="[23f]"></a>strcmp</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, strcmpv8m_maindsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroMutableOpResolver&lang;2u&rang;::FindOp(char const*) const
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[117]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[157]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posix_memalign
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[321]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[322]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[323]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[324]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posix_memalign
</UL>

<P><STRONG><a name="[180]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[140]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __sig_exit &rArr; _sys_exit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[182]"></a>__Heap_Initialize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[325]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>posix_memalign</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, h1_memalign.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator_new_aligned_impl(unsigned int, std::align_val_t)
</UL>

<P><STRONG><a name="[167]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[184]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[186]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[187]"></a>vfprintf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, vfprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__libcpp_verbose_abort(char const*, ...)
</UL>

<P><STRONG><a name="[164]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[165]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[166]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>

<P><STRONG><a name="[11c]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[18d]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[15b]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[93]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[92]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> vsnprintf.o(.text)
<LI> __2snprintf.o(.text)
</UL>
<P><STRONG><a name="[190]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[136]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[138]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[15d]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfprintf
</UL>

<P><STRONG><a name="[192]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[194]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[12a]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[132]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[16d]"></a>__strtoll</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, __strtoll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __strtoll &rArr; _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoull
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoll
</UL>

<P><STRONG><a name="[147]"></a>_initio</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = _initio &rArr; __rt_SIGRTRED &rArr; __sig_exit &rArr; _sys_exit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[14c]"></a>_terminateio</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[172]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>

<P><STRONG><a name="[170]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[195]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoll
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c16rtomb
</UL>

<P><STRONG><a name="[142]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[19c]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[17f]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[326]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.text), UNUSED)

<P><STRONG><a name="[19f]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[18f]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>

<P><STRONG><a name="[1a0]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[13a]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[13c]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[196]"></a>_strtoull</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, _strtoull.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoll
</UL>

<P><STRONG><a name="[189]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[191]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[1a2]"></a>__flsbuf</STRONG> (Thumb, 482 bytes, Stack size 40 bytes, flsbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>

<P><STRONG><a name="[1b5]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, flsbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>

<P><STRONG><a name="[327]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, flsbuf.o(.text), UNUSED)

<P><STRONG><a name="[19a]"></a>setvbuf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, setvbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[198]"></a>freopen</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[1aa]"></a>fopen</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fopen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[19b]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[328]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[1ad]"></a>_c16rtomb</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, _c16rtomb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[193]"></a>_wcrtomb</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, _c16rtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[14a]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_2
</UL>

<P><STRONG><a name="[19e]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = __sig_exit &rArr; _sys_exit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[19d]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[199]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = __rt_SIGRTRED &rArr; __sig_exit &rArr; _sys_exit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[181]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = __rt_SIGRTMEM &rArr; __sig_exit &rArr; _sys_exit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[1a1]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoull
</UL>

<P><STRONG><a name="[1a9]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fseek &rArr; _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[329]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[1a4]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[1a7]"></a>_writebuf</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[1ab]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[1a3]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[1b4]"></a>fwrite</STRONG> (Thumb, 214 bytes, Stack size 56 bytes, fwritefast.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = fwrite &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_reserve_driver
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_wait
</UL>

<P><STRONG><a name="[151]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1ae]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[1af]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[1b0]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[174]"></a>__assert_puts</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, assert_stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[1ba]"></a>_do_fflush</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fflush.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>

<P><STRONG><a name="[1b9]"></a>fflush</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fflush.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
</UL>

<P><STRONG><a name="[1b8]"></a>fputs</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fputs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fputs &rArr; fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
</UL>

<P><STRONG><a name="[1b1]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[32a]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>CCAP_IRQHandler</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, imagesensor.o(.text.CCAP_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[1d9]"></a>CCAP_Open</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, ccap.o(.text.CCAP_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CCAP_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageSensor_Config
</UL>

<P><STRONG><a name="[1d8]"></a>CCAP_SetCroppingWindow</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ccap.o(.text.CCAP_SetCroppingWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CCAP_SetCroppingWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageSensor_Config
</UL>

<P><STRONG><a name="[1da]"></a>CCAP_SetPacketScaling</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, ccap.o(.text.CCAP_SetPacketScaling))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CCAP_SetPacketScaling
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageSensor_Config
</UL>

<P><STRONG><a name="[1db]"></a>CCAP_SetPacketStride</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ccap.o(.text.CCAP_SetPacketStride))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageSensor_Config
</UL>

<P><STRONG><a name="[1d6]"></a>CCAP_Stop</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, ccap.o(.text.CCAP_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageSensor_Capture
</UL>

<P><STRONG><a name="[1bd]"></a>CLK_EnableAPLL</STRONG> (Thumb, 1892 bytes, Stack size 136 bytes, clk.o(.text.CLK_EnableAPLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CLK_EnableAPLL
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetBusClock
</UL>

<P><STRONG><a name="[1c3]"></a>CLK_EnableModuleClock</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, clk.o(.text.CLK_EnableModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Init
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageSensor_Init
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyperRAM_PinConfig
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit()
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_HYPER_SetDLLDelayNum
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDebugUartCLK
</UL>

<P><STRONG><a name="[1ed]"></a>CLK_EnableXtalRC</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, clk.o(.text.CLK_EnableXtalRC))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit()
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDebugUartCLK
</UL>

<P><STRONG><a name="[1f3]"></a>CLK_GetAPLL0ClockFreq</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, clk.o(.text.CLK_GetAPLL0ClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
</UL>

<P><STRONG><a name="[1df]"></a>CLK_GetHCLK2Freq</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, clk.o(.text.CLK_GetHCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLK_GetHCLK2Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageSensor_Init
</UL>

<P><STRONG><a name="[1bb]"></a>CLK_SetBusClock</STRONG> (Thumb, 632 bytes, Stack size 32 bytes, clk.o(.text.CLK_SetBusClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = CLK_SetBusClock &rArr; CLK_EnableAPLL
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetSCLK
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableAPLL
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit()
</UL>

<P><STRONG><a name="[1de]"></a>CLK_SetModuleClock</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, clk.o(.text.CLK_SetModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLK_SetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageSensor_Init
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDebugUartCLK
</UL>

<P><STRONG><a name="[1bc]"></a>CLK_SetSCLK</STRONG> (Thumb, 446 bytes, Stack size 24 bytes, clk.o(.text.CLK_SetSCLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CLK_SetSCLK &rArr; SystemCoreClockUpdate &rArr; CLK_SystemClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetBusClock
</UL>

<P><STRONG><a name="[1f2]"></a>CLK_SystemClockUpdate</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, clk.o(.text.CLK_SystemClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLK_SystemClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[1ee]"></a>CLK_WaitClockReady</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, clk.o(.text.CLK_WaitClockReady))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit()
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDebugUartCLK
</UL>

<P><STRONG><a name="[7c]"></a>ACMP01_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP01_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP01_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>ACMP23_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>AWF_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>BODOUT_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>BPWM0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>BPWM1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>BRAKE0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>BRAKE1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>CANFD00_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>CANFD01_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>CANFD10_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>CANFD11_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>CKFAIL_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>CRC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>CRYPTO_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>DAC01_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>DMIC0VAD_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>DMIC0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[32b]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler), UNUSED)

<P><STRONG><a name="[7f]"></a>EADC00_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>EADC01_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>EADC02_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>EADC03_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>ECAP0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>ECAP1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>ECAP2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>ECAP3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EINT0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EINT1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EINT2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EINT3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EINT4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EINT5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>EINT6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>EINT7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>EMAC0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>EPWM0P0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>EPWM0P1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EPWM0P2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EPWM1P0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EPWM1P1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>EPWM1P2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>EQEI0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>EQEI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>EQEI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>EQEI3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>ETI_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>GDMACH0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>GDMACH1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>GPA_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>GPB_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>GPC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>GPD_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>GPE_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>GPF_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>GPG_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>GPH_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>GPI_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>GPJ_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>HSOTG_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>HSUSBD_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>HSUSBH_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>I2C0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>I2C1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>I2C2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>I2C3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>I2S0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>I2S1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>I3C0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>IRC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>ISP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>KPI_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>KS_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>LPADC0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>LPI2C0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>LPPDMA_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>LPSPI0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>LPTMR0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>LPTMR1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>LPUART0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>OTFC0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>PDMA0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>PDMA1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>PMC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>PSIO_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>QSPI0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>QSPI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>RTCTAMPER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>RTC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>SC0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>SC1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>SC2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>SDH0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>SDH1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>SPI0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>SPI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>SPI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>SPI3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>SPIM0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SRAMPERR_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SecureFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>TRNG_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TTMR0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TTMR1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>UART0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>UART1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>UART2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>UART3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>UART4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>UART5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>UART6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>UART7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>UART8_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>UART9_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>USBD_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>USBH0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>USBH1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>USBOTG_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>USCI0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>UTCPD_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>WDT0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>WDT1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>WWDT0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>WWDT1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[215]"></a>Display_ClearLCD</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, display.o(.text.Display_ClearLCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Display_ClearLCD
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task(void*)
</UL>

<P><STRONG><a name="[21d]"></a>Display_ClearRect</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, display.o(.text.Display_ClearRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Display_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task(void*)
</UL>

<P><STRONG><a name="[1bf]"></a>Display_Delay</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, display.o(.text.Display_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Display_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_get_systick_Count
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsa506_init
</UL>

<P><STRONG><a name="[21c]"></a>Display_FillRect</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, display.o(.text.Display_FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Display_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task(void*)
</UL>

<P><STRONG><a name="[1c1]"></a>Display_Init</STRONG> (Thumb, 644 bytes, Stack size 40 bytes, display.o(.text.Display_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = Display_Init &rArr; pmu_reset_counters &rArr; ethosu_pmu_init &rArr; ETHOSU_PMU_Set_EVTYPER &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_reset_counters
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EBI_Open
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetSlewCtl
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task(void*)
</UL>

<P><STRONG><a name="[21e]"></a>Display_PutText</STRONG> (Thumb, 178 bytes, Stack size 56 bytes, display.o(.text.Display_PutText))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Display_PutText
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task(void*)
</UL>

<P><STRONG><a name="[1c6]"></a>EBI_Open</STRONG> (Thumb, 292 bytes, Stack size 8 bytes, ebi.o(.text.EBI_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EBI_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Init
</UL>

<P><STRONG><a name="[26b]"></a>FreeRTOS_TickHook</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, pmu_counter.o(.text.FreeRTOS_TickHook))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationTickHook
</UL>

<P><STRONG><a name="[1c5]"></a>GPIO_SetMode</STRONG> (Thumb, 264 bytes, Stack size 20 bytes, gpio.o(.text.GPIO_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Init
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2C_ReadByte
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2C_WriteByte
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2C_SendStop
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2C_SendStart
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2C_Open
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHM1055_VGA_YUV422
</UL>

<P><STRONG><a name="[1c4]"></a>GPIO_SetSlewCtl</STRONG> (Thumb, 264 bytes, Stack size 20 bytes, gpio.o(.text.GPIO_SetSlewCtl))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_SetSlewCtl
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Init
</UL>

<P><STRONG><a name="[9]"></a>HardFault_Handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, startup_m55m1.o(.text.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = HardFault_Handler &rArr; ProcessHardFault &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessHardFault
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[1c8]"></a>HyperRAM_Init</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, hyperram_code.o(.text.HyperRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = HyperRAM_Init &rArr; HyperRAM_TrainingDelayNumber &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_HYPER_Reset
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_HYPER_Init
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyperRAM_TrainingDelayNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit()
</UL>

<P><STRONG><a name="[1cc]"></a>HyperRAM_PinConfig</STRONG> (Thumb, 524 bytes, Stack size 8 bytes, hyperram_code.o(.text.HyperRAM_PinConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HyperRAM_PinConfig &rArr; CLK_EnableModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit()
</UL>

<P><STRONG><a name="[1cb]"></a>HyperRAM_TrainingDelayNumber</STRONG> (Thumb, 360 bytes, Stack size 72 bytes, hyperram_code.o(.text.HyperRAM_TrainingDelayNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = HyperRAM_TrainingDelayNumber &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_HYPER_ExitDirectMapMode
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_HYPER_DMAWrite
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_HYPER_Write2Byte
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_HYPER_Read2Word
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_HYPER_Read1Word
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_HYPER_SetDLLDelayNum
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyperRAM_Init
</UL>

<P><STRONG><a name="[1d5]"></a>ImageSensor_Capture</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, imagesensor.o(.text.ImageSensor_Capture))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ImageSensor_Capture
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCAP_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task(void*)
</UL>

<P><STRONG><a name="[1d7]"></a>ImageSensor_Config</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, imagesensor.o(.text.ImageSensor_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ImageSensor_Config &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCAP_SetPacketStride
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCAP_SetPacketScaling
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCAP_SetCroppingWindow
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCAP_Open
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task(void*)
</UL>

<P><STRONG><a name="[1dc]"></a>ImageSensor_Init</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, imagesensor.o(.text.ImageSensor_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ImageSensor_Init &rArr; CLK_EnableModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLK2Freq
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task(void*)
</UL>

<P><STRONG><a name="[1e0]"></a>InitDebugUart</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, system_m55m1.o(.text.InitDebugUart))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = InitDebugUart &rArr; UART_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit()
</UL>

<P><STRONG><a name="[0]"></a>InitHM1055_VGA_YUV422</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, sensor_hm1055.o(.text.InitHM1055_VGA_YUV422))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = InitHM1055_VGA_YUV422 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2C_Write_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2C_Open
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sensor_hm1055.o(.data.g_sSensorHM1055_VGA_YUV422)
</UL>
<P><STRONG><a name="[1e5]"></a>InitPreDefMPURegion</STRONG> (Thumb, 1496 bytes, Stack size 48 bytes, system_m55m1.o(.text.InitPreDefMPURegion))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = InitPreDefMPURegion &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task(void*)
</UL>

<P><STRONG><a name="[10]"></a>PendSV_Handler</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, portasm.o(.text.PendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[1c7]"></a>ProcessHardFault</STRONG> (Thumb, 344 bytes, Stack size 40 bytes, retarget.o(.text.ProcessHardFault))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ProcessHardFault &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[7]"></a>Reset_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Reset_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Reset_Handler &rArr; Reset_Handler_Main
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler_Main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[1e6]"></a>Reset_Handler_Main</STRONG> (Thumb, 1176 bytes, Stack size 16 bytes, startup_m55m1.o(.text.Reset_Handler_Main))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Reset_Handler_Main
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler_PreInit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[1e7]"></a>Reset_Handler_PreInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m55m1.o(.text.Reset_Handler_PreInit))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler_Main
</UL>

<P><STRONG><a name="[1cf]"></a>SPIM_HYPER_DMAWrite</STRONG> (Thumb, 210 bytes, Stack size 12 bytes, spim_hyper.o(.text.SPIM_HYPER_DMAWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPIM_HYPER_DMAWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyperRAM_TrainingDelayNumber
</UL>

<P><STRONG><a name="[201]"></a>SPIM_HYPER_EnterDirectMapMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spim_hyper.o(.text.SPIM_HYPER_EnterDirectMapMode))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit()
</UL>

<P><STRONG><a name="[1d4]"></a>SPIM_HYPER_ExitDirectMapMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spim_hyper.o(.text.SPIM_HYPER_ExitDirectMapMode))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyperRAM_TrainingDelayNumber
</UL>

<P><STRONG><a name="[1c9]"></a>SPIM_HYPER_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, spim_hyper.o(.text.SPIM_HYPER_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyperRAM_Init
</UL>

<P><STRONG><a name="[1ce]"></a>SPIM_HYPER_Read1Word</STRONG> (Thumb, 96 bytes, Stack size 4 bytes, spim_hyper.o(.text.SPIM_HYPER_Read1Word))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SPIM_HYPER_Read1Word
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyperRAM_TrainingDelayNumber
</UL>

<P><STRONG><a name="[1d2]"></a>SPIM_HYPER_Read2Word</STRONG> (Thumb, 96 bytes, Stack size 4 bytes, spim_hyper.o(.text.SPIM_HYPER_Read2Word))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SPIM_HYPER_Read2Word
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyperRAM_TrainingDelayNumber
</UL>

<P><STRONG><a name="[1ca]"></a>SPIM_HYPER_Reset</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, spim_hyper.o(.text.SPIM_HYPER_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SPIM_HYPER_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyperRAM_Init
</UL>

<P><STRONG><a name="[1d1]"></a>SPIM_HYPER_SetDLLDelayNum</STRONG> (Thumb, 526 bytes, Stack size 24 bytes, spim_hyper.o(.text.SPIM_HYPER_SetDLLDelayNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPIM_HYPER_SetDLLDelayNum &rArr; CLK_EnableModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyperRAM_TrainingDelayNumber
</UL>

<P><STRONG><a name="[1cd]"></a>SPIM_HYPER_Write2Byte</STRONG> (Thumb, 108 bytes, Stack size 4 bytes, spim_hyper.o(.text.SPIM_HYPER_Write2Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SPIM_HYPER_Write2Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyperRAM_TrainingDelayNumber
</UL>

<P><STRONG><a name="[e]"></a>SVC_Handler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, portasm.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[1e2]"></a>SWI2C_Open</STRONG> (Thumb, 788 bytes, Stack size 48 bytes, swi2c.o(.text.SWI2C_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SWI2C_Open &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHM1055_VGA_YUV422
</UL>

<P><STRONG><a name="[1e8]"></a>SWI2C_ReadByte</STRONG> (Thumb, 1202 bytes, Stack size 48 bytes, swi2c.o(.text.SWI2C_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SWI2C_ReadByte &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2C_Read_8bitSlaveAddr_16bitReg_8bitData
</UL>

<P><STRONG><a name="[1e4]"></a>SWI2C_Read_8bitSlaveAddr_16bitReg_8bitData</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, swi2c.o(.text.SWI2C_Read_8bitSlaveAddr_16bitReg_8bitData))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SWI2C_Read_8bitSlaveAddr_16bitReg_8bitData &rArr; SWI2C_ReadByte &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2C_ReadByte
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2C_WriteByte
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2C_SendStop
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2C_SendStart
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHM1055_VGA_YUV422
</UL>

<P><STRONG><a name="[1e9]"></a>SWI2C_SendStart</STRONG> (Thumb, 638 bytes, Stack size 32 bytes, swi2c.o(.text.SWI2C_SendStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SWI2C_SendStart &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2C_Write_8bitSlaveAddr_16bitReg_8bitData
</UL>

<P><STRONG><a name="[1eb]"></a>SWI2C_SendStop</STRONG> (Thumb, 1076 bytes, Stack size 24 bytes, swi2c.o(.text.SWI2C_SendStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SWI2C_SendStop &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2C_Write_8bitSlaveAddr_16bitReg_8bitData
</UL>

<P><STRONG><a name="[1ea]"></a>SWI2C_WriteByte</STRONG> (Thumb, 1234 bytes, Stack size 48 bytes, swi2c.o(.text.SWI2C_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SWI2C_WriteByte &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2C_Write_8bitSlaveAddr_16bitReg_8bitData
</UL>

<P><STRONG><a name="[1e3]"></a>SWI2C_Write_8bitSlaveAddr_16bitReg_8bitData</STRONG> (Thumb, 426 bytes, Stack size 24 bytes, swi2c.o(.text.SWI2C_Write_8bitSlaveAddr_16bitReg_8bitData))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SWI2C_Write_8bitSlaveAddr_16bitReg_8bitData &rArr; SWI2C_WriteByte &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2C_WriteByte
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2C_SendStop
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2C_SendStart
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHM1055_VGA_YUV422
</UL>

<P><STRONG><a name="[1dd]"></a>SYS_ResetModule</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, sys.o(.text.SYS_ResetModule))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageSensor_Init
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDebugUartCLK
</UL>

<P><STRONG><a name="[1ec]"></a>SetDebugUartCLK</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, system_m55m1.o(.text.SetDebugUartCLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SetDebugUartCLK &rArr; CLK_EnableModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableXtalRC
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit()
</UL>

<P><STRONG><a name="[200]"></a>SetDebugUartMFP</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, system_m55m1.o(.text.SetDebugUartMFP))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit()
</UL>

<P><STRONG><a name="[11]"></a>SysTick_Handler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, port.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick &rArr; vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[1be]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, system_m55m1.o(.text.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate &rArr; CLK_SystemClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SystemClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit()
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetSCLK
</UL>

<P><STRONG><a name="[ad]"></a>SystemInit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, system_m55m1.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> system_m55m1.o(.init_array)
</UL>
<P><STRONG><a name="[1e1]"></a>UART_Open</STRONG> (Thumb, 526 bytes, Stack size 40 bytes, uart.o(.text.UART_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetAPLL0ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDebugUart
</UL>

<P><STRONG><a name="[1f4]"></a>GetLabelsVector(std::__2::vector&lang;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;, std::__2::allocator&lang;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;&rang;&)</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, labels.o(.text._Z15GetLabelsVectorRNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = GetLabelsVector(std::__2::vector&lang;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;, std::__2::allocator&lang;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;&rang;&) &rArr; std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;* std::__2::vector&lang;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;, std::__2::allocator&lang;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;&rang;::__emplace_back_slow_path&lang;char const*&&rang;(char const*&) &rArr; operator new(unsigned int) &rArr; std::__throw_bad_alloc() &rArr; std::__2::__libcpp_verbose_abort(char const*, ...) &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;* std::__2::vector&lang;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;, std::__2::allocator&lang;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;&rang;::__emplace_back_slow_path&lang;char const*&&rang;(char const*&)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;::__throw_length_error[abi:nn190000]() const
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task(void*)
</UL>

<P><STRONG><a name="[9a]"></a>inferenceProcessTask(void*)</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, inferencetask.o(.text._Z20inferenceProcessTaskPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = inferenceProcessTask(void*) &rArr; arm::app::object_detection::DetectorPostprocessing::RunPostProcessing(unsigned int, unsigned int, unsigned int, unsigned int, TfLiteTensor*, std::__2::vector&lang;arm::app::object_detection::DetectionResult, std::__2::allocator&lang;arm::app::object_detection::DetectionResult&rang;&rang;&) &rArr; arm::app::object_detection::DetectorPostprocessing::GetNetworkBoxes(arm::app::object_detection::Network&, int, int, float, std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&) &rArr; arm::app::object_detection::DetectorPostprocessing::InsertTopNDetections(std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&, arm::app::image::Detection&) &rArr; operator new(unsigned int) &rArr; std::__throw_bad_alloc() &rArr; std::__2::__libcpp_verbose_abort(char const*, ...) &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::object_detection::DetectorPostprocessing::RunPostProcessing(unsigned int, unsigned int, unsigned int, unsigned int, TfLiteTensor*, std::__2::vector&lang;arm::app::object_detection::DetectionResult, std::__2::allocator&lang;arm::app::object_detection::DetectionResult&rang;&rang;&)
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::Model::GetOutputTensor(unsigned int) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text._ZL9main_taskPv)
</UL>
<P><STRONG><a name="[1ff]"></a>BoardInit()</STRONG> (Thumb, 392 bytes, Stack size 16 bytes, boardinit.o(.text._Z9BoardInitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = BoardInit() &rArr; arm_ethosu_npu_init &rArr; ethosu_get_hw_info &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_ethosu_npu_init
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyperRAM_Init
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HyperRAM_PinConfig
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_HYPER_EnterDirectMapMode
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetBusClock
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDebugUart
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableXtalRC
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDebugUartCLK
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDebugUartMFP
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a3]"></a>arm::app::YoloXnanoNu::GetOpResolver()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, yoloxnanonu.o(.text._ZN3arm3app11YoloXnanoNu13GetOpResolverEv))
<BR>[Address Reference Count : 1]<UL><LI> yoloxnanonu.o(.rodata._ZTVN3arm3app11YoloXnanoNuE)
</UL>
<P><STRONG><a name="[a4]"></a>arm::app::YoloXnanoNu::EnlistOperations()</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, yoloxnanonu.o(.text._ZN3arm3app11YoloXnanoNu16EnlistOperationsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = arm::app::YoloXnanoNu::EnlistOperations() &rArr; tflite::MicroMutableOpResolver&lang;2u&rang;::AddTranspose() &rArr; MicroPrintf(char const*, ...) &rArr; (anonymous namespace)::VDebugLog(char const*, ...) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GetString_ETHOSU()
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroMutableOpResolver&lang;2u&rang;::AddEthosU()
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroMutableOpResolver&lang;2u&rang;::AddTranspose()
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> yoloxnanonu.o(.rodata._ZTVN3arm3app11YoloXnanoNuE)
</UL>
<P><STRONG><a name="[a1]"></a>arm::app::YoloXnanoNu::~YoloXnanoNu__deallocating()</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, yoloxnanonu.o(.text._ZN3arm3app11YoloXnanoNuD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = arm::app::YoloXnanoNu::~YoloXnanoNu__deallocating() &rArr; tflite::MicroInterpreter::~MicroInterpreter() &rArr; tflite::MicroInterpreterGraph::FreeSubgraphs()
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::~MicroInterpreter()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> yoloxnanonu.o(.rodata._ZTVN3arm3app11YoloXnanoNuE)
</UL>
<P><STRONG><a name="[a0]"></a>arm::app::YoloXnanoNu::~YoloXnanoNu__sub_object()</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, yoloxnanonu.o(.text._ZN3arm3app11YoloXnanoNuD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = arm::app::YoloXnanoNu::~YoloXnanoNu__sub_object() &rArr; tflite::MicroInterpreter::~MicroInterpreter() &rArr; tflite::MicroInterpreterGraph::FreeSubgraphs()
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::~MicroInterpreter()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> yoloxnanonu.o(.rodata._ZTVN3arm3app11YoloXnanoNuE)
</UL>
<P><STRONG><a name="[208]"></a>arm::app::yoloxnanonu::GetModelLen()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, yolox_nano_nu_hg_full_integer_quant_vela.tflite.o(.text._ZN3arm3app11yoloxnanonu11GetModelLenEv))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task(void*)
</UL>

<P><STRONG><a name="[207]"></a>arm::app::yoloxnanonu::GetModelPointer()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, yolox_nano_nu_hg_full_integer_quant_vela.tflite.o(.text._ZN3arm3app11yoloxnanonu15GetModelPointerEv))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task(void*)
</UL>

<P><STRONG><a name="[222]"></a>arm::app::object_detection::DetectorPostprocessing::GetNetworkBoxes(arm::app::object_detection::Network&, int, int, float, std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&)</STRONG> (Thumb, 1412 bytes, Stack size 208 bytes, detectorpostprocessing.o(.text._ZN3arm3app16object_detection22DetectorPostprocessing15GetNetworkBoxesERNS1_7NetworkEiifRNSt3__212forward_listINS0_5image9DetectionENS5_9allocatorIS8_EEEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = arm::app::object_detection::DetectorPostprocessing::GetNetworkBoxes(arm::app::object_detection::Network&, int, int, float, std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&) &rArr; arm::app::object_detection::DetectorPostprocessing::InsertTopNDetections(std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&, arm::app::image::Detection&) &rArr; operator new(unsigned int) &rArr; std::__throw_bad_alloc() &rArr; std::__2::__libcpp_verbose_abort(char const*, ...) &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;int, std::__2::allocator&lang;int&rang;&rang;::__throw_length_error[abi:nn190000]() const
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;float, std::__2::allocator&lang;float&rang;&rang;::__throw_length_error[abi:nn190000]() const
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::object_detection::DetectorPostprocessing::InsertTopNDetections(std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&, arm::app::image::Detection&)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__throw_bad_array_new_length[abi:nn190000]()
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__forward_list_node&lang;arm::app::image::Detection, void*&rang;* std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;::__sort&lang;arm::app::object_detection::DetectorPostprocessing::GetNetworkBoxes(arm::app::object_detection::Network&, int, int, float, std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&)::$_0&rang;(std::__2::__forward_list_node&lang;arm::app::image::Detection, void*&rang;*, int, arm::app::object_detection::DetectorPostprocessing::GetNetworkBoxes(arm::app::object_detection::Network&, int, int, float, std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&)::$_0&)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::object_detection::DetectorPostprocessing::RunPostProcessing(unsigned int, unsigned int, unsigned int, unsigned int, TfLiteTensor*, std::__2::vector&lang;arm::app::object_detection::DetectionResult, std::__2::allocator&lang;arm::app::object_detection::DetectionResult&rang;&rang;&)
</UL>

<P><STRONG><a name="[1fd]"></a>arm::app::object_detection::DetectorPostprocessing::RunPostProcessing(unsigned int, unsigned int, unsigned int, unsigned int, TfLiteTensor*, std::__2::vector&lang;arm::app::object_detection::DetectionResult, std::__2::allocator&lang;arm::app::object_detection::DetectionResult&rang;&rang;&)</STRONG> (Thumb, 676 bytes, Stack size 168 bytes, detectorpostprocessing.o(.text._ZN3arm3app16object_detection22DetectorPostprocessing17RunPostProcessingEjjjjP12TfLiteTensorRNSt3__26vectorINS1_15DetectionResultENS5_9allocatorIS7_EEEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = arm::app::object_detection::DetectorPostprocessing::RunPostProcessing(unsigned int, unsigned int, unsigned int, unsigned int, TfLiteTensor*, std::__2::vector&lang;arm::app::object_detection::DetectionResult, std::__2::allocator&lang;arm::app::object_detection::DetectionResult&rang;&rang;&) &rArr; arm::app::object_detection::DetectorPostprocessing::GetNetworkBoxes(arm::app::object_detection::Network&, int, int, float, std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&) &rArr; arm::app::object_detection::DetectorPostprocessing::InsertTopNDetections(std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&, arm::app::image::Detection&) &rArr; operator new(unsigned int) &rArr; std::__throw_bad_alloc() &rArr; std::__2::__libcpp_verbose_abort(char const*, ...) &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__throw_bad_array_new_length[abi:nn190000]()
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;arm::app::object_detection::DetectionResult, std::__2::allocator&lang;arm::app::object_detection::DetectionResult&rang;&rang;::__throw_length_error[abi:nn190000]() const
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::image::CalculateNMS(std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&, int, float)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::object_detection::DetectorPostprocessing::GetNetworkBoxes(arm::app::object_detection::Network&, int, int, float, std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy8
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inferenceProcessTask(void*)
</UL>

<P><STRONG><a name="[224]"></a>arm::app::object_detection::DetectorPostprocessing::InsertTopNDetections(std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&, arm::app::image::Detection&)</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, detectorpostprocessing.o(.text._ZN3arm3app16object_detection22DetectorPostprocessing20InsertTopNDetectionsERNSt3__212forward_listINS0_5image9DetectionENS3_9allocatorIS6_EEEERS6_))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = arm::app::object_detection::DetectorPostprocessing::InsertTopNDetections(std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&, arm::app::image::Detection&) &rArr; operator new(unsigned int) &rArr; std::__throw_bad_alloc() &rArr; std::__2::__libcpp_verbose_abort(char const*, ...) &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;float, std::__2::allocator&lang;float&rang;&rang;::__throw_length_error[abi:nn190000]() const
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::object_detection::DetectorPostprocessing::GetNetworkBoxes(arm::app::object_detection::Network&, int, int, float, std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&)
</UL>

<P><STRONG><a name="[210]"></a>arm::app::object_detection::DetectorPostprocessing::DetectorPostprocessing(float, float, int, int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, detectorpostprocessing.o(.text._ZN3arm3app16object_detection22DetectorPostprocessingC2Effii))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task(void*)
</UL>

<P><STRONG><a name="[32c]"></a>arm::app::object_detection::DetectorPostprocessing::DetectorPostprocessing__sub_object(float, float, int, int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, detectorpostprocessing.o(.text._ZN3arm3app16object_detection22DetectorPostprocessingC2Effii), UNUSED)

<P><STRONG><a name="[a2]"></a>arm::app::Model::RunInference()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, model.o(.text._ZN3arm3app5Model12RunInferenceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = arm::app::Model::RunInference() &rArr; tflite::MicroInterpreter::Invoke() &rArr; tflite::MicroInterpreter::AllocateTensors() &rArr; tflite::MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer() &rArr; tflite::GetRegistrationFromOpCode(tflite::OperatorCode const*, tflite::MicroOpResolver const&, TFLMRegistration const**) &rArr; MicroPrintf(char const*, ...) &rArr; (anonymous namespace)::VDebugLog(char const*, ...) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::Invoke()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> model.o(.rodata._ZTVN3arm3app5ModelE)
<LI> yoloxnanonu.o(.rodata._ZTVN3arm3app11YoloXnanoNuE)
</UL>
<P><STRONG><a name="[22d]"></a>arm::app::Model::LogTensorInfo(TfLiteTensor*)</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, model.o(.text._ZN3arm3app5Model13LogTensorInfoEP12TfLiteTensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = arm::app::Model::LogTensorInfo(TfLiteTensor*) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::Model::LogInterpreterInfo()
</UL>

<P><STRONG><a name="[22f]"></a>arm::app::Model::LogInterpreterInfo()</STRONG> (Thumb, 796 bytes, Stack size 80 bytes, model.o(.text._ZN3arm3app5Model18LogInterpreterInfoEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = arm::app::Model::LogInterpreterInfo() &rArr; tflite::GetRegistrationFromOpCode(tflite::OperatorCode const*, tflite::MicroOpResolver const&, TFLMRegistration const**) &rArr; MicroPrintf(char const*, ...) &rArr; (anonymous namespace)::VDebugLog(char const*, ...) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GetRegistrationFromOpCode(tflite::OperatorCode const*, tflite::MicroOpResolver const&, TFLMRegistration const**)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::NumSubgraphOperators(tflite::Model const*, int)
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::used_bytes() const
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::Model::LogTensorInfo(TfLiteTensor*)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;::__throw_length_error[abi:nn190000]() const
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::Model::Init(unsigned char*, unsigned int, unsigned char const*, unsigned int, tflite::MicroAllocator*)
</UL>

<P><STRONG><a name="[209]"></a>arm::app::Model::Init(unsigned char*, unsigned int, unsigned char const*, unsigned int, tflite::MicroAllocator*)</STRONG> (Thumb, 1024 bytes, Stack size 40 bytes, model.o(.text._ZN3arm3app5Model4InitEPhjPKhjPN6tflite14MicroAllocatorE))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = arm::app::Model::Init(unsigned char*, unsigned int, unsigned char const*, unsigned int, tflite::MicroAllocator*) &rArr; tflite::MicroInterpreter::AllocateTensors() &rArr; tflite::MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer() &rArr; tflite::GetRegistrationFromOpCode(tflite::OperatorCode const*, tflite::MicroOpResolver const&, TFLMRegistration const**) &rArr; MicroPrintf(char const*, ...) &rArr; (anonymous namespace)::VDebugLog(char const*, ...) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::AllocateTensors()
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::MicroInterpreter(tflite::Model const*, tflite::MicroOpResolver const&, tflite::MicroAllocator*, tflite::MicroResourceVariables*, tflite::MicroProfilerInterface*)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::Create(unsigned char*, unsigned int, tflite::MemoryPlannerType)
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::~MicroInterpreter()
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::Model::LogInterpreterInfo()
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::output(unsigned int)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::input(unsigned int)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;TfLiteTensor*, std::__2::allocator&lang;TfLiteTensor*&rang;&rang;::__append(unsigned int)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task(void*)
</UL>

<P><STRONG><a name="[206]"></a>arm::app::Model::Model__sub_object()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, model.o(.text._ZN3arm3app5ModelC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = arm::app::Model::Model__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task(void*)
</UL>

<P><STRONG><a name="[a6]"></a>arm::app::Model::~Model__deallocating()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, model.o(.text._ZN3arm3app5ModelD0Ev))
<BR>[Address Reference Count : 1]<UL><LI> model.o(.rodata._ZTVN3arm3app5ModelE)
</UL>
<P><STRONG><a name="[a5]"></a>arm::app::Model::~Model__sub_object()</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, model.o(.text._ZN3arm3app5ModelD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = arm::app::Model::~Model__sub_object() &rArr; tflite::MicroInterpreter::~MicroInterpreter() &rArr; tflite::MicroInterpreterGraph::FreeSubgraphs()
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::~MicroInterpreter()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model.o(.rodata._ZTVN3arm3app5ModelE)
</UL>
<P><STRONG><a name="[229]"></a>arm::app::image::CalculateNMS(std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&, int, float)</STRONG> (Thumb, 388 bytes, Stack size 64 bytes, imageutils.o(.text._ZN3arm3app5image12CalculateNMSERNSt3__212forward_listINS1_9DetectionENS2_9allocatorIS4_EEEEif))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = arm::app::image::CalculateNMS(std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&, int, float) &rArr; std::__2::__forward_list_node&lang;arm::app::image::Detection, void*&rang;* std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;::__sort&lang;arm::app::image::CalculateNMS(std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&, int, float)::$_0&rang;(std::__2::__forward_list_node&lang;arm::app::image::Detection, void*&rang;*, int, arm::app::image::CalculateNMS(std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&, int, float)::$_0&) &rArr;  std::__2::__forward_list_node&lang;arm::app::image::Detection, void*&rang;* std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;::__sort&lang;arm::app::image::CalculateNMS(std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&, int, float)::$_0&rang;(std::__2::__forward_list_node&lang;arm::app::image::Detection, void*&rang;*, int, arm::app::image::CalculateNMS(std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&, int, float)::$_0&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__forward_list_node&lang;arm::app::image::Detection, void*&rang;* std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;::__sort&lang;arm::app::image::CalculateNMS(std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&, int, float)::$_0&rang;(std::__2::__forward_list_node&lang;arm::app::image::Detection, void*&rang;*, int, arm::app::image::CalculateNMS(std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&, int, float)::$_0&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::object_detection::DetectorPostprocessing::RunPostProcessing(unsigned int, unsigned int, unsigned int, unsigned int, TfLiteTensor*, std::__2::vector&lang;arm::app::object_detection::DetectionResult, std::__2::allocator&lang;arm::app::object_detection::DetectionResult&rang;&rang;&)
</UL>

<P><STRONG><a name="[219]"></a>arm::app::image::ConvertImgToInt8(void*, unsigned int)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, imageutils.o(.text._ZN3arm3app5image16ConvertImgToInt8EPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = arm::app::image::ConvertImgToInt8(void*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task(void*)
</UL>

<P><STRONG><a name="[ab]"></a>tflite::MicroOpResolver::~MicroOpResolver__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text._ZN6tflite15MicroOpResolverD2Ev))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata._ZTVN6tflite22MicroMutableOpResolverILj2EEE)
</UL>
<P><STRONG><a name="[21f]"></a>tflite::MicroMutableOpResolver&lang;2u&rang;::AddTranspose()</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, yoloxnanonu.o(.text._ZN6tflite22MicroMutableOpResolverILj2EE12AddTransposeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = tflite::MicroMutableOpResolver&lang;2u&rang;::AddTranspose() &rArr; MicroPrintf(char const*, ...) &rArr; (anonymous namespace)::VDebugLog(char const*, ...) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_TRANSPOSE()
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::YoloXnanoNu::EnlistOperations()
</UL>

<P><STRONG><a name="[220]"></a>tflite::MicroMutableOpResolver&lang;2u&rang;::AddEthosU()</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, yoloxnanonu.o(.text._ZN6tflite22MicroMutableOpResolverILj2EE9AddEthosUEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = tflite::MicroMutableOpResolver&lang;2u&rang;::AddEthosU() &rArr; MicroPrintf(char const*, ...) &rArr; (anonymous namespace)::VDebugLog(char const*, ...) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_ETHOSU()
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GetString_ETHOSU()
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::YoloXnanoNu::EnlistOperations()
</UL>

<P><STRONG><a name="[ac]"></a>tflite::MicroMutableOpResolver&lang;2u&rang;::~MicroMutableOpResolver__deallocating()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text._ZN6tflite22MicroMutableOpResolverILj2EED0Ev))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata._ZTVN6tflite22MicroMutableOpResolverILj2EEE)
</UL>
<P><STRONG><a name="[218]"></a>arm::app::Model::IsDataSigned() const</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, model.o(.text._ZNK3arm3app5Model12IsDataSignedEv))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task(void*)
</UL>

<P><STRONG><a name="[20f]"></a>arm::app::Model::GetInputShape(unsigned int) const</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, model.o(.text._ZNK3arm3app5Model13GetInputShapeEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = arm::app::Model::GetInputShape(unsigned int) const &rArr; std::__2::vector&lang;TfLiteTensor*, std::__2::allocator&lang;TfLiteTensor*&rang;&rang;::__throw_out_of_range[abi:nn190000]() const &rArr; std::__2::__throw_out_of_range[abi:nn190000](char const*) &rArr; std::__2::__libcpp_verbose_abort(char const*, ...) &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;TfLiteTensor*, std::__2::allocator&lang;TfLiteTensor*&rang;&rang;::__throw_out_of_range[abi:nn190000]() const
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task(void*)
</UL>

<P><STRONG><a name="[20c]"></a>arm::app::Model::GetInputTensor(unsigned int) const</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, model.o(.text._ZNK3arm3app5Model14GetInputTensorEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = arm::app::Model::GetInputTensor(unsigned int) const &rArr; std::__2::vector&lang;TfLiteTensor*, std::__2::allocator&lang;TfLiteTensor*&rang;&rang;::__throw_out_of_range[abi:nn190000]() const &rArr; std::__2::__throw_out_of_range[abi:nn190000](char const*) &rArr; std::__2::__libcpp_verbose_abort(char const*, ...) &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;TfLiteTensor*, std::__2::allocator&lang;TfLiteTensor*&rang;&rang;::__throw_out_of_range[abi:nn190000]() const
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task(void*)
</UL>

<P><STRONG><a name="[1fc]"></a>arm::app::Model::GetOutputTensor(unsigned int) const</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, model.o(.text._ZNK3arm3app5Model15GetOutputTensorEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = arm::app::Model::GetOutputTensor(unsigned int) const &rArr; std::__2::vector&lang;TfLiteTensor*, std::__2::allocator&lang;TfLiteTensor*&rang;&rang;::__throw_out_of_range[abi:nn190000]() const &rArr; std::__2::__throw_out_of_range[abi:nn190000](char const*) &rArr; std::__2::__libcpp_verbose_abort(char const*, ...) &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;TfLiteTensor*, std::__2::allocator&lang;TfLiteTensor*&rang;&rang;::__throw_out_of_range[abi:nn190000]() const
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inferenceProcessTask(void*)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task(void*)
</UL>

<P><STRONG><a name="[aa]"></a>tflite::MicroMutableOpResolver&lang;2u&rang;::GetOpDataParser(tflite::BuiltinOperator) const</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, main.o(.text._ZNK6tflite22MicroMutableOpResolverILj2EE15GetOpDataParserENS_15BuiltinOperatorE))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = tflite::MicroMutableOpResolver&lang;2u&rang;::GetOpDataParser(tflite::BuiltinOperator) const &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata._ZTVN6tflite22MicroMutableOpResolverILj2EEE)
</UL>
<P><STRONG><a name="[a8]"></a>tflite::MicroMutableOpResolver&lang;2u&rang;::FindOp(tflite::BuiltinOperator) const</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, main.o(.text._ZNK6tflite22MicroMutableOpResolverILj2EE6FindOpENS_15BuiltinOperatorE))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata._ZTVN6tflite22MicroMutableOpResolverILj2EEE)
</UL>
<P><STRONG><a name="[a9]"></a>tflite::MicroMutableOpResolver&lang;2u&rang;::FindOp(char const*) const</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, main.o(.text._ZNK6tflite22MicroMutableOpResolverILj2EE6FindOpEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tflite::MicroMutableOpResolver&lang;2u&rang;::FindOp(char const*) const &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata._ZTVN6tflite22MicroMutableOpResolverILj2EEE)
</UL>
<P><STRONG><a name="[1fa]"></a>std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;::__throw_length_error[abi:nn190000]() const</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, string.cpp.o(.text._ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE20__throw_length_errorB8nn190000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;::__throw_length_error[abi:nn190000]() const &rArr; std::__2::__throw_length_error[abi:nn190000](char const*) &rArr; std::__2::__libcpp_verbose_abort(char const*, ...) &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__throw_length_error[abi:nn190000](char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;* std::__2::vector&lang;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;, std::__2::allocator&lang;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;&rang;::__emplace_back_slow_path&lang;char const*&&rang;(char const*&)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLabelsVector(std::__2::vector&lang;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;, std::__2::allocator&lang;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;&rang;&)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::Model::LogInterpreterInfo()
</UL>

<P><STRONG><a name="[22b]"></a>std::__2::vector&lang;arm::app::object_detection::DetectionResult, std::__2::allocator&lang;arm::app::object_detection::DetectionResult&rang;&rang;::__throw_length_error[abi:nn190000]() const</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, detectorpostprocessing.o(.text._ZNKSt3__26vectorIN3arm3app16object_detection15DetectionResultENS_9allocatorIS4_EEE20__throw_length_errorB8nn190000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = std::__2::vector&lang;arm::app::object_detection::DetectionResult, std::__2::allocator&lang;arm::app::object_detection::DetectionResult&rang;&rang;::__throw_length_error[abi:nn190000]() const &rArr; std::__2::__throw_length_error[abi:nn190000](char const*) &rArr; std::__2::__libcpp_verbose_abort(char const*, ...) &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__throw_length_error[abi:nn190000](char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::object_detection::DetectorPostprocessing::RunPostProcessing(unsigned int, unsigned int, unsigned int, unsigned int, TfLiteTensor*, std::__2::vector&lang;arm::app::object_detection::DetectionResult, std::__2::allocator&lang;arm::app::object_detection::DetectionResult&rang;&rang;&)
</UL>

<P><STRONG><a name="[241]"></a>std::__2::vector&lang;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;, std::__2::allocator&lang;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;&rang;::__throw_length_error[abi:nn190000]() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, labels.o(.text._ZNKSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE20__throw_length_errorB8nn190000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = std::__2::vector&lang;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;, std::__2::allocator&lang;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;&rang;::__throw_length_error[abi:nn190000]() const &rArr; std::__2::__throw_length_error[abi:nn190000](char const*) &rArr; std::__2::__libcpp_verbose_abort(char const*, ...) &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__throw_length_error[abi:nn190000](char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;* std::__2::vector&lang;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;, std::__2::allocator&lang;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;&rang;::__emplace_back_slow_path&lang;char const*&&rang;(char const*&)
</UL>

<P><STRONG><a name="[242]"></a>std::__2::vector&lang;TfLiteTensor*, std::__2::allocator&lang;TfLiteTensor*&rang;&rang;::__throw_length_error[abi:nn190000]() const</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, model.o(.text._ZNKSt3__26vectorIP12TfLiteTensorNS_9allocatorIS2_EEE20__throw_length_errorB8nn190000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = std::__2::vector&lang;TfLiteTensor*, std::__2::allocator&lang;TfLiteTensor*&rang;&rang;::__throw_length_error[abi:nn190000]() const &rArr; std::__2::__throw_length_error[abi:nn190000](char const*) &rArr; std::__2::__libcpp_verbose_abort(char const*, ...) &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__throw_length_error[abi:nn190000](char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;TfLiteTensor*, std::__2::allocator&lang;TfLiteTensor*&rang;&rang;::__append(unsigned int)
</UL>

<P><STRONG><a name="[23e]"></a>std::__2::vector&lang;TfLiteTensor*, std::__2::allocator&lang;TfLiteTensor*&rang;&rang;::__throw_out_of_range[abi:nn190000]() const</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, model.o(.text._ZNKSt3__26vectorIP12TfLiteTensorNS_9allocatorIS2_EEE20__throw_out_of_rangeB8nn190000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = std::__2::vector&lang;TfLiteTensor*, std::__2::allocator&lang;TfLiteTensor*&rang;&rang;::__throw_out_of_range[abi:nn190000]() const &rArr; std::__2::__throw_out_of_range[abi:nn190000](char const*) &rArr; std::__2::__libcpp_verbose_abort(char const*, ...) &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__throw_out_of_range[abi:nn190000](char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::Model::GetInputShape(unsigned int) const
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::Model::GetOutputTensor(unsigned int) const
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::Model::GetInputTensor(unsigned int) const
</UL>

<P><STRONG><a name="[226]"></a>std::__2::vector&lang;float, std::__2::allocator&lang;float&rang;&rang;::__throw_length_error[abi:nn190000]() const</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, detectorpostprocessing.o(.text._ZNKSt3__26vectorIfNS_9allocatorIfEEE20__throw_length_errorB8nn190000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = std::__2::vector&lang;float, std::__2::allocator&lang;float&rang;&rang;::__throw_length_error[abi:nn190000]() const &rArr; std::__2::__throw_length_error[abi:nn190000](char const*) &rArr; std::__2::__libcpp_verbose_abort(char const*, ...) &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__throw_length_error[abi:nn190000](char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::object_detection::DetectorPostprocessing::InsertTopNDetections(std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&, arm::app::image::Detection&)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::object_detection::DetectorPostprocessing::GetNetworkBoxes(arm::app::object_detection::Network&, int, int, float, std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&)
</UL>

<P><STRONG><a name="[228]"></a>std::__2::vector&lang;int, std::__2::allocator&lang;int&rang;&rang;::__throw_length_error[abi:nn190000]() const</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, detectorpostprocessing.o(.text._ZNKSt3__26vectorIiNS_9allocatorIiEEE20__throw_length_errorB8nn190000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = std::__2::vector&lang;int, std::__2::allocator&lang;int&rang;&rang;::__throw_length_error[abi:nn190000]() const &rArr; std::__2::__throw_length_error[abi:nn190000](char const*) &rArr; std::__2::__libcpp_verbose_abort(char const*, ...) &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__throw_length_error[abi:nn190000](char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::object_detection::DetectorPostprocessing::GetNetworkBoxes(arm::app::object_detection::Network&, int, int, float, std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&)
</UL>

<P><STRONG><a name="[240]"></a>std::__2::__throw_length_error[abi:nn190000](char const*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, detectorpostprocessing.o(.text._ZNSt3__220__throw_length_errorB8nn190000EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = std::__2::__throw_length_error[abi:nn190000](char const*) &rArr; std::__2::__libcpp_verbose_abort(char const*, ...) &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__libcpp_verbose_abort(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;, std::__2::allocator&lang;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;&rang;::__throw_length_error[abi:nn190000]() const
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;int, std::__2::allocator&lang;int&rang;&rang;::__throw_length_error[abi:nn190000]() const
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;float, std::__2::allocator&lang;float&rang;&rang;::__throw_length_error[abi:nn190000]() const
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;arm::app::object_detection::DetectionResult, std::__2::allocator&lang;arm::app::object_detection::DetectionResult&rang;&rang;::__throw_length_error[abi:nn190000]() const
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;TfLiteTensor*, std::__2::allocator&lang;TfLiteTensor*&rang;&rang;::__throw_length_error[abi:nn190000]() const
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;::__throw_length_error[abi:nn190000]() const
</UL>

<P><STRONG><a name="[243]"></a>std::__2::__throw_out_of_range[abi:nn190000](char const*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, model.o(.text._ZNSt3__220__throw_out_of_rangeB8nn190000EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = std::__2::__throw_out_of_range[abi:nn190000](char const*) &rArr; std::__2::__libcpp_verbose_abort(char const*, ...) &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__libcpp_verbose_abort(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;TfLiteTensor*, std::__2::allocator&lang;TfLiteTensor*&rang;&rang;::__throw_out_of_range[abi:nn190000]() const
</UL>

<P><STRONG><a name="[244]"></a>std::__2::__libcpp_verbose_abort(char const*, ...)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, verbose_abort.cpp.o(.text._ZNSt3__222__libcpp_verbose_abortEPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = std::__2::__libcpp_verbose_abort(char const*, ...) &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__throw_length_error[abi:nn190000](char const*)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__throw_bad_array_new_length[abi:nn190000]()
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__throw_out_of_range[abi:nn190000](char const*)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__throw_bad_alloc()
</UL>

<P><STRONG><a name="[1f7]"></a>std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;* std::__2::vector&lang;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;, std::__2::allocator&lang;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;&rang;::__emplace_back_slow_path&lang;char const*&&rang;(char const*&)</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, labels.o(.text._ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__emplace_back_slow_pathIJRPKcEEEPS6_DpOT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;* std::__2::vector&lang;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;, std::__2::allocator&lang;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;&rang;::__emplace_back_slow_path&lang;char const*&&rang;(char const*&) &rArr; operator new(unsigned int) &rArr; std::__throw_bad_alloc() &rArr; std::__2::__libcpp_verbose_abort(char const*, ...) &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;, std::__2::allocator&lang;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;&rang;::__throw_length_error[abi:nn190000]() const
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__throw_bad_array_new_length[abi:nn190000]()
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;::__throw_length_error[abi:nn190000]() const
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLabelsVector(std::__2::vector&lang;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;, std::__2::allocator&lang;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;&rang;&)
</UL>

<P><STRONG><a name="[236]"></a>std::__2::vector&lang;TfLiteTensor*, std::__2::allocator&lang;TfLiteTensor*&rang;&rang;::__append(unsigned int)</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, model.o(.text._ZNSt3__26vectorIP12TfLiteTensorNS_9allocatorIS2_EEE8__appendEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = std::__2::vector&lang;TfLiteTensor*, std::__2::allocator&lang;TfLiteTensor*&rang;&rang;::__append(unsigned int) &rArr; operator new(unsigned int) &rArr; std::__throw_bad_alloc() &rArr; std::__2::__libcpp_verbose_abort(char const*, ...) &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__throw_bad_array_new_length[abi:nn190000]()
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;TfLiteTensor*, std::__2::allocator&lang;TfLiteTensor*&rang;&rang;::__throw_length_error[abi:nn190000]() const
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::Model::Init(unsigned char*, unsigned int, unsigned char const*, unsigned int, tflite::MicroAllocator*)
</UL>

<P><STRONG><a name="[204]"></a>std::get_new_handler()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cxa_handlers.cpp.o(.text._ZSt15get_new_handlerv))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator_new_impl(unsigned int)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator_new_aligned_impl(unsigned int, std::align_val_t)
</UL>

<P><STRONG><a name="[245]"></a>std::__throw_bad_alloc()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, new_helpers.cpp.o(.text._ZSt17__throw_bad_allocv))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = std::__throw_bad_alloc() &rArr; std::__2::__libcpp_verbose_abort(char const*, ...) &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__libcpp_verbose_abort(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int, std::align_val_t)
</UL>

<P><STRONG><a name="[227]"></a>std::__throw_bad_array_new_length[abi:nn190000]()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, detectorpostprocessing.o(.text._ZSt28__throw_bad_array_new_lengthB8nn190000v))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = std::__throw_bad_array_new_length[abi:nn190000]() &rArr; std::__2::__libcpp_verbose_abort(char const*, ...) &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__libcpp_verbose_abort(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;* std::__2::vector&lang;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;, std::__2::allocator&lang;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;&rang;::__emplace_back_slow_path&lang;char const*&&rang;(char const*&)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::object_detection::DetectorPostprocessing::GetNetworkBoxes(arm::app::object_detection::Network&, int, int, float, std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&)
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::object_detection::DetectorPostprocessing::RunPostProcessing(unsigned int, unsigned int, unsigned int, unsigned int, TfLiteTensor*, std::__2::vector&lang;arm::app::object_detection::DetectionResult, std::__2::allocator&lang;arm::app::object_detection::DetectionResult&rang;&rang;&)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;TfLiteTensor*, std::__2::allocator&lang;TfLiteTensor*&rang;&rang;::__append(unsigned int)
</UL>

<P><STRONG><a name="[246]"></a>operator delete(void*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, new.cpp.o(.text._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
</UL>

<P><STRONG><a name="[1f5]"></a>operator delete(void*, unsigned int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, new.cpp.o(.text._ZdlPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::YoloXnanoNu::~YoloXnanoNu__deallocating()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::YoloXnanoNu::~YoloXnanoNu__sub_object()
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;* std::__2::vector&lang;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;, std::__2::allocator&lang;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;&rang;::__emplace_back_slow_path&lang;char const*&&rang;(char const*&)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::object_detection::DetectorPostprocessing::InsertTopNDetections(std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&, arm::app::image::Detection&)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::object_detection::DetectorPostprocessing::GetNetworkBoxes(arm::app::object_detection::Network&, int, int, float, std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&)
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::object_detection::DetectorPostprocessing::RunPostProcessing(unsigned int, unsigned int, unsigned int, unsigned int, TfLiteTensor*, std::__2::vector&lang;arm::app::object_detection::DetectionResult, std::__2::allocator&lang;arm::app::object_detection::DetectionResult&rang;&rang;&)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLabelsVector(std::__2::vector&lang;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;, std::__2::allocator&lang;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;&rang;&)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::Model::Init(unsigned char*, unsigned int, unsigned char const*, unsigned int, tflite::MicroAllocator*)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task(void*)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_array_dtor
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::Model::~Model__sub_object()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::Model::LogInterpreterInfo()
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;TfLiteTensor*, std::__2::allocator&lang;TfLiteTensor*&rang;&rang;::__append(unsigned int)
</UL>

<P><STRONG><a name="[a7]"></a>__cxa_pure_virtual</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cxa_virtual.cpp.o(.text.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = __cxa_pure_virtual &rArr; abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model.o(.rodata._ZTVN3arm3app5ModelE)
</UL>
<P><STRONG><a name="[1ac]"></a>_sys_close</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, retarget.o(.text._sys_close))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[155]"></a>_sys_exit</STRONG> (Thumb, 124 bytes, Stack size 64 bytes, retarget.o(.text._sys_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = _sys_exit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[1a5]"></a>_sys_flen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, retarget.o(.text._sys_flen))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[1a6]"></a>_sys_istty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, retarget.o(.text._sys_istty))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[1a8]"></a>_sys_open</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, retarget.o(.text._sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sys_open &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[1b2]"></a>_sys_seek</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, retarget.o(.text._sys_seek))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[1b3]"></a>_sys_write</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, retarget.o(.text._sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sys_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[1b7]"></a>_ttywrch</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, retarget.o(.text._ttywrch))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[247]"></a>abort_message</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, abort_message.cpp.o(.text.abort_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[26d]"></a>eTaskConfirmSleepModeStatus</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, tasks.o(.text.eTaskConfirmSleepModeStatus))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[248]"></a>ethosu_mutex_create</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, inferencetask.o(.text.ethosu_mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ethosu_mutex_create &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_init
</UL>

<P><STRONG><a name="[24a]"></a>ethosu_mutex_lock</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, inferencetask.o(.text.ethosu_mutex_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ethosu_mutex_lock &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_release_driver
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_reserve_driver
</UL>

<P><STRONG><a name="[24c]"></a>ethosu_mutex_unlock</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, inferencetask.o(.text.ethosu_mutex_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ethosu_mutex_unlock &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_release_driver
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_reserve_driver
</UL>

<P><STRONG><a name="[24d]"></a>ethosu_semaphore_create</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, inferencetask.o(.text.ethosu_semaphore_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ethosu_semaphore_create &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_init
</UL>

<P><STRONG><a name="[24e]"></a>ethosu_semaphore_give</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, inferencetask.o(.text.ethosu_semaphore_give))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ethosu_semaphore_give &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_release_driver
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_irq_handler
</UL>

<P><STRONG><a name="[24f]"></a>ethosu_semaphore_take</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, inferencetask.o(.text.ethosu_semaphore_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ethosu_semaphore_take &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_reserve_driver
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_wait
</UL>

<P><STRONG><a name="[252]"></a>fast_floorf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fmath.o(.text.fast_floorf))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imlib_draw_string
</UL>

<P><STRONG><a name="[211]"></a>fb_alloc_init0</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fb_alloc.o(.text.fb_alloc_init0))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task(void*)
</UL>

<P><STRONG><a name="[251]"></a>fb_alloc_stack_pointer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fb_alloc.o(.text.fb_alloc_stack_pointer))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;framebuffer_init_image
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;framebuffer_init0
</UL>

<P><STRONG><a name="[212]"></a>framebuffer_init0</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, framebuffer.o(.text.framebuffer_init0))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = framebuffer_init0
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_init0
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fb_alloc_stack_pointer
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task(void*)
</UL>

<P><STRONG><a name="[213]"></a>framebuffer_init_from_image</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, framebuffer.o(.text.framebuffer_init_from_image))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task(void*)
</UL>

<P><STRONG><a name="[214]"></a>framebuffer_init_image</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, framebuffer.o(.text.framebuffer_init_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = framebuffer_init_image
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fb_alloc_stack_pointer
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task(void*)
</UL>

<P><STRONG><a name="[6]"></a>fsa506_put_char8x16</STRONG> (Thumb, 564 bytes, Stack size 24 bytes, lcd_fsa506.o(.text.fsa506_put_char8x16))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fsa506_put_char8x16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_fsa506.o(.data.g_s_WQVGA_FSA506)
</UL>
<P><STRONG><a name="[21a]"></a>imlib_draw_rectangle</STRONG> (Thumb, 4656 bytes, Stack size 156 bytes, draw.o(.text.imlib_draw_rectangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = imlib_draw_rectangle
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task(void*)
</UL>

<P><STRONG><a name="[21b]"></a>imlib_draw_string</STRONG> (Thumb, 1736 bytes, Stack size 184 bytes, draw.o(.text.imlib_draw_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = imlib_draw_string &rArr; point_rotate &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;point_rotate
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_floorf
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task(void*)
</UL>

<P><STRONG><a name="[217]"></a>imlib_nvt_scale</STRONG> (Thumb, 3442 bytes, Stack size 352 bytes, imlib_nvt.o(.text.imlib_nvt_scale))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = imlib_nvt_scale
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task(void*)
</UL>

<P><STRONG><a name="[150]"></a>main</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = main &rArr; BoardInit() &rArr; arm_ethosu_npu_init &rArr; ethosu_get_hw_info &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[250]"></a>mutex_init0</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mutex.o(.text.mutex_init0))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;framebuffer_init0
</UL>

<P><STRONG><a name="[1c0]"></a>pmu_get_systick_Count</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, pmu_counter.o(.text.pmu_get_systick_Count))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task(void*)
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Delay
</UL>

<P><STRONG><a name="[1c2]"></a>pmu_reset_counters</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pmu_counter.o(.text.pmu_reset_counters))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = pmu_reset_counters &rArr; ethosu_pmu_init &rArr; ETHOSU_PMU_Set_EVTYPER &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_pmu_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task(void*)
</UL>

<P><STRONG><a name="[253]"></a>point_rotate</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, imlib.o(.text.point_rotate))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = point_rotate &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imlib_draw_string
</UL>

<P><STRONG><a name="[268]"></a>pvPortMalloc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, heap_3.o(.text.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[27c]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(.text.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[27f]"></a>pxPortInitialiseStack</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, port.o(.text.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1ef]"></a>ulSetInterruptMask</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, portasm.o(.text.ulSetInterruptMask))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSVCHandler_C
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStepTick
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
</UL>

<P><STRONG><a name="[269]"></a>__cxa_guard_acquire</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, cxa_guard.cpp.o(.text.unlikely.__cxa_guard_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = __cxa_guard_acquire &rArr; abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_ETHOSU()
</UL>

<P><STRONG><a name="[2b7]"></a>__cxa_guard_release</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cxa_guard.cpp.o(.text.unlikely.__cxa_guard_release))
<BR><BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_ETHOSU()
</UL>

<P><STRONG><a name="[259]"></a>uxListRemove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, list.o(.text.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[26a]"></a>vApplicationTickHook</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(.text.vApplicationTickHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_TickHook
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[1f1]"></a>vClearInterruptMask</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, portasm.o(.text.vClearInterruptMask))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[277]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(.text.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[27e]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(.text.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[25a]"></a>vListInsert</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, list.o(.text.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[270]"></a>vListInsertEnd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, list.o(.text.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[25b]"></a>vPortEnterCritical</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, port.o(.text.vPortEnterCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStepTick
</UL>

<P><STRONG><a name="[25c]"></a>vPortExitCritical</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, port.o(.text.vPortExitCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStepTick
</UL>

<P><STRONG><a name="[25d]"></a>vPortFree</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, heap_3.o(.text.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[98]"></a>vPortSVCHandler_C</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, port.o(.text.vPortSVCHandler_C))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortSVCHandler_C
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRestoreContextOfFirstTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> portasm.o(.text.SVC_Handler)
</UL>
<P><STRONG><a name="[275]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, port.o(.text.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[25f]"></a>vPortSuppressTicksAndSleep</STRONG> (Thumb, 338 bytes, Stack size 16 bytes, port.o(.text.vPortSuppressTicksAndSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vPortSuppressTicksAndSleep &rArr; vTaskStepTick &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStepTick
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskConfirmSleepModeStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[25e]"></a>vPortYield</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, port.o(.text.vPortYield))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[264]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, queue.o(.text.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[26c]"></a>vRestoreContextOfFirstTask</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, portasm.o(.text.vRestoreContextOfFirstTask))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSVCHandler_C
</UL>

<P><STRONG><a name="[276]"></a>vStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, portasm.o(.text.vStartFirstTask))
<BR><BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[216]"></a>vTaskDelay</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, tasks.o(.text.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task(void*)
</UL>

<P><STRONG><a name="[20d]"></a>vTaskDelete</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, tasks.o(.text.vTaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = vTaskDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task(void*)
</UL>

<P><STRONG><a name="[279]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(.text.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[267]"></a>vTaskMissedYield</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(.text.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[271]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, tasks.o(.text.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[26f]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, tasks.o(.text.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[272]"></a>vTaskPriorityDisinheritAfterTimeout</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, tasks.o(.text.vTaskPriorityDisinheritAfterTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityDisinheritAfterTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[254]"></a>vTaskStartScheduler</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, tasks.o(.text.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26e]"></a>vTaskStepTick</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, tasks.o(.text.vTaskStepTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vTaskStepTick &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[263]"></a>vTaskSuspendAll</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tasks.o(.text.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[115]"></a>vTaskSwitchContext</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, tasks.o(.text.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[274]"></a>xPortStartScheduler</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, port.o(.text.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortStartScheduler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartFirstTask
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[249]"></a>xQueueCreateMutex</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, queue.o(.text.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_mutex_create
</UL>

<P><STRONG><a name="[20a]"></a>xQueueGenericCreate</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, queue.o(.text.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_semaphore_create
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task(void*)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[1fe]"></a>xQueueGenericSend</STRONG> (Thumb, 416 bytes, Stack size 48 bytes, queue.o(.text.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_semaphore_give
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_mutex_unlock
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inferenceProcessTask(void*)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task(void*)
</UL>

<P><STRONG><a name="[1fb]"></a>xQueueReceive</STRONG> (Thumb, 304 bytes, Stack size 48 bytes, queue.o(.text.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inferenceProcessTask(void*)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task(void*)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[24b]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 350 bytes, Stack size 48 bytes, queue.o(.text.xQueueSemaphoreTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_semaphore_take
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_mutex_lock
</UL>

<P><STRONG><a name="[27a]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, tasks.o(.text.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskCheckForTimeOut &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[20b]"></a>xTaskCreate</STRONG> (Thumb, 586 bytes, Stack size 40 bytes, tasks.o(.text.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task(void*)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[278]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, tasks.o(.text.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[262]"></a>xTaskGetTickCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(.text.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationTickHook
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[1f0]"></a>xTaskIncrementTick</STRONG> (Thumb, 426 bytes, Stack size 40 bytes, tasks.o(.text.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xTaskIncrementTick &rArr; vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationTickHook
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[27b]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, tasks.o(.text.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[27d]"></a>xTaskPriorityInherit</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, tasks.o(.text.xTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[266]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, tasks.o(.text.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[260]"></a>xTaskResumeAll</STRONG> (Thumb, 362 bytes, Stack size 40 bytes, tasks.o(.text.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[273]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, timers.o(.text.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[18a]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[281]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[280]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[282]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[283]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[18b]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[18c]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[284]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[1f6]"></a>operator new(unsigned int)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, new.cpp.o(__lcxx_override))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = operator new(unsigned int) &rArr; std::__throw_bad_alloc() &rArr; std::__2::__libcpp_verbose_abort(char const*, ...) &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator_new_impl(unsigned int)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__throw_bad_alloc()
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;* std::__2::vector&lang;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;, std::__2::allocator&lang;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;&rang;::__emplace_back_slow_path&lang;char const*&&rang;(char const*&)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::object_detection::DetectorPostprocessing::InsertTopNDetections(std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&, arm::app::image::Detection&)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::object_detection::DetectorPostprocessing::GetNetworkBoxes(arm::app::object_detection::Network&, int, int, float, std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&)
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::object_detection::DetectorPostprocessing::RunPostProcessing(unsigned int, unsigned int, unsigned int, unsigned int, TfLiteTensor*, std::__2::vector&lang;arm::app::object_detection::DetectionResult, std::__2::allocator&lang;arm::app::object_detection::DetectionResult&rang;&rang;&)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLabelsVector(std::__2::vector&lang;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;, std::__2::allocator&lang;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;&rang;&)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::Model::Init(unsigned char*, unsigned int, unsigned char const*, unsigned int, tflite::MicroAllocator*)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task(void*)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::Model::LogInterpreterInfo()
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;TfLiteTensor*, std::__2::allocator&lang;TfLiteTensor*&rang;&rang;::__append(unsigned int)
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[](unsigned int)
</UL>

<P><STRONG><a name="[285]"></a>operator new[](unsigned int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, new.cpp.o(__lcxx_override), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL>

<P><STRONG><a name="[286]"></a>operator new(unsigned int, std::align_val_t)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, new.cpp.o(__lcxx_override), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__throw_bad_alloc()
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator_new_aligned_impl(unsigned int, std::align_val_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[](unsigned int, std::align_val_t)
</UL>

<P><STRONG><a name="[287]"></a>operator new[](unsigned int, std::align_val_t)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, new.cpp.o(__lcxx_override), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int, std::align_val_t)
</UL>

<P><STRONG><a name="[18e]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>

<P><STRONG><a name="[28d]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[256]"></a>__hardfp_cosf</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, cosf.o(i.__hardfp_cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;point_rotate
</UL>

<P><STRONG><a name="[223]"></a>__hardfp_expf</STRONG> (Thumb, 430 bytes, Stack size 16 bytes, expf.o(i.__hardfp_expf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_expf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::object_detection::DetectorPostprocessing::GetNetworkBoxes(arm::app::object_detection::Network&, int, int, float, std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&)
</UL>

<P><STRONG><a name="[32d]"></a>__mathlib_expf</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, expf.o(i.__hardfp_expf), UNUSED)

<P><STRONG><a name="[257]"></a>__hardfp_sinf</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, sinf.o(i.__hardfp_sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;point_rotate
</UL>

<P><STRONG><a name="[28a]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[289]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[28c]"></a>__mathlib_flt_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[28b]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[288]"></a>__mathlib_rredf2</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __mathlib_rredf2
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[16a]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[95]"></a>fputc</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[145]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[96]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[28f]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sfrom_d
</UL>

<P><STRONG><a name="[13e]"></a>_fp_init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fpinit_81m.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[32e]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit_81m.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[32f]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit_81m.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[2d2]"></a>__aeabi_d2lz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixll.o(x$fpl$llsfromd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2lz
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flexbuffers::Reference::AsInt64() const
</UL>

<P><STRONG><a name="[28e]"></a>_ll_sfrom_d</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, dfixll.o(x$fpl$llsfromd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[120]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
</UL>

<P><STRONG><a name="[124]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[290]"></a>DebugLog</STRONG> (Thumb, 40 bytes, Stack size 264 bytes, debug_log.o(.text.DebugLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMicroPrintf(char const*, std::__va_list)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;(anonymous namespace)::VDebugLog(char const*, ...)
</UL>

<P><STRONG><a name="[2e4]"></a>ETHOSU_PMU_CNTR_Disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ethosu_pmu.o(.text.ETHOSU_PMU_CNTR_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_pmu_init
</UL>

<P><STRONG><a name="[2e7]"></a>ETHOSU_PMU_CNTR_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ethosu_pmu.o(.text.ETHOSU_PMU_CNTR_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_pmu_init
</UL>

<P><STRONG><a name="[2e5]"></a>ETHOSU_PMU_CYCCNT_Reset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ethosu_pmu.o(.text.ETHOSU_PMU_CYCCNT_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_pmu_init
</UL>

<P><STRONG><a name="[2e6]"></a>ETHOSU_PMU_EVCNTR_ALL_Reset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ethosu_pmu.o(.text.ETHOSU_PMU_EVCNTR_ALL_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_pmu_init
</UL>

<P><STRONG><a name="[291]"></a>ETHOSU_PMU_Enable</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ethosu_pmu.o(.text.ETHOSU_PMU_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ETHOSU_PMU_Enable &rArr; ethosu_request_power &rArr; ethosu_dev_soft_reset &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_request_power
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_pmu_init
</UL>

<P><STRONG><a name="[2e3]"></a>ETHOSU_PMU_Set_CNTR_OVS</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ethosu_pmu.o(.text.ETHOSU_PMU_Set_CNTR_OVS))
<BR><BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_pmu_init
</UL>

<P><STRONG><a name="[293]"></a>ETHOSU_PMU_Set_EVTYPER</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, ethosu_pmu.o(.text.ETHOSU_PMU_Set_EVTYPER))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = ETHOSU_PMU_Set_EVTYPER &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_pmu_init
</UL>

<P><STRONG><a name="[1e]"></a>NPU_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ethosu_npu_init.o(.text.NPU_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = NPU_IRQHandler &rArr; ethosu_irq_handler &rArr; ethosu_semaphore_give &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m55m1.o(RESET)
</UL>
<P><STRONG><a name="[2d0]"></a>TfLiteIntArrayGetSizeInBytes</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, common_1.o(.text.TfLiteIntArrayGetSizeInBytes))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::internal::InitializeTfLiteTensorFromFlatbuffer(tflite::IPersistentBufferAllocator*, tflite::INonPersistentBufferAllocator*, bool, tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang;, unsigned int&rang; const*, TfLiteTensor*)
</UL>

<P><STRONG><a name="[22e]"></a>TfLiteTypeGetName</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, common_1.o(.text.TfLiteTypeGetName))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::TransposeEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::TransposePrepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::Model::LogTensorInfo(TfLiteTensor*)
</UL>

<P><STRONG><a name="[23c]"></a>MicroPrintf(char const*, ...)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, micro_log.o(.text._Z11MicroPrintfPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = MicroPrintf(char const*, ...) &rArr; (anonymous namespace)::VDebugLog(char const*, ...) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;(anonymous namespace)::VDebugLog(char const*, ...)
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLog
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::AllocateTensors()
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroMutableOpResolver&lang;2u&rang;::AddEthosU()
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroMutableOpResolver&lang;2u&rang;::AddTranspose()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::TransposeEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterContext::set_external_context(void*)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::InvokeSubgraph(int)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::PrepareSubgraphs()
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer()
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::GetOfflinePlannedOffsets(int const**)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::CreateAllocationInfo(int)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::AllocateVariables(tflite::SubGraph const*, TfLiteEvalTensor*, int const*)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::AllocateTfLiteEvalTensors(tflite::Model const*, tflite::SubgraphAllocations*)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::AllocateTempTfLiteTensor(tflite::Model const*, tflite::SubgraphAllocations const*, int, int)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::AllocatePersistentTfLiteTensor(tflite::Model const*, tflite::SubgraphAllocations const*, int, int)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::AllocateNodeAndRegistrations(tflite::Model const*, tflite::SubgraphAllocations*)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::RequestScratchBufferInArena(unsigned int, int, int*)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::FinishModelAllocation(tflite::Model const*, tflite::SubgraphAllocations*, tflite::ScratchBufferHandle**)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::StartModelAllocation(tflite::Model const*)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SingleArenaBufferAllocator::Create(unsigned char*, unsigned int)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::internal::InitializeTfLiteTensorFromFlatbuffer(tflite::IPersistentBufferAllocator*, tflite::INonPersistentBufferAllocator*, bool, tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang;, unsigned int&rang; const*, TfLiteTensor*)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::Invoke()
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GetRegistrationFromOpCode(tflite::OperatorCode const*, tflite::MicroOpResolver const&, TFLMRegistration const**)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::output(unsigned int)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::input(unsigned int)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SingleArenaBufferAllocator::ResetTempAllocations()
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SingleArenaBufferAllocator::IsAllTempDeallocated()
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SingleArenaBufferAllocator::AllocateTemp(unsigned int, unsigned int)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non-virtual thunk to tflite::SingleArenaBufferAllocator::AllocatePersistentBuffer(unsigned int, unsigned int)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SingleArenaBufferAllocator::ResizeBuffer(unsigned char*, unsigned int, unsigned int)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SingleArenaBufferAllocator::AllocatePersistentBuffer(unsigned int, unsigned int)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::LinearMemoryPlanner::GetOffsetForBuffer(int, int*)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::LinearMemoryPlanner::AddBuffer(int, int, int)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GreedyMemoryPlanner::GetOffsetForBuffer(int, int*)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GreedyMemoryPlanner::PrintMemoryPlan()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GreedyMemoryPlanner::AddBuffer(int, int, int)
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::ValidateSubgraph(tflite::SubGraph const*, TfLiteEvalTensor*)
</UL>

<P><STRONG><a name="[296]"></a>VMicroPrintf(char const*, std::__va_list)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, micro_log.o(.text._Z12VMicroPrintfPKcSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = VMicroPrintf(char const*, std::__va_list) &rArr; (anonymous namespace)::VDebugLog(char const*, ...) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;(anonymous namespace)::VDebugLog(char const*, ...)
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLog
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroContextReportOpError(TfLiteContext*, char const*, ...)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroErrorReporter::Report(char const*, std::__va_list)
</UL>

<P><STRONG><a name="[298]"></a>tflite::AlignSizeUp(unsigned int, unsigned int)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, memory_helpers.o(.text._ZN6tflite11AlignSizeUpEjj))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::CreatePlan(tflite::MicroMemoryPlanner*, tflite::AllocationInfo const*, unsigned int)
</UL>

<P><STRONG><a name="[29e]"></a>tflite::MicroContext::AllocateTempInputTensor(TfLiteNode const*, int)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, micro_context.o(.text._ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::TransposePrepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[29f]"></a>tflite::MicroContext::AllocateTempOutputTensor(TfLiteNode const*, int)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, micro_context.o(.text._ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::TransposePrepare(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2c8]"></a>tflite::ErrorReporter::Report(char const*, ...)</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, error_reporter.o(.text._ZN6tflite13ErrorReporter6ReportEPKcz), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ConvertTensorType(tflite::TensorType, TfLiteType*, tflite::ErrorReporter*)
</UL>

<P><STRONG><a name="[d0]"></a>tflite::ErrorReporter::~ErrorReporter__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, micro_error_reporter.o(.text._ZN6tflite13ErrorReporterD2Ev))
<BR>[Address Reference Count : 1]<UL><LI> micro_error_reporter.o(.rodata._ZTVN6tflite18MicroErrorReporterE)
</UL>
<P><STRONG><a name="[29c]"></a>void tflite::reference_ops::transpose_internal::TransposeImpl&lang;signed char&rang;(int, int, int const*, signed char const*, int const*, signed char*, int const*, int const*)</STRONG> (Thumb, 214 bytes, Stack size 56 bytes, transpose.o(.text._ZN6tflite13reference_ops18transpose_internal13TransposeImplIaEEviiPKiPKT_S4_PS5_S4_S4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = void tflite::reference_ops::transpose_internal::TransposeImpl&lang;signed char&rang;(int, int, int const*, signed char const*, int const*, signed char*, int const*, int const*) &rArr;  void tflite::reference_ops::transpose_internal::TransposeImpl&lang;signed char&rang;(int, int, int const*, signed char const*, int const*, signed char*, int const*, int const*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::transpose_internal::TransposeImpl&lang;signed char&rang;(int, int, int const*, signed char const*, int const*, signed char*, int const*, int const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::transpose_internal::TransposeImpl&lang;signed char&rang;(int, int, int const*, signed char const*, int const*, signed char*, int const*, int const*)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::TransposeEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[29d]"></a>void tflite::reference_ops::transpose_internal::TransposeImpl&lang;int&rang;(int, int, int const*, int const*, int const*, int*, int const*, int const*)</STRONG> (Thumb, 242 bytes, Stack size 56 bytes, transpose.o(.text._ZN6tflite13reference_ops18transpose_internal13TransposeImplIiEEviiPKiPKT_S4_PS5_S4_S4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = void tflite::reference_ops::transpose_internal::TransposeImpl&lang;int&rang;(int, int, int const*, int const*, int const*, int*, int const*, int const*) &rArr;  void tflite::reference_ops::transpose_internal::TransposeImpl&lang;int&rang;(int, int, int const*, int const*, int const*, int*, int const*, int const*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::transpose_internal::TransposeImpl&lang;int&rang;(int, int, int const*, int const*, int const*, int*, int const*, int const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::transpose_internal::TransposeImpl&lang;int&rang;(int, int, int const*, int const*, int const*, int*, int const*, int const*)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::TransposeEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2aa]"></a>tflite::AlignPointerUp(unsigned char*, unsigned int)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, memory_helpers.o(.text._ZN6tflite14AlignPointerUpEPhj))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::Create(unsigned char*, unsigned int, tflite::MemoryPlannerType)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::CommitStaticMemoryPlan(tflite::Model const*, tflite::SubgraphAllocations*, tflite::ScratchBufferHandle*)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::FinishPrepareNodeAllocations(int)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::RequestScratchBufferInArena(unsigned int, int, int*)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SingleArenaBufferAllocator::GetAvailableMemory(unsigned int) const
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SingleArenaBufferAllocator::AllocateTemp(unsigned int, unsigned int)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SingleArenaBufferAllocator::ResizeBuffer(unsigned char*, unsigned int, unsigned int)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SingleArenaBufferAllocator::ReserveNonPersistentOverlayMemory(unsigned int, unsigned int)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SingleArenaBufferAllocator::AllocateResizableBuffer(unsigned int, unsigned int)
</UL>

<P><STRONG><a name="[2c0]"></a>tflite::GetBuiltinCode(tflite::OperatorCode const*)</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, schema_utils.o(.text._ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE))
<BR><BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer()
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GetRegistrationFromOpCode(tflite::OperatorCode const*, tflite::MicroOpResolver const&, TFLMRegistration const**)
</UL>

<P><STRONG><a name="[cb]"></a>tflite::MicroAllocator::AllocateVariables(tflite::SubGraph const*, TfLiteEvalTensor*, int const*)</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKi))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = tflite::MicroAllocator::AllocateVariables(tflite::SubGraph const*, TfLiteEvalTensor*, int const*) &rArr; MicroPrintf(char const*, ...) &rArr; (anonymous namespace)::VDebugLog(char const*, ...) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::TfLiteEvalTensorByteLength(TfLiteEvalTensor const*, unsigned int*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
</UL>
<P><STRONG><a name="[c2]"></a>tflite::MicroAllocator::AllocateTempBuffer(unsigned int, unsigned int)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator18AllocateTempBufferEjj))
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
</UL>
<P><STRONG><a name="[c3]"></a>tflite::MicroAllocator::DeallocateTempBuffer(unsigned char*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator20DeallocateTempBufferEPh))
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
</UL>
<P><STRONG><a name="[c5]"></a>tflite::MicroAllocator::IsAllTempDeallocated()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator20IsAllTempDeallocatedEv))
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
</UL>
<P><STRONG><a name="[c4]"></a>tflite::MicroAllocator::ResetTempAllocations()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator20ResetTempAllocationsEv))
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
</UL>
<P><STRONG><a name="[2a5]"></a>tflite::MicroAllocator::StartModelAllocation(tflite::Model const*)</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = tflite::MicroAllocator::StartModelAllocation(tflite::Model const*) &rArr; MicroPrintf(char const*, ...) &rArr; (anonymous namespace)::VDebugLog(char const*, ...) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::AllocateTensors()
</UL>

<P><STRONG><a name="[2a6]"></a>tflite::MicroAllocator::FinishModelAllocation(tflite::Model const*, tflite::SubgraphAllocations*, tflite::ScratchBufferHandle**)</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = tflite::MicroAllocator::FinishModelAllocation(tflite::Model const*, tflite::SubgraphAllocations*, tflite::ScratchBufferHandle**) &rArr; MicroPrintf(char const*, ...) &rArr; (anonymous namespace)::VDebugLog(char const*, ...) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::AllocateTensors()
</UL>

<P><STRONG><a name="[ce]"></a>tflite::MicroAllocator::CommitStaticMemoryPlan(tflite::Model const*, tflite::SubgraphAllocations*, tflite::ScratchBufferHandle*)</STRONG> (Thumb, 396 bytes, Stack size 80 bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = tflite::MicroAllocator::CommitStaticMemoryPlan(tflite::Model const*, tflite::SubgraphAllocations*, tflite::ScratchBufferHandle*) &rArr; tflite::AllocationInfoBuilder::InitializeAllocationInfo(int const*, tflite::SubgraphAllocations*) &rArr; tflite::AllocationInfoBuilder::ValidateSubgraph(tflite::SubGraph const*, TfLiteEvalTensor*) &rArr; MicroPrintf(char const*, ...) &rArr; (anonymous namespace)::VDebugLog(char const*, ...) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::FreeAllocationInfo()
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::MarkAllocationLifetimes(int, tflite::internal::ScratchBufferRequest*, tflite::ScratchBufferHandle*, tflite::SubgraphAllocations*)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::InitializeAllocationInfo(int const*, tflite::SubgraphAllocations*)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::GetOfflinePlannedOffsets(int const**)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::CreateAllocationInfo(int)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AlignPointerUp(unsigned char*, unsigned int)
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::CommitPlan(tflite::MicroMemoryPlanner*, unsigned char*, tflite::AllocationInfo const*, unsigned int)
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::CreatePlan(tflite::MicroMemoryPlanner*, tflite::AllocationInfo const*, unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
</UL>
<P><STRONG><a name="[2bd]"></a>tflite::MicroAllocator::GetBuiltinDataAllocator()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv))
<BR><BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer()
</UL>

<P><STRONG><a name="[c6]"></a>tflite::MicroAllocator::AllocatePersistentBuffer(unsigned int)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator24AllocatePersistentBufferEj))
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
</UL>
<P><STRONG><a name="[c0]"></a>tflite::MicroAllocator::AllocateTempTfLiteTensor(tflite::Model const*, tflite::SubgraphAllocations const*, int, int)</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = tflite::MicroAllocator::AllocateTempTfLiteTensor(tflite::Model const*, tflite::SubgraphAllocations const*, int, int) &rArr; MicroPrintf(char const*, ...) &rArr; (anonymous namespace)::VDebugLog(char const*, ...) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
</UL>
<P><STRONG><a name="[ca]"></a>tflite::MicroAllocator::AllocateTfLiteEvalTensors(tflite::Model const*, tflite::SubgraphAllocations*)</STRONG> (Thumb, 260 bytes, Stack size 48 bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = tflite::MicroAllocator::AllocateTfLiteEvalTensors(tflite::Model const*, tflite::SubgraphAllocations*) &rArr; MicroPrintf(char const*, ...) &rArr; (anonymous namespace)::VDebugLog(char const*, ...) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::internal::InitializeTfLiteEvalTensorFromFlatbuffer(tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang;, unsigned int&rang; const*, TfLiteEvalTensor*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
</UL>
<P><STRONG><a name="[c1]"></a>tflite::MicroAllocator::DeallocateTempTfLiteTensor(TfLiteTensor*)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator26DeallocateTempTfLiteTensorEP12TfLiteTensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::MicroAllocator::DeallocateTempTfLiteTensor(TfLiteTensor*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
</UL>
<P><STRONG><a name="[2af]"></a>tflite::MicroAllocator::RequestScratchBufferInArena(unsigned int, int, int*)</STRONG> (Thumb, 320 bytes, Stack size 80 bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = tflite::MicroAllocator::RequestScratchBufferInArena(unsigned int, int, int*) &rArr; MicroPrintf(char const*, ...) &rArr; (anonymous namespace)::VDebugLog(char const*, ...) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AlignPointerUp(unsigned char*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterContext::RequestScratchBufferInArena(unsigned int, int*)
</UL>

<P><STRONG><a name="[c9]"></a>tflite::MicroAllocator::AllocateNodeAndRegistrations(tflite::Model const*, tflite::SubgraphAllocations*)</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = tflite::MicroAllocator::AllocateNodeAndRegistrations(tflite::Model const*, tflite::SubgraphAllocations*) &rArr; MicroPrintf(char const*, ...) &rArr; (anonymous namespace)::VDebugLog(char const*, ...) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::NumSubgraphOperators(tflite::SubGraph const*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
</UL>
<P><STRONG><a name="[cf]"></a>tflite::MicroAllocator::AllocateScratchBufferHandles(tflite::ScratchBufferHandle**, unsigned int)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tflite::MicroAllocator::AllocateScratchBufferHandles(tflite::ScratchBufferHandle**, unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
</UL>
<P><STRONG><a name="[2b1]"></a>tflite::MicroAllocator::FinishPrepareNodeAllocations(int)</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::MicroAllocator::FinishPrepareNodeAllocations(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AlignPointerUp(unsigned char*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::PrepareSubgraphs()
</UL>

<P><STRONG><a name="[bf]"></a>tflite::MicroAllocator::AllocatePersistentTfLiteTensor(tflite::Model const*, tflite::SubgraphAllocations const*, int, int)</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = tflite::MicroAllocator::AllocatePersistentTfLiteTensor(tflite::Model const*, tflite::SubgraphAllocations const*, int, int) &rArr; MicroPrintf(char const*, ...) &rArr; (anonymous namespace)::VDebugLog(char const*, ...) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
</UL>
<P><STRONG><a name="[cd]"></a>tflite::MicroAllocator::PopulateTfLiteTensorFromFlatbuffer(tflite::Model const*, TfLiteTensor*, int, int, bool)</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = tflite::MicroAllocator::PopulateTfLiteTensorFromFlatbuffer(tflite::Model const*, TfLiteTensor*, int, int, bool) &rArr; tflite::internal::InitializeTfLiteTensorFromFlatbuffer(tflite::IPersistentBufferAllocator*, tflite::INonPersistentBufferAllocator*, bool, tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang;, unsigned int&rang; const*, TfLiteTensor*) &rArr; MicroPrintf(char const*, ...) &rArr; (anonymous namespace)::VDebugLog(char const*, ...) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::internal::InitializeTfLiteTensorFromFlatbuffer(tflite::IPersistentBufferAllocator*, tflite::INonPersistentBufferAllocator*, bool, tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang;, unsigned int&rang; const*, TfLiteTensor*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
</UL>
<P><STRONG><a name="[cc]"></a>tflite::MicroAllocator::AllocatePersistentTfLiteTensorInternal()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator38AllocatePersistentTfLiteTensorInternalEv))
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
</UL>
<P><STRONG><a name="[233]"></a>tflite::MicroAllocator::Create(unsigned char*, unsigned int, tflite::MemoryPlannerType)</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator6CreateEPhjNS_17MemoryPlannerTypeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = tflite::MicroAllocator::Create(unsigned char*, unsigned int, tflite::MemoryPlannerType) &rArr; tflite::SingleArenaBufferAllocator::Create(unsigned char*, unsigned int) &rArr; MicroPrintf(char const*, ...) &rArr; (anonymous namespace)::VDebugLog(char const*, ...) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GreedyMemoryPlanner::GreedyMemoryPlanner()
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::LinearMemoryPlanner::LinearMemoryPlanner()
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SingleArenaBufferAllocator::Create(unsigned char*, unsigned int)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AlignPointerUp(unsigned char*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::Model::Init(unsigned char*, unsigned int, unsigned char const*, unsigned int, tflite::MicroAllocator*)
</UL>

<P><STRONG><a name="[c8]"></a>tflite::MicroAllocator::~MicroAllocator__deallocating()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocatorD0Ev))
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
</UL>
<P><STRONG><a name="[330]"></a>tflite::MicroAllocator::~MicroAllocator()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocatorD2Ev), UNUSED)

<P><STRONG><a name="[c7]"></a>tflite::MicroAllocator::~MicroAllocator__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocatorD2Ev))
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
</UL>
<P><STRONG><a name="[9b]"></a>tflite::ParseTranspose(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flatbuffer_conversions.o(.text._ZN6tflite14ParseTransposeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> yoloxnanonu.o(.text._ZN6tflite22MicroMutableOpResolverILj2EE12AddTransposeEv)
</UL>
<P><STRONG><a name="[23d]"></a>tflite::Register_ETHOSU()</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ethosu.o(.text._ZN6tflite15Register_ETHOSUEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = tflite::Register_ETHOSU() &rArr; __cxa_guard_acquire &rArr; abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*), void (*)(TfLiteContext*, void*))
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroMutableOpResolver&lang;2u&rang;::AddEthosU()
</UL>

<P><STRONG><a name="[2cf]"></a>tflite::AlignPointerDown(unsigned char*, unsigned int)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, memory_helpers.o(.text._ZN6tflite16AlignPointerDownEPhj))
<BR><BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SingleArenaBufferAllocator::Create(unsigned char*, unsigned int)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SingleArenaBufferAllocator::GetAvailableMemory(unsigned int) const
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non-virtual thunk to tflite::SingleArenaBufferAllocator::AllocatePersistentBuffer(unsigned int, unsigned int)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SingleArenaBufferAllocator::AllocatePersistentBuffer(unsigned int, unsigned int)
</UL>

<P><STRONG><a name="[221]"></a>tflite::GetString_ETHOSU()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ethosu.o(.text._ZN6tflite16GetString_ETHOSUEv))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroMutableOpResolver&lang;2u&rang;::AddEthosU()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::YoloXnanoNu::EnlistOperations()
</UL>

<P><STRONG><a name="[235]"></a>tflite::MicroInterpreter::AllocateTensors()</STRONG> (Thumb, 636 bytes, Stack size 40 bytes, micro_interpreter.o(.text._ZN6tflite16MicroInterpreter15AllocateTensorsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = tflite::MicroInterpreter::AllocateTensors() &rArr; tflite::MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer() &rArr; tflite::GetRegistrationFromOpCode(tflite::OperatorCode const*, tflite::MicroOpResolver const&, TFLMRegistration const**) &rArr; MicroPrintf(char const*, ...) &rArr; (anonymous namespace)::VDebugLog(char const*, ...) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::Reset()
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterContext::SetScratchBufferHandles(tflite::ScratchBufferHandle*)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::PrepareSubgraphs()
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::InitSubgraphs()
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::SetSubgraphAllocations(tflite::SubgraphAllocations*)
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer()
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterContext::SetInterpreterState(tflite::MicroInterpreterContext::InterpreterState)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::FinishModelAllocation(tflite::Model const*, tflite::SubgraphAllocations*, tflite::ScratchBufferHandle**)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::StartModelAllocation(tflite::Model const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::Model::Init(unsigned char*, unsigned int, unsigned char const*, unsigned int, tflite::MicroAllocator*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::Invoke()
</UL>

<P><STRONG><a name="[2b9]"></a>tflite::MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer()</STRONG> (Thumb, 868 bytes, Stack size 80 bytes, micro_interpreter.o(.text._ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = tflite::MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer() &rArr; tflite::GetRegistrationFromOpCode(tflite::OperatorCode const*, tflite::MicroOpResolver const&, TFLMRegistration const**) &rArr; MicroPrintf(char const*, ...) &rArr; (anonymous namespace)::VDebugLog(char const*, ...) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CallBuiltinParseFunction(TfLiteStatus (*)(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**), tflite::Operator const*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::NumSubgraphs()
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::GetBuiltinDataAllocator()
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::FlatBufferVectorToTfLiteTypeArray(flatbuffers::Vector&lang;int, unsigned int&rang; const*)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::NumSubgraphOperators(tflite::SubGraph const*)
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GetBuiltinCode(tflite::OperatorCode const*)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GetRegistrationFromOpCode(tflite::OperatorCode const*, tflite::MicroOpResolver const&, TFLMRegistration const**)
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::AllocateTensors()
</UL>

<P><STRONG><a name="[2bc]"></a>tflite::MicroInterpreter::Reset()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, micro_interpreter.o(.text._ZN6tflite16MicroInterpreter5ResetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = tflite::MicroInterpreter::Reset() &rArr; tflite::MicroInterpreterGraph::ResetVariableTensors() &rArr; tflite::MicroResourceVariables::ResetAll() &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::ResetVariableTensors()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::ResetSubgraphs()
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::AllocateTensors()
</UL>

<P><STRONG><a name="[237]"></a>tflite::MicroInterpreter::input(unsigned int)</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, micro_interpreter.o(.text._ZN6tflite16MicroInterpreter5inputEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = tflite::MicroInterpreter::input(unsigned int) &rArr; MicroPrintf(char const*, ...) &rArr; (anonymous namespace)::VDebugLog(char const*, ...) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::Model::Init(unsigned char*, unsigned int, unsigned char const*, unsigned int, tflite::MicroAllocator*)
</UL>

<P><STRONG><a name="[22c]"></a>tflite::MicroInterpreter::Invoke()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, micro_interpreter.o(.text._ZN6tflite16MicroInterpreter6InvokeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = tflite::MicroInterpreter::Invoke() &rArr; tflite::MicroInterpreter::AllocateTensors() &rArr; tflite::MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer() &rArr; tflite::GetRegistrationFromOpCode(tflite::OperatorCode const*, tflite::MicroOpResolver const&, TFLMRegistration const**) &rArr; MicroPrintf(char const*, ...) &rArr; (anonymous namespace)::VDebugLog(char const*, ...) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::AllocateTensors()
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::InvokeSubgraph(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::Model::RunInference()
</UL>

<P><STRONG><a name="[238]"></a>tflite::MicroInterpreter::output(unsigned int)</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, micro_interpreter.o(.text._ZN6tflite16MicroInterpreter6outputEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = tflite::MicroInterpreter::output(unsigned int) &rArr; MicroPrintf(char const*, ...) &rArr; (anonymous namespace)::VDebugLog(char const*, ...) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::Model::Init(unsigned char*, unsigned int, unsigned char const*, unsigned int, tflite::MicroAllocator*)
</UL>

<P><STRONG><a name="[234]"></a>tflite::MicroInterpreter::MicroInterpreter(tflite::Model const*, tflite::MicroOpResolver const&, tflite::MicroAllocator*, tflite::MicroResourceVariables*, tflite::MicroProfilerInterface*)</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, micro_interpreter.o(.text._ZN6tflite16MicroInterpreterC2EPKNS_5ModelERKNS_15MicroOpResolverEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesEPNS_22MicroProfilerInterfaceE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tflite::MicroInterpreter::MicroInterpreter(tflite::Model const*, tflite::MicroOpResolver const&, tflite::MicroAllocator*, tflite::MicroResourceVariables*, tflite::MicroProfilerInterface*) &rArr; tflite::MicroInterpreterGraph::MicroInterpreterGraph(TfLiteContext*, tflite::Model const*, tflite::MicroAllocator*, tflite::MicroResourceVariables*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterContext::SetInterpreterState(tflite::MicroInterpreterContext::InterpreterState)
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterContext::MicroInterpreterContext(tflite::MicroAllocator*, tflite::Model const*, tflite::MicroInterpreterGraph*)
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::MicroInterpreterGraph(TfLiteContext*, tflite::Model const*, tflite::MicroAllocator*, tflite::MicroResourceVariables*)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::Model::Init(unsigned char*, unsigned int, unsigned char const*, unsigned int, tflite::MicroAllocator*)
</UL>

<P><STRONG><a name="[331]"></a>tflite::MicroInterpreter::MicroInterpreter__sub_object(tflite::Model const*, tflite::MicroOpResolver const&, tflite::MicroAllocator*, tflite::MicroResourceVariables*, tflite::MicroProfilerInterface*)</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, micro_interpreter.o(.text._ZN6tflite16MicroInterpreterC2EPKNS_5ModelERKNS_15MicroOpResolverEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesEPNS_22MicroProfilerInterfaceE), UNUSED)

<P><STRONG><a name="[20e]"></a>tflite::MicroInterpreter::~MicroInterpreter()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, micro_interpreter.o(.text._ZN6tflite16MicroInterpreterD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tflite::MicroInterpreter::~MicroInterpreter() &rArr; tflite::MicroInterpreterGraph::FreeSubgraphs()
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::~MicroInterpreterGraph()
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterContext::~MicroInterpreterContext()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::FreeSubgraphs()
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::YoloXnanoNu::~YoloXnanoNu__deallocating()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::YoloXnanoNu::~YoloXnanoNu__sub_object()
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::Model::Init(unsigned char*, unsigned int, unsigned char const*, unsigned int, tflite::MicroAllocator*)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task(void*)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::Model::~Model__sub_object()
</UL>

<P><STRONG><a name="[332]"></a>tflite::MicroInterpreter::~MicroInterpreter__sub_object()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, micro_interpreter.o(.text._ZN6tflite16MicroInterpreterD2Ev), UNUSED)

<P><STRONG><a name="[2c5]"></a>tflite::ConvertTensorType(tflite::TensorType, TfLiteType*)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, flatbuffer_conversions_bridge.o(.text._ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteType))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::ConvertTensorType(tflite::TensorType, TfLiteType*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GetMicroErrorReporter()
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::internal::InitializeTfLiteEvalTensorFromFlatbuffer(tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang;, unsigned int&rang; const*, TfLiteEvalTensor*)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::BytesRequiredForTensor(tflite::Tensor const&, unsigned int*, unsigned int*)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::internal::InitializeTfLiteTensorFromFlatbuffer(tflite::IPersistentBufferAllocator*, tflite::INonPersistentBufferAllocator*, bool, tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang;, unsigned int&rang; const*, TfLiteTensor*)
</UL>

<P><STRONG><a name="[2c7]"></a>tflite::ConvertTensorType(tflite::TensorType, TfLiteType*, tflite::ErrorReporter*)</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, flatbuffer_conversions.o(.text._ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ErrorReporter::Report(char const*, ...)
</UL>

<P><STRONG><a name="[d2]"></a>tflite::MicroErrorReporter::Report(char const*, std::__va_list)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, micro_error_reporter.o(.text._ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = tflite::MicroErrorReporter::Report(char const*, std::__va_list) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; (anonymous namespace)::VDebugLog(char const*, ...) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMicroPrintf(char const*, std::__va_list)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_error_reporter.o(.rodata._ZTVN6tflite18MicroErrorReporterE)
</UL>
<P><STRONG><a name="[d1]"></a>tflite::MicroErrorReporter::~MicroErrorReporter__deallocating()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, micro_error_reporter.o(.text._ZN6tflite18MicroErrorReporterD0Ev))
<BR>[Address Reference Count : 1]<UL><LI> micro_error_reporter.o(.rodata._ZTVN6tflite18MicroErrorReporterE)
</UL>
<P><STRONG><a name="[e6]"></a>tflite::MicroMemoryPlanner::PrintMemoryPlan()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, linear_memory_planner.o(.text._ZN6tflite18MicroMemoryPlanner15PrintMemoryPlanEv))
<BR>[Address Reference Count : 1]<UL><LI> linear_memory_planner.o(.rodata._ZTVN6tflite19LinearMemoryPlannerE)
</UL>
<P><STRONG><a name="[e4]"></a>tflite::MicroMemoryPlanner::Init(unsigned char*, int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, linear_memory_planner.o(.text._ZN6tflite18MicroMemoryPlanner4InitEPhi))
<BR>[Address Reference Count : 1]<UL><LI> linear_memory_planner.o(.rodata._ZTVN6tflite19LinearMemoryPlannerE)
</UL>
<P><STRONG><a name="[e0]"></a>tflite::MicroMemoryPlanner::AddBuffer(int, int, int, int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, linear_memory_planner.o(.text._ZN6tflite18MicroMemoryPlanner9AddBufferEiiii))
<BR>[Address Reference Count : 1]<UL><LI> linear_memory_planner.o(.rodata._ZTVN6tflite19LinearMemoryPlannerE)
</UL>
<P><STRONG><a name="[23b]"></a>tflite::Register_TRANSPOSE()</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, transpose.o(.text._ZN6tflite18Register_TRANSPOSEEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tflite::Register_TRANSPOSE() &rArr; tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroMutableOpResolver&lang;2u&rang;::AddTranspose()
</UL>

<P><STRONG><a name="[d8]"></a>tflite::GreedyMemoryPlanner::GetBufferCount()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv))
<BR>[Address Reference Count : 1]<UL><LI> greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
</UL>
<P><STRONG><a name="[dc]"></a>tflite::GreedyMemoryPlanner::PrintMemoryPlan()</STRONG> (Thumb, 656 bytes, Stack size 184 bytes, greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = tflite::GreedyMemoryPlanner::PrintMemoryPlan() &rArr; MicroPrintf(char const*, ...) &rArr; (anonymous namespace)::VDebugLog(char const*, ...) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GreedyMemoryPlanner::CalculateOffsetsIfNeeded()
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
</UL>
<P><STRONG><a name="[d9]"></a>tflite::GreedyMemoryPlanner::GetOffsetForBuffer(int, int*)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEiPi))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = tflite::GreedyMemoryPlanner::GetOffsetForBuffer(int, int*) &rArr; MicroPrintf(char const*, ...) &rArr; (anonymous namespace)::VDebugLog(char const*, ...) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GreedyMemoryPlanner::CalculateOffsetsIfNeeded()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
</UL>
<P><STRONG><a name="[d7]"></a>tflite::GreedyMemoryPlanner::GetMaximumMemorySize()</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = tflite::GreedyMemoryPlanner::GetMaximumMemorySize() &rArr; tflite::GreedyMemoryPlanner::CalculateOffsetsIfNeeded()
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GreedyMemoryPlanner::CalculateOffsetsIfNeeded()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
</UL>
<P><STRONG><a name="[2c9]"></a>tflite::GreedyMemoryPlanner::CalculateOffsetsIfNeeded()</STRONG> (Thumb, 654 bytes, Stack size 52 bytes, greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = tflite::GreedyMemoryPlanner::CalculateOffsetsIfNeeded()
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GreedyMemoryPlanner::GetOffsetForBuffer(int, int*)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GreedyMemoryPlanner::PrintMemoryPlan()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GreedyMemoryPlanner::GetMaximumMemorySize()
</UL>

<P><STRONG><a name="[da]"></a>tflite::GreedyMemoryPlanner::Init(unsigned char*, int)</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlanner4InitEPhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tflite::GreedyMemoryPlanner::Init(unsigned char*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
</UL>
<P><STRONG><a name="[d5]"></a>tflite::GreedyMemoryPlanner::AddBuffer(int, int, int)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlanner9AddBufferEiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = tflite::GreedyMemoryPlanner::AddBuffer(int, int, int) &rArr; MicroPrintf(char const*, ...) &rArr; (anonymous namespace)::VDebugLog(char const*, ...) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
</UL>
<P><STRONG><a name="[d6]"></a>tflite::GreedyMemoryPlanner::AddBuffer(int, int, int, int)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlanner9AddBufferEiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::GreedyMemoryPlanner::AddBuffer(int, int, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
</UL>
<P><STRONG><a name="[2b5]"></a>tflite::GreedyMemoryPlanner::GreedyMemoryPlanner()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlannerC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::Create(unsigned char*, unsigned int, tflite::MemoryPlannerType)
</UL>

<P><STRONG><a name="[333]"></a>tflite::GreedyMemoryPlanner::GreedyMemoryPlanner__sub_object()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlannerC2Ev), UNUSED)

<P><STRONG><a name="[d4]"></a>tflite::GreedyMemoryPlanner::~GreedyMemoryPlanner__deallocating()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlannerD0Ev))
<BR>[Address Reference Count : 1]<UL><LI> greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
</UL>
<P><STRONG><a name="[334]"></a>tflite::GreedyMemoryPlanner::~GreedyMemoryPlanner()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlannerD2Ev), UNUSED)

<P><STRONG><a name="[d3]"></a>tflite::GreedyMemoryPlanner::~GreedyMemoryPlanner__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlannerD2Ev))
<BR>[Address Reference Count : 1]<UL><LI> greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
</UL>
<P><STRONG><a name="[e2]"></a>tflite::LinearMemoryPlanner::GetBufferCount()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, linear_memory_planner.o(.text._ZN6tflite19LinearMemoryPlanner14GetBufferCountEv))
<BR>[Address Reference Count : 1]<UL><LI> linear_memory_planner.o(.rodata._ZTVN6tflite19LinearMemoryPlannerE)
</UL>
<P><STRONG><a name="[e3]"></a>tflite::LinearMemoryPlanner::GetOffsetForBuffer(int, int*)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, linear_memory_planner.o(.text._ZN6tflite19LinearMemoryPlanner18GetOffsetForBufferEiPi))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = tflite::LinearMemoryPlanner::GetOffsetForBuffer(int, int*) &rArr; MicroPrintf(char const*, ...) &rArr; (anonymous namespace)::VDebugLog(char const*, ...) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linear_memory_planner.o(.rodata._ZTVN6tflite19LinearMemoryPlannerE)
</UL>
<P><STRONG><a name="[e1]"></a>tflite::LinearMemoryPlanner::GetMaximumMemorySize()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, linear_memory_planner.o(.text._ZN6tflite19LinearMemoryPlanner20GetMaximumMemorySizeEv))
<BR>[Address Reference Count : 1]<UL><LI> linear_memory_planner.o(.rodata._ZTVN6tflite19LinearMemoryPlannerE)
</UL>
<P><STRONG><a name="[df]"></a>tflite::LinearMemoryPlanner::AddBuffer(int, int, int)</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, linear_memory_planner.o(.text._ZN6tflite19LinearMemoryPlanner9AddBufferEiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = tflite::LinearMemoryPlanner::AddBuffer(int, int, int) &rArr; MicroPrintf(char const*, ...) &rArr; (anonymous namespace)::VDebugLog(char const*, ...) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linear_memory_planner.o(.rodata._ZTVN6tflite19LinearMemoryPlannerE)
</UL>
<P><STRONG><a name="[2b4]"></a>tflite::LinearMemoryPlanner::LinearMemoryPlanner()</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, linear_memory_planner.o(.text._ZN6tflite19LinearMemoryPlannerC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::Create(unsigned char*, unsigned int, tflite::MemoryPlannerType)
</UL>

<P><STRONG><a name="[335]"></a>tflite::LinearMemoryPlanner::LinearMemoryPlanner__sub_object()</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, linear_memory_planner.o(.text._ZN6tflite19LinearMemoryPlannerC2Ev), UNUSED)

<P><STRONG><a name="[de]"></a>tflite::LinearMemoryPlanner::~LinearMemoryPlanner__deallocating()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, linear_memory_planner.o(.text._ZN6tflite19LinearMemoryPlannerD0Ev))
<BR>[Address Reference Count : 1]<UL><LI> linear_memory_planner.o(.rodata._ZTVN6tflite19LinearMemoryPlannerE)
</UL>
<P><STRONG><a name="[336]"></a>tflite::LinearMemoryPlanner::~LinearMemoryPlanner()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, linear_memory_planner.o(.text._ZN6tflite19LinearMemoryPlannerD2Ev), UNUSED)

<P><STRONG><a name="[dd]"></a>tflite::LinearMemoryPlanner::~LinearMemoryPlanner__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, linear_memory_planner.o(.text._ZN6tflite19LinearMemoryPlannerD2Ev))
<BR>[Address Reference Count : 1]<UL><LI> linear_memory_planner.o(.rodata._ZTVN6tflite19LinearMemoryPlannerE)
</UL>
<P><STRONG><a name="[b1]"></a>tflite::BuiltinDataAllocator::~BuiltinDataAllocator__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, micro_allocator.o(.text._ZN6tflite20BuiltinDataAllocatorD2Ev))
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.text._ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE)
</UL>
<P><STRONG><a name="[231]"></a>tflite::NumSubgraphOperators(tflite::Model const*, int)</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, flatbuffer_utils.o(.text._ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::InvokeSubgraph(int)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::ResetSubgraphs()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::PrepareSubgraphs()
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::InitSubgraphs()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::FreeSubgraphs()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::Model::LogInterpreterInfo()
</UL>

<P><STRONG><a name="[2b0]"></a>tflite::NumSubgraphOperators(tflite::SubGraph const*)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, flatbuffer_utils.o(.text._ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE))
<BR><BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer()
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::MarkAllocationLifetimes(int, tflite::internal::ScratchBufferRequest*, tflite::ScratchBufferHandle*, tflite::SubgraphAllocations*)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::AllocateNodeAndRegistrations(tflite::Model const*, tflite::SubgraphAllocations*)
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::ValidateSubgraph(tflite::SubGraph const*, TfLiteEvalTensor*)
</UL>

<P><STRONG><a name="[2ca]"></a>tflite::AllocationInfoBuilder::ValidateSubgraph(tflite::SubGraph const*, TfLiteEvalTensor*)</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, micro_allocation_info.o(.text._ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = tflite::AllocationInfoBuilder::ValidateSubgraph(tflite::SubGraph const*, TfLiteEvalTensor*) &rArr; MicroPrintf(char const*, ...) &rArr; (anonymous namespace)::VDebugLog(char const*, ...) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::TfLiteEvalTensorByteLength(TfLiteEvalTensor const*, unsigned int*)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::NumSubgraphOperators(tflite::SubGraph const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::InitializeAllocationInfo(int const*, tflite::SubgraphAllocations*)
</UL>

<P><STRONG><a name="[2ad]"></a>tflite::AllocationInfoBuilder::FreeAllocationInfo()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, micro_allocation_info.o(.text._ZN6tflite21AllocationInfoBuilder18FreeAllocationInfoEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tflite::AllocationInfoBuilder::FreeAllocationInfo()
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::CommitStaticMemoryPlan(tflite::Model const*, tflite::SubgraphAllocations*, tflite::ScratchBufferHandle*)
</UL>

<P><STRONG><a name="[2a7]"></a>tflite::AllocationInfoBuilder::CreateAllocationInfo(int)</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, micro_allocation_info.o(.text._ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = tflite::AllocationInfoBuilder::CreateAllocationInfo(int) &rArr; MicroPrintf(char const*, ...) &rArr; (anonymous namespace)::VDebugLog(char const*, ...) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::CommitStaticMemoryPlan(tflite::Model const*, tflite::SubgraphAllocations*, tflite::ScratchBufferHandle*)
</UL>

<P><STRONG><a name="[2ab]"></a>tflite::AllocationInfoBuilder::MarkAllocationLifetimes(int, tflite::internal::ScratchBufferRequest*, tflite::ScratchBufferHandle*, tflite::SubgraphAllocations*)</STRONG> (Thumb, 1152 bytes, Stack size 96 bytes, micro_allocation_info.o(.text._ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = tflite::AllocationInfoBuilder::MarkAllocationLifetimes(int, tflite::internal::ScratchBufferRequest*, tflite::ScratchBufferHandle*, tflite::SubgraphAllocations*) &rArr; tflite::AllocationInfoBuilder::MarkSubgraphLifetimesIfNecessary(tflite::Operator const*, tflite::internal::ScratchBufferRequest*, tflite::ScratchBufferHandle*, tflite::SubgraphAllocations*) &rArr;  tflite::AllocationInfoBuilder::MarkAllocationLifetimes(int, tflite::internal::ScratchBufferRequest*, tflite::ScratchBufferHandle*, tflite::SubgraphAllocations*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::NumSubgraphOperators(tflite::SubGraph const*)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::MarkSubgraphLifetimesIfNecessary(tflite::Operator const*, tflite::internal::ScratchBufferRequest*, tflite::ScratchBufferHandle*, tflite::SubgraphAllocations*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::CommitStaticMemoryPlan(tflite::Model const*, tflite::SubgraphAllocations*, tflite::ScratchBufferHandle*)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::MarkSubgraphLifetimesIfNecessary(tflite::Operator const*, tflite::internal::ScratchBufferRequest*, tflite::ScratchBufferHandle*, tflite::SubgraphAllocations*)
</UL>

<P><STRONG><a name="[2a8]"></a>tflite::AllocationInfoBuilder::GetOfflinePlannedOffsets(int const**)</STRONG> (Thumb, 300 bytes, Stack size 56 bytes, micro_allocation_info.o(.text._ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKi))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = tflite::AllocationInfoBuilder::GetOfflinePlannedOffsets(int const**) &rArr; MicroPrintf(char const*, ...) &rArr; (anonymous namespace)::VDebugLog(char const*, ...) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::CommitStaticMemoryPlan(tflite::Model const*, tflite::SubgraphAllocations*, tflite::ScratchBufferHandle*)
</UL>

<P><STRONG><a name="[2a9]"></a>tflite::AllocationInfoBuilder::InitializeAllocationInfo(int const*, tflite::SubgraphAllocations*)</STRONG> (Thumb, 586 bytes, Stack size 56 bytes, micro_allocation_info.o(.text._ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKiPNS_19SubgraphAllocationsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = tflite::AllocationInfoBuilder::InitializeAllocationInfo(int const*, tflite::SubgraphAllocations*) &rArr; tflite::AllocationInfoBuilder::ValidateSubgraph(tflite::SubGraph const*, TfLiteEvalTensor*) &rArr; MicroPrintf(char const*, ...) &rArr; (anonymous namespace)::VDebugLog(char const*, ...) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::TfLiteEvalTensorByteLength(TfLiteEvalTensor const*, unsigned int*)
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::ValidateSubgraph(tflite::SubGraph const*, TfLiteEvalTensor*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::CommitStaticMemoryPlan(tflite::Model const*, tflite::SubgraphAllocations*, tflite::ScratchBufferHandle*)
</UL>

<P><STRONG><a name="[2cb]"></a>tflite::AllocationInfoBuilder::MarkSubgraphLifetimesIfNecessary(tflite::Operator const*, tflite::internal::ScratchBufferRequest*, tflite::ScratchBufferHandle*, tflite::SubgraphAllocations*)</STRONG> (Thumb, 526 bytes, Stack size 32 bytes, micro_allocation_info.o(.text._ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = tflite::AllocationInfoBuilder::MarkSubgraphLifetimesIfNecessary(tflite::Operator const*, tflite::internal::ScratchBufferRequest*, tflite::ScratchBufferHandle*, tflite::SubgraphAllocations*) &rArr;  tflite::AllocationInfoBuilder::MarkAllocationLifetimes(int, tflite::internal::ScratchBufferRequest*, tflite::ScratchBufferHandle*, tflite::SubgraphAllocations*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::MarkAllocationLifetimes(int, tflite::internal::ScratchBufferRequest*, tflite::ScratchBufferHandle*, tflite::SubgraphAllocations*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::MarkAllocationLifetimes(int, tflite::internal::ScratchBufferRequest*, tflite::ScratchBufferHandle*, tflite::SubgraphAllocations*)
</UL>

<P><STRONG><a name="[2c6]"></a>tflite::GetMicroErrorReporter()</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, micro_error_reporter.o(.text._ZN6tflite21GetMicroErrorReporterEv))
<BR><BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CallBuiltinParseFunction(TfLiteStatus (*)(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**), tflite::Operator const*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ConvertTensorType(tflite::TensorType, TfLiteType*)
</UL>

<P><STRONG><a name="[b6]"></a>tflite::MicroContextGetTensor(TfLiteContext const*, int)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, micro_interpreter.o(.text._ZN6tflite21MicroContextGetTensorEPK13TfLiteContexti))
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter.o(.text._ZN6tflite16MicroInterpreterC2EPKNS_5ModelERKNS_15MicroOpResolverEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesEPNS_22MicroProfilerInterfaceE)
</UL>
<P><STRONG><a name="[ee]"></a>tflite::MicroInterpreterGraph::NumSubgraphs()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraph12NumSubgraphsEv))
<BR><BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
</UL>
<P><STRONG><a name="[f3]"></a>tflite::MicroInterpreterGraph::FreeSubgraphs()</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraph13FreeSubgraphsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tflite::MicroInterpreterGraph::FreeSubgraphs()
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::NumSubgraphOperators(tflite::Model const*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::~MicroInterpreter()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
</UL>
<P><STRONG><a name="[f0]"></a>tflite::MicroInterpreterGraph::InitSubgraphs()</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraph13InitSubgraphsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tflite::MicroInterpreterGraph::InitSubgraphs()
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::NumSubgraphOperators(tflite::Model const*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::AllocateTensors()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
</UL>
<P><STRONG><a name="[e9]"></a>tflite::MicroInterpreterGraph::InvokeSubgraph(int)</STRONG> (Thumb, 300 bytes, Stack size 48 bytes, micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = tflite::MicroInterpreterGraph::InvokeSubgraph(int) &rArr; MicroPrintf(char const*, ...) &rArr; (anonymous namespace)::VDebugLog(char const*, ...) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::NumSubgraphOperators(tflite::Model const*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::Invoke()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
</UL>
<P><STRONG><a name="[f2]"></a>tflite::MicroInterpreterGraph::ResetSubgraphs()</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraph14ResetSubgraphsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tflite::MicroInterpreterGraph::ResetSubgraphs()
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::NumSubgraphOperators(tflite::Model const*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::Reset()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
</UL>
<P><STRONG><a name="[eb]"></a>tflite::MicroInterpreterGraph::GetSubgraphInput(int, int)</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraph16GetSubgraphInputEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tflite::MicroInterpreterGraph::GetSubgraphInput(int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
</UL>
<P><STRONG><a name="[f1]"></a>tflite::MicroInterpreterGraph::PrepareSubgraphs()</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraph16PrepareSubgraphsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = tflite::MicroInterpreterGraph::PrepareSubgraphs() &rArr; MicroPrintf(char const*, ...) &rArr; (anonymous namespace)::VDebugLog(char const*, ...) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::FinishPrepareNodeAllocations(int)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::NumSubgraphOperators(tflite::Model const*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::AllocateTensors()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
</UL>
<P><STRONG><a name="[ed]"></a>tflite::MicroInterpreterGraph::GetSubgraphOutput(int, int)</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraph17GetSubgraphOutputEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tflite::MicroInterpreterGraph::GetSubgraphOutput(int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
</UL>
<P><STRONG><a name="[ea]"></a>tflite::MicroInterpreterGraph::NumSubgraphInputs(int)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraph17NumSubgraphInputsEi))
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
</UL>
<P><STRONG><a name="[ec]"></a>tflite::MicroInterpreterGraph::NumSubgraphOutputs(int)</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraph18NumSubgraphOutputsEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tflite::MicroInterpreterGraph::NumSubgraphOutputs(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
</UL>
<P><STRONG><a name="[ef]"></a>tflite::MicroInterpreterGraph::GetResourceVariables()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraph20GetResourceVariablesEv))
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
</UL>
<P><STRONG><a name="[f4]"></a>tflite::MicroInterpreterGraph::ResetVariableTensors()</STRONG> (Thumb, 324 bytes, Stack size 48 bytes, micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = tflite::MicroInterpreterGraph::ResetVariableTensors() &rArr; tflite::MicroResourceVariables::ResetAll() &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::TfLiteEvalTensorByteLength(TfLiteEvalTensor const*, unsigned int*)
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroResourceVariables::ResetAll()
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::Reset()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
</UL>
<P><STRONG><a name="[2b8]"></a>tflite::MicroInterpreterGraph::SetSubgraphAllocations(tflite::SubgraphAllocations*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::AllocateTensors()
</UL>

<P><STRONG><a name="[2c1]"></a>tflite::MicroInterpreterGraph::MicroInterpreterGraph(TfLiteContext*, tflite::Model const*, tflite::MicroAllocator*, tflite::MicroResourceVariables*)</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraphC2EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tflite::MicroInterpreterGraph::MicroInterpreterGraph(TfLiteContext*, tflite::Model const*, tflite::MicroAllocator*, tflite::MicroResourceVariables*)
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::MicroInterpreter(tflite::Model const*, tflite::MicroOpResolver const&, tflite::MicroAllocator*, tflite::MicroResourceVariables*, tflite::MicroProfilerInterface*)
</UL>

<P><STRONG><a name="[337]"></a>tflite::MicroInterpreterGraph::MicroInterpreterGraph__sub_object(TfLiteContext*, tflite::Model const*, tflite::MicroAllocator*, tflite::MicroResourceVariables*)</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraphC2EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesE), UNUSED)

<P><STRONG><a name="[e8]"></a>tflite::MicroInterpreterGraph::~MicroInterpreterGraph__deallocating()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraphD0Ev))
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
</UL>
<P><STRONG><a name="[2c4]"></a>tflite::MicroInterpreterGraph::~MicroInterpreterGraph()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraphD2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::~MicroInterpreter()
</UL>

<P><STRONG><a name="[e7]"></a>tflite::MicroInterpreterGraph::~MicroInterpreterGraph__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraphD2Ev))
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
</UL>
<P><STRONG><a name="[2ce]"></a>tflite::BytesRequiredForTensor(tflite::Tensor const&, unsigned int*, unsigned int*)</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, memory_helpers.o(.text._ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tflite::BytesRequiredForTensor(tflite::Tensor const&, unsigned int*, unsigned int*) &rArr; tflite::ConvertTensorType(tflite::TensorType, TfLiteType*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ConvertTensorType(tflite::TensorType, TfLiteType*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::internal::InitializeTfLiteTensorFromFlatbuffer(tflite::IPersistentBufferAllocator*, tflite::INonPersistentBufferAllocator*, bool, tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang;, unsigned int&rang; const*, TfLiteTensor*)
</UL>

<P><STRONG><a name="[2cd]"></a>tflite::MicroResourceVariables::ResetAll()</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, micro_resource_variable.o(.text._ZN6tflite22MicroResourceVariables8ResetAllEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tflite::MicroResourceVariables::ResetAll() &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::ResetVariableTensors()
</UL>

<P><STRONG><a name="[fe]"></a>tflite::MicroInterpreterContext::GetEvalTensor(int)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContext13GetEvalTensorEi))
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter_context.o(.rodata._ZTVN6tflite23MicroInterpreterContextE)
</UL>
<P><STRONG><a name="[f9]"></a>tflite::MicroInterpreterContext::GetScratchBuffer(int)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContext16GetScratchBufferEi))
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter_context.o(.rodata._ZTVN6tflite23MicroInterpreterContextE)
</UL>
<P><STRONG><a name="[100]"></a>tflite::MicroInterpreterContext::external_context()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContext16external_contextEv))
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter_context.o(.rodata._ZTVN6tflite23MicroInterpreterContextE)
</UL>
<P><STRONG><a name="[fc]"></a>tflite::MicroInterpreterContext::AllocateTempBuffer(unsigned int, unsigned int)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContext18AllocateTempBufferEjj))
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter_context.o(.rodata._ZTVN6tflite23MicroInterpreterContextE)
</UL>
<P><STRONG><a name="[2ba]"></a>tflite::MicroInterpreterContext::SetInterpreterState(tflite::MicroInterpreterContext::InterpreterState)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContext19SetInterpreterStateENS0_16InterpreterStateE))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::AllocateTensors()
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::MicroInterpreter(tflite::Model const*, tflite::MicroOpResolver const&, tflite::MicroAllocator*, tflite::MicroResourceVariables*, tflite::MicroProfilerInterface*)
</UL>

<P><STRONG><a name="[fd]"></a>tflite::MicroInterpreterContext::DeallocateTempBuffer(unsigned char*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContext20DeallocateTempBufferEPh))
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter_context.o(.rodata._ZTVN6tflite23MicroInterpreterContextE)
</UL>
<P><STRONG><a name="[ff]"></a>tflite::MicroInterpreterContext::set_external_context(void*)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContext20set_external_contextEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = tflite::MicroInterpreterContext::set_external_context(void*) &rArr; MicroPrintf(char const*, ...) &rArr; (anonymous namespace)::VDebugLog(char const*, ...) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter_context.o(.rodata._ZTVN6tflite23MicroInterpreterContextE)
</UL>
<P><STRONG><a name="[2bb]"></a>tflite::MicroInterpreterContext::SetScratchBufferHandles(tflite::ScratchBufferHandle*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContext23SetScratchBufferHandlesEPNS_19ScratchBufferHandleE))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::AllocateTensors()
</UL>

<P><STRONG><a name="[f7]"></a>tflite::MicroInterpreterContext::AllocatePersistentBuffer(unsigned int)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContext24AllocatePersistentBufferEj))
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter_context.o(.rodata._ZTVN6tflite23MicroInterpreterContextE)
</UL>
<P><STRONG><a name="[fa]"></a>tflite::MicroInterpreterContext::AllocateTempTfLiteTensor(int)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContext24AllocateTempTfLiteTensorEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tflite::MicroInterpreterContext::AllocateTempTfLiteTensor(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter_context.o(.rodata._ZTVN6tflite23MicroInterpreterContextE)
</UL>
<P><STRONG><a name="[fb]"></a>tflite::MicroInterpreterContext::DeallocateTempTfLiteTensor(TfLiteTensor*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContext26DeallocateTempTfLiteTensorEP12TfLiteTensor))
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter_context.o(.rodata._ZTVN6tflite23MicroInterpreterContextE)
</UL>
<P><STRONG><a name="[f8]"></a>tflite::MicroInterpreterContext::RequestScratchBufferInArena(unsigned int, int*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContext27RequestScratchBufferInArenaEjPi))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = tflite::MicroInterpreterContext::RequestScratchBufferInArena(unsigned int, int*) &rArr; tflite::MicroAllocator::RequestScratchBufferInArena(unsigned int, int, int*) &rArr; MicroPrintf(char const*, ...) &rArr; (anonymous namespace)::VDebugLog(char const*, ...) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::RequestScratchBufferInArena(unsigned int, int, int*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter_context.o(.rodata._ZTVN6tflite23MicroInterpreterContextE)
</UL>
<P><STRONG><a name="[101]"></a>tflite::MicroInterpreterContext::graph()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContext5graphEv))
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter_context.o(.rodata._ZTVN6tflite23MicroInterpreterContextE)
</UL>
<P><STRONG><a name="[2c2]"></a>tflite::MicroInterpreterContext::MicroInterpreterContext(tflite::MicroAllocator*, tflite::Model const*, tflite::MicroInterpreterGraph*)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContextC2EPNS_14MicroAllocatorEPKNS_5ModelEPNS_21MicroInterpreterGraphE))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::MicroInterpreter(tflite::Model const*, tflite::MicroOpResolver const&, tflite::MicroAllocator*, tflite::MicroResourceVariables*, tflite::MicroProfilerInterface*)
</UL>

<P><STRONG><a name="[338]"></a>tflite::MicroInterpreterContext::MicroInterpreterContext__sub_object(tflite::MicroAllocator*, tflite::Model const*, tflite::MicroInterpreterGraph*)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContextC2EPNS_14MicroAllocatorEPKNS_5ModelEPNS_21MicroInterpreterGraphE), UNUSED)

<P><STRONG><a name="[f6]"></a>tflite::MicroInterpreterContext::~MicroInterpreterContext__deallocating()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContextD0Ev))
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter_context.o(.rodata._ZTVN6tflite23MicroInterpreterContextE)
</UL>
<P><STRONG><a name="[2c3]"></a>tflite::MicroInterpreterContext::~MicroInterpreterContext()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContextD2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::~MicroInterpreter()
</UL>

<P><STRONG><a name="[f5]"></a>tflite::MicroInterpreterContext::~MicroInterpreterContext__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContextD2Ev))
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter_context.o(.rodata._ZTVN6tflite23MicroInterpreterContextE)
</UL>
<P><STRONG><a name="[2be]"></a>tflite::CallBuiltinParseFunction(TfLiteStatus (*)(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**), tflite::Operator const*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, flatbuffer_conversions_bridge.o(.text._ZN6tflite24CallBuiltinParseFunctionEPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvES3_S7_S9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tflite::CallBuiltinParseFunction(TfLiteStatus (*)(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**), tflite::Operator const*, tflite::BuiltinDataAllocator*, void**)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GetMicroErrorReporter()
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer()
</UL>

<P><STRONG><a name="[232]"></a>tflite::GetRegistrationFromOpCode(tflite::OperatorCode const*, tflite::MicroOpResolver const&, TFLMRegistration const**)</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, micro_op_resolver.o(.text._ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = tflite::GetRegistrationFromOpCode(tflite::OperatorCode const*, tflite::MicroOpResolver const&, TFLMRegistration const**) &rArr; MicroPrintf(char const*, ...) &rArr; (anonymous namespace)::VDebugLog(char const*, ...) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GetBuiltinCode(tflite::OperatorCode const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::Model::LogInterpreterInfo()
</UL>

<P><STRONG><a name="[b7]"></a>tflite::MicroContextGetEvalTensor(TfLiteContext const*, int)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, micro_interpreter.o(.text._ZN6tflite25MicroContextGetEvalTensorEPK13TfLiteContexti))
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter.o(.text._ZN6tflite16MicroInterpreterC2EPKNS_5ModelERKNS_15MicroOpResolverEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesEPNS_22MicroProfilerInterfaceE)
</UL>
<P><STRONG><a name="[b8]"></a>tflite::MicroContextReportOpError(TfLiteContext*, char const*, ...)</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, micro_context.o(.text._ZN6tflite25MicroContextReportOpErrorEP13TfLiteContextPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = tflite::MicroContextReportOpError(TfLiteContext*, char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; (anonymous namespace)::VDebugLog(char const*, ...) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMicroPrintf(char const*, std::__va_list)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter.o(.text._ZN6tflite16MicroInterpreterC2EPKNS_5ModelERKNS_15MicroOpResolverEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesEPNS_22MicroProfilerInterfaceE)
</UL>
<P><STRONG><a name="[104]"></a>tflite::SingleArenaBufferAllocator::AllocateTemp(unsigned int, unsigned int)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator12AllocateTempEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = tflite::SingleArenaBufferAllocator::AllocateTemp(unsigned int, unsigned int) &rArr; MicroPrintf(char const*, ...) &rArr; (anonymous namespace)::VDebugLog(char const*, ...) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AlignPointerUp(unsigned char*, unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[109]"></a>tflite::SingleArenaBufferAllocator::ResizeBuffer(unsigned char*, unsigned int, unsigned int)</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator12ResizeBufferEPhjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = tflite::SingleArenaBufferAllocator::ResizeBuffer(unsigned char*, unsigned int, unsigned int) &rArr; MicroPrintf(char const*, ...) &rArr; (anonymous namespace)::VDebugLog(char const*, ...) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AlignPointerUp(unsigned char*, unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[105]"></a>tflite::SingleArenaBufferAllocator::DeallocateTemp(unsigned char*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator14DeallocateTempEPh))
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[106]"></a>tflite::SingleArenaBufferAllocator::IsAllTempDeallocated()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator20IsAllTempDeallocatedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = tflite::SingleArenaBufferAllocator::IsAllTempDeallocated() &rArr; MicroPrintf(char const*, ...) &rArr; (anonymous namespace)::VDebugLog(char const*, ...) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[107]"></a>tflite::SingleArenaBufferAllocator::ResetTempAllocations()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator20ResetTempAllocationsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = tflite::SingleArenaBufferAllocator::ResetTempAllocations() &rArr; MicroPrintf(char const*, ...) &rArr; (anonymous namespace)::VDebugLog(char const*, ...) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[108]"></a>tflite::SingleArenaBufferAllocator::AllocateResizableBuffer(unsigned int, unsigned int)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator23AllocateResizableBufferEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tflite::SingleArenaBufferAllocator::AllocateResizableBuffer(unsigned int, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AlignPointerUp(unsigned char*, unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[10f]"></a>tflite::SingleArenaBufferAllocator::AllocatePersistentBuffer(unsigned int, unsigned int)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator24AllocatePersistentBufferEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = tflite::SingleArenaBufferAllocator::AllocatePersistentBuffer(unsigned int, unsigned int) &rArr; MicroPrintf(char const*, ...) &rArr; (anonymous namespace)::VDebugLog(char const*, ...) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AlignPointerDown(unsigned char*, unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[10a]"></a>tflite::SingleArenaBufferAllocator::DeallocateResizableBuffer(unsigned char*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator25DeallocateResizableBufferEPh))
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[10c]"></a>tflite::SingleArenaBufferAllocator::ReserveNonPersistentOverlayMemory(unsigned int, unsigned int)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator33ReserveNonPersistentOverlayMemoryEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::SingleArenaBufferAllocator::ReserveNonPersistentOverlayMemory(unsigned int, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AlignPointerUp(unsigned char*, unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[2b3]"></a>tflite::SingleArenaBufferAllocator::Create(unsigned char*, unsigned int)</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator6CreateEPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = tflite::SingleArenaBufferAllocator::Create(unsigned char*, unsigned int) &rArr; MicroPrintf(char const*, ...) &rArr; (anonymous namespace)::VDebugLog(char const*, ...) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AlignPointerDown(unsigned char*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::Create(unsigned char*, unsigned int, tflite::MemoryPlannerType)
</UL>

<P><STRONG><a name="[103]"></a>tflite::SingleArenaBufferAllocator::~SingleArenaBufferAllocator__deallocating()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocatorD0Ev))
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[339]"></a>tflite::SingleArenaBufferAllocator::~SingleArenaBufferAllocator()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocatorD2Ev), UNUSED)

<P><STRONG><a name="[102]"></a>tflite::SingleArenaBufferAllocator::~SingleArenaBufferAllocator__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocatorD2Ev))
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[2a4]"></a>tflite::TfLiteEvalTensorByteLength(TfLiteEvalTensor const*, unsigned int*)</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, memory_helpers.o(.text._ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tflite::TfLiteEvalTensorByteLength(TfLiteEvalTensor const*, unsigned int*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::ResetVariableTensors()
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::InitializeAllocationInfo(int const*, tflite::SubgraphAllocations*)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::AllocateVariables(tflite::SubGraph const*, TfLiteEvalTensor*, int const*)
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::ValidateSubgraph(tflite::SubGraph const*, TfLiteEvalTensor*)
</UL>

<P><STRONG><a name="[bc]"></a>tflite::MicroContextGetScratchBuffer(TfLiteContext*, int)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, micro_interpreter.o(.text._ZN6tflite28MicroContextGetScratchBufferEP13TfLiteContexti))
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter.o(.text._ZN6tflite16MicroInterpreterC2EPKNS_5ModelERKNS_15MicroOpResolverEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesEPNS_22MicroProfilerInterfaceE)
</UL>
<P><STRONG><a name="[b9]"></a>tflite::MicroContextGetExternalContext(TfLiteContext*, TfLiteExternalContextType)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, micro_interpreter.o(.text._ZN6tflite30MicroContextGetExternalContextEP13TfLiteContext25TfLiteExternalContextType))
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter.o(.text._ZN6tflite16MicroInterpreterC2EPKNS_5ModelERKNS_15MicroOpResolverEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesEPNS_22MicroProfilerInterfaceE)
</UL>
<P><STRONG><a name="[2d1]"></a>tflite::FlatBufferVectorToTfLiteTypeArray(flatbuffers::Vector&lang;float, unsigned int&rang; const*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, flatbuffer_utils.o(.text._ZN6tflite33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIfjEE))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::internal::InitializeTfLiteTensorFromFlatbuffer(tflite::IPersistentBufferAllocator*, tflite::INonPersistentBufferAllocator*, bool, tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang;, unsigned int&rang; const*, TfLiteTensor*)
</UL>

<P><STRONG><a name="[2bf]"></a>tflite::FlatBufferVectorToTfLiteTypeArray(flatbuffers::Vector&lang;int, unsigned int&rang; const*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, flatbuffer_utils.o(.text._ZN6tflite33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIijEE))
<BR><BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer()
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::internal::InitializeTfLiteEvalTensorFromFlatbuffer(tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang;, unsigned int&rang; const*, TfLiteEvalTensor*)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::internal::InitializeTfLiteTensorFromFlatbuffer(tflite::IPersistentBufferAllocator*, tflite::INonPersistentBufferAllocator*, bool, tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang;, unsigned int&rang; const*, TfLiteTensor*)
</UL>

<P><STRONG><a name="[ba]"></a>tflite::MicroContextAllocatePersistentBuffer(TfLiteContext*, unsigned int)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, micro_interpreter.o(.text._ZN6tflite36MicroContextAllocatePersistentBufferEP13TfLiteContextj))
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter.o(.text._ZN6tflite16MicroInterpreterC2EPKNS_5ModelERKNS_15MicroOpResolverEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesEPNS_22MicroProfilerInterfaceE)
</UL>
<P><STRONG><a name="[bb]"></a>tflite::MicroContextRequestScratchBufferInArena(TfLiteContext*, unsigned int, int*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, micro_interpreter.o(.text._ZN6tflite39MicroContextRequestScratchBufferInArenaEP13TfLiteContextjPi))
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter.o(.text._ZN6tflite16MicroInterpreterC2EPKNS_5ModelERKNS_15MicroOpResolverEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesEPNS_22MicroProfilerInterfaceE)
</UL>
<P><STRONG><a name="[2b6]"></a>tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*), void (*)(TfLiteContext*, void*))</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, kernel_util.o(.text._ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_ESE_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_ETHOSU()
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_TRANSPOSE()
</UL>

<P><STRONG><a name="[299]"></a>tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, kernel_util.o(.text._ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::TransposeEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[29a]"></a>tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, kernel_util.o(.text._ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::TransposeEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[29b]"></a>tflite::micro::GetTensorShape(TfLiteEvalTensor const*)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, kernel_util.o(.text._ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::micro::GetTensorShape(TfLiteEvalTensor const*) &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::TransposeEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2b2]"></a>tflite::internal::InitializeTfLiteTensorFromFlatbuffer(tflite::IPersistentBufferAllocator*, tflite::INonPersistentBufferAllocator*, bool, tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang;, unsigned int&rang; const*, TfLiteTensor*)</STRONG> (Thumb, 900 bytes, Stack size 40 bytes, micro_allocator.o(.text._ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEjEEP12TfLiteTensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = tflite::internal::InitializeTfLiteTensorFromFlatbuffer(tflite::IPersistentBufferAllocator*, tflite::INonPersistentBufferAllocator*, bool, tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang;, unsigned int&rang; const*, TfLiteTensor*) &rArr; MicroPrintf(char const*, ...) &rArr; (anonymous namespace)::VDebugLog(char const*, ...) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteIntArrayGetSizeInBytes
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::BytesRequiredForTensor(tflite::Tensor const&, unsigned int*, unsigned int*)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ConvertTensorType(tflite::TensorType, TfLiteType*)
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::FlatBufferVectorToTfLiteTypeArray(flatbuffers::Vector&lang;float, unsigned int&rang; const*)
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::FlatBufferVectorToTfLiteTypeArray(flatbuffers::Vector&lang;int, unsigned int&rang; const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::PopulateTfLiteTensorFromFlatbuffer(tflite::Model const*, TfLiteTensor*, int, int, bool)
</UL>

<P><STRONG><a name="[2ae]"></a>tflite::internal::InitializeTfLiteEvalTensorFromFlatbuffer(tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang;, unsigned int&rang; const*, TfLiteEvalTensor*)</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, micro_allocator.o(.text._ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEjEEP16TfLiteEvalTensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tflite::internal::InitializeTfLiteEvalTensorFromFlatbuffer(tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang;, unsigned int&rang; const*, TfLiteEvalTensor*) &rArr; tflite::ConvertTensorType(tflite::TensorType, TfLiteType*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ConvertTensorType(tflite::TensorType, TfLiteType*)
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::FlatBufferVectorToTfLiteTypeArray(flatbuffers::Vector&lang;int, unsigned int&rang; const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::AllocateTfLiteEvalTensors(tflite::Model const*, tflite::SubgraphAllocations*)
</UL>

<P><STRONG><a name="[2a0]"></a>flexbuffers::Reference::AsInt64() const</STRONG> (Thumb, 430 bytes, Stack size 24 bytes, ethosu.o(.text._ZNK11flexbuffers9Reference7AsInt64Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = flexbuffers::Reference::AsInt64() const &rArr; strtoll &rArr; __strtoll &rArr; _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoll
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[230]"></a>tflite::MicroAllocator::used_bytes() const</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, micro_allocator.o(.text._ZNK6tflite14MicroAllocator10used_bytesEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tflite::MicroAllocator::used_bytes() const
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::Model::LogInterpreterInfo()
</UL>

<P><STRONG><a name="[db]"></a>tflite::GreedyMemoryPlanner::preserves_all_tensors() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, greedy_memory_planner.o(.text._ZNK6tflite19GreedyMemoryPlanner21preserves_all_tensorsEv))
<BR>[Address Reference Count : 1]<UL><LI> greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
</UL>
<P><STRONG><a name="[e5]"></a>tflite::LinearMemoryPlanner::preserves_all_tensors() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, linear_memory_planner.o(.text._ZNK6tflite19LinearMemoryPlanner21preserves_all_tensorsEv))
<BR>[Address Reference Count : 1]<UL><LI> linear_memory_planner.o(.rodata._ZTVN6tflite19LinearMemoryPlannerE)
</UL>
<P><STRONG><a name="[10e]"></a>tflite::SingleArenaBufferAllocator::GetAvailableMemory(unsigned int) const</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, single_arena_buffer_allocator.o(.text._ZNK6tflite26SingleArenaBufferAllocator18GetAvailableMemoryEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tflite::SingleArenaBufferAllocator::GetAvailableMemory(unsigned int) const
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AlignPointerDown(unsigned char*, unsigned int)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AlignPointerUp(unsigned char*, unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[110]"></a>tflite::SingleArenaBufferAllocator::GetPersistentUsedBytes() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, single_arena_buffer_allocator.o(.text._ZNK6tflite26SingleArenaBufferAllocator22GetPersistentUsedBytesEv))
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[10b]"></a>tflite::SingleArenaBufferAllocator::GetOverlayMemoryAddress() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, single_arena_buffer_allocator.o(.text._ZNK6tflite26SingleArenaBufferAllocator23GetOverlayMemoryAddressEv))
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[10d]"></a>tflite::SingleArenaBufferAllocator::GetNonPersistentUsedBytes() const</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, single_arena_buffer_allocator.o(.text._ZNK6tflite26SingleArenaBufferAllocator25GetNonPersistentUsedBytesEv))
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[113]"></a>non-virtual thunk to tflite::SingleArenaBufferAllocator::AllocatePersistentBuffer(unsigned int, unsigned int)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, single_arena_buffer_allocator.o(.text._ZThn4_N6tflite26SingleArenaBufferAllocator24AllocatePersistentBufferEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = non-virtual thunk to tflite::SingleArenaBufferAllocator::AllocatePersistentBuffer(unsigned int, unsigned int) &rArr; MicroPrintf(char const*, ...) &rArr; (anonymous namespace)::VDebugLog(char const*, ...) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AlignPointerDown(unsigned char*, unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[112]"></a>non-virtual thunk to tflite::SingleArenaBufferAllocator::~SingleArenaBufferAllocator__deallocating()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, single_arena_buffer_allocator.o(.text._ZThn4_N6tflite26SingleArenaBufferAllocatorD0Ev))
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[111]"></a>non-virtual thunk to tflite::SingleArenaBufferAllocator::~SingleArenaBufferAllocator()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, single_arena_buffer_allocator.o(.text._ZThn4_N6tflite26SingleArenaBufferAllocatorD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[114]"></a>non-virtual thunk to tflite::SingleArenaBufferAllocator::GetPersistentUsedBytes() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, single_arena_buffer_allocator.o(.text._ZThn4_NK6tflite26SingleArenaBufferAllocator22GetPersistentUsedBytesEv))
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[202]"></a>arm_ethosu_npu_init</STRONG> (Thumb, 212 bytes, Stack size 72 bytes, ethosu_npu_init.o(.text.arm_ethosu_npu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = arm_ethosu_npu_init &rArr; ethosu_get_hw_info &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_get_hw_info
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_get_driver_version
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit()
</UL>

<P><STRONG><a name="[2da]"></a>ethosu_address_remap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ethosu_device_u55_u65.o(.text.ethosu_address_remap))
<BR><BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_dev_run_command_stream
</UL>

<P><STRONG><a name="[2dc]"></a>ethosu_dev_get_hw_info</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ethosu_device_u55_u65.o(.text.ethosu_dev_get_hw_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ethosu_dev_get_hw_info
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_get_hw_info
</UL>

<P><STRONG><a name="[2e2]"></a>ethosu_dev_handle_interrupt</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, ethosu_device_u55_u65.o(.text.ethosu_dev_handle_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_irq_handler
</UL>

<P><STRONG><a name="[2d6]"></a>ethosu_dev_init</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, ethosu_device_u55_u65.o(.text.ethosu_dev_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ethosu_dev_init &rArr; ethosu_dev_soft_reset &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_dev_soft_reset
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_init
</UL>

<P><STRONG><a name="[2d8]"></a>ethosu_dev_print_err_status</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ethosu_device_u55_u65.o(.text.ethosu_dev_print_err_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ethosu_dev_print_err_status &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_wait
</UL>

<P><STRONG><a name="[2d9]"></a>ethosu_dev_run_command_stream</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, ethosu_device_u55_u65.o(.text.ethosu_dev_run_command_stream))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = ethosu_dev_run_command_stream &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_address_remap
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_invoke_async
</UL>

<P><STRONG><a name="[2df]"></a>ethosu_dev_set_clock_and_power</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ethosu_device_u55_u65.o(.text.ethosu_dev_set_clock_and_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ethosu_dev_set_clock_and_power
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_release_driver
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_invoke_async
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_wait
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_request_power
</UL>

<P><STRONG><a name="[2d7]"></a>ethosu_dev_soft_reset</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, ethosu_device_u55_u65.o(.text.ethosu_dev_soft_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = ethosu_dev_soft_reset &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_release_driver
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_invoke_async
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_wait
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_request_power
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_dev_init
</UL>

<P><STRONG><a name="[2db]"></a>ethosu_dev_verify_optimizer_config</STRONG> (Thumb, 302 bytes, Stack size 56 bytes, ethosu_device_u55_u65.o(.text.ethosu_dev_verify_optimizer_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = ethosu_dev_verify_optimizer_config &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_invoke_async
</UL>

<P><STRONG><a name="[2de]"></a>ethosu_flush_dcache</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ethosu_cpu_cache.o(.text.ethosu_flush_dcache))
<BR><BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_invoke_async
</UL>

<P><STRONG><a name="[2d4]"></a>ethosu_get_driver_version</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ethosu_driver.o(.text.ethosu_get_driver_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = ethosu_get_driver_version &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_ethosu_npu_init
</UL>

<P><STRONG><a name="[2d5]"></a>ethosu_get_hw_info</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ethosu_driver.o(.text.ethosu_get_hw_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = ethosu_get_hw_info &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_dev_get_hw_info
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_ethosu_npu_init
</UL>

<P><STRONG><a name="[2e0]"></a>ethosu_inference_begin</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ethosu_driver.o(.text.ethosu_inference_begin))
<BR><BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_invoke_async
</UL>

<P><STRONG><a name="[2e8]"></a>ethosu_inference_end</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ethosu_driver.o(.text.ethosu_inference_end))
<BR><BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_wait
</UL>

<P><STRONG><a name="[2d3]"></a>ethosu_init</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, ethosu_driver.o(.text.ethosu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = ethosu_init &rArr; ethosu_dev_init &rArr; ethosu_dev_soft_reset &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_semaphore_create
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_mutex_create
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_dev_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_ethosu_npu_init
</UL>

<P><STRONG><a name="[2e9]"></a>ethosu_invalidate_dcache</STRONG> (Thumb, 522 bytes, Stack size 48 bytes, ethosu_cpu_cache.o(.text.ethosu_invalidate_dcache))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ethosu_invalidate_dcache
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_wait
</UL>

<P><STRONG><a name="[2dd]"></a>ethosu_invoke_async</STRONG> (Thumb, 836 bytes, Stack size 56 bytes, ethosu_driver.o(.text.ethosu_invoke_async))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ethosu_invoke_async &rArr; ethosu_dev_run_command_stream &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_inference_begin
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_dev_verify_optimizer_config
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_dev_set_clock_and_power
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_dev_run_command_stream
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_dev_soft_reset
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_flush_dcache
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_invoke_v3
</UL>

<P><STRONG><a name="[2a2]"></a>ethosu_invoke_v3</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, ethosu_driver.o(.text.ethosu_invoke_v3))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = ethosu_invoke_v3 &rArr; ethosu_invoke_async &rArr; ethosu_dev_run_command_stream &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_invoke_async
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[294]"></a>ethosu_irq_handler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ethosu_driver.o(.text.ethosu_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ethosu_irq_handler &rArr; ethosu_semaphore_give &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_semaphore_give
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_dev_handle_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPU_IRQHandler
</UL>

<P><STRONG><a name="[255]"></a>ethosu_pmu_init</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, ethosu_profiler.o(.text.ethosu_pmu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = ethosu_pmu_init &rArr; ETHOSU_PMU_Set_EVTYPER &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHOSU_PMU_Set_CNTR_OVS
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHOSU_PMU_CNTR_Disable
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHOSU_PMU_CNTR_Enable
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHOSU_PMU_EVCNTR_ALL_Reset
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHOSU_PMU_CYCCNT_Reset
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHOSU_PMU_Set_EVTYPER
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHOSU_PMU_Enable
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_reset_counters
</UL>

<P><STRONG><a name="[2a3]"></a>ethosu_release_driver</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, ethosu_driver.o(.text.ethosu_release_driver))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = ethosu_release_driver &rArr; ethosu_wait &rArr; ethosu_dev_print_err_status &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_semaphore_give
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_mutex_unlock
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_mutex_lock
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_wait
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_dev_set_clock_and_power
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_dev_soft_reset
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[292]"></a>ethosu_request_power</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, ethosu_driver.o(.text.ethosu_request_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ethosu_request_power &rArr; ethosu_dev_soft_reset &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_dev_set_clock_and_power
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_dev_soft_reset
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHOSU_PMU_Enable
</UL>

<P><STRONG><a name="[2a1]"></a>ethosu_reserve_driver</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, ethosu_driver.o(.text.ethosu_reserve_driver))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ethosu_reserve_driver &rArr; ethosu_semaphore_take &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_semaphore_take
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_mutex_unlock
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_mutex_lock
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2e1]"></a>ethosu_wait</STRONG> (Thumb, 364 bytes, Stack size 24 bytes, ethosu_driver.o(.text.ethosu_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ethosu_wait &rArr; ethosu_dev_print_err_status &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_semaphore_take
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_inference_end
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_dev_set_clock_and_power
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_dev_print_err_status
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_dev_soft_reset
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_invalidate_dcache
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_release_driver
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_invoke_v3
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[99]"></a>__cxx_global_array_dtor</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_array_dtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __cxx_global_array_dtor &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text._GLOBAL__sub_I_main.cpp)
</UL>
<P><STRONG><a name="[9c]"></a>main_task(void*)</STRONG> (Thumb, 1480 bytes, Stack size 544 bytes, main.o(.text._ZL9main_taskPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168 + Unknown Stack Size
<LI>Call Chain = main_task(void*) &rArr; arm::app::Model::Init(unsigned char*, unsigned int, unsigned char const*, unsigned int, tflite::MicroAllocator*) &rArr; tflite::MicroInterpreter::AllocateTensors() &rArr; tflite::MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer() &rArr; tflite::GetRegistrationFromOpCode(tflite::OperatorCode const*, tflite::MicroOpResolver const&, TFLMRegistration const**) &rArr; MicroPrintf(char const*, ...) &rArr; (anonymous namespace)::VDebugLog(char const*, ...) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageSensor_Capture
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_PutText
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_ClearRect
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_FillRect
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imlib_draw_string
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imlib_draw_rectangle
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::image::ConvertImgToInt8(void*, unsigned int)
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::Model::IsDataSigned() const
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imlib_nvt_scale
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_ClearLCD
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Init
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageSensor_Config
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageSensor_Init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_get_systick_Count
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_reset_counters
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;framebuffer_init_image
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;framebuffer_init_from_image
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;framebuffer_init0
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fb_alloc_init0
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLabelsVector(std::__2::vector&lang;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;, std::__2::allocator&lang;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;&rang;&)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::object_detection::DetectorPostprocessing::DetectorPostprocessing(float, float, int, int)
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::Model::GetInputShape(unsigned int) const
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::~MicroInterpreter()
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::Model::GetOutputTensor(unsigned int) const
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::Model::GetInputTensor(unsigned int) const
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::Model::Init(unsigned char*, unsigned int, unsigned char const*, unsigned int, tflite::MicroAllocator*)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::yoloxnanonu::GetModelLen()
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::yoloxnanonu::GetModelPointer()
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::Model::Model__sub_object()
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPreDefMPURegion
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[ae]"></a>_GLOBAL__sub_I_main.cpp</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, main.o(.text._GLOBAL__sub_I_main.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _GLOBAL__sub_I_main.cpp &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[225]"></a>std::__2::__forward_list_node&lang;arm::app::image::Detection, void*&rang;* std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;::__sort&lang;arm::app::object_detection::DetectorPostprocessing::GetNetworkBoxes(arm::app::object_detection::Network&, int, int, float, std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&)::$_0&rang;(std::__2::__forward_list_node&lang;arm::app::image::Detection, void*&rang;*, int, arm::app::object_detection::DetectorPostprocessing::GetNetworkBoxes(arm::app::object_detection::Network&, int, int, float, std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&)::$_0&)</STRONG> (Thumb, 414 bytes, Stack size 24 bytes, detectorpostprocessing.o(.text._ZNSt3__212forward_listIN3arm3app5image9DetectionENS_9allocatorIS4_EEE6__sortIZNS2_16object_detection22DetectorPostprocessing15GetNetworkBoxesERNS9_7NetworkEiifRS7_E3$_0EEPNS_19__forward_list_nodeIS4_PvEESI_iRT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = std::__2::__forward_list_node&lang;arm::app::image::Detection, void*&rang;* std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;::__sort&lang;arm::app::object_detection::DetectorPostprocessing::GetNetworkBoxes(arm::app::object_detection::Network&, int, int, float, std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&)::$_0&rang;(std::__2::__forward_list_node&lang;arm::app::image::Detection, void*&rang;*, int, arm::app::object_detection::DetectorPostprocessing::GetNetworkBoxes(arm::app::object_detection::Network&, int, int, float, std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&)::$_0&) &rArr;  std::__2::__forward_list_node&lang;arm::app::image::Detection, void*&rang;* std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;::__sort&lang;arm::app::object_detection::DetectorPostprocessing::GetNetworkBoxes(arm::app::object_detection::Network&, int, int, float, std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&)::$_0&rang;(std::__2::__forward_list_node&lang;arm::app::image::Detection, void*&rang;*, int, arm::app::object_detection::DetectorPostprocessing::GetNetworkBoxes(arm::app::object_detection::Network&, int, int, float, std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&)::$_0&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__forward_list_node&lang;arm::app::image::Detection, void*&rang;* std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;::__sort&lang;arm::app::object_detection::DetectorPostprocessing::GetNetworkBoxes(arm::app::object_detection::Network&, int, int, float, std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&)::$_0&rang;(std::__2::__forward_list_node&lang;arm::app::image::Detection, void*&rang;*, int, arm::app::object_detection::DetectorPostprocessing::GetNetworkBoxes(arm::app::object_detection::Network&, int, int, float, std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&)::$_0&)
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::object_detection::DetectorPostprocessing::GetNetworkBoxes(arm::app::object_detection::Network&, int, int, float, std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__forward_list_node&lang;arm::app::image::Detection, void*&rang;* std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;::__sort&lang;arm::app::object_detection::DetectorPostprocessing::GetNetworkBoxes(arm::app::object_detection::Network&, int, int, float, std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&)::$_0&rang;(std::__2::__forward_list_node&lang;arm::app::image::Detection, void*&rang;*, int, arm::app::object_detection::DetectorPostprocessing::GetNetworkBoxes(arm::app::object_detection::Network&, int, int, float, std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&)::$_0&)
</UL>

<P><STRONG><a name="[23a]"></a>std::__2::__forward_list_node&lang;arm::app::image::Detection, void*&rang;* std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;::__sort&lang;arm::app::image::CalculateNMS(std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&, int, float)::$_0&rang;(std::__2::__forward_list_node&lang;arm::app::image::Detection, void*&rang;*, int, arm::app::image::CalculateNMS(std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&, int, float)::$_0&)</STRONG> (Thumb, 514 bytes, Stack size 24 bytes, imageutils.o(.text._ZNSt3__212forward_listIN3arm3app5image9DetectionENS_9allocatorIS4_EEE6__sortIZNS3_12CalculateNMSERS7_ifE3$_0EEPNS_19__forward_list_nodeIS4_PvEESE_iRT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = std::__2::__forward_list_node&lang;arm::app::image::Detection, void*&rang;* std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;::__sort&lang;arm::app::image::CalculateNMS(std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&, int, float)::$_0&rang;(std::__2::__forward_list_node&lang;arm::app::image::Detection, void*&rang;*, int, arm::app::image::CalculateNMS(std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&, int, float)::$_0&) &rArr;  std::__2::__forward_list_node&lang;arm::app::image::Detection, void*&rang;* std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;::__sort&lang;arm::app::image::CalculateNMS(std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&, int, float)::$_0&rang;(std::__2::__forward_list_node&lang;arm::app::image::Detection, void*&rang;*, int, arm::app::image::CalculateNMS(std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&, int, float)::$_0&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__forward_list_node&lang;arm::app::image::Detection, void*&rang;* std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;::__sort&lang;arm::app::image::CalculateNMS(std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&, int, float)::$_0&rang;(std::__2::__forward_list_node&lang;arm::app::image::Detection, void*&rang;*, int, arm::app::image::CalculateNMS(std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&, int, float)::$_0&)
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm::app::image::CalculateNMS(std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&, int, float)
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__forward_list_node&lang;arm::app::image::Detection, void*&rang;* std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;::__sort&lang;arm::app::image::CalculateNMS(std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&, int, float)::$_0&rang;(std::__2::__forward_list_node&lang;arm::app::image::Detection, void*&rang;*, int, arm::app::image::CalculateNMS(std::__2::forward_list&lang;arm::app::image::Detection, std::__2::allocator&lang;arm::app::image::Detection&rang;&rang;&, int, float)::$_0&)
</UL>

<P><STRONG><a name="[97]"></a>Delay</STRONG> (Thumb, 466 bytes, Stack size 4 bytes, sensor_hm1055.o(.text.Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sensor_hm1055.o(.text.InitHM1055_VGA_YUV422)
</UL>
<P><STRONG><a name="[3]"></a>fsa506_set_column</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, lcd_fsa506.o(.text.fsa506_set_column))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fsa506_set_column
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_fsa506.o(.data.g_s_WQVGA_FSA506)
</UL>
<P><STRONG><a name="[4]"></a>fsa506_set_page</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, lcd_fsa506.o(.text.fsa506_set_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fsa506_set_page
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_fsa506.o(.data.g_s_WQVGA_FSA506)
</UL>
<P><STRONG><a name="[1]"></a>fsa506_init</STRONG> (Thumb, 1364 bytes, Stack size 32 bytes, lcd_fsa506.o(.text.fsa506_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fsa506_init &rArr; Display_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_fsa506.o(.data.g_s_WQVGA_FSA506)
</UL>
<P><STRONG><a name="[2]"></a>fsa506_write_reg</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, lcd_fsa506.o(.text.fsa506_write_reg))
<BR>[Address Reference Count : 1]<UL><LI> lcd_fsa506.o(.data.g_s_WQVGA_FSA506)
</UL>
<P><STRONG><a name="[5]"></a>fsa506_send_pixels</STRONG> (Thumb, 218 bytes, Stack size 28 bytes, lcd_fsa506.o(.text.fsa506_send_pixels))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = fsa506_send_pixels
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_fsa506.o(.data.g_s_WQVGA_FSA506)
</UL>
<P><STRONG><a name="[b3]"></a>tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ethosu.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj))
<BR>[Address Reference Count : 1]<UL><LI> ethosu.o(.text._ZN6tflite15Register_ETHOSUEv)
</UL>
<P><STRONG><a name="[b4]"></a>tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, ethosu.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroContext::AllocateTempInputTensor(TfLiteNode const*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethosu.o(.text._ZN6tflite15Register_ETHOSUEv)
</UL>
<P><STRONG><a name="[b5]"></a>tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 412 bytes, Stack size 64 bytes, ethosu.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; (anonymous namespace)::VDebugLog(char const*, ...) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_release_driver
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_reserve_driver
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethosu_invoke_v3
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flexbuffers::Reference::AsInt64() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethosu.o(.text._ZN6tflite15Register_ETHOSUEv)
</UL>
<P><STRONG><a name="[af]"></a>tflite::(anonymous namespace)::MicroBuiltinDataAllocator::Allocate(unsigned int, unsigned int)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, micro_allocator.o(.text._ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEjj))
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.text._ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE)
</UL>
<P><STRONG><a name="[b0]"></a>tflite::(anonymous namespace)::MicroBuiltinDataAllocator::Deallocate(void*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, micro_allocator.o(.text._ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv))
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.text._ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE)
</UL>
<P><STRONG><a name="[b2]"></a>tflite::(anonymous namespace)::MicroBuiltinDataAllocator::~MicroBuiltinDataAllocator__deallocating()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, micro_allocator.o(.text._ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev))
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.text._ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE)
</UL>
<P><STRONG><a name="[297]"></a>tflite::(anonymous namespace)::CreatePlan(tflite::MicroMemoryPlanner*, tflite::AllocationInfo const*, unsigned int)</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, micro_allocator.o(.text._ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_18MicroMemoryPlannerEPKNS_14AllocationInfoEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tflite::(anonymous namespace)::CreatePlan(tflite::MicroMemoryPlanner*, tflite::AllocationInfo const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AlignSizeUp(unsigned int, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::CommitStaticMemoryPlan(tflite::Model const*, tflite::SubgraphAllocations*, tflite::ScratchBufferHandle*)
</UL>

<P><STRONG><a name="[2ac]"></a>tflite::(anonymous namespace)::CommitPlan(tflite::MicroMemoryPlanner*, unsigned char*, tflite::AllocationInfo const*, unsigned int)</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, micro_allocator.o(.text._ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_18MicroMemoryPlannerEPhPKNS_14AllocationInfoEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tflite::(anonymous namespace)::CommitPlan(tflite::MicroMemoryPlanner*, unsigned char*, tflite::AllocationInfo const*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::CommitStaticMemoryPlan(tflite::Model const*, tflite::SubgraphAllocations*, tflite::ScratchBufferHandle*)
</UL>

<P><STRONG><a name="[295]"></a>(anonymous namespace)::VDebugLog(char const*, ...)</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, micro_log.o(.text._ZN12_GLOBAL__N_19VDebugLogEPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = (anonymous namespace)::VDebugLog(char const*, ...) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLog
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMicroPrintf(char const*, std::__va_list)
</UL>

<P><STRONG><a name="[bd]"></a>tflite::(anonymous namespace)::TransposePrepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 552 bytes, Stack size 56 bytes, transpose.o(.text._ZN6tflite12_GLOBAL__N_116TransposePrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tflite::(anonymous namespace)::TransposePrepare(TfLiteContext*, TfLiteNode*)
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroContext::AllocateTempOutputTensor(TfLiteNode const*, int)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroContext::AllocateTempInputTensor(TfLiteNode const*, int)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transpose.o(.text._ZN6tflite18Register_TRANSPOSEEv)
</UL>
<P><STRONG><a name="[be]"></a>tflite::(anonymous namespace)::TransposeEval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 960 bytes, Stack size 200 bytes, transpose.o(.text._ZN6tflite12_GLOBAL__N_113TransposeEvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::TransposeEval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; (anonymous namespace)::VDebugLog(char const*, ...) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::transpose_internal::TransposeImpl&lang;int&rang;(int, int, int const*, int const*, int const*, int*, int const*, int const*)
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::transpose_internal::TransposeImpl&lang;signed char&rang;(int, int, int const*, signed char const*, int const*, signed char*, int const*, int const*)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transpose.o(.text._ZN6tflite18Register_TRANSPOSEEv)
</UL>
<P><STRONG><a name="[258]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, tasks.o(.text.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[9e]"></a>prvIdleTask</STRONG> (Thumb, 258 bytes, Stack size 0 bytes, tasks.o(.text.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prvIdleTask &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[265]"></a>prvUnlockQueue</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, queue.o(.text.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[9d]"></a>prvTaskExitError</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, port.o(.text.prvTaskExitError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvTaskExitError
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[261]"></a>prvSampleTimeNow</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, timers.o(.text.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvSampleTimeNow &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[9f]"></a>prvTimerTask</STRONG> (Thumb, 566 bytes, Stack size 24 bytes, timers.o(.text.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = prvTimerTask &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(.text.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[203]"></a>operator_new_impl(unsigned int)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, new.cpp.o(.text._ZL17operator_new_implj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = operator_new_impl(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::get_new_handler()
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL>

<P><STRONG><a name="[205]"></a>operator_new_aligned_impl(unsigned int, std::align_val_t)</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, new.cpp.o(.text._ZL25operator_new_aligned_impljSt11align_val_t), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posix_memalign
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::get_new_handler()
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int, std::align_val_t)
</UL>

<P><STRONG><a name="[188]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[94]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>

# 1 "../Model/Labels.cpp"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 466 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "../Model/Labels.cpp" 2

# 1 "../../../../ThirdParty/ml-embedded-evaluation-kit/source/application/main/include\\BufAttributes.hpp" 1
# 23 "../../../../ThirdParty/ml-embedded-evaluation-kit/source/application/main/include\\BufAttributes.hpp"
# 1 "../NPU/include\\ethosu_mem_config.h" 1
# 24 "../../../../ThirdParty/ml-embedded-evaluation-kit/source/application/main/include\\BufAttributes.hpp" 2
# 3 "../Model/Labels.cpp" 2

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\vector" 1 3
# 308 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\vector" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/copy.h" 1 3
# 12 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/copy.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/copy_move_common.h" 1 3
# 12 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/copy_move_common.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/iterator_operations.h" 1 3
# 12 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/iterator_operations.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/iter_swap.h" 1 3
# 12 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/iter_swap.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__config" 1 3
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__config" 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/iter_swap.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/declval.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/declval.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



#pragma GCC diagnostic push
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/declval.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/declval.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template <class _Tp>
_Tp&& __declval(int);
template <class _Tp>
_Tp __declval(long);
#pragma GCC diagnostic pop

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) decltype(std::__declval<_Tp>(0)) declval() noexcept {
  static_assert(!__is_same(_Tp, _Tp),
                "std::declval can only be used in an unevaluated context. "
                "It's likely that your current usage is trying to extract a value from the function.");
}

}}
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/iter_swap.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/swap.h" 1 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/swap.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_move_assignable.h" 1 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_move_assignable.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/add_lvalue_reference.h" 1 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/add_lvalue_reference.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_referenceable.h" 1 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_referenceable.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/integral_constant.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/integral_constant.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp, _Tp __v>
struct integral_constant {
  static constexpr const _Tp value = __v;
  typedef _Tp value_type;
  typedef integral_constant type;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr operator value_type() const noexcept { return value; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr value_type operator()() const noexcept { return value; }

};

template <class _Tp, _Tp __v>
constexpr const _Tp integral_constant<_Tp, __v>::value;

typedef integral_constant<bool, true> true_type;
typedef integral_constant<bool, false> false_type;

template <bool _Val>
using _BoolConstant __attribute__((__nodebug__)) = integral_constant<bool, _Val>;


template <bool __b>
using bool_constant = integral_constant<bool, __b>;


}}
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_referenceable.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_same.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_same.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp, class _Up>
struct is_same : _BoolConstant<__is_same(_Tp, _Up)> {};


template <class _Tp, class _Up>
inline constexpr bool is_same_v = __is_same(_Tp, _Up);
# 36 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_same.h" 3
template <class _Tp, class _Up>
using _IsSame = _BoolConstant<__is_same(_Tp, _Up)>;

template <class _Tp, class _Up>
using _IsNotSame = _BoolConstant<!__is_same(_Tp, _Up)>;

}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_referenceable.h" 2 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_referenceable.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {


template <class _Tp>
struct __libcpp_is_referenceable : integral_constant<bool, __is_referenceable(_Tp)> {};
# 39 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_referenceable.h" 3
}}
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/add_lvalue_reference.h" 2 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/add_lvalue_reference.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



template <class _Tp>
using __add_lvalue_reference_t = __add_lvalue_reference(_Tp);
# 42 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/add_lvalue_reference.h" 3
template <class _Tp>
struct add_lvalue_reference {
  using type __attribute__((__nodebug__)) = __add_lvalue_reference_t<_Tp>;
};


template <class _Tp>
using add_lvalue_reference_t = __add_lvalue_reference_t<_Tp>;


}}
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_move_assignable.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/add_rvalue_reference.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/add_rvalue_reference.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



template <class _Tp>
using __add_rvalue_reference_t = __add_rvalue_reference(_Tp);
# 42 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/add_rvalue_reference.h" 3
template <class _Tp>
struct add_rvalue_reference {
  using type = __add_rvalue_reference_t<_Tp>;
};


template <class _Tp>
using add_rvalue_reference_t = __add_rvalue_reference_t<_Tp>;


}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_move_assignable.h" 2 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_move_assignable.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
struct is_move_assignable
    : public integral_constant<bool, __is_assignable(__add_lvalue_reference_t<_Tp>, __add_rvalue_reference_t<_Tp>)> {};


template <class _Tp>
inline constexpr bool is_move_assignable_v = is_move_assignable<_Tp>::value;


}}
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/swap.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_move_constructible.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_move_constructible.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
struct is_move_constructible
    : public integral_constant<bool, __is_constructible(_Tp, __add_rvalue_reference_t<_Tp>)> {};


template <class _Tp>
inline constexpr bool is_move_constructible_v = is_move_constructible<_Tp>::value;


}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/swap.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_nothrow_move_assignable.h" 1 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_nothrow_move_assignable.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
struct is_nothrow_move_assignable
    : public integral_constant<bool,
                               __is_nothrow_assignable(__add_lvalue_reference_t<_Tp>, __add_rvalue_reference_t<_Tp>)> {
};


template <class _Tp>
inline constexpr bool is_nothrow_move_assignable_v = is_nothrow_move_assignable<_Tp>::value;


}}
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/swap.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_nothrow_move_constructible.h" 1 3
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_nothrow_move_constructible.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_nothrow_constructible.h" 1 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_nothrow_constructible.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_constructible.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_constructible.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp, class... _Args>
struct is_constructible : public integral_constant<bool, __is_constructible(_Tp, _Args...)> {};


template <class _Tp, class... _Args>
inline constexpr bool is_constructible_v = __is_constructible(_Tp, _Args...);


}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_nothrow_constructible.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_reference.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_reference.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



template <class _Tp>
struct is_lvalue_reference : _BoolConstant<__is_lvalue_reference(_Tp)> {};

template <class _Tp>
struct is_rvalue_reference : _BoolConstant<__is_rvalue_reference(_Tp)> {};

template <class _Tp>
struct is_reference : _BoolConstant<__is_reference(_Tp)> {};


template <class _Tp>
inline constexpr bool is_reference_v = __is_reference(_Tp);
template <class _Tp>
inline constexpr bool is_lvalue_reference_v = __is_lvalue_reference(_Tp);
template <class _Tp>
inline constexpr bool is_rvalue_reference_v = __is_rvalue_reference(_Tp);
# 73 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_reference.h" 3
}}
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_nothrow_constructible.h" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cstddef" 1 3
# 36 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cstddef" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__assert" 1 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__assert" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__assertion_handler" 1 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__assertion_handler" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__verbose_abort" 1 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__verbose_abort" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__availability" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__availability" 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__verbose_abort" 2 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__verbose_abort" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



[[noreturn]] __attribute__((__visibility__("default")))
    __attribute__((__format__(__printf__, 1, 2))) void __libcpp_verbose_abort(const char* __format, ...);
# 51 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__verbose_abort" 3
}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__assertion_handler" 2 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__assertion_handler" 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__assert" 2 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__assert" 3
# 37 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cstddef" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/enable_if.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/enable_if.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <bool, class _Tp = void>
struct enable_if {};
template <class _Tp>
struct enable_if<true, _Tp> {
  typedef _Tp type;
};

template <bool _Bp, class _Tp = void>
using __enable_if_t __attribute__((__nodebug__)) = typename enable_if<_Bp, _Tp>::type;


template <bool _Bp, class _Tp = void>
using enable_if_t = typename enable_if<_Bp, _Tp>::type;


}}
# 39 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cstddef" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_integral.h" 1 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_integral.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/remove_cv.h" 1 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/remove_cv.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/remove_const.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/remove_const.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {


template <class _Tp>
struct remove_const {
  using type __attribute__((__nodebug__)) = __remove_const(_Tp);
};

template <class _Tp>
using __remove_const_t = __remove_const(_Tp);
# 43 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/remove_const.h" 3
template <class _Tp>
using remove_const_t = __remove_const_t<_Tp>;


}}
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/remove_cv.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/remove_volatile.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/remove_volatile.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {


template <class _Tp>
struct remove_volatile {
  using type __attribute__((__nodebug__)) = __remove_volatile(_Tp);
};

template <class _Tp>
using __remove_volatile_t = __remove_volatile(_Tp);
# 43 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/remove_volatile.h" 3
template <class _Tp>
using remove_volatile_t = __remove_volatile_t<_Tp>;


}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/remove_cv.h" 2 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/remove_cv.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {


template <class _Tp>
struct remove_cv {
  using type __attribute__((__nodebug__)) = __remove_cv(_Tp);
};

template <class _Tp>
using __remove_cv_t = __remove_cv(_Tp);
# 41 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/remove_cv.h" 3
template <class _Tp>
using remove_cv_t = __remove_cv_t<_Tp>;


}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_integral.h" 2 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_integral.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {


template <class _Tp> struct __libcpp_is_integral { enum { value = 0 }; };
template <> struct __libcpp_is_integral<bool> { enum { value = 1 }; };
template <> struct __libcpp_is_integral<char> { enum { value = 1 }; };
template <> struct __libcpp_is_integral<signed char> { enum { value = 1 }; };
template <> struct __libcpp_is_integral<unsigned char> { enum { value = 1 }; };

template <> struct __libcpp_is_integral<wchar_t> { enum { value = 1 }; };




template <> struct __libcpp_is_integral<char16_t> { enum { value = 1 }; };
template <> struct __libcpp_is_integral<char32_t> { enum { value = 1 }; };
template <> struct __libcpp_is_integral<short> { enum { value = 1 }; };
template <> struct __libcpp_is_integral<unsigned short> { enum { value = 1 }; };
template <> struct __libcpp_is_integral<int> { enum { value = 1 }; };
template <> struct __libcpp_is_integral<unsigned int> { enum { value = 1 }; };
template <> struct __libcpp_is_integral<long> { enum { value = 1 }; };
template <> struct __libcpp_is_integral<unsigned long> { enum { value = 1 }; };
template <> struct __libcpp_is_integral<long long> { enum { value = 1 }; };
template <> struct __libcpp_is_integral<unsigned long long> { enum { value = 1 }; };
# 52 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_integral.h" 3
template <class _Tp>
struct is_integral : _BoolConstant<__is_integral(_Tp)> {};


template <class _Tp>
inline constexpr bool is_integral_v = __is_integral(_Tp);
# 72 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_integral.h" 3
}}
# 41 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cstddef" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\version" 1 3
# 253 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\version" 3
# 42 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cstddef" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\stddef.h" 1 3
# 43 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\stddef.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stddef.h" 1 3
# 28 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stddef.h" 3
        namespace std {

        extern "C" {







  typedef signed int ptrdiff_t;







    typedef unsigned int size_t;
# 95 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stddef.h" 3
  typedef long double max_align_t;



         }
      }






      using ::std::size_t;
      using ::std::ptrdiff_t;

        using ::std::max_align_t;
# 47 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\stddef.h" 2 3



typedef decltype(nullptr) nullptr_t;
# 44 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cstddef" 2 3
# 55 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cstddef" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

using ::nullptr_t;
using ::ptrdiff_t __attribute__((__using_if_exists__));
using ::size_t __attribute__((__using_if_exists__));


using ::max_align_t __attribute__((__using_if_exists__));


}}


namespace std
{
enum class byte : unsigned char {};

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline constexpr byte operator|(byte __lhs, byte __rhs) noexcept {
  return static_cast<byte>(
      static_cast<unsigned char>(static_cast<unsigned int>(__lhs) | static_cast<unsigned int>(__rhs)));
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline constexpr byte& operator|=(byte& __lhs, byte __rhs) noexcept {
  return __lhs = __lhs | __rhs;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline constexpr byte operator&(byte __lhs, byte __rhs) noexcept {
  return static_cast<byte>(
      static_cast<unsigned char>(static_cast<unsigned int>(__lhs) & static_cast<unsigned int>(__rhs)));
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline constexpr byte& operator&=(byte& __lhs, byte __rhs) noexcept {
  return __lhs = __lhs & __rhs;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline constexpr byte operator^(byte __lhs, byte __rhs) noexcept {
  return static_cast<byte>(
      static_cast<unsigned char>(static_cast<unsigned int>(__lhs) ^ static_cast<unsigned int>(__rhs)));
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline constexpr byte& operator^=(byte& __lhs, byte __rhs) noexcept {
  return __lhs = __lhs ^ __rhs;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline constexpr byte operator~(byte __b) noexcept {
  return static_cast<byte>(static_cast<unsigned char>(~static_cast<unsigned int>(__b)));
}

template <class _Integer, __enable_if_t<is_integral<_Integer>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr byte& operator<<=(byte& __lhs, _Integer __shift) noexcept {
  return __lhs = __lhs << __shift;
}

template <class _Integer, __enable_if_t<is_integral<_Integer>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr byte operator<<(byte __lhs, _Integer __shift) noexcept {
  return static_cast<byte>(static_cast<unsigned char>(static_cast<unsigned int>(__lhs) << __shift));
}

template <class _Integer, __enable_if_t<is_integral<_Integer>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr byte& operator>>=(byte& __lhs, _Integer __shift) noexcept {
  return __lhs = __lhs >> __shift;
}

template <class _Integer, __enable_if_t<is_integral<_Integer>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr byte operator>>(byte __lhs, _Integer __shift) noexcept {
  return static_cast<byte>(static_cast<unsigned char>(static_cast<unsigned int>(__lhs) >> __shift));
}

template <class _Integer, __enable_if_t<is_integral<_Integer>::value, int> = 0>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Integer to_integer(byte __b) noexcept {
  return static_cast<_Integer>(__b);
}

}
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_nothrow_constructible.h" 2 3
# 21 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_nothrow_constructible.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {




template < class _Tp, class... _Args>
struct is_nothrow_constructible
    : public integral_constant<bool, __is_nothrow_constructible(_Tp, _Args...)> {};
# 65 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_nothrow_constructible.h" 3
template <class _Tp, class... _Args>
inline constexpr bool is_nothrow_constructible_v = is_nothrow_constructible<_Tp, _Args...>::value;


}}
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_nothrow_move_constructible.h" 2 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_nothrow_move_constructible.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {




template <class _Tp>
struct is_nothrow_move_constructible
    : public integral_constant<bool, __is_nothrow_constructible(_Tp, __add_rvalue_reference_t<_Tp>)> {};
# 39 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_nothrow_move_constructible.h" 3
template <class _Tp>
inline constexpr bool is_nothrow_move_constructible_v = is_nothrow_move_constructible<_Tp>::value;


}}
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/swap.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_swappable.h" 1 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_swappable.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/conditional.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/conditional.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <bool>
struct _IfImpl;

template <>
struct _IfImpl<true> {
  template <class _IfRes, class _ElseRes>
  using _Select __attribute__((__nodebug__)) = _IfRes;
};

template <>
struct _IfImpl<false> {
  template <class _IfRes, class _ElseRes>
  using _Select __attribute__((__nodebug__)) = _ElseRes;
};

template <bool _Cond, class _IfRes, class _ElseRes>
using _If __attribute__((__nodebug__)) = typename _IfImpl<_Cond>::template _Select<_IfRes, _ElseRes>;

template <bool _Bp, class _If, class _Then>
struct conditional {
  using type __attribute__((__nodebug__)) = _If;
};
template <class _If, class _Then>
struct conditional<false, _If, _Then> {
  using type __attribute__((__nodebug__)) = _Then;
};


template <bool _Bp, class _IfRes, class _ElseRes>
using conditional_t __attribute__((__nodebug__)) = typename conditional<_Bp, _IfRes, _ElseRes>::type;



template <bool _Bp, class _If, class _Then>
using __conditional_t __attribute__((__nodebug__)) = typename conditional<_Bp, _If, _Then>::type;

}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_swappable.h" 2 3







# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_void.h" 1 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_void.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



template <class _Tp>
struct is_void : _BoolConstant<__is_void(_Tp)> {};


template <class _Tp>
inline constexpr bool is_void_v = __is_void(_Tp);
# 45 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_void.h" 3
}}
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_swappable.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/nat.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/nat.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

struct __nat {

  __nat() = delete;
  __nat(const __nat&) = delete;
  __nat& operator=(const __nat&) = delete;
  ~__nat() = delete;

};

}}
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_swappable.h" 2 3
# 29 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_swappable.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
struct __is_swappable;
template <class _Tp>
struct __is_nothrow_swappable;


template <class _Tp>
using __swap_result_t = __enable_if_t<is_move_constructible<_Tp>::value && is_move_assignable<_Tp>::value>;





template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __swap_result_t<_Tp> swap(_Tp& __x, _Tp& __y)
    noexcept(is_nothrow_move_constructible<_Tp>::value&& is_nothrow_move_assignable<_Tp>::value);

template <class _Tp, size_t _Np, __enable_if_t<__is_swappable<_Tp>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void swap(_Tp (&__a)[_Np], _Tp (&__b)[_Np])
    noexcept(__is_nothrow_swappable<_Tp>::value);

namespace __detail {


template <class _Tp, class _Up = _Tp, bool _NotVoid = !is_void<_Tp>::value && !is_void<_Up>::value>
struct __swappable_with {
  template <class _LHS, class _RHS>
  static decltype(swap(std::declval<_LHS>(), std::declval<_RHS>())) __test_swap(int);
  template <class, class>
  static __nat __test_swap(long);


  typedef decltype((__test_swap<_Tp, _Up>(0))) __swap1;
  typedef decltype((__test_swap<_Up, _Tp>(0))) __swap2;

  static const bool value = _IsNotSame<__swap1, __nat>::value && _IsNotSame<__swap2, __nat>::value;
};

template <class _Tp, class _Up>
struct __swappable_with<_Tp, _Up, false> : false_type {};

template <class _Tp, class _Up = _Tp, bool _Swappable = __swappable_with<_Tp, _Up>::value>
struct __nothrow_swappable_with {
  static const bool value =

      noexcept(swap(std::declval<_Tp>(), std::declval<_Up>()))&& noexcept(
          swap(std::declval<_Up>(), std::declval<_Tp>()));



};

template <class _Tp, class _Up>
struct __nothrow_swappable_with<_Tp, _Up, false> : false_type {};

}

template <class _Tp>
struct __is_swappable : public integral_constant<bool, __detail::__swappable_with<_Tp&>::value> {};

template <class _Tp>
struct __is_nothrow_swappable : public integral_constant<bool, __detail::__nothrow_swappable_with<_Tp&>::value> {};



template <class _Tp, class _Up>
struct is_swappable_with
    : public integral_constant<bool, __detail::__swappable_with<_Tp, _Up>::value> {};

template <class _Tp>
struct is_swappable
    : public __conditional_t<__libcpp_is_referenceable<_Tp>::value,
                             is_swappable_with<__add_lvalue_reference_t<_Tp>, __add_lvalue_reference_t<_Tp> >,
                             false_type> {};

template <class _Tp, class _Up>
struct is_nothrow_swappable_with
    : public integral_constant<bool, __detail::__nothrow_swappable_with<_Tp, _Up>::value> {};

template <class _Tp>
struct is_nothrow_swappable
    : public __conditional_t<__libcpp_is_referenceable<_Tp>::value,
                             is_nothrow_swappable_with<__add_lvalue_reference_t<_Tp>, __add_lvalue_reference_t<_Tp> >,
                             false_type> {};

template <class _Tp, class _Up>
inline constexpr bool is_swappable_with_v = is_swappable_with<_Tp, _Up>::value;

template <class _Tp>
inline constexpr bool is_swappable_v = is_swappable<_Tp>::value;

template <class _Tp, class _Up>
inline constexpr bool is_nothrow_swappable_with_v = is_nothrow_swappable_with<_Tp, _Up>::value;

template <class _Tp>
inline constexpr bool is_nothrow_swappable_v = is_nothrow_swappable<_Tp>::value;



}}
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/swap.h" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/move.h" 1 3
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/move.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_copy_constructible.h" 1 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_copy_constructible.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/add_const.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/add_const.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
struct add_const {
  typedef __attribute__((__nodebug__)) const _Tp type;
};


template <class _Tp>
using add_const_t = typename add_const<_Tp>::type;


}}
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_copy_constructible.h" 2 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_copy_constructible.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
struct is_copy_constructible
    : public integral_constant<bool, __is_constructible(_Tp, __add_lvalue_reference_t<typename add_const<_Tp>::type>)> {
};


template <class _Tp>
inline constexpr bool is_copy_constructible_v = is_copy_constructible<_Tp>::value;


}}
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/move.h" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/remove_reference.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/remove_reference.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {


template <class _Tp>
struct remove_reference {
  using type __attribute__((__nodebug__)) = __remove_reference_t(_Tp);
};

template <class _Tp>
using __libcpp_remove_reference_t = __remove_reference_t(_Tp);
# 41 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/remove_reference.h" 3
template <class _Tp>
using remove_reference_t = __libcpp_remove_reference_t<_Tp>;


}}
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/move.h" 2 3
# 21 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/move.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 25 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/move.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr __libcpp_remove_reference_t<_Tp>&&
move([[_Clang::__lifetimebound__]] _Tp&& __t) noexcept {
  typedef __attribute__((__nodebug__)) __libcpp_remove_reference_t<_Tp> _Up;
  return static_cast<_Up&&>(__t);
}

template <class _Tp>
using __move_if_noexcept_result_t =
    __conditional_t<!is_nothrow_move_constructible<_Tp>::value && is_copy_constructible<_Tp>::value, const _Tp&, _Tp&&>;

template <class _Tp>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr __move_if_noexcept_result_t<_Tp>
move_if_noexcept([[_Clang::__lifetimebound__]] _Tp& __x) noexcept {
  return std::move(__x);
}

}}
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/swap.h" 2 3
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/swap.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 28 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/swap.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {


template <class _Tp>
using __swap_result_t = __enable_if_t<is_move_constructible<_Tp>::value && is_move_assignable<_Tp>::value>;





template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __swap_result_t<_Tp> swap(_Tp& __x, _Tp& __y)
    noexcept(is_nothrow_move_constructible<_Tp>::value&& is_nothrow_move_assignable<_Tp>::value) {
  _Tp __t(std::move(__x));
  __x = std::move(__y);
  __y = std::move(__t);
}

template <class _Tp, size_t _Np, __enable_if_t<__is_swappable<_Tp>::value, int> >
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void swap(_Tp (&__a)[_Np], _Tp (&__b)[_Np])
    noexcept(__is_nothrow_swappable<_Tp>::value) {
  for (size_t __i = 0; __i != _Np; ++__i) {
    swap(__a[__i], __b[__i]);
  }
}

}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/iter_swap.h" 2 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/iter_swap.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _ForwardIterator1, class _ForwardIterator2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)

    noexcept(noexcept(swap(*std::declval<_ForwardIterator1>(), *std::declval<_ForwardIterator2>()))) {
  swap(*__a, *__b);
}

}}
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/iterator_operations.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_iterator_concept.h" 1 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_iterator_concept.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/concepts.h" 1 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/concepts.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/arithmetic.h" 1 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/arithmetic.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_floating_point.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_floating_point.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {


template <class _Tp> struct __libcpp_is_floating_point : public false_type {};
template <> struct __libcpp_is_floating_point<float> : public true_type {};
template <> struct __libcpp_is_floating_point<double> : public true_type {};
template <> struct __libcpp_is_floating_point<long double> : public true_type {};


template <class _Tp>
struct is_floating_point : public __libcpp_is_floating_point<__remove_cv_t<_Tp> > {};


template <class _Tp>
inline constexpr bool is_floating_point_v = is_floating_point<_Tp>::value;


}}
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/arithmetic.h" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_signed.h" 1 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_signed.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_arithmetic.h" 1 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_arithmetic.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
struct is_arithmetic
    : public integral_constant<bool, is_integral<_Tp>::value || is_floating_point<_Tp>::value> {};


template <class _Tp>
inline constexpr bool is_arithmetic_v = is_arithmetic<_Tp>::value;


}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_signed.h" 2 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_signed.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



template <class _Tp>
struct is_signed : _BoolConstant<__is_signed(_Tp)> {};


template <class _Tp>
inline constexpr bool is_signed_v = __is_signed(_Tp);
# 57 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_signed.h" 3
}}
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/arithmetic.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_signed_integer.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_signed_integer.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {


template <class _Tp> struct __libcpp_is_signed_integer : public false_type {};
template <> struct __libcpp_is_signed_integer<signed char> : public true_type {};
template <> struct __libcpp_is_signed_integer<signed short> : public true_type {};
template <> struct __libcpp_is_signed_integer<signed int> : public true_type {};
template <> struct __libcpp_is_signed_integer<signed long> : public true_type {};
template <> struct __libcpp_is_signed_integer<signed long long> : public true_type {};





}}
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/arithmetic.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_unsigned_integer.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_unsigned_integer.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {


template <class _Tp> struct __libcpp_is_unsigned_integer : public false_type {};
template <> struct __libcpp_is_unsigned_integer<unsigned char> : public true_type {};
template <> struct __libcpp_is_unsigned_integer<unsigned short> : public true_type {};
template <> struct __libcpp_is_unsigned_integer<unsigned int> : public true_type {};
template <> struct __libcpp_is_unsigned_integer<unsigned long> : public true_type {};
template <> struct __libcpp_is_unsigned_integer<unsigned long long> : public true_type {};





}}
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/arithmetic.h" 2 3
# 21 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/arithmetic.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 54 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/arithmetic.h" 3
}}
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/concepts.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/assignable.h" 1 3
# 12 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/assignable.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/common_reference_with.h" 1 3
# 12 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/common_reference_with.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/convertible_to.h" 1 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/convertible_to.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_convertible.h" 1 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_convertible.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_array.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_array.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 36 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_array.h" 3
template <class _Tp>
struct is_array : public false_type {};
template <class _Tp>
struct is_array<_Tp[]> : public true_type {};
template <class _Tp, size_t _Np>
struct is_array<_Tp[_Np]> : public true_type {};


template <class _Tp>
inline constexpr bool is_array_v = is_array<_Tp>::value;




}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_convertible.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_function.h" 1 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_function.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_const.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_const.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



template <class _Tp>
struct is_const : _BoolConstant<__is_const(_Tp)> {};


template <class _Tp>
inline constexpr bool is_const_v = __is_const(_Tp);
# 45 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_const.h" 3
}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_function.h" 2 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_function.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



template <class _Tp>
struct is_function : integral_constant<bool, __is_function(_Tp)> {};
# 37 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_function.h" 3
template <class _Tp>
inline constexpr bool is_function_v = is_function<_Tp>::value;


}}
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_convertible.h" 2 3
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_convertible.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _T1, class _T2>
struct is_convertible : public integral_constant<bool, __is_convertible(_T1, _T2)> {};


template <class _From, class _To>
inline constexpr bool is_convertible_v = __is_convertible(_From, _To);


}}
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/convertible_to.h" 2 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/convertible_to.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 31 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/convertible_to.h" 3
}}
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/common_reference_with.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/same_as.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/same_as.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 33 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/same_as.h" 3
}}
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/common_reference_with.h" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/common_reference.h" 1 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/common_reference.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/common_type.h" 1 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/common_type.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/decay.h" 1 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/decay.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/add_pointer.h" 1 3
# 21 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/add_pointer.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



template <class _Tp>
using __add_pointer_t = __add_pointer(_Tp);
# 45 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/add_pointer.h" 3
template <class _Tp>
struct add_pointer {
  using type __attribute__((__nodebug__)) = __add_pointer_t<_Tp>;
};


template <class _Tp>
using add_pointer_t = __add_pointer_t<_Tp>;


}}
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/decay.h" 2 3





# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/remove_extent.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/remove_extent.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {


template <class _Tp>
struct remove_extent {
  using type __attribute__((__nodebug__)) = __remove_extent(_Tp);
};

template <class _Tp>
using __remove_extent_t = __remove_extent(_Tp);
# 48 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/remove_extent.h" 3
template <class _Tp>
using remove_extent_t = __remove_extent_t<_Tp>;


}}
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/decay.h" 2 3
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/decay.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {


template <class _Tp>
using __decay_t __attribute__((__nodebug__)) = __decay(_Tp);

template <class _Tp>
struct decay {
  using type __attribute__((__nodebug__)) = __decay_t<_Tp>;
};
# 67 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/decay.h" 3
template <class _Tp>
using decay_t = __decay_t<_Tp>;


}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/common_type.h" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/remove_cvref.h" 1 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/remove_cvref.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {


template <class _Tp>
using __remove_cvref_t __attribute__((__nodebug__)) = __remove_cvref(_Tp);





template <class _Tp, class _Up>
struct __is_same_uncvref : _IsSame<__remove_cvref_t<_Tp>, __remove_cvref_t<_Up> > {};
# 44 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/remove_cvref.h" 3
}}
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/common_type.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/void_t.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/void_t.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {


template <class...>
using void_t = void;


template <class...>
using __void_t = void;

}}
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/common_type.h" 2 3
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/common_type.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 43 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/common_type.h" 3
template <class _Tp, class _Up, class = void>
struct __common_type2_imp {};



template <class _Tp, class _Up>
struct __common_type2_imp<_Tp, _Up, __void_t<decltype(true ? std::declval<_Tp>() : std::declval<_Up>())> > {
  typedef __attribute__((__nodebug__)) __decay_t<decltype(true ? std::declval<_Tp>() : std::declval<_Up>())> type;
};

template <class, class = void>
struct __common_type_impl {};

template <class... _Tp>
struct __common_types;
template <class... _Tp>
struct common_type;

template <class _Tp, class _Up>
struct __common_type_impl< __common_types<_Tp, _Up>, __void_t<typename common_type<_Tp, _Up>::type> > {
  typedef typename common_type<_Tp, _Up>::type type;
};

template <class _Tp, class _Up, class _Vp, class... _Rest>
struct __common_type_impl<__common_types<_Tp, _Up, _Vp, _Rest...>, __void_t<typename common_type<_Tp, _Up>::type> >
    : __common_type_impl<__common_types<typename common_type<_Tp, _Up>::type, _Vp, _Rest...> > {};



template <>
struct common_type<> {};



template <class _Tp>
struct common_type<_Tp> : public common_type<_Tp, _Tp> {};




template <class _Tp, class _Up>
struct common_type<_Tp, _Up>
    : conditional<_IsSame<_Tp, __decay_t<_Tp> >::value && _IsSame<_Up, __decay_t<_Up> >::value,
                  __common_type2_imp<_Tp, _Up>,
                  common_type<__decay_t<_Tp>, __decay_t<_Up> > >::type {};



template <class _Tp, class _Up, class _Vp, class... _Rest>
struct common_type<_Tp, _Up, _Vp, _Rest...>
    : __common_type_impl<__common_types<_Tp, _Up, _Vp, _Rest...> > {};


template <class... _Tp>
using common_type_t = typename common_type<_Tp...>::type;


}}
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/common_reference.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/copy_cv.h" 1 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/copy_cv.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/add_cv.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/add_cv.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
struct add_cv {
  typedef __attribute__((__nodebug__)) const volatile _Tp type;
};


template <class _Tp>
using add_cv_t = typename add_cv<_Tp>::type;


}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/copy_cv.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/add_volatile.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/add_volatile.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
struct add_volatile {
  typedef __attribute__((__nodebug__)) volatile _Tp type;
};


template <class _Tp>
using add_volatile_t = typename add_volatile<_Tp>::type;


}}
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/copy_cv.h" 2 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/copy_cv.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



template <class _From, class _To>
struct __copy_cv {
  using type = _To;
};

template <class _From, class _To>
struct __copy_cv<const _From, _To> {
  using type = typename add_const<_To>::type;
};

template <class _From, class _To>
struct __copy_cv<volatile _From, _To> {
  using type = typename add_volatile<_To>::type;
};

template <class _From, class _To>
struct __copy_cv<const volatile _From, _To> {
  using type = typename add_cv<_To>::type;
};

template <class _From, class _To>
using __copy_cv_t = typename __copy_cv<_From, _To>::type;

}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/common_reference.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/copy_cvref.h" 1 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/copy_cvref.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _From, class _To>
struct __copy_cvref {
  using type = __copy_cv_t<_From, _To>;
};

template <class _From, class _To>
struct __copy_cvref<_From&, _To> {
  using type = __add_lvalue_reference_t<__copy_cv_t<_From, _To> >;
};

template <class _From, class _To>
struct __copy_cvref<_From&&, _To> {
  using type = __add_rvalue_reference_t<__copy_cv_t<_From, _To> >;
};

template <class _From, class _To>
using __copy_cvref_t = typename __copy_cvref<_From, _To>::type;

}}
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/common_reference.h" 2 3
# 25 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/common_reference.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 191 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/common_reference.h" 3
}}
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/common_reference_with.h" 2 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/common_reference_with.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 34 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/common_reference_with.h" 3
}}
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/assignable.h" 2 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/make_const_lvalue_ref.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/make_const_lvalue_ref.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
using __make_const_lvalue_ref = const __libcpp_remove_reference_t<_Tp>&;

}}
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/assignable.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/forward.h" 1 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/forward.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Tp&&
forward([[_Clang::__lifetimebound__]] __libcpp_remove_reference_t<_Tp>& __t) noexcept {
  return static_cast<_Tp&&>(__t);
}

template <class _Tp>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Tp&&
forward([[_Clang::__lifetimebound__]] __libcpp_remove_reference_t<_Tp>&& __t) noexcept {
  static_assert(!is_lvalue_reference<_Tp>::value, "cannot forward an rvalue as an lvalue");
  return static_cast<_Tp&&>(__t);
}

}}
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/assignable.h" 2 3
# 21 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/assignable.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 39 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/assignable.h" 3
}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/concepts.h" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/constructible.h" 1 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/constructible.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/destructible.h" 1 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/destructible.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_nothrow_destructible.h" 1 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_nothrow_destructible.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_destructible.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_destructible.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/remove_all_extents.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/remove_all_extents.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {


template <class _Tp>
struct remove_all_extents {
  using type __attribute__((__nodebug__)) = __remove_all_extents(_Tp);
};

template <class _Tp>
using __remove_all_extents_t = __remove_all_extents(_Tp);
# 48 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/remove_all_extents.h" 3
template <class _Tp>
using remove_all_extents_t = __remove_all_extents_t<_Tp>;


}}
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_destructible.h" 2 3
# 21 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_destructible.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



template <class _Tp>
struct is_destructible : _BoolConstant<__is_destructible(_Tp)> {};


template <class _Tp>
inline constexpr bool is_destructible_v = __is_destructible(_Tp);
# 95 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_destructible.h" 3
}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_nothrow_destructible.h" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_scalar.h" 1 3
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_scalar.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_enum.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_enum.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
struct is_enum : public integral_constant<bool, __is_enum(_Tp)> {};


template <class _Tp>
inline constexpr bool is_enum_v = __is_enum(_Tp);


}}
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_scalar.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_member_pointer.h" 1 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_member_pointer.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_member_function_pointer.h" 1 3
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_member_function_pointer.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
struct __libcpp_is_member_pointer {
  enum { __is_member = false, __is_func = false, __is_obj = false };
};
template <class _Tp, class _Up>
struct __libcpp_is_member_pointer<_Tp _Up::*> {
  enum {
    __is_member = true,
    __is_func = is_function<_Tp>::value,
    __is_obj = !__is_func,
  };
};



template <class _Tp>
struct is_member_function_pointer : _BoolConstant<__is_member_function_pointer(_Tp)> {};


template <class _Tp>
inline constexpr bool is_member_function_pointer_v = __is_member_function_pointer(_Tp);
# 60 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_member_function_pointer.h" 3
}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_member_pointer.h" 2 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_member_pointer.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



template <class _Tp>
struct is_member_pointer : _BoolConstant<__is_member_pointer(_Tp)> {};


template <class _Tp>
inline constexpr bool is_member_pointer_v = __is_member_pointer(_Tp);
# 45 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_member_pointer.h" 3
}}
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_scalar.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_null_pointer.h" 1 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_null_pointer.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
struct __is_nullptr_t_impl : public false_type {};
template <>
struct __is_nullptr_t_impl<nullptr_t> : public true_type {};

template <class _Tp>
struct __is_nullptr_t : public __is_nullptr_t_impl<__remove_cv_t<_Tp> > {};


template <class _Tp>
struct is_null_pointer : public __is_nullptr_t_impl<__remove_cv_t<_Tp> > {};


template <class _Tp>
inline constexpr bool is_null_pointer_v = is_null_pointer<_Tp>::value;



}}
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_scalar.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_pointer.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_pointer.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



template <class _Tp>
struct is_pointer : _BoolConstant<__is_pointer(_Tp)> {};


template <class _Tp>
inline constexpr bool is_pointer_v = __is_pointer(_Tp);
# 63 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_pointer.h" 3
}}
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_scalar.h" 2 3
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_scalar.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



template <class _Tp>
struct is_scalar : _BoolConstant<__is_scalar(_Tp)> {};


template <class _Tp>
inline constexpr bool is_scalar_v = __is_scalar(_Tp);
# 67 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_scalar.h" 3
}}
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_nothrow_destructible.h" 2 3
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_nothrow_destructible.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



template <bool, class _Tp>
struct __libcpp_is_nothrow_destructible;

template <class _Tp>
struct __libcpp_is_nothrow_destructible<false, _Tp> : public false_type {};

template <class _Tp>
struct __libcpp_is_nothrow_destructible<true, _Tp>
    : public integral_constant<bool, noexcept(std::declval<_Tp>().~_Tp()) > {};

template <class _Tp>
struct is_nothrow_destructible
    : public __libcpp_is_nothrow_destructible<is_destructible<_Tp>::value, _Tp> {};

template <class _Tp, size_t _Ns>
struct is_nothrow_destructible<_Tp[_Ns]> : public is_nothrow_destructible<_Tp> {};

template <class _Tp>
struct is_nothrow_destructible<_Tp&> : public true_type {};

template <class _Tp>
struct is_nothrow_destructible<_Tp&&> : public true_type {};
# 68 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_nothrow_destructible.h" 3
template <class _Tp>
inline constexpr bool is_nothrow_destructible_v = is_nothrow_destructible<_Tp>::value;


}}
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/destructible.h" 2 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/destructible.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 30 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/destructible.h" 3
}}
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/constructible.h" 2 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/constructible.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 53 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/constructible.h" 3
}}
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/concepts.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/copyable.h" 1 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/copyable.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/movable.h" 1 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/movable.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/swappable.h" 1 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/swappable.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/class_or_enum.h" 1 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/class_or_enum.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_class.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_class.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
struct is_class : public integral_constant<bool, __is_class(_Tp)> {};


template <class _Tp>
inline constexpr bool is_class_v = __is_class(_Tp);


}}
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/class_or_enum.h" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_union.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_union.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
struct is_union : public integral_constant<bool, __is_union(_Tp)> {};


template <class _Tp>
inline constexpr bool is_union_v = __is_union(_Tp);


}}
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/class_or_enum.h" 2 3
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/class_or_enum.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 38 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/class_or_enum.h" 3
}}
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/swappable.h" 2 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/extent.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/extent.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



template <class _Tp, size_t _Dim = 0>
struct extent : integral_constant<size_t, __array_extent(_Tp, _Dim)> {};


template <class _Tp, unsigned _Ip = 0>
inline constexpr size_t extent_v = __array_extent(_Tp, _Ip);
# 52 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/extent.h" 3
}}
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/swappable.h" 2 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/exchange.h" 1 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/exchange.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_nothrow_assignable.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_nothrow_assignable.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp, class _Arg>
struct is_nothrow_assignable : public integral_constant<bool, __is_nothrow_assignable(_Tp, _Arg)> {
};


template <class _Tp, class _Arg>
inline constexpr bool is_nothrow_assignable_v = __is_nothrow_assignable(_Tp, _Arg);


}}
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/exchange.h" 2 3
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/exchange.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/exchange.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {


template <class _T1, class _T2 = _T1>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _T1 exchange(_T1& __obj, _T2&& __new_value) noexcept(
    is_nothrow_move_constructible<_T1>::value && is_nothrow_assignable<_T1&, _T2>::value) {
  _T1 __old_value = std::move(__obj);
  __obj = std::forward<_T2>(__new_value);
  return __old_value;
}


}}
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/swappable.h" 2 3
# 29 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/swappable.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 33 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/swappable.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 119 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/swappable.h" 3
}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/movable.h" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_object.h" 1 3
# 21 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_object.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



template <class _Tp>
struct is_object : _BoolConstant<__is_object(_Tp)> {};


template <class _Tp>
inline constexpr bool is_object_v = __is_object(_Tp);
# 50 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_object.h" 3
}}
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/movable.h" 2 3
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/movable.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 33 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/movable.h" 3
}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/copyable.h" 2 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/copyable.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 39 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/copyable.h" 3
}}
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/concepts.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/derived_from.h" 1 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/derived_from.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_base_of.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_base_of.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Bp, class _Dp>
struct is_base_of : public integral_constant<bool, __is_base_of(_Bp, _Dp)> {};


template <class _Bp, class _Dp>
inline constexpr bool is_base_of_v = __is_base_of(_Bp, _Dp);


}}
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/derived_from.h" 2 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/derived_from.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 31 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/derived_from.h" 3
}}
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/concepts.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/equality_comparable.h" 1 3
# 12 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/equality_comparable.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/boolean_testable.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/boolean_testable.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 36 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/boolean_testable.h" 3
}}
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/equality_comparable.h" 2 3
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/equality_comparable.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 54 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/equality_comparable.h" 3
}}
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/concepts.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/invocable.h" 1 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/invocable.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__functional/invoke.h" 1 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__functional/invoke.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/invoke.h" 1 3
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/invoke.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/apply_cv.h" 1 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/apply_cv.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_volatile.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_volatile.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



template <class _Tp>
struct is_volatile : _BoolConstant<__is_volatile(_Tp)> {};


template <class _Tp>
inline constexpr bool is_volatile_v = __is_volatile(_Tp);
# 45 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_volatile.h" 3
}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/apply_cv.h" 2 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/apply_cv.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp,
          bool = is_const<__libcpp_remove_reference_t<_Tp> >::value,
          bool = is_volatile<__libcpp_remove_reference_t<_Tp> >::value>
struct __apply_cv_impl {
  template <class _Up>
  using __apply __attribute__((__nodebug__)) = _Up;
};

template <class _Tp>
struct __apply_cv_impl<_Tp, true, false> {
  template <class _Up>
  using __apply __attribute__((__nodebug__)) = const _Up;
};

template <class _Tp>
struct __apply_cv_impl<_Tp, false, true> {
  template <class _Up>
  using __apply __attribute__((__nodebug__)) = volatile _Up;
};

template <class _Tp>
struct __apply_cv_impl<_Tp, true, true> {
  template <class _Up>
  using __apply __attribute__((__nodebug__)) = const volatile _Up;
};

template <class _Tp>
struct __apply_cv_impl<_Tp&, false, false> {
  template <class _Up>
  using __apply __attribute__((__nodebug__)) = _Up&;
};

template <class _Tp>
struct __apply_cv_impl<_Tp&, true, false> {
  template <class _Up>
  using __apply __attribute__((__nodebug__)) = const _Up&;
};

template <class _Tp>
struct __apply_cv_impl<_Tp&, false, true> {
  template <class _Up>
  using __apply __attribute__((__nodebug__)) = volatile _Up&;
};

template <class _Tp>
struct __apply_cv_impl<_Tp&, true, true> {
  template <class _Up>
  using __apply __attribute__((__nodebug__)) = const volatile _Up&;
};

template <class _Tp, class _Up>
using __apply_cv_t __attribute__((__nodebug__)) = typename __apply_cv_impl<_Tp>::template __apply<_Up>;

}}
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/invoke.h" 2 3





# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_core_convertible.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_core_convertible.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {






template <class _Tp, class _Up, class = void>
struct __is_core_convertible : public false_type {};

template <class _Tp, class _Up>
struct __is_core_convertible<_Tp, _Up, decltype(static_cast<void (*)(_Up)>(0)(static_cast<_Tp (*)()>(0)()))>
    : public true_type {};

}}
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/invoke.h" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_member_object_pointer.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_member_object_pointer.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



template <class _Tp>
struct is_member_object_pointer : _BoolConstant<__is_member_object_pointer(_Tp)> {};


template <class _Tp>
inline constexpr bool is_member_object_pointer_v = __is_member_object_pointer(_Tp);
# 44 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_member_object_pointer.h" 3
}}
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/invoke.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_reference_wrapper.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_reference_wrapper.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
class reference_wrapper;

template <class _Tp>
struct __is_reference_wrapper_impl : public false_type {};
template <class _Tp>
struct __is_reference_wrapper_impl<reference_wrapper<_Tp> > : public true_type {};
template <class _Tp>
struct __is_reference_wrapper : public __is_reference_wrapper_impl<__remove_cv_t<_Tp> > {};

}}
# 25 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/invoke.h" 2 3
# 34 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/invoke.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

struct __any {
  __any(...);
};

template <class _MP, bool _IsMemberFunctionPtr, bool _IsMemberObjectPtr>
struct __member_pointer_traits_imp {};

template <class _Rp, class _Class, class... _Param>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...), true, false> {
  typedef _Class _ClassType;
  typedef _Rp _ReturnType;
  typedef _Rp(_FnType)(_Param...);
};

template <class _Rp, class _Class, class... _Param>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...), true, false> {
  typedef _Class _ClassType;
  typedef _Rp _ReturnType;
  typedef _Rp(_FnType)(_Param..., ...);
};

template <class _Rp, class _Class, class... _Param>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...) const, true, false> {
  typedef _Class const _ClassType;
  typedef _Rp _ReturnType;
  typedef _Rp(_FnType)(_Param...);
};

template <class _Rp, class _Class, class... _Param>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...) const, true, false> {
  typedef _Class const _ClassType;
  typedef _Rp _ReturnType;
  typedef _Rp(_FnType)(_Param..., ...);
};

template <class _Rp, class _Class, class... _Param>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...) volatile, true, false> {
  typedef _Class volatile _ClassType;
  typedef _Rp _ReturnType;
  typedef _Rp(_FnType)(_Param...);
};

template <class _Rp, class _Class, class... _Param>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...) volatile, true, false> {
  typedef _Class volatile _ClassType;
  typedef _Rp _ReturnType;
  typedef _Rp(_FnType)(_Param..., ...);
};

template <class _Rp, class _Class, class... _Param>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...) const volatile, true, false> {
  typedef _Class const volatile _ClassType;
  typedef _Rp _ReturnType;
  typedef _Rp(_FnType)(_Param...);
};

template <class _Rp, class _Class, class... _Param>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...) const volatile, true, false> {
  typedef _Class const volatile _ClassType;
  typedef _Rp _ReturnType;
  typedef _Rp(_FnType)(_Param..., ...);
};

template <class _Rp, class _Class, class... _Param>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...)&, true, false> {
  typedef _Class& _ClassType;
  typedef _Rp _ReturnType;
  typedef _Rp(_FnType)(_Param...);
};

template <class _Rp, class _Class, class... _Param>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...)&, true, false> {
  typedef _Class& _ClassType;
  typedef _Rp _ReturnType;
  typedef _Rp(_FnType)(_Param..., ...);
};

template <class _Rp, class _Class, class... _Param>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...) const&, true, false> {
  typedef _Class const& _ClassType;
  typedef _Rp _ReturnType;
  typedef _Rp(_FnType)(_Param...);
};

template <class _Rp, class _Class, class... _Param>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...) const&, true, false> {
  typedef _Class const& _ClassType;
  typedef _Rp _ReturnType;
  typedef _Rp(_FnType)(_Param..., ...);
};

template <class _Rp, class _Class, class... _Param>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...) volatile&, true, false> {
  typedef _Class volatile& _ClassType;
  typedef _Rp _ReturnType;
  typedef _Rp(_FnType)(_Param...);
};

template <class _Rp, class _Class, class... _Param>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...) volatile&, true, false> {
  typedef _Class volatile& _ClassType;
  typedef _Rp _ReturnType;
  typedef _Rp(_FnType)(_Param..., ...);
};

template <class _Rp, class _Class, class... _Param>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...) const volatile&, true, false> {
  typedef _Class const volatile& _ClassType;
  typedef _Rp _ReturnType;
  typedef _Rp(_FnType)(_Param...);
};

template <class _Rp, class _Class, class... _Param>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...) const volatile&, true, false> {
  typedef _Class const volatile& _ClassType;
  typedef _Rp _ReturnType;
  typedef _Rp(_FnType)(_Param..., ...);
};

template <class _Rp, class _Class, class... _Param>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...)&&, true, false> {
  typedef _Class&& _ClassType;
  typedef _Rp _ReturnType;
  typedef _Rp(_FnType)(_Param...);
};

template <class _Rp, class _Class, class... _Param>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...)&&, true, false> {
  typedef _Class&& _ClassType;
  typedef _Rp _ReturnType;
  typedef _Rp(_FnType)(_Param..., ...);
};

template <class _Rp, class _Class, class... _Param>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...) const&&, true, false> {
  typedef _Class const&& _ClassType;
  typedef _Rp _ReturnType;
  typedef _Rp(_FnType)(_Param...);
};

template <class _Rp, class _Class, class... _Param>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...) const&&, true, false> {
  typedef _Class const&& _ClassType;
  typedef _Rp _ReturnType;
  typedef _Rp(_FnType)(_Param..., ...);
};

template <class _Rp, class _Class, class... _Param>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...) volatile&&, true, false> {
  typedef _Class volatile&& _ClassType;
  typedef _Rp _ReturnType;
  typedef _Rp(_FnType)(_Param...);
};

template <class _Rp, class _Class, class... _Param>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...) volatile&&, true, false> {
  typedef _Class volatile&& _ClassType;
  typedef _Rp _ReturnType;
  typedef _Rp(_FnType)(_Param..., ...);
};

template <class _Rp, class _Class, class... _Param>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...) const volatile&&, true, false> {
  typedef _Class const volatile&& _ClassType;
  typedef _Rp _ReturnType;
  typedef _Rp(_FnType)(_Param...);
};

template <class _Rp, class _Class, class... _Param>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...) const volatile&&, true, false> {
  typedef _Class const volatile&& _ClassType;
  typedef _Rp _ReturnType;
  typedef _Rp(_FnType)(_Param..., ...);
};

template <class _Rp, class _Class>
struct __member_pointer_traits_imp<_Rp _Class::*, false, true> {
  typedef _Class _ClassType;
  typedef _Rp _ReturnType;
};

template <class _MP>
struct __member_pointer_traits
    : public __member_pointer_traits_imp<__remove_cv_t<_MP>,
                                         is_member_function_pointer<_MP>::value,
                                         is_member_object_pointer<_MP>::value> {



};

template <class _DecayedFp>
struct __member_pointer_class_type {};

template <class _Ret, class _ClassType>
struct __member_pointer_class_type<_Ret _ClassType::*> {
  typedef _ClassType type;
};

template <class _Fp,
          class _A0,
          class _DecayFp = __decay_t<_Fp>,
          class _DecayA0 = __decay_t<_A0>,
          class _ClassT = typename __member_pointer_class_type<_DecayFp>::type>
using __enable_if_bullet1 =
    __enable_if_t<is_member_function_pointer<_DecayFp>::value &&
                  (is_same<_ClassT, _DecayA0>::value || is_base_of<_ClassT, _DecayA0>::value)>;

template <class _Fp, class _A0, class _DecayFp = __decay_t<_Fp>, class _DecayA0 = __decay_t<_A0> >
using __enable_if_bullet2 =
    __enable_if_t<is_member_function_pointer<_DecayFp>::value && __is_reference_wrapper<_DecayA0>::value>;

template <class _Fp,
          class _A0,
          class _DecayFp = __decay_t<_Fp>,
          class _DecayA0 = __decay_t<_A0>,
          class _ClassT = typename __member_pointer_class_type<_DecayFp>::type>
using __enable_if_bullet3 =
    __enable_if_t<is_member_function_pointer<_DecayFp>::value &&
                  !(is_same<_ClassT, _DecayA0>::value || is_base_of<_ClassT, _DecayA0>::value) &&
                  !__is_reference_wrapper<_DecayA0>::value>;

template <class _Fp,
          class _A0,
          class _DecayFp = __decay_t<_Fp>,
          class _DecayA0 = __decay_t<_A0>,
          class _ClassT = typename __member_pointer_class_type<_DecayFp>::type>
using __enable_if_bullet4 =
    __enable_if_t<is_member_object_pointer<_DecayFp>::value &&
                  (is_same<_ClassT, _DecayA0>::value || is_base_of<_ClassT, _DecayA0>::value)>;

template <class _Fp, class _A0, class _DecayFp = __decay_t<_Fp>, class _DecayA0 = __decay_t<_A0> >
using __enable_if_bullet5 =
    __enable_if_t<is_member_object_pointer<_DecayFp>::value && __is_reference_wrapper<_DecayA0>::value>;

template <class _Fp,
          class _A0,
          class _DecayFp = __decay_t<_Fp>,
          class _DecayA0 = __decay_t<_A0>,
          class _ClassT = typename __member_pointer_class_type<_DecayFp>::type>
using __enable_if_bullet6 =
    __enable_if_t<is_member_object_pointer<_DecayFp>::value &&
                  !(is_same<_ClassT, _DecayA0>::value || is_base_of<_ClassT, _DecayA0>::value) &&
                  !__is_reference_wrapper<_DecayA0>::value>;





template <class... _Args>
__nat __invoke(__any, _Args&&... __args);




template <class _Fp, class _A0, class... _Args, class = __enable_if_bullet1<_Fp, _A0> >
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr
decltype((std::declval<_A0>().*std::declval<_Fp>())(std::declval<_Args>()...))
__invoke(_Fp&& __f, _A0&& __a0, _Args&&... __args)
    noexcept(noexcept((static_cast<_A0&&>(__a0).*__f)(static_cast<_Args&&>(__args)...)))
               { return (static_cast<_A0&&>(__a0).*__f)(static_cast<_Args&&>(__args)...); }

template <class _Fp, class _A0, class... _Args, class = __enable_if_bullet2<_Fp, _A0> >
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr
decltype((std::declval<_A0>().get().*std::declval<_Fp>())(std::declval<_Args>()...))
__invoke(_Fp&& __f, _A0&& __a0, _Args&&... __args)
    noexcept(noexcept((__a0.get().*__f)(static_cast<_Args&&>(__args)...)))
               { return (__a0.get().*__f)(static_cast<_Args&&>(__args)...); }

template <class _Fp, class _A0, class... _Args, class = __enable_if_bullet3<_Fp, _A0> >
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr
decltype(((*std::declval<_A0>()).*std::declval<_Fp>())(std::declval<_Args>()...))
__invoke(_Fp&& __f, _A0&& __a0, _Args&&... __args)
    noexcept(noexcept(((*static_cast<_A0&&>(__a0)).*__f)(static_cast<_Args&&>(__args)...)))
               { return ((*static_cast<_A0&&>(__a0)).*__f)(static_cast<_Args&&>(__args)...); }



template <class _Fp, class _A0, class = __enable_if_bullet4<_Fp, _A0> >
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr
decltype(std::declval<_A0>().*std::declval<_Fp>())
__invoke(_Fp&& __f, _A0&& __a0)
    noexcept(noexcept(static_cast<_A0&&>(__a0).*__f))
               { return static_cast<_A0&&>(__a0).*__f; }

template <class _Fp, class _A0, class = __enable_if_bullet5<_Fp, _A0> >
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr
decltype(std::declval<_A0>().get().*std::declval<_Fp>())
__invoke(_Fp&& __f, _A0&& __a0)
    noexcept(noexcept(__a0.get().*__f))
               { return __a0.get().*__f; }

template <class _Fp, class _A0, class = __enable_if_bullet6<_Fp, _A0> >
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr
decltype((*std::declval<_A0>()).*std::declval<_Fp>())
__invoke(_Fp&& __f, _A0&& __a0)
    noexcept(noexcept((*static_cast<_A0&&>(__a0)).*__f))
               { return (*static_cast<_A0&&>(__a0)).*__f; }



template <class _Fp, class... _Args>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr
decltype(std::declval<_Fp>()(std::declval<_Args>()...))
__invoke(_Fp&& __f, _Args&&... __args)
    noexcept(noexcept(static_cast<_Fp&&>(__f)(static_cast<_Args&&>(__args)...)))
               { return static_cast<_Fp&&>(__f)(static_cast<_Args&&>(__args)...); }



template <class _Ret, class _Fp, class... _Args>
struct __invokable_r {
  template <class _XFp, class... _XArgs>
  static decltype(std::__invoke(std::declval<_XFp>(), std::declval<_XArgs>()...)) __try_call(int);
  template <class _XFp, class... _XArgs>
  static __nat __try_call(...);



  using _Result = decltype(__try_call<_Fp, _Args...>(0));

  using type = __conditional_t<_IsNotSame<_Result, __nat>::value,
                               __conditional_t<is_void<_Ret>::value, true_type, __is_core_convertible<_Result, _Ret> >,
                               false_type>;
  static const bool value = type::value;
};
template <class _Fp, class... _Args>
using __invokable = __invokable_r<void, _Fp, _Args...>;

template <bool _IsInvokable, bool _IsCVVoid, class _Ret, class _Fp, class... _Args>
struct __nothrow_invokable_r_imp {
  static const bool value = false;
};

template <class _Ret, class _Fp, class... _Args>
struct __nothrow_invokable_r_imp<true, false, _Ret, _Fp, _Args...> {
  typedef __nothrow_invokable_r_imp _ThisT;

  template <class _Tp>
  static void __test_noexcept(_Tp) noexcept;




  static const bool value =
      noexcept(_ThisT::__test_noexcept<_Ret>(std::__invoke(std::declval<_Fp>(), std::declval<_Args>()...)));

};

template <class _Ret, class _Fp, class... _Args>
struct __nothrow_invokable_r_imp<true, true, _Ret, _Fp, _Args...> {



  static const bool value = noexcept(std::__invoke(std::declval<_Fp>(), std::declval<_Args>()...));

};

template <class _Ret, class _Fp, class... _Args>
using __nothrow_invokable_r =
    __nothrow_invokable_r_imp<__invokable_r<_Ret, _Fp, _Args...>::value, is_void<_Ret>::value, _Ret, _Fp, _Args...>;

template <class _Fp, class... _Args>
using __nothrow_invokable = __nothrow_invokable_r_imp<__invokable<_Fp, _Args...>::value, true, void, _Fp, _Args...>;

template <class _Fp, class... _Args>
struct __invoke_of
    : public enable_if<__invokable<_Fp, _Args...>::value, typename __invokable_r<void, _Fp, _Args...>::_Result> {};

template <class _Ret, bool = is_void<_Ret>::value>
struct __invoke_void_return_wrapper {
  template <class... _Args>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static _Ret __call(_Args&&... __args) {
    return std::__invoke(std::forward<_Args>(__args)...);
  }
};

template <class _Ret>
struct __invoke_void_return_wrapper<_Ret, true> {
  template <class... _Args>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static void __call(_Args&&... __args) {
    std::__invoke(std::forward<_Args>(__args)...);
  }
};





template <class _Fn, class... _Args>
struct is_invocable : integral_constant<bool, __invokable<_Fn, _Args...>::value> {};

template <class _Ret, class _Fn, class... _Args>
struct is_invocable_r : integral_constant<bool, __invokable_r<_Ret, _Fn, _Args...>::value> {};

template <class _Fn, class... _Args>
inline constexpr bool is_invocable_v = is_invocable<_Fn, _Args...>::value;

template <class _Ret, class _Fn, class... _Args>
inline constexpr bool is_invocable_r_v = is_invocable_r<_Ret, _Fn, _Args...>::value;



template <class _Fn, class... _Args>
struct is_nothrow_invocable : integral_constant<bool, __nothrow_invokable<_Fn, _Args...>::value> {
};

template <class _Ret, class _Fn, class... _Args>
struct is_nothrow_invocable_r
    : integral_constant<bool, __nothrow_invokable_r<_Ret, _Fn, _Args...>::value> {};

template <class _Fn, class... _Args>
inline constexpr bool is_nothrow_invocable_v = is_nothrow_invocable<_Fn, _Args...>::value;

template <class _Ret, class _Fn, class... _Args>
inline constexpr bool is_nothrow_invocable_r_v = is_nothrow_invocable_r<_Ret, _Fn, _Args...>::value;

template <class _Fn, class... _Args>
struct invoke_result : __invoke_of<_Fn, _Args...> {};

template <class _Fn, class... _Args>
using invoke_result_t = typename invoke_result<_Fn, _Args...>::type;



}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__functional/invoke.h" 2 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__functional/invoke.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



template <class _Fn, class... _Args>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) invoke_result_t<_Fn, _Args...>
invoke(_Fn&& __f, _Args&&... __args) noexcept(is_nothrow_invocable_v<_Fn, _Args...>) {
  return std::__invoke(std::forward<_Fn>(__f), std::forward<_Args>(__args)...);
}
# 52 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__functional/invoke.h" 3
}}
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/invocable.h" 2 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/invocable.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 38 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/invocable.h" 3
}}
# 21 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/concepts.h" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/predicate.h" 1 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/predicate.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 32 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/predicate.h" 3
}}
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/concepts.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/regular.h" 1 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/regular.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/semiregular.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/semiregular.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 31 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/semiregular.h" 3
}}
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/regular.h" 2 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/regular.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 31 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/regular.h" 3
}}
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/concepts.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/relation.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/relation.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 41 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/relation.h" 3
}}
# 25 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/concepts.h" 2 3


# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/totally_ordered.h" 1 3
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/totally_ordered.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 57 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/totally_ordered.h" 3
}}
# 28 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/concepts.h" 2 3


# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/incrementable_traits.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/incrementable_traits.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_primary_template.h" 1 3
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_primary_template.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_valid_expansion.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_valid_expansion.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <template <class...> class _Templ, class... _Args, class = _Templ<_Args...> >
true_type __sfinae_test_impl(int);
template <template <class...> class, class...>
false_type __sfinae_test_impl(...);

template <template <class...> class _Templ, class... _Args>
using _IsValidExpansion __attribute__((__nodebug__)) = decltype(std::__sfinae_test_impl<_Templ, _Args...>(0));

}}
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_primary_template.h" 2 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_primary_template.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
using __test_for_primary_template = __enable_if_t<_IsSame<_Tp, typename _Tp::__primary_template>::value>;

template <class _Tp>
using __is_primary_template = _IsValidExpansion<__test_for_primary_template, _Tp>;

}}
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/incrementable_traits.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/make_signed.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/make_signed.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/type_list.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/type_list.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Hp, class _Tp>
struct __type_list {
  typedef _Hp _Head;
  typedef _Tp _Tail;
};

template <class _TypeList, size_t _Size, bool = _Size <= sizeof(typename _TypeList::_Head)>
struct __find_first;

template <class _Hp, class _Tp, size_t _Size>
struct __find_first<__type_list<_Hp, _Tp>, _Size, true> {
  typedef __attribute__((__nodebug__)) _Hp type;
};

template <class _Hp, class _Tp, size_t _Size>
struct __find_first<__type_list<_Hp, _Tp>, _Size, false> {
  typedef __attribute__((__nodebug__)) typename __find_first<_Tp, _Size>::type type;
};

}}
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/make_signed.h" 2 3
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/make_signed.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



template <class _Tp>
using __make_signed_t = __make_signed(_Tp);
# 77 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/make_signed.h" 3
template <class _Tp>
struct make_signed {
  using type __attribute__((__nodebug__)) = __make_signed_t<_Tp>;
};


template <class _Tp>
using make_signed_t = __make_signed_t<_Tp>;


}}
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/incrementable_traits.h" 2 3
# 25 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/incrementable_traits.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 77 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/incrementable_traits.h" 3
}}
# 31 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/concepts.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/iter_move.h" 1 3
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/iter_move.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/iterator_traits.h" 1 3
# 21 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/iterator_traits.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__fwd/pair.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__fwd/pair.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class, class>
struct pair;

}}
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/iterator_traits.h" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/readable_traits.h" 1 3
# 25 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/readable_traits.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 79 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/readable_traits.h" 3
}}
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/iterator_traits.h" 2 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/disjunction.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/disjunction.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <bool>
struct _OrImpl;

template <>
struct _OrImpl<true> {
  template <class _Res, class _First, class... _Rest>
  using _Result __attribute__((__nodebug__)) =
      typename _OrImpl<!bool(_First::value) && sizeof...(_Rest) != 0>::template _Result<_First, _Rest...>;
};

template <>
struct _OrImpl<false> {
  template <class _Res, class...>
  using _Result = _Res;
};







template <class... _Args>
using _Or __attribute__((__nodebug__)) = typename _OrImpl<sizeof...(_Args) != 0>::template _Result<false_type, _Args...>;



template <class... _Args>
struct disjunction : _Or<_Args...> {};

template <class... _Args>
inline constexpr bool disjunction_v = _Or<_Args...>::value;



}}
# 28 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/iterator_traits.h" 2 3
# 42 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/iterator_traits.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 65 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/iterator_traits.h" 3
template <class _Iter>
struct iterator_traits;

struct input_iterator_tag {};
struct output_iterator_tag {};
struct forward_iterator_tag : public input_iterator_tag {};
struct bidirectional_iterator_tag : public forward_iterator_tag {};
struct random_access_iterator_tag : public bidirectional_iterator_tag {};




template <class _Iter>
struct __iter_traits_cache {
  using type = _If< __is_primary_template<iterator_traits<_Iter> >::value, _Iter, iterator_traits<_Iter> >;
};
template <class _Iter>
using _ITER_TRAITS = typename __iter_traits_cache<_Iter>::type;

struct __iter_concept_concept_test {
  template <class _Iter>
  using _Apply = typename _ITER_TRAITS<_Iter>::iterator_concept;
};
struct __iter_concept_category_test {
  template <class _Iter>
  using _Apply = typename _ITER_TRAITS<_Iter>::iterator_category;
};
struct __iter_concept_random_fallback {
  template <class _Iter>
  using _Apply = __enable_if_t< __is_primary_template<iterator_traits<_Iter> >::value, random_access_iterator_tag >;
};

template <class _Iter, class _Tester>
struct __test_iter_concept : _IsValidExpansion<_Tester::template _Apply, _Iter>, _Tester {};

template <class _Iter>
struct __iter_concept_cache {
  using type = _Or< __test_iter_concept<_Iter, __iter_concept_concept_test>,
                    __test_iter_concept<_Iter, __iter_concept_category_test>,
                    __test_iter_concept<_Iter, __iter_concept_random_fallback> >;
};

template <class _Iter>
using _ITER_CONCEPT = typename __iter_concept_cache<_Iter>::type::template _Apply<_Iter>;

template <class _Tp>
struct __has_iterator_typedefs {
private:
  template <class _Up>
  static false_type __test(...);
  template <class _Up>
  static true_type
  __test(__void_t<typename _Up::iterator_category>* = nullptr,
         __void_t<typename _Up::difference_type>* = nullptr,
         __void_t<typename _Up::value_type>* = nullptr,
         __void_t<typename _Up::reference>* = nullptr,
         __void_t<typename _Up::pointer>* = nullptr);

public:
  static const bool value = decltype(__test<_Tp>(nullptr, nullptr, nullptr, nullptr, nullptr))::value;
};

template <class _Tp>
struct __has_iterator_category {
private:
  template <class _Up>
  static false_type __test(...);
  template <class _Up>
  static true_type __test(typename _Up::iterator_category* = nullptr);

public:
  static const bool value = decltype(__test<_Tp>(nullptr))::value;
};

template <class _Tp>
struct __has_iterator_concept {
private:
  template <class _Up>
  static false_type __test(...);
  template <class _Up>
  static true_type __test(typename _Up::iterator_concept* = nullptr);

public:
  static const bool value = decltype(__test<_Tp>(nullptr))::value;
};
# 371 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/iterator_traits.h" 3
template <class _Iter, bool>
struct __iterator_traits {};

template <class _Iter, bool>
struct __iterator_traits_impl {};

template <class _Iter>
struct __iterator_traits_impl<_Iter, true> {
  typedef typename _Iter::difference_type difference_type;
  typedef typename _Iter::value_type value_type;
  typedef typename _Iter::pointer pointer;
  typedef typename _Iter::reference reference;
  typedef typename _Iter::iterator_category iterator_category;
};

template <class _Iter>
struct __iterator_traits<_Iter, true>
    : __iterator_traits_impl< _Iter,
                              is_convertible<typename _Iter::iterator_category, input_iterator_tag>::value ||
                                  is_convertible<typename _Iter::iterator_category, output_iterator_tag>::value > {};






template <class _Iter>
struct iterator_traits : __iterator_traits<_Iter, __has_iterator_typedefs<_Iter>::value> {
  using __primary_template = iterator_traits;
};


template <class _Tp>



struct iterator_traits<_Tp*> {
  typedef ptrdiff_t difference_type;
  typedef __remove_cv_t<_Tp> value_type;
  typedef _Tp* pointer;
  typedef _Tp& reference;
  typedef random_access_iterator_tag iterator_category;



};

template <class _Tp, class _Up, bool = __has_iterator_category<iterator_traits<_Tp> >::value>
struct __has_iterator_category_convertible_to : is_convertible<typename iterator_traits<_Tp>::iterator_category, _Up> {
};

template <class _Tp, class _Up>
struct __has_iterator_category_convertible_to<_Tp, _Up, false> : false_type {};

template <class _Tp, class _Up, bool = __has_iterator_concept<_Tp>::value>
struct __has_iterator_concept_convertible_to : is_convertible<typename _Tp::iterator_concept, _Up> {};

template <class _Tp, class _Up>
struct __has_iterator_concept_convertible_to<_Tp, _Up, false> : false_type {};

template <class _Tp>
using __has_input_iterator_category = __has_iterator_category_convertible_to<_Tp, input_iterator_tag>;

template <class _Tp>
using __has_forward_iterator_category = __has_iterator_category_convertible_to<_Tp, forward_iterator_tag>;

template <class _Tp>
using __has_bidirectional_iterator_category = __has_iterator_category_convertible_to<_Tp, bidirectional_iterator_tag>;

template <class _Tp>
using __has_random_access_iterator_category = __has_iterator_category_convertible_to<_Tp, random_access_iterator_tag>;
# 456 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/iterator_traits.h" 3
template <class _Tp>
struct __libcpp_is_contiguous_iterator : false_type {};



template <class _Up>
struct __libcpp_is_contiguous_iterator<_Up*> : true_type {};

template <class _Iter>
class __wrap_iter;

template <class _Tp>
using __has_exactly_input_iterator_category =
    integral_constant<bool,
                      __has_iterator_category_convertible_to<_Tp, input_iterator_tag>::value &&
                          !__has_iterator_category_convertible_to<_Tp, forward_iterator_tag>::value>;

template <class _Tp>
using __has_exactly_forward_iterator_category =
    integral_constant<bool,
                      __has_iterator_category_convertible_to<_Tp, forward_iterator_tag>::value &&
                          !__has_iterator_category_convertible_to<_Tp, bidirectional_iterator_tag>::value>;

template <class _Tp>
using __has_exactly_bidirectional_iterator_category =
    integral_constant<bool,
                      __has_iterator_category_convertible_to<_Tp, bidirectional_iterator_tag>::value &&
                          !__has_iterator_category_convertible_to<_Tp, random_access_iterator_tag>::value>;

template <class _InputIterator>
using __iter_value_type = typename iterator_traits<_InputIterator>::value_type;

template <class _InputIterator>
using __iter_key_type = __remove_const_t<typename iterator_traits<_InputIterator>::value_type::first_type>;

template <class _InputIterator>
using __iter_mapped_type = typename iterator_traits<_InputIterator>::value_type::second_type;

template <class _InputIterator>
using __iter_to_alloc_type =
    pair< typename add_const<typename iterator_traits<_InputIterator>::value_type::first_type>::type,
          typename iterator_traits<_InputIterator>::value_type::second_type>;

template <class _Iter>
using __iterator_category_type = typename iterator_traits<_Iter>::iterator_category;

template <class _Iter>
using __iterator_pointer_type = typename iterator_traits<_Iter>::pointer;

template <class _Iter>
using __iter_diff_t = typename iterator_traits<_Iter>::difference_type;

template <class _Iter>
using __iter_reference = typename iterator_traits<_Iter>::reference;
# 527 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/iterator_traits.h" 3
}}
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/iter_move.h" 2 3
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/iter_move.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 28 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/iter_move.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 99 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/iter_move.h" 3
}}
# 32 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/concepts.h" 2 3


# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/pointer_traits.h" 1 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/pointer_traits.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/addressof.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/addressof.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
inline constexpr __attribute__((__no_sanitize__("cfi"))) __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp* addressof(_Tp& __x) noexcept {
  return __builtin_addressof(__x);
}
# 55 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/addressof.h" 3
template <class _Tp>
_Tp* addressof(const _Tp&&) noexcept = delete;


}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/pointer_traits.h" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/conjunction.h" 1 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/conjunction.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class...>
using __expand_to_true = true_type;

template <class... _Pred>
__expand_to_true<__enable_if_t<_Pred::value>...> __and_helper(int);

template <class...>
false_type __and_helper(...);






template <class... _Pred>
using _And __attribute__((__nodebug__)) = decltype(std::__and_helper<_Pred...>(0));



template <class...>
struct conjunction : true_type {};

template <class _Arg>
struct conjunction<_Arg> : _Arg {};

template <class _Arg, class... _Args>
struct conjunction<_Arg, _Args...> : conditional_t<!bool(_Arg::value), _Arg, conjunction<_Args...>> {};

template <class... _Args>
inline constexpr bool conjunction_v = conjunction<_Args...>::value;



}}
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/pointer_traits.h" 2 3
# 27 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/pointer_traits.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp, class = void>
struct __has_element_type : false_type {};

template <class _Tp>
struct __has_element_type<_Tp, __void_t<typename _Tp::element_type> > : true_type {};

template <class _Ptr, bool = __has_element_type<_Ptr>::value>
struct __pointer_traits_element_type {};

template <class _Ptr>
struct __pointer_traits_element_type<_Ptr, true> {
  typedef __attribute__((__nodebug__)) typename _Ptr::element_type type;
};

template <template <class, class...> class _Sp, class _Tp, class... _Args>
struct __pointer_traits_element_type<_Sp<_Tp, _Args...>, true> {
  typedef __attribute__((__nodebug__)) typename _Sp<_Tp, _Args...>::element_type type;
};

template <template <class, class...> class _Sp, class _Tp, class... _Args>
struct __pointer_traits_element_type<_Sp<_Tp, _Args...>, false> {
  typedef __attribute__((__nodebug__)) _Tp type;
};

template <class _Tp, class = void>
struct __has_difference_type : false_type {};

template <class _Tp>
struct __has_difference_type<_Tp, __void_t<typename _Tp::difference_type> > : true_type {};

template <class _Ptr, bool = __has_difference_type<_Ptr>::value>
struct __pointer_traits_difference_type {
  typedef __attribute__((__nodebug__)) ptrdiff_t type;
};

template <class _Ptr>
struct __pointer_traits_difference_type<_Ptr, true> {
  typedef __attribute__((__nodebug__)) typename _Ptr::difference_type type;
};

template <class _Tp, class _Up>
struct __has_rebind {
private:
  template <class _Xp>
  static false_type __test(...);
#pragma GCC diagnostic push
# 76 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/pointer_traits.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 76 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/pointer_traits.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  template <class _Xp>
  static true_type __test(typename _Xp::template rebind<_Up>* = 0);
#pragma GCC diagnostic pop

public:
  static const bool value = decltype(__test<_Tp>(0))::value;
};

template <class _Tp, class _Up, bool = __has_rebind<_Tp, _Up>::value>
struct __pointer_traits_rebind {

  typedef __attribute__((__nodebug__)) typename _Tp::template rebind<_Up> type;



};

template <template <class, class...> class _Sp, class _Tp, class... _Args, class _Up>
struct __pointer_traits_rebind<_Sp<_Tp, _Args...>, _Up, true> {

  typedef __attribute__((__nodebug__)) typename _Sp<_Tp, _Args...>::template rebind<_Up> type;



};

template <template <class, class...> class _Sp, class _Tp, class... _Args, class _Up>
struct __pointer_traits_rebind<_Sp<_Tp, _Args...>, _Up, false> {
  typedef _Sp<_Up, _Args...> type;
};

template <class _Ptr, class = void>
struct __pointer_traits_impl {};

template <class _Ptr>
struct __pointer_traits_impl<_Ptr, __void_t<typename __pointer_traits_element_type<_Ptr>::type> > {
  typedef _Ptr pointer;
  typedef typename __pointer_traits_element_type<pointer>::type element_type;
  typedef typename __pointer_traits_difference_type<pointer>::type difference_type;


  template <class _Up>
  using rebind = typename __pointer_traits_rebind<pointer, _Up>::type;







private:
  struct __nat {};

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static pointer
  pointer_to(__conditional_t<is_void<element_type>::value, __nat, element_type>& __r) {
    return pointer::pointer_to(__r);
  }
};

template <class _Ptr>
struct pointer_traits : __pointer_traits_impl<_Ptr> {};

template <class _Tp>
struct pointer_traits<_Tp*> {
  typedef _Tp* pointer;
  typedef _Tp element_type;
  typedef ptrdiff_t difference_type;


  template <class _Up>
  using rebind = _Up*;







private:
  struct __nat {};

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static pointer
  pointer_to(__conditional_t<is_void<element_type>::value, __nat, element_type>& __r) noexcept {
    return std::addressof(__r);
  }
};


template <class _From, class _To>
using __rebind_pointer_t = typename pointer_traits<_From>::template rebind<_To>;







template <class _Pointer, class = void>
struct __to_address_helper;

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Tp* __to_address(_Tp* __p) noexcept {
  static_assert(!is_function<_Tp>::value, "_Tp is a function type");
  return __p;
}

template <class _Pointer, class = void>
struct _HasToAddress : false_type {};

template <class _Pointer>
struct _HasToAddress<_Pointer, decltype((void)pointer_traits<_Pointer>::to_address(std::declval<const _Pointer&>())) >
    : true_type {};

template <class _Pointer, class = void>
struct _HasArrow : false_type {};

template <class _Pointer>
struct _HasArrow<_Pointer, decltype((void)std::declval<const _Pointer&>().operator->()) > : true_type {};

template <class _Pointer>
struct _IsFancyPointer {
  static const bool value = _HasArrow<_Pointer>::value || _HasToAddress<_Pointer>::value;
};


template <class _Pointer, class = __enable_if_t< _And<is_class<_Pointer>, _IsFancyPointer<_Pointer> >::value > >
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr
    __decay_t<decltype(__to_address_helper<_Pointer>::__call(std::declval<const _Pointer&>()))>
    __to_address(const _Pointer& __p) noexcept {
  return __to_address_helper<_Pointer>::__call(__p);
}

template <class _Pointer, class>
struct __to_address_helper {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr static decltype(std::__to_address(
      std::declval<const _Pointer&>().operator->()))
  __call(const _Pointer& __p) noexcept {
    return std::__to_address(__p.operator->());
  }
};

template <class _Pointer>
struct __to_address_helper<_Pointer,
                           decltype((void)pointer_traits<_Pointer>::to_address(std::declval<const _Pointer&>()))> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr static decltype(pointer_traits<_Pointer>::to_address(
      std::declval<const _Pointer&>()))
  __call(const _Pointer& __p) noexcept {
    return pointer_traits<_Pointer>::to_address(__p);
  }
};
# 243 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/pointer_traits.h" 3
}}
# 35 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/concepts.h" 2 3
# 45 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/concepts.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 250 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/concepts.h" 3
template <class _Tp>
using __has_random_access_iterator_category_or_concept



    = __has_random_access_iterator_category<_Tp>;


}}
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_iterator_concept.h" 2 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_iterator_concept.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_iterator_concept.h" 2 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/iterator_operations.h" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/advance.h" 1 3
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/advance.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/convert_to_integral.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/convert_to_integral.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/underlying_type.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/underlying_type.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp, bool = is_enum<_Tp>::value>
struct __underlying_type_impl;

template <class _Tp>
struct __underlying_type_impl<_Tp, false> {};

template <class _Tp>
struct __underlying_type_impl<_Tp, true> {
  typedef __underlying_type(_Tp) type;
};

template <class _Tp>
struct underlying_type : __underlying_type_impl<_Tp, is_enum<_Tp>::value> {};


template <class _Tp>
using underlying_type_t = typename underlying_type<_Tp>::type;


}}
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/convert_to_integral.h" 2 3
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/convert_to_integral.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr int __convert_to_integral(int __val) { return __val; }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr unsigned __convert_to_integral(unsigned __val) { return __val; }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr long __convert_to_integral(long __val) { return __val; }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr unsigned long __convert_to_integral(unsigned long __val) {
  return __val;
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr long long __convert_to_integral(long long __val) { return __val; }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr unsigned long long __convert_to_integral(unsigned long long __val) {
  return __val;
}

template <typename _Fp, __enable_if_t<is_floating_point<_Fp>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr long long __convert_to_integral(_Fp __val) {
  return __val;
}







template <class _Tp, bool = is_enum<_Tp>::value>
struct __sfinae_underlying_type {
  typedef typename underlying_type<_Tp>::type type;
  typedef decltype(((type)1) + 0) __promoted_type;
};

template <class _Tp>
struct __sfinae_underlying_type<_Tp, false> {};

template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr typename __sfinae_underlying_type<_Tp>::__promoted_type
__convert_to_integral(_Tp __val) {
  return __val;
}

}}
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/advance.h" 2 3


# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/unreachable.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/unreachable.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

[[noreturn]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline void __libcpp_unreachable() {
  ((void)0);
  __builtin_unreachable();
}







}}
# 26 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/advance.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\limits" 1 3
# 113 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\limits" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 117 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\limits" 2 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

enum float_round_style {
  round_indeterminate = -1,
  round_toward_zero = 0,
  round_to_nearest = 1,
  round_toward_infinity = 2,
  round_toward_neg_infinity = 3
};

enum float_denorm_style {
  denorm_indeterminate = -1,
  denorm_absent = 0,
  denorm_present = 1
};

template <class _Tp, bool = is_arithmetic<_Tp>::value>
class __libcpp_numeric_limits {
protected:
  typedef _Tp type;

  static constexpr const bool is_specialized = false;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type min() noexcept { return type(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type max() noexcept { return type(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type lowest() noexcept { return type(); }

  static constexpr const int digits = 0;
  static constexpr const int digits10 = 0;
  static constexpr const int max_digits10 = 0;
  static constexpr const bool is_signed = false;
  static constexpr const bool is_integer = false;
  static constexpr const bool is_exact = false;
  static constexpr const int radix = 0;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type epsilon() noexcept { return type(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type round_error() noexcept { return type(); }

  static constexpr const int min_exponent = 0;
  static constexpr const int min_exponent10 = 0;
  static constexpr const int max_exponent = 0;
  static constexpr const int max_exponent10 = 0;

  static constexpr const bool has_infinity = false;
  static constexpr const bool has_quiet_NaN = false;
  static constexpr const bool has_signaling_NaN = false;
  static constexpr const float_denorm_style has_denorm = denorm_absent;
  static constexpr const bool has_denorm_loss = false;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type infinity() noexcept { return type(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type quiet_NaN() noexcept { return type(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type signaling_NaN() noexcept { return type(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type denorm_min() noexcept { return type(); }

  static constexpr const bool is_iec559 = false;
  static constexpr const bool is_bounded = false;
  static constexpr const bool is_modulo = false;

  static constexpr const bool traps = false;
  static constexpr const bool tinyness_before = false;
  static constexpr const float_round_style round_style = round_toward_zero;
};

template <class _Tp, int __digits, bool _IsSigned>
struct __libcpp_compute_min {
  static constexpr const _Tp value = _Tp(_Tp(1) << __digits);
};

template <class _Tp, int __digits>
struct __libcpp_compute_min<_Tp, __digits, false> {
  static constexpr const _Tp value = _Tp(0);
};

template <class _Tp>
class __libcpp_numeric_limits<_Tp, true> {
protected:
  typedef _Tp type;

  static constexpr const bool is_specialized = true;

  static constexpr const bool is_signed = type(-1) < type(0);
  static constexpr const int digits = static_cast<int>(sizeof(type) * 8 - is_signed);
  static constexpr const int digits10 = digits * 3 / 10;
  static constexpr const int max_digits10 = 0;
  static constexpr const type __min = __libcpp_compute_min<type, digits, is_signed>::value;
  static constexpr const type __max = is_signed ? type(type(~0) ^ __min) : type(~0);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type min() noexcept { return __min; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type max() noexcept { return __max; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type lowest() noexcept { return min(); }

  static constexpr const bool is_integer = true;
  static constexpr const bool is_exact = true;
  static constexpr const int radix = 2;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type epsilon() noexcept { return type(0); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type round_error() noexcept { return type(0); }

  static constexpr const int min_exponent = 0;
  static constexpr const int min_exponent10 = 0;
  static constexpr const int max_exponent = 0;
  static constexpr const int max_exponent10 = 0;

  static constexpr const bool has_infinity = false;
  static constexpr const bool has_quiet_NaN = false;
  static constexpr const bool has_signaling_NaN = false;
  static constexpr const float_denorm_style has_denorm = denorm_absent;
  static constexpr const bool has_denorm_loss = false;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type infinity() noexcept { return type(0); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type quiet_NaN() noexcept { return type(0); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type signaling_NaN() noexcept { return type(0); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type denorm_min() noexcept { return type(0); }

  static constexpr const bool is_iec559 = false;
  static constexpr const bool is_bounded = true;
  static constexpr const bool is_modulo = !std::is_signed<_Tp>::value;




  static constexpr const bool traps = false;

  static constexpr const bool tinyness_before = false;
  static constexpr const float_round_style round_style = round_toward_zero;
};

template <>
class __libcpp_numeric_limits<bool, true> {
protected:
  typedef bool type;

  static constexpr const bool is_specialized = true;

  static constexpr const bool is_signed = false;
  static constexpr const int digits = 1;
  static constexpr const int digits10 = 0;
  static constexpr const int max_digits10 = 0;
  static constexpr const type __min = false;
  static constexpr const type __max = true;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type min() noexcept { return __min; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type max() noexcept { return __max; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type lowest() noexcept { return min(); }

  static constexpr const bool is_integer = true;
  static constexpr const bool is_exact = true;
  static constexpr const int radix = 2;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type epsilon() noexcept { return type(0); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type round_error() noexcept { return type(0); }

  static constexpr const int min_exponent = 0;
  static constexpr const int min_exponent10 = 0;
  static constexpr const int max_exponent = 0;
  static constexpr const int max_exponent10 = 0;

  static constexpr const bool has_infinity = false;
  static constexpr const bool has_quiet_NaN = false;
  static constexpr const bool has_signaling_NaN = false;
  static constexpr const float_denorm_style has_denorm = denorm_absent;
  static constexpr const bool has_denorm_loss = false;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type infinity() noexcept { return type(0); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type quiet_NaN() noexcept { return type(0); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type signaling_NaN() noexcept { return type(0); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type denorm_min() noexcept { return type(0); }

  static constexpr const bool is_iec559 = false;
  static constexpr const bool is_bounded = true;
  static constexpr const bool is_modulo = false;

  static constexpr const bool traps = false;
  static constexpr const bool tinyness_before = false;
  static constexpr const float_round_style round_style = round_toward_zero;
};

template <>
class __libcpp_numeric_limits<float, true> {
protected:
  typedef float type;

  static constexpr const bool is_specialized = true;

  static constexpr const bool is_signed = true;
  static constexpr const int digits = 24;
  static constexpr const int digits10 = 6;
  static constexpr const int max_digits10 = 2 + (digits * 30103l) / 100000l;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type min() noexcept { return 1.17549435e-38F; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type max() noexcept { return 3.40282347e+38F; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type lowest() noexcept { return -max(); }

  static constexpr const bool is_integer = false;
  static constexpr const bool is_exact = false;
  static constexpr const int radix = 2;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type epsilon() noexcept { return 1.19209290e-7F; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type round_error() noexcept { return 0.5F; }

  static constexpr const int min_exponent = (-125);
  static constexpr const int min_exponent10 = (-37);
  static constexpr const int max_exponent = 128;
  static constexpr const int max_exponent10 = 38;

  static constexpr const bool has_infinity = true;
  static constexpr const bool has_quiet_NaN = true;
  static constexpr const bool has_signaling_NaN = true;
  static constexpr const float_denorm_style has_denorm = denorm_present;
  static constexpr const bool has_denorm_loss = false;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type infinity() noexcept { return __builtin_huge_valf(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type quiet_NaN() noexcept { return __builtin_nanf(""); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type signaling_NaN() noexcept { return __builtin_nansf(""); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type denorm_min() noexcept { return 1.40129846e-45F; }

  static constexpr const bool is_iec559 = true;
  static constexpr const bool is_bounded = true;
  static constexpr const bool is_modulo = false;

  static constexpr const bool traps = false;

  static constexpr const bool tinyness_before = true;



  static constexpr const float_round_style round_style = round_to_nearest;
};

template <>
class __libcpp_numeric_limits<double, true> {
protected:
  typedef double type;

  static constexpr const bool is_specialized = true;

  static constexpr const bool is_signed = true;
  static constexpr const int digits = 53;
  static constexpr const int digits10 = 15;
  static constexpr const int max_digits10 = 2 + (digits * 30103l) / 100000l;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type min() noexcept { return 2.2250738585072014e-308; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type max() noexcept { return 1.7976931348623157e+308; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type lowest() noexcept { return -max(); }

  static constexpr const bool is_integer = false;
  static constexpr const bool is_exact = false;
  static constexpr const int radix = 2;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type epsilon() noexcept { return 2.2204460492503131e-16; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type round_error() noexcept { return 0.5; }

  static constexpr const int min_exponent = (-1021);
  static constexpr const int min_exponent10 = (-307);
  static constexpr const int max_exponent = 1024;
  static constexpr const int max_exponent10 = 308;

  static constexpr const bool has_infinity = true;
  static constexpr const bool has_quiet_NaN = true;
  static constexpr const bool has_signaling_NaN = true;
  static constexpr const float_denorm_style has_denorm = denorm_present;
  static constexpr const bool has_denorm_loss = false;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type infinity() noexcept { return __builtin_huge_val(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type quiet_NaN() noexcept { return __builtin_nan(""); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type signaling_NaN() noexcept { return __builtin_nans(""); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type denorm_min() noexcept { return 4.9406564584124654e-324; }

  static constexpr const bool is_iec559 = true;
  static constexpr const bool is_bounded = true;
  static constexpr const bool is_modulo = false;

  static constexpr const bool traps = false;

  static constexpr const bool tinyness_before = true;



  static constexpr const float_round_style round_style = round_to_nearest;
};

template <>
class __libcpp_numeric_limits<long double, true> {
protected:
  typedef long double type;

  static constexpr const bool is_specialized = true;

  static constexpr const bool is_signed = true;
  static constexpr const int digits = 53;
  static constexpr const int digits10 = 15;
  static constexpr const int max_digits10 = 2 + (digits * 30103l) / 100000l;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type min() noexcept { return 2.2250738585072014e-308L; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type max() noexcept { return 1.7976931348623157e+308L; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type lowest() noexcept { return -max(); }

  static constexpr const bool is_integer = false;
  static constexpr const bool is_exact = false;
  static constexpr const int radix = 2;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type epsilon() noexcept { return 2.2204460492503131e-16L; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type round_error() noexcept { return 0.5L; }

  static constexpr const int min_exponent = (-1021);
  static constexpr const int min_exponent10 = (-307);
  static constexpr const int max_exponent = 1024;
  static constexpr const int max_exponent10 = 308;

  static constexpr const bool has_infinity = true;
  static constexpr const bool has_quiet_NaN = true;
  static constexpr const bool has_signaling_NaN = true;
  static constexpr const float_denorm_style has_denorm = denorm_present;
  static constexpr const bool has_denorm_loss = false;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type infinity() noexcept { return __builtin_huge_vall(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type quiet_NaN() noexcept { return __builtin_nanl(""); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type signaling_NaN() noexcept { return __builtin_nansl(""); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type denorm_min() noexcept { return 4.9406564584124654e-324L; }




  static constexpr const bool is_iec559 = true;

  static constexpr const bool is_bounded = true;
  static constexpr const bool is_modulo = false;

  static constexpr const bool traps = false;

  static constexpr const bool tinyness_before = true;



  static constexpr const float_round_style round_style = round_to_nearest;
};

template <class _Tp>
class numeric_limits : private __libcpp_numeric_limits<__remove_cv_t<_Tp> > {
  typedef __libcpp_numeric_limits<__remove_cv_t<_Tp> > __base;
  typedef typename __base::type type;

public:
  static constexpr const bool is_specialized = __base::is_specialized;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type min() noexcept { return __base::min(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type max() noexcept { return __base::max(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type lowest() noexcept { return __base::lowest(); }

  static constexpr const int digits = __base::digits;
  static constexpr const int digits10 = __base::digits10;
  static constexpr const int max_digits10 = __base::max_digits10;
  static constexpr const bool is_signed = __base::is_signed;
  static constexpr const bool is_integer = __base::is_integer;
  static constexpr const bool is_exact = __base::is_exact;
  static constexpr const int radix = __base::radix;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type epsilon() noexcept { return __base::epsilon(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type round_error() noexcept { return __base::round_error(); }

  static constexpr const int min_exponent = __base::min_exponent;
  static constexpr const int min_exponent10 = __base::min_exponent10;
  static constexpr const int max_exponent = __base::max_exponent;
  static constexpr const int max_exponent10 = __base::max_exponent10;

  static constexpr const bool has_infinity = __base::has_infinity;
  static constexpr const bool has_quiet_NaN = __base::has_quiet_NaN;
  static constexpr const bool has_signaling_NaN = __base::has_signaling_NaN;
#pragma GCC diagnostic push
# 467 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\limits" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 467 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\limits" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  static constexpr const float_denorm_style has_denorm = __base::has_denorm;
  static constexpr const bool has_denorm_loss = __base::has_denorm_loss;
#pragma GCC diagnostic pop
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type infinity() noexcept { return __base::infinity(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type quiet_NaN() noexcept { return __base::quiet_NaN(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type signaling_NaN() noexcept { return __base::signaling_NaN(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type denorm_min() noexcept { return __base::denorm_min(); }

  static constexpr const bool is_iec559 = __base::is_iec559;
  static constexpr const bool is_bounded = __base::is_bounded;
  static constexpr const bool is_modulo = __base::is_modulo;

  static constexpr const bool traps = __base::traps;
  static constexpr const bool tinyness_before = __base::tinyness_before;
  static constexpr const float_round_style round_style = __base::round_style;
};

template <class _Tp>
constexpr const bool numeric_limits<_Tp>::is_specialized;
template <class _Tp>
constexpr const int numeric_limits<_Tp>::digits;
template <class _Tp>
constexpr const int numeric_limits<_Tp>::digits10;
template <class _Tp>
constexpr const int numeric_limits<_Tp>::max_digits10;
template <class _Tp>
constexpr const bool numeric_limits<_Tp>::is_signed;
template <class _Tp>
constexpr const bool numeric_limits<_Tp>::is_integer;
template <class _Tp>
constexpr const bool numeric_limits<_Tp>::is_exact;
template <class _Tp>
constexpr const int numeric_limits<_Tp>::radix;
template <class _Tp>
constexpr const int numeric_limits<_Tp>::min_exponent;
template <class _Tp>
constexpr const int numeric_limits<_Tp>::min_exponent10;
template <class _Tp>
constexpr const int numeric_limits<_Tp>::max_exponent;
template <class _Tp>
constexpr const int numeric_limits<_Tp>::max_exponent10;
template <class _Tp>
constexpr const bool numeric_limits<_Tp>::has_infinity;
template <class _Tp>
constexpr const bool numeric_limits<_Tp>::has_quiet_NaN;
template <class _Tp>
constexpr const bool numeric_limits<_Tp>::has_signaling_NaN;
template <class _Tp>
constexpr const float_denorm_style numeric_limits<_Tp>::has_denorm;
template <class _Tp>
constexpr const bool numeric_limits<_Tp>::has_denorm_loss;
template <class _Tp>
constexpr const bool numeric_limits<_Tp>::is_iec559;
template <class _Tp>
constexpr const bool numeric_limits<_Tp>::is_bounded;
template <class _Tp>
constexpr const bool numeric_limits<_Tp>::is_modulo;
template <class _Tp>
constexpr const bool numeric_limits<_Tp>::traps;
template <class _Tp>
constexpr const bool numeric_limits<_Tp>::tinyness_before;
template <class _Tp>
constexpr const float_round_style numeric_limits<_Tp>::round_style;

template <class _Tp>
class numeric_limits<const _Tp> : private numeric_limits<_Tp> {
  typedef numeric_limits<_Tp> __base;
  typedef _Tp type;

public:
  static constexpr const bool is_specialized = __base::is_specialized;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type min() noexcept { return __base::min(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type max() noexcept { return __base::max(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type lowest() noexcept { return __base::lowest(); }

  static constexpr const int digits = __base::digits;
  static constexpr const int digits10 = __base::digits10;
  static constexpr const int max_digits10 = __base::max_digits10;
  static constexpr const bool is_signed = __base::is_signed;
  static constexpr const bool is_integer = __base::is_integer;
  static constexpr const bool is_exact = __base::is_exact;
  static constexpr const int radix = __base::radix;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type epsilon() noexcept { return __base::epsilon(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type round_error() noexcept { return __base::round_error(); }

  static constexpr const int min_exponent = __base::min_exponent;
  static constexpr const int min_exponent10 = __base::min_exponent10;
  static constexpr const int max_exponent = __base::max_exponent;
  static constexpr const int max_exponent10 = __base::max_exponent10;

  static constexpr const bool has_infinity = __base::has_infinity;
  static constexpr const bool has_quiet_NaN = __base::has_quiet_NaN;
  static constexpr const bool has_signaling_NaN = __base::has_signaling_NaN;
#pragma GCC diagnostic push
# 561 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\limits" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 561 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\limits" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  static constexpr const float_denorm_style has_denorm = __base::has_denorm;
  static constexpr const bool has_denorm_loss = __base::has_denorm_loss;
#pragma GCC diagnostic pop
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type infinity() noexcept { return __base::infinity(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type quiet_NaN() noexcept { return __base::quiet_NaN(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type signaling_NaN() noexcept { return __base::signaling_NaN(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type denorm_min() noexcept { return __base::denorm_min(); }

  static constexpr const bool is_iec559 = __base::is_iec559;
  static constexpr const bool is_bounded = __base::is_bounded;
  static constexpr const bool is_modulo = __base::is_modulo;

  static constexpr const bool traps = __base::traps;
  static constexpr const bool tinyness_before = __base::tinyness_before;
  static constexpr const float_round_style round_style = __base::round_style;
};

template <class _Tp>
constexpr const bool numeric_limits<const _Tp>::is_specialized;
template <class _Tp>
constexpr const int numeric_limits<const _Tp>::digits;
template <class _Tp>
constexpr const int numeric_limits<const _Tp>::digits10;
template <class _Tp>
constexpr const int numeric_limits<const _Tp>::max_digits10;
template <class _Tp>
constexpr const bool numeric_limits<const _Tp>::is_signed;
template <class _Tp>
constexpr const bool numeric_limits<const _Tp>::is_integer;
template <class _Tp>
constexpr const bool numeric_limits<const _Tp>::is_exact;
template <class _Tp>
constexpr const int numeric_limits<const _Tp>::radix;
template <class _Tp>
constexpr const int numeric_limits<const _Tp>::min_exponent;
template <class _Tp>
constexpr const int numeric_limits<const _Tp>::min_exponent10;
template <class _Tp>
constexpr const int numeric_limits<const _Tp>::max_exponent;
template <class _Tp>
constexpr const int numeric_limits<const _Tp>::max_exponent10;
template <class _Tp>
constexpr const bool numeric_limits<const _Tp>::has_infinity;
template <class _Tp>
constexpr const bool numeric_limits<const _Tp>::has_quiet_NaN;
template <class _Tp>
constexpr const bool numeric_limits<const _Tp>::has_signaling_NaN;
template <class _Tp>
constexpr const float_denorm_style numeric_limits<const _Tp>::has_denorm;
template <class _Tp>
constexpr const bool numeric_limits<const _Tp>::has_denorm_loss;
template <class _Tp>
constexpr const bool numeric_limits<const _Tp>::is_iec559;
template <class _Tp>
constexpr const bool numeric_limits<const _Tp>::is_bounded;
template <class _Tp>
constexpr const bool numeric_limits<const _Tp>::is_modulo;
template <class _Tp>
constexpr const bool numeric_limits<const _Tp>::traps;
template <class _Tp>
constexpr const bool numeric_limits<const _Tp>::tinyness_before;
template <class _Tp>
constexpr const float_round_style numeric_limits<const _Tp>::round_style;

template <class _Tp>
class numeric_limits<volatile _Tp> : private numeric_limits<_Tp> {
  typedef numeric_limits<_Tp> __base;
  typedef _Tp type;

public:
  static constexpr const bool is_specialized = __base::is_specialized;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type min() noexcept { return __base::min(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type max() noexcept { return __base::max(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type lowest() noexcept { return __base::lowest(); }

  static constexpr const int digits = __base::digits;
  static constexpr const int digits10 = __base::digits10;
  static constexpr const int max_digits10 = __base::max_digits10;
  static constexpr const bool is_signed = __base::is_signed;
  static constexpr const bool is_integer = __base::is_integer;
  static constexpr const bool is_exact = __base::is_exact;
  static constexpr const int radix = __base::radix;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type epsilon() noexcept { return __base::epsilon(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type round_error() noexcept { return __base::round_error(); }

  static constexpr const int min_exponent = __base::min_exponent;
  static constexpr const int min_exponent10 = __base::min_exponent10;
  static constexpr const int max_exponent = __base::max_exponent;
  static constexpr const int max_exponent10 = __base::max_exponent10;

  static constexpr const bool has_infinity = __base::has_infinity;
  static constexpr const bool has_quiet_NaN = __base::has_quiet_NaN;
  static constexpr const bool has_signaling_NaN = __base::has_signaling_NaN;
#pragma GCC diagnostic push
# 655 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\limits" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 655 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\limits" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  static constexpr const float_denorm_style has_denorm = __base::has_denorm;
  static constexpr const bool has_denorm_loss = __base::has_denorm_loss;
#pragma GCC diagnostic pop
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type infinity() noexcept { return __base::infinity(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type quiet_NaN() noexcept { return __base::quiet_NaN(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type signaling_NaN() noexcept { return __base::signaling_NaN(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type denorm_min() noexcept { return __base::denorm_min(); }

  static constexpr const bool is_iec559 = __base::is_iec559;
  static constexpr const bool is_bounded = __base::is_bounded;
  static constexpr const bool is_modulo = __base::is_modulo;

  static constexpr const bool traps = __base::traps;
  static constexpr const bool tinyness_before = __base::tinyness_before;
  static constexpr const float_round_style round_style = __base::round_style;
};

template <class _Tp>
constexpr const bool numeric_limits<volatile _Tp>::is_specialized;
template <class _Tp>
constexpr const int numeric_limits<volatile _Tp>::digits;
template <class _Tp>
constexpr const int numeric_limits<volatile _Tp>::digits10;
template <class _Tp>
constexpr const int numeric_limits<volatile _Tp>::max_digits10;
template <class _Tp>
constexpr const bool numeric_limits<volatile _Tp>::is_signed;
template <class _Tp>
constexpr const bool numeric_limits<volatile _Tp>::is_integer;
template <class _Tp>
constexpr const bool numeric_limits<volatile _Tp>::is_exact;
template <class _Tp>
constexpr const int numeric_limits<volatile _Tp>::radix;
template <class _Tp>
constexpr const int numeric_limits<volatile _Tp>::min_exponent;
template <class _Tp>
constexpr const int numeric_limits<volatile _Tp>::min_exponent10;
template <class _Tp>
constexpr const int numeric_limits<volatile _Tp>::max_exponent;
template <class _Tp>
constexpr const int numeric_limits<volatile _Tp>::max_exponent10;
template <class _Tp>
constexpr const bool numeric_limits<volatile _Tp>::has_infinity;
template <class _Tp>
constexpr const bool numeric_limits<volatile _Tp>::has_quiet_NaN;
template <class _Tp>
constexpr const bool numeric_limits<volatile _Tp>::has_signaling_NaN;
template <class _Tp>
constexpr const float_denorm_style numeric_limits<volatile _Tp>::has_denorm;
template <class _Tp>
constexpr const bool numeric_limits<volatile _Tp>::has_denorm_loss;
template <class _Tp>
constexpr const bool numeric_limits<volatile _Tp>::is_iec559;
template <class _Tp>
constexpr const bool numeric_limits<volatile _Tp>::is_bounded;
template <class _Tp>
constexpr const bool numeric_limits<volatile _Tp>::is_modulo;
template <class _Tp>
constexpr const bool numeric_limits<volatile _Tp>::traps;
template <class _Tp>
constexpr const bool numeric_limits<volatile _Tp>::tinyness_before;
template <class _Tp>
constexpr const float_round_style numeric_limits<volatile _Tp>::round_style;

template <class _Tp>
class numeric_limits<const volatile _Tp> : private numeric_limits<_Tp> {
  typedef numeric_limits<_Tp> __base;
  typedef _Tp type;

public:
  static constexpr const bool is_specialized = __base::is_specialized;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type min() noexcept { return __base::min(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type max() noexcept { return __base::max(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type lowest() noexcept { return __base::lowest(); }

  static constexpr const int digits = __base::digits;
  static constexpr const int digits10 = __base::digits10;
  static constexpr const int max_digits10 = __base::max_digits10;
  static constexpr const bool is_signed = __base::is_signed;
  static constexpr const bool is_integer = __base::is_integer;
  static constexpr const bool is_exact = __base::is_exact;
  static constexpr const int radix = __base::radix;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type epsilon() noexcept { return __base::epsilon(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type round_error() noexcept { return __base::round_error(); }

  static constexpr const int min_exponent = __base::min_exponent;
  static constexpr const int min_exponent10 = __base::min_exponent10;
  static constexpr const int max_exponent = __base::max_exponent;
  static constexpr const int max_exponent10 = __base::max_exponent10;

  static constexpr const bool has_infinity = __base::has_infinity;
  static constexpr const bool has_quiet_NaN = __base::has_quiet_NaN;
  static constexpr const bool has_signaling_NaN = __base::has_signaling_NaN;
#pragma GCC diagnostic push
# 749 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\limits" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 749 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\limits" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  static constexpr const float_denorm_style has_denorm = __base::has_denorm;
  static constexpr const bool has_denorm_loss = __base::has_denorm_loss;
#pragma GCC diagnostic pop
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type infinity() noexcept { return __base::infinity(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type quiet_NaN() noexcept { return __base::quiet_NaN(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type signaling_NaN() noexcept { return __base::signaling_NaN(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr type denorm_min() noexcept { return __base::denorm_min(); }

  static constexpr const bool is_iec559 = __base::is_iec559;
  static constexpr const bool is_bounded = __base::is_bounded;
  static constexpr const bool is_modulo = __base::is_modulo;

  static constexpr const bool traps = __base::traps;
  static constexpr const bool tinyness_before = __base::tinyness_before;
  static constexpr const float_round_style round_style = __base::round_style;
};

template <class _Tp>
constexpr const bool numeric_limits<const volatile _Tp>::is_specialized;
template <class _Tp>
constexpr const int numeric_limits<const volatile _Tp>::digits;
template <class _Tp>
constexpr const int numeric_limits<const volatile _Tp>::digits10;
template <class _Tp>
constexpr const int numeric_limits<const volatile _Tp>::max_digits10;
template <class _Tp>
constexpr const bool numeric_limits<const volatile _Tp>::is_signed;
template <class _Tp>
constexpr const bool numeric_limits<const volatile _Tp>::is_integer;
template <class _Tp>
constexpr const bool numeric_limits<const volatile _Tp>::is_exact;
template <class _Tp>
constexpr const int numeric_limits<const volatile _Tp>::radix;
template <class _Tp>
constexpr const int numeric_limits<const volatile _Tp>::min_exponent;
template <class _Tp>
constexpr const int numeric_limits<const volatile _Tp>::min_exponent10;
template <class _Tp>
constexpr const int numeric_limits<const volatile _Tp>::max_exponent;
template <class _Tp>
constexpr const int numeric_limits<const volatile _Tp>::max_exponent10;
template <class _Tp>
constexpr const bool numeric_limits<const volatile _Tp>::has_infinity;
template <class _Tp>
constexpr const bool numeric_limits<const volatile _Tp>::has_quiet_NaN;
template <class _Tp>
constexpr const bool numeric_limits<const volatile _Tp>::has_signaling_NaN;
template <class _Tp>
constexpr const float_denorm_style numeric_limits<const volatile _Tp>::has_denorm;
template <class _Tp>
constexpr const bool numeric_limits<const volatile _Tp>::has_denorm_loss;
template <class _Tp>
constexpr const bool numeric_limits<const volatile _Tp>::is_iec559;
template <class _Tp>
constexpr const bool numeric_limits<const volatile _Tp>::is_bounded;
template <class _Tp>
constexpr const bool numeric_limits<const volatile _Tp>::is_modulo;
template <class _Tp>
constexpr const bool numeric_limits<const volatile _Tp>::traps;
template <class _Tp>
constexpr const bool numeric_limits<const volatile _Tp>::tinyness_before;
template <class _Tp>
constexpr const float_round_style numeric_limits<const volatile _Tp>::round_style;

}}




# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\type_traits" 1 3
# 421 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\type_traits" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__fwd/hash.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__fwd/hash.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class>
struct hash;

}}
# 422 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\type_traits" 2 3






# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/aligned_storage.h" 1 3
# 21 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/aligned_storage.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
struct __align_type {
  static const size_t value = __alignof(_Tp);
  typedef _Tp type;
};

struct __struct_double {
  long double __lx;
};
struct __struct_double4 {
  double __lx[4];
};


typedef __type_list<__align_type<unsigned char>,
        __type_list<__align_type<unsigned short>,
        __type_list<__align_type<unsigned int>,
        __type_list<__align_type<unsigned long>,
        __type_list<__align_type<unsigned long long>,
        __type_list<__align_type<double>,
        __type_list<__align_type<long double>,
        __type_list<__align_type<__struct_double>,
        __type_list<__align_type<__struct_double4>,
        __type_list<__align_type<int*>,
        __nat
        > > > > > > > > > > __all_types;


template <size_t _Align>
struct alignas(_Align) __fallback_overaligned {};

template <class _TL, size_t _Align>
struct __find_pod;

template <class _Hp, size_t _Align>
struct __find_pod<__type_list<_Hp, __nat>, _Align> {
  typedef __conditional_t<_Align == _Hp::value, typename _Hp::type, __fallback_overaligned<_Align> > type;
};

template <class _Hp, class _Tp, size_t _Align>
struct __find_pod<__type_list<_Hp, _Tp>, _Align> {
  typedef __conditional_t<_Align == _Hp::value, typename _Hp::type, typename __find_pod<_Tp, _Align>::type> type;
};

template <class _TL, size_t _Len>
struct __find_max_align;

template <class _Hp, size_t _Len>
struct __find_max_align<__type_list<_Hp, __nat>, _Len> : public integral_constant<size_t, _Hp::value> {};

template <size_t _Len, size_t _A1, size_t _A2>
struct __select_align {
private:
  static const size_t __min = _A2 < _A1 ? _A2 : _A1;
  static const size_t __max = _A1 < _A2 ? _A2 : _A1;

public:
  static const size_t value = _Len < __max ? __min : __max;
};

template <class _Hp, class _Tp, size_t _Len>
struct __find_max_align<__type_list<_Hp, _Tp>, _Len>
    : public integral_constant<size_t, __select_align<_Len, _Hp::value, __find_max_align<_Tp, _Len>::value>::value> {};

template <size_t _Len, size_t _Align = __find_max_align<__all_types, _Len>::value>
struct aligned_storage {
  typedef typename __find_pod<__all_types, _Align>::type _Aligner;
  union type {
    _Aligner __align;
    unsigned char __data[(_Len + _Align - 1) / _Align * _Align];
  };
};



#pragma GCC diagnostic push
# 100 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/aligned_storage.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 100 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/aligned_storage.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template <size_t _Len, size_t _Align = __find_max_align<__all_types, _Len>::value>
using aligned_storage_t = typename aligned_storage<_Len, _Align>::type;
#pragma GCC diagnostic pop
# 115 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/aligned_storage.h" 3
template <size_t _Len> struct aligned_storage<_Len, 0x1> { struct alignas(0x1) type { unsigned char __lx[(_Len + 0x1 - 1) / 0x1 * 0x1]; }; };
template <size_t _Len> struct aligned_storage<_Len, 0x2> { struct alignas(0x2) type { unsigned char __lx[(_Len + 0x2 - 1) / 0x2 * 0x2]; }; };
template <size_t _Len> struct aligned_storage<_Len, 0x4> { struct alignas(0x4) type { unsigned char __lx[(_Len + 0x4 - 1) / 0x4 * 0x4]; }; };
template <size_t _Len> struct aligned_storage<_Len, 0x8> { struct alignas(0x8) type { unsigned char __lx[(_Len + 0x8 - 1) / 0x8 * 0x8]; }; };
template <size_t _Len> struct aligned_storage<_Len, 0x10> { struct alignas(0x10) type { unsigned char __lx[(_Len + 0x10 - 1) / 0x10 * 0x10]; }; };
template <size_t _Len> struct aligned_storage<_Len, 0x20> { struct alignas(0x20) type { unsigned char __lx[(_Len + 0x20 - 1) / 0x20 * 0x20]; }; };
template <size_t _Len> struct aligned_storage<_Len, 0x40> { struct alignas(0x40) type { unsigned char __lx[(_Len + 0x40 - 1) / 0x40 * 0x40]; }; };
template <size_t _Len> struct aligned_storage<_Len, 0x80> { struct alignas(0x80) type { unsigned char __lx[(_Len + 0x80 - 1) / 0x80 * 0x80]; }; };
template <size_t _Len> struct aligned_storage<_Len, 0x100> { struct alignas(0x100) type { unsigned char __lx[(_Len + 0x100 - 1) / 0x100 * 0x100]; }; };
template <size_t _Len> struct aligned_storage<_Len, 0x200> { struct alignas(0x200) type { unsigned char __lx[(_Len + 0x200 - 1) / 0x200 * 0x200]; }; };
template <size_t _Len> struct aligned_storage<_Len, 0x400> { struct alignas(0x400) type { unsigned char __lx[(_Len + 0x400 - 1) / 0x400 * 0x400]; }; };
template <size_t _Len> struct aligned_storage<_Len, 0x800> { struct alignas(0x800) type { unsigned char __lx[(_Len + 0x800 - 1) / 0x800 * 0x800]; }; };
template <size_t _Len> struct aligned_storage<_Len, 0x1000> { struct alignas(0x1000) type { unsigned char __lx[(_Len + 0x1000 - 1) / 0x1000 * 0x1000]; }; };
template <size_t _Len> struct aligned_storage<_Len, 0x2000> { struct alignas(0x2000) type { unsigned char __lx[(_Len + 0x2000 - 1) / 0x2000 * 0x2000]; }; };


template <size_t _Len> struct aligned_storage<_Len, 0x4000> { struct alignas(0x4000) type { unsigned char __lx[(_Len + 0x4000 - 1) / 0x4000 * 0x4000]; }; };




}}
# 429 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\type_traits" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/aligned_union.h" 1 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/aligned_union.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <size_t _I0, size_t... _In>
struct __static_max;

template <size_t _I0>
struct __static_max<_I0> {
  static const size_t value = _I0;
};

template <size_t _I0, size_t _I1, size_t... _In>
struct __static_max<_I0, _I1, _In...> {
  static const size_t value = _I0 >= _I1 ? __static_max<_I0, _In...>::value : __static_max<_I1, _In...>::value;
};

template <size_t _Len, class _Type0, class... _Types>
struct aligned_union {
  static const size_t alignment_value =
      __static_max<__alignof(_Type0), __alignof(_Types)...>::value;
  static const size_t __len = __static_max<_Len, sizeof(_Type0), sizeof(_Types)...>::value;
  typedef typename aligned_storage<__len, alignment_value>::type type;
};


template <size_t _Len, class... _Types>
using aligned_union_t = typename aligned_union<_Len, _Types...>::type;


}}
# 430 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\type_traits" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/alignment_of.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/alignment_of.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
struct alignment_of : public integral_constant<size_t, alignof(_Tp)> {};


template <class _Tp>
inline constexpr size_t alignment_of_v = alignof(_Tp);


}}
# 431 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\type_traits" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/can_extract_key.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/can_extract_key.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/remove_const_ref.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/remove_const_ref.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
using __remove_const_ref_t = __remove_const_t<__libcpp_remove_reference_t<_Tp> >;

}}
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/can_extract_key.h" 2 3
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/can_extract_key.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {


struct __extract_key_fail_tag {};
struct __extract_key_self_tag {};
struct __extract_key_first_tag {};

template <class _ValTy, class _Key, class _RawValTy = __remove_const_ref_t<_ValTy> >
struct __can_extract_key
    : __conditional_t<_IsSame<_RawValTy, _Key>::value, __extract_key_self_tag, __extract_key_fail_tag> {};

template <class _Pair, class _Key, class _First, class _Second>
struct __can_extract_key<_Pair, _Key, pair<_First, _Second> >
    : __conditional_t<_IsSame<__remove_const_t<_First>, _Key>::value, __extract_key_first_tag, __extract_key_fail_tag> {
};




template <class _ValTy, class _Key, class _ContainerValueTy, class _RawValTy = __remove_const_ref_t<_ValTy> >
struct __can_extract_map_key : integral_constant<bool, _IsSame<_RawValTy, _Key>::value> {};



template <class _ValTy, class _Key, class _RawValTy>
struct __can_extract_map_key<_ValTy, _Key, _Key, _RawValTy> : false_type {};

}}
# 433 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\type_traits" 2 3





# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/dependent_type.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/dependent_type.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp, bool>
struct __dependent_type : public _Tp {};

}}
# 439 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\type_traits" 2 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/has_unique_object_representation.h" 1 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/has_unique_object_representation.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



template <class _Tp>
struct has_unique_object_representations
    : public integral_constant<bool, __has_unique_object_representations(remove_cv_t<remove_all_extents_t<_Tp>>)> {};

template <class _Tp>
inline constexpr bool has_unique_object_representations_v = has_unique_object_representations<_Tp>::value;



}}
# 443 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\type_traits" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/has_virtual_destructor.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/has_virtual_destructor.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
struct has_virtual_destructor : public integral_constant<bool, __has_virtual_destructor(_Tp)> {};


template <class _Tp>
inline constexpr bool has_virtual_destructor_v = __has_virtual_destructor(_Tp);


}}
# 444 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\type_traits" 2 3


# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_abstract.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_abstract.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
struct is_abstract : public integral_constant<bool, __is_abstract(_Tp)> {};


template <class _Tp>
inline constexpr bool is_abstract_v = __is_abstract(_Tp);


}}
# 447 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\type_traits" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_aggregate.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_aggregate.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



template <class _Tp>
struct is_aggregate : public integral_constant<bool, __is_aggregate(_Tp)> {};

template <class _Tp>
inline constexpr bool is_aggregate_v = __is_aggregate(_Tp);



}}
# 448 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\type_traits" 2 3


# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_assignable.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_assignable.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp, class _Up>
struct is_assignable : _BoolConstant<__is_assignable(_Tp, _Up)> {};


template <class _Tp, class _Arg>
inline constexpr bool is_assignable_v = __is_assignable(_Tp, _Arg);


}}
# 451 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\type_traits" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_bounded_array.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_bounded_array.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class>
struct __libcpp_is_bounded_array : false_type {};
template <class _Tp, size_t _Np>
struct __libcpp_is_bounded_array<_Tp[_Np]> : true_type {};
# 39 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_bounded_array.h" 3
}}
# 453 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\type_traits" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_callable.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_callable.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Func, class... _Args, class = decltype(std::declval<_Func>()(std::declval<_Args>()...))>
true_type __is_callable_helper(int);
template <class...>
false_type __is_callable_helper(...);

template <class _Func, class... _Args>
struct __is_callable : decltype(std::__is_callable_helper<_Func, _Args...>(0)) {};

}}
# 454 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\type_traits" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_char_like_type.h" 1 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_char_like_type.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_standard_layout.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_standard_layout.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
struct is_standard_layout : public integral_constant<bool, __is_standard_layout(_Tp)> {};


template <class _Tp>
inline constexpr bool is_standard_layout_v = __is_standard_layout(_Tp);


}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_char_like_type.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_trivial.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_trivial.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
struct is_trivial : public integral_constant<bool, __is_trivial(_Tp)> {};


template <class _Tp>
inline constexpr bool is_trivial_v = __is_trivial(_Tp);


}}
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_char_like_type.h" 2 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_char_like_type.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _CharT>
using _IsCharLikeType = _And<is_standard_layout<_CharT>, is_trivial<_CharT> >;

}}
# 455 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\type_traits" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_compound.h" 1 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_compound.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_fundamental.h" 1 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_fundamental.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



template <class _Tp>
struct is_fundamental : _BoolConstant<__is_fundamental(_Tp)> {};


template <class _Tp>
inline constexpr bool is_fundamental_v = __is_fundamental(_Tp);
# 46 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_fundamental.h" 3
}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_compound.h" 2 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_compound.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



template <class _Tp>
struct is_compound : _BoolConstant<__is_compound(_Tp)> {};


template <class _Tp>
inline constexpr bool is_compound_v = __is_compound(_Tp);
# 44 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_compound.h" 3
}}
# 457 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\type_traits" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_constant_evaluated.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_constant_evaluated.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {







__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline constexpr bool __libcpp_is_constant_evaluated() noexcept {
  return __builtin_is_constant_evaluated();
}

}}
# 459 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\type_traits" 2 3


# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_copy_assignable.h" 1 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_copy_assignable.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
struct is_copy_assignable
    : public integral_constant<
          bool,
          __is_assignable(__add_lvalue_reference_t<_Tp>, __add_lvalue_reference_t<typename add_const<_Tp>::type>)> {};


template <class _Tp>
inline constexpr bool is_copy_assignable_v = is_copy_assignable<_Tp>::value;


}}
# 462 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\type_traits" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_default_constructible.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_default_constructible.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
struct is_default_constructible : public integral_constant<bool, __is_constructible(_Tp)> {};


template <class _Tp>
inline constexpr bool is_default_constructible_v = __is_constructible(_Tp);


}}
# 464 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\type_traits" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_empty.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_empty.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
struct is_empty : public integral_constant<bool, __is_empty(_Tp)> {};


template <class _Tp>
inline constexpr bool is_empty_v = __is_empty(_Tp);


}}
# 466 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\type_traits" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_final.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_final.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
struct __libcpp_is_final : public integral_constant<bool, __is_final(_Tp)> {};


template <class _Tp>
struct is_final : public integral_constant<bool, __is_final(_Tp)> {};



template <class _Tp>
inline constexpr bool is_final_v = __is_final(_Tp);


}}
# 468 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\type_traits" 2 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_implicitly_default_constructible.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_implicitly_default_constructible.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {






template <class _Tp>
void __test_implicit_default_constructible(_Tp);

template <class _Tp, class = void, class = typename is_default_constructible<_Tp>::type>
struct __is_implicitly_default_constructible : false_type {};

template <class _Tp>
struct __is_implicitly_default_constructible<_Tp,
                                             decltype(std::__test_implicit_default_constructible<_Tp const&>({})),
                                             true_type> : true_type {};

template <class _Tp>
struct __is_implicitly_default_constructible<_Tp,
                                             decltype(std::__test_implicit_default_constructible<_Tp const&>({})),
                                             false_type> : false_type {};


}}
# 472 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\type_traits" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_literal_type.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_literal_type.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {


template <class _Tp>
struct __attribute__((__deprecated__)) is_literal_type
    : public integral_constant<bool, __is_literal_type(_Tp)> {};


template <class _Tp>
__attribute__((__deprecated__)) inline constexpr bool is_literal_type_v = __is_literal_type(_Tp);



}}
# 474 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\type_traits" 2 3







# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_nothrow_convertible.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_nothrow_convertible.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/lazy.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/lazy.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <template <class...> class _Func, class... _Args>
struct _Lazy : _Func<_Args...> {};

}}
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_nothrow_convertible.h" 2 3
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_nothrow_convertible.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 60 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_nothrow_convertible.h" 3
}}
# 482 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\type_traits" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_nothrow_copy_assignable.h" 1 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_nothrow_copy_assignable.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
struct is_nothrow_copy_assignable
    : public integral_constant<bool,
                               __is_nothrow_assignable(__add_lvalue_reference_t<_Tp>,
                                                       __add_lvalue_reference_t<typename add_const<_Tp>::type>)> {};


template <class _Tp>
inline constexpr bool is_nothrow_copy_assignable_v = is_nothrow_copy_assignable<_Tp>::value;


}}
# 483 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\type_traits" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_nothrow_copy_constructible.h" 1 3
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_nothrow_copy_constructible.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 33 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_nothrow_copy_constructible.h" 3
template <class _Tp>
struct is_nothrow_copy_constructible
    : public integral_constant<
          bool,
          __is_nothrow_constructible(_Tp, typename add_lvalue_reference<typename add_const<_Tp>::type>::type)> {};




template <class _Tp>
inline constexpr bool is_nothrow_copy_constructible_v = is_nothrow_copy_constructible<_Tp>::value;


}}
# 484 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\type_traits" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_nothrow_default_constructible.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_nothrow_default_constructible.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
struct is_nothrow_default_constructible
    : public integral_constant<bool, __is_nothrow_constructible(_Tp)> {};


template <class _Tp>
inline constexpr bool is_nothrow_default_constructible_v = __is_nothrow_constructible(_Tp);


}}
# 485 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\type_traits" 2 3





# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_pod.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_pod.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
struct is_pod : public integral_constant<bool, __is_pod(_Tp)> {};


template <class _Tp>
inline constexpr bool is_pod_v = __is_pod(_Tp);


}}
# 491 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\type_traits" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_polymorphic.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_polymorphic.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
struct is_polymorphic : public integral_constant<bool, __is_polymorphic(_Tp)> {};


template <class _Tp>
inline constexpr bool is_polymorphic_v = __is_polymorphic(_Tp);


}}
# 493 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\type_traits" 2 3





# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_scoped_enum.h" 1 3
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_scoped_enum.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 38 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_scoped_enum.h" 3
}}
# 499 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\type_traits" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_specialization.h" 1 3
# 29 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_specialization.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



template <class _Tp, template <class...> class _Template>
inline constexpr bool __is_specialization_v = false;

template <template <class...> class _Template, class... _Args>
inline constexpr bool __is_specialization_v<_Template<_Args...>, _Template> = true;



}}
# 501 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\type_traits" 2 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_trivially_assignable.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_trivially_assignable.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp, class _Arg>
struct is_trivially_assignable : integral_constant<bool, __is_trivially_assignable(_Tp, _Arg)> {};


template <class _Tp, class _Arg>
inline constexpr bool is_trivially_assignable_v = __is_trivially_assignable(_Tp, _Arg);


}}
# 505 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\type_traits" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_trivially_constructible.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_trivially_constructible.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp, class... _Args>
struct is_trivially_constructible
    : integral_constant<bool, __is_trivially_constructible(_Tp, _Args...)> {};


template <class _Tp, class... _Args>
inline constexpr bool is_trivially_constructible_v = __is_trivially_constructible(_Tp, _Args...);


}}
# 506 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\type_traits" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_trivially_copy_assignable.h" 1 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_trivially_copy_assignable.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
struct is_trivially_copy_assignable
    : public integral_constant<bool,
                               __is_trivially_assignable(__add_lvalue_reference_t<_Tp>,
                                                         __add_lvalue_reference_t<typename add_const<_Tp>::type>)> {};


template <class _Tp>
inline constexpr bool is_trivially_copy_assignable_v = is_trivially_copy_assignable<_Tp>::value;


}}
# 507 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\type_traits" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_trivially_copy_constructible.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_trivially_copy_constructible.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
struct is_trivially_copy_constructible
    : public integral_constant<bool, __is_trivially_constructible(_Tp, __add_lvalue_reference_t<const _Tp>)> {};


template <class _Tp>
inline constexpr bool is_trivially_copy_constructible_v = is_trivially_copy_constructible<_Tp>::value;


}}
# 508 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\type_traits" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_trivially_copyable.h" 1 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_trivially_copyable.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cstdint" 1 3
# 146 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cstdint" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\stdint.h" 1 3
# 110 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\stdint.h" 3
# 124 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\stdint.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdint.h" 1 3
# 40 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdint.h" 3
      namespace std {

          extern "C" {
# 56 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdint.h" 3
typedef signed char int8_t;
typedef signed short int int16_t;
typedef signed int int32_t;
typedef signed long long int int64_t;


typedef unsigned char uint8_t;
typedef unsigned short int uint16_t;
typedef unsigned int uint32_t;
typedef unsigned long long int uint64_t;





typedef signed char int_least8_t;
typedef signed short int int_least16_t;
typedef signed int int_least32_t;
typedef signed long long int int_least64_t;


typedef unsigned char uint_least8_t;
typedef unsigned short int uint_least16_t;
typedef unsigned int uint_least32_t;
typedef unsigned long long int uint_least64_t;




typedef signed int int_fast8_t;
typedef signed int int_fast16_t;
typedef signed int int_fast32_t;
typedef signed long long int int_fast64_t;


typedef unsigned int uint_fast8_t;
typedef unsigned int uint_fast16_t;
typedef unsigned int uint_fast32_t;
typedef unsigned long long int uint_fast64_t;






typedef signed int intptr_t;
typedef unsigned int uintptr_t;



typedef signed long long intmax_t;
typedef unsigned long long uintmax_t;
# 259 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdint.h" 3
         }
      }





      using ::std::int8_t;
      using ::std::int16_t;
      using ::std::int32_t;
      using ::std::int64_t;
      using ::std::uint8_t;
      using ::std::uint16_t;
      using ::std::uint32_t;
      using ::std::uint64_t;
      using ::std::int_least8_t;
      using ::std::int_least16_t;
      using ::std::int_least32_t;
      using ::std::int_least64_t;
      using ::std::uint_least8_t;
      using ::std::uint_least16_t;
      using ::std::uint_least32_t;
      using ::std::uint_least64_t;
      using ::std::int_fast8_t;
      using ::std::int_fast16_t;
      using ::std::int_fast32_t;
      using ::std::int_fast64_t;
      using ::std::uint_fast8_t;
      using ::std::uint_fast16_t;
      using ::std::uint_fast32_t;
      using ::std::uint_fast64_t;
      using ::std::intptr_t;
      using ::std::uintptr_t;
      using ::std::intmax_t;
      using ::std::uintmax_t;
# 125 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\stdint.h" 2 3
# 147 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cstdint" 2 3
# 158 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cstdint" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

using ::int8_t __attribute__((__using_if_exists__));
using ::int16_t __attribute__((__using_if_exists__));
using ::int32_t __attribute__((__using_if_exists__));
using ::int64_t __attribute__((__using_if_exists__));

using ::uint8_t __attribute__((__using_if_exists__));
using ::uint16_t __attribute__((__using_if_exists__));
using ::uint32_t __attribute__((__using_if_exists__));
using ::uint64_t __attribute__((__using_if_exists__));

using ::int_least8_t __attribute__((__using_if_exists__));
using ::int_least16_t __attribute__((__using_if_exists__));
using ::int_least32_t __attribute__((__using_if_exists__));
using ::int_least64_t __attribute__((__using_if_exists__));

using ::uint_least8_t __attribute__((__using_if_exists__));
using ::uint_least16_t __attribute__((__using_if_exists__));
using ::uint_least32_t __attribute__((__using_if_exists__));
using ::uint_least64_t __attribute__((__using_if_exists__));

using ::int_fast8_t __attribute__((__using_if_exists__));
using ::int_fast16_t __attribute__((__using_if_exists__));
using ::int_fast32_t __attribute__((__using_if_exists__));
using ::int_fast64_t __attribute__((__using_if_exists__));

using ::uint_fast8_t __attribute__((__using_if_exists__));
using ::uint_fast16_t __attribute__((__using_if_exists__));
using ::uint_fast32_t __attribute__((__using_if_exists__));
using ::uint_fast64_t __attribute__((__using_if_exists__));

using ::intptr_t __attribute__((__using_if_exists__));
using ::uintptr_t __attribute__((__using_if_exists__));

using ::intmax_t __attribute__((__using_if_exists__));
using ::uintmax_t __attribute__((__using_if_exists__));

}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_trivially_copyable.h" 2 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_trivially_copyable.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
struct is_trivially_copyable : public integral_constant<bool, __is_trivially_copyable(_Tp)> {};


template <class _Tp>
inline constexpr bool is_trivially_copyable_v = __is_trivially_copyable(_Tp);







}}
# 509 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\type_traits" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_trivially_default_constructible.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_trivially_default_constructible.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
struct is_trivially_default_constructible
    : public integral_constant<bool, __is_trivially_constructible(_Tp)> {};


template <class _Tp>
inline constexpr bool is_trivially_default_constructible_v = __is_trivially_constructible(_Tp);


}}
# 510 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\type_traits" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_trivially_destructible.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_trivially_destructible.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



template <class _Tp>
struct is_trivially_destructible
    : public integral_constant<bool, __is_trivially_destructible(_Tp)> {};
# 41 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_trivially_destructible.h" 3
template <class _Tp>
inline constexpr bool is_trivially_destructible_v = is_trivially_destructible<_Tp>::value;


}}
# 511 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\type_traits" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_trivially_move_assignable.h" 1 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_trivially_move_assignable.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
struct is_trivially_move_assignable
    : public integral_constant<
          bool,
          __is_trivially_assignable(__add_lvalue_reference_t<_Tp>, __add_rvalue_reference_t<_Tp>)> {};


template <class _Tp>
inline constexpr bool is_trivially_move_assignable_v = is_trivially_move_assignable<_Tp>::value;


}}
# 512 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\type_traits" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_trivially_move_constructible.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_trivially_move_constructible.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
struct is_trivially_move_constructible
    : public integral_constant<bool, __is_trivially_constructible(_Tp, __add_rvalue_reference_t<_Tp>)> {};


template <class _Tp>
inline constexpr bool is_trivially_move_constructible_v = is_trivially_move_constructible<_Tp>::value;


}}
# 513 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\type_traits" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_unbounded_array.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_unbounded_array.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class>
struct __libcpp_is_unbounded_array : false_type {};
template <class _Tp>
struct __libcpp_is_unbounded_array<_Tp[]> : true_type {};
# 38 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_unbounded_array.h" 3
}}
# 514 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\type_traits" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_unsigned.h" 1 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_unsigned.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



template <class _Tp>
struct is_unsigned : _BoolConstant<__is_unsigned(_Tp)> {};


template <class _Tp>
inline constexpr bool is_unsigned_v = __is_unsigned(_Tp);
# 57 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_unsigned.h" 3
}}
# 516 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\type_traits" 2 3




# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/make_unsigned.h" 1 3
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/make_unsigned.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



template <class _Tp>
using __make_unsigned_t = __make_unsigned(_Tp);
# 79 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/make_unsigned.h" 3
template <class _Tp>
struct make_unsigned {
  using type __attribute__((__nodebug__)) = __make_unsigned_t<_Tp>;
};


template <class _Tp>
using make_unsigned_t = __make_unsigned_t<_Tp>;



template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr __make_unsigned_t<_Tp> __to_unsigned_like(_Tp __x) noexcept {
  return static_cast<__make_unsigned_t<_Tp> >(__x);
}


template <class _Tp, class _Up>
using __copy_unsigned_t = __conditional_t<is_unsigned<_Tp>::value, __make_unsigned_t<_Up>, _Up>;

}}
# 521 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\type_traits" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/maybe_const.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/maybe_const.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <bool _Const, class _Tp>
using __maybe_const = __conditional_t<_Const, const _Tp, _Tp>;

}}
# 522 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\type_traits" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/negation.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/negation.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Pred>
struct _Not : _BoolConstant<!_Pred::value> {};


template <class _Tp>
struct negation : _Not<_Tp> {};
template <class _Tp>
inline constexpr bool negation_v = !_Tp::value;


}}
# 523 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\type_traits" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/rank.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/rank.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 30 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/rank.h" 3
template <class _Tp>
struct rank : public integral_constant<size_t, 0> {};
template <class _Tp>
struct rank<_Tp[]> : public integral_constant<size_t, rank<_Tp>::value + 1> {};
template <class _Tp, size_t _Np>
struct rank<_Tp[_Np]> : public integral_constant<size_t, rank<_Tp>::value + 1> {};




template <class _Tp>
inline constexpr size_t rank_v = rank<_Tp>::value;


}}
# 524 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\type_traits" 2 3





# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/remove_pointer.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/remove_pointer.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {


template <class _Tp>
struct remove_pointer {
  using type __attribute__((__nodebug__)) = __remove_pointer(_Tp);
};

template <class _Tp>
using __remove_pointer_t = __remove_pointer(_Tp);
# 42 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/remove_pointer.h" 3
template <class _Tp>
using remove_pointer_t = __remove_pointer_t<_Tp>;


}}
# 530 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\type_traits" 2 3


# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/result_of.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/result_of.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {




template <class _Callable>
class __attribute__((__deprecated__)) result_of;

template <class _Fp, class... _Args>
class result_of<_Fp(_Args...)> : public __invoke_of<_Fp, _Args...> {};


template <class _Tp>
using result_of_t __attribute__((__deprecated__)) = typename result_of<_Tp>::type;



}}
# 533 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\type_traits" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/type_identity.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/type_identity.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
struct __type_identity {
  typedef _Tp type;
};

template <class _Tp>
using __type_identity_t __attribute__((__nodebug__)) = typename __type_identity<_Tp>::type;
# 37 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/type_identity.h" 3
}}
# 534 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\type_traits" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/unwrap_ref.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/unwrap_ref.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
struct __unwrap_reference {
  typedef __attribute__((__nodebug__)) _Tp type;
};

template <class _Tp>
class reference_wrapper;

template <class _Tp>
struct __unwrap_reference<reference_wrapper<_Tp> > {
  typedef __attribute__((__nodebug__)) _Tp& type;
};

template <class _Tp>
struct decay;
# 51 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/unwrap_ref.h" 3
template <class _Tp>
struct __unwrap_ref_decay



    : __unwrap_reference<__decay_t<_Tp> >

{
};

}}
# 536 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\type_traits" 2 3
# 544 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\type_traits" 3
# 820 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\limits" 2 3
# 27 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/advance.h" 2 3
# 30 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/advance.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 34 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/advance.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _InputIter>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr void
__advance(_InputIter& __i, typename iterator_traits<_InputIter>::difference_type __n, input_iterator_tag) {
  for (; __n > 0; --__n)
    ++__i;
}

template <class _BiDirIter>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr void
__advance(_BiDirIter& __i, typename iterator_traits<_BiDirIter>::difference_type __n, bidirectional_iterator_tag) {
  if (__n >= 0)
    for (; __n > 0; --__n)
      ++__i;
  else
    for (; __n < 0; ++__n)
      --__i;
}

template <class _RandIter>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr void
__advance(_RandIter& __i, typename iterator_traits<_RandIter>::difference_type __n, random_access_iterator_tag) {
  __i += __n;
}

template < class _InputIter,
           class _Distance,
           class _IntegralDistance = decltype(std::__convert_to_integral(std::declval<_Distance>())),
           class = __enable_if_t<is_integral<_IntegralDistance>::value> >
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr void advance(_InputIter& __i, _Distance __orig_n) {
  typedef typename iterator_traits<_InputIter>::difference_type _Difference;
  _Difference __n = static_cast<_Difference>(std::__convert_to_integral(__orig_n));

  ((void)0);

  std::__advance(__i, __n, typename iterator_traits<_InputIter>::iterator_category());
}
# 201 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/advance.h" 3
}}
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/iterator_operations.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/distance.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/distance.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/access.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/access.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/enable_borrowed_range.h" 1 3
# 21 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/enable_borrowed_range.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 38 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/enable_borrowed_range.h" 3
}}
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/access.h" 2 3




# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/auto_cast.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/auto_cast.h" 3
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/access.h" 2 3
# 28 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/access.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 211 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/access.h" 3
}}
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/distance.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/concepts.h" 1 3
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/concepts.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/data.h" 1 3
# 29 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/data.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 101 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/data.h" 3
}}
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/concepts.h" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/enable_view.h" 1 3
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/enable_view.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 49 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/enable_view.h" 3
}}
# 26 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/concepts.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/size.h" 1 3
# 29 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/size.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 136 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/size.h" 3
}}
# 27 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/concepts.h" 2 3





# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\initializer_list" 1 3
# 51 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\initializer_list" 3


namespace std
{



template <class _Ep>
class initializer_list {
  const _Ep* __begin_;
  size_t __size_;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr initializer_list(const _Ep* __b, size_t __s) noexcept
      : __begin_(__b),
        __size_(__s) {}

public:
  typedef _Ep value_type;
  typedef const _Ep& reference;
  typedef const _Ep& const_reference;
  typedef size_t size_type;

  typedef const _Ep* iterator;
  typedef const _Ep* const_iterator;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr initializer_list() noexcept : __begin_(nullptr), __size_(0) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr size_t size() const noexcept { return __size_; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const _Ep* begin() const noexcept { return __begin_; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const _Ep* end() const noexcept { return __begin_ + __size_; }
};

template <class _Ep>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const _Ep* begin(initializer_list<_Ep> __il) noexcept {
  return __il.begin();
}

template <class _Ep>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const _Ep* end(initializer_list<_Ep> __il) noexcept {
  return __il.end();
}



}
# 33 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/concepts.h" 2 3
# 36 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/concepts.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 140 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/concepts.h" 3
}}
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/distance.h" 2 3
# 25 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/distance.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _InputIter>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr typename iterator_traits<_InputIter>::difference_type
__distance(_InputIter __first, _InputIter __last, input_iterator_tag) {
  typename iterator_traits<_InputIter>::difference_type __r(0);
  for (; __first != __last; ++__first)
    ++__r;
  return __r;
}

template <class _RandIter>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr typename iterator_traits<_RandIter>::difference_type
__distance(_RandIter __first, _RandIter __last, random_access_iterator_tag) {
  return __last - __first;
}

template <class _InputIter>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr typename iterator_traits<_InputIter>::difference_type
distance(_InputIter __first, _InputIter __last) {
  return std::__distance(__first, __last, typename iterator_traits<_InputIter>::iterator_category());
}
# 97 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/distance.h" 3
}}
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/iterator_operations.h" 2 3


# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/iter_swap.h" 1 3
# 27 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/iter_swap.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 31 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/iter_swap.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 104 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/iter_swap.h" 3
}}
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/iterator_operations.h" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/next.h" 1 3
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/next.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _InputIter, __enable_if_t<__has_input_iterator_category<_InputIter>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _InputIter
next(_InputIter __x, typename iterator_traits<_InputIter>::difference_type __n = 1) {


  ((void)0);


  std::advance(__x, __n);
  return __x;
}
# 81 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/next.h" 3
}}
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/iterator_operations.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/prev.h" 1 3
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/prev.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _InputIter, __enable_if_t<__has_input_iterator_category<_InputIter>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _InputIter
prev(_InputIter __x, typename iterator_traits<_InputIter>::difference_type __n = 1) {


  ((void)0);

  std::advance(__x, -__n);
  return __x;
}
# 74 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/prev.h" 3
}}
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/iterator_operations.h" 2 3
# 34 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/iterator_operations.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 38 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/iterator_operations.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _AlgPolicy>
struct _IterOps;
# 69 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/iterator_operations.h" 3
struct _ClassicAlgPolicy {};

template <>
struct _IterOps<_ClassicAlgPolicy> {
  template <class _Iter>
  using __value_type = typename iterator_traits<_Iter>::value_type;

  template <class _Iter>
  using __iterator_category = typename iterator_traits<_Iter>::iterator_category;

  template <class _Iter>
  using __difference_type = typename iterator_traits<_Iter>::difference_type;


  template <class _Iter, class _Distance>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr static void advance(_Iter& __iter, _Distance __count) {
    std::advance(__iter, __count);
  }


  template <class _Iter>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr static typename iterator_traits<_Iter>::difference_type
  distance(_Iter __first, _Iter __last) {
    return std::distance(__first, __last);
  }

  template <class _Iter>
  using __deref_t = decltype(*std::declval<_Iter&>());

  template <class _Iter>
  using __move_t = decltype(std::move(*std::declval<_Iter&>()));

  template <class _Iter>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr static void __validate_iter_reference() {
    static_assert(
        is_same<__deref_t<_Iter>, typename iterator_traits<__remove_cvref_t<_Iter> >::reference>::value,
        "It looks like your iterator's `iterator_traits<It>::reference` does not match the return type of "
        "dereferencing the iterator, i.e., calling `*it`. This is undefined behavior according to [input.iterators] "
        "and can lead to dangling reference issues at runtime, so we are flagging this.");
  }


  template <class _Iter, __enable_if_t<is_reference<__deref_t<_Iter> >::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr static


      __move_t<_Iter>
      __iter_move(_Iter&& __i) {
    __validate_iter_reference<_Iter>();

    return std::move(*std::forward<_Iter>(__i));
  }

  template <class _Iter, __enable_if_t<!is_reference<__deref_t<_Iter> >::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr static



      __deref_t<_Iter>
      __iter_move(_Iter&& __i) {
    __validate_iter_reference<_Iter>();

    return *std::forward<_Iter>(__i);
  }


  template <class _Iter1, class _Iter2>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr static void iter_swap(_Iter1&& __a, _Iter2&& __b) {
    std::iter_swap(std::forward<_Iter1>(__a), std::forward<_Iter2>(__b));
  }


  template <class _Iterator>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr _Iterator next(_Iterator, _Iterator __last) {
    return __last;
  }

  template <class _Iter>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr __remove_cvref_t<_Iter>
  next(_Iter&& __it, typename iterator_traits<__remove_cvref_t<_Iter> >::difference_type __n = 1) {
    return std::next(std::forward<_Iter>(__it), __n);
  }


  template <class _Iter>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr __remove_cvref_t<_Iter>
  prev(_Iter&& __iter, typename iterator_traits<__remove_cvref_t<_Iter> >::difference_type __n = 1) {
    return std::prev(std::forward<_Iter>(__iter), __n);
  }

  template <class _Iter>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr void __advance_to(_Iter& __first, _Iter __last) {
    __first = __last;
  }
};

}}
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/copy_move_common.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/unwrap_iter.h" 1 3
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/unwrap_iter.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 26 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/unwrap_iter.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 37 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/unwrap_iter.h" 3
template <class _Iter, bool = __libcpp_is_contiguous_iterator<_Iter>::value>
struct __unwrap_iter_impl {
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Iter __rewrap(_Iter, _Iter __iter) { return __iter; }
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Iter __unwrap(_Iter __i) noexcept { return __i; }
};





template <class _Iter>
struct __unwrap_iter_impl<_Iter, true> {
  using _ToAddressT = decltype(std::__to_address(std::declval<_Iter>()));

  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Iter __rewrap(_Iter __orig_iter, _ToAddressT __unwrapped_iter) {
    return __orig_iter + (__unwrapped_iter - std::__to_address(__orig_iter));
  }

  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _ToAddressT __unwrap(_Iter __i) noexcept {
    return std::__to_address(__i);
  }
};

template <class _Iter,
          class _Impl = __unwrap_iter_impl<_Iter>,
          __enable_if_t<is_copy_constructible<_Iter>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr decltype(_Impl::__unwrap(std::declval<_Iter>()))
__unwrap_iter(_Iter __i) noexcept {
  return _Impl::__unwrap(__i);
}
# 76 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/unwrap_iter.h" 3
template <class _OrigIter, class _Iter, class _Impl = __unwrap_iter_impl<_OrigIter> >
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _OrigIter __rewrap_iter(_OrigIter __orig_iter, _Iter __iter) noexcept {
  return _Impl::__rewrap(std::move(__orig_iter), std::move(__iter));
}

}}
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/copy_move_common.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/unwrap_range.h" 1 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/unwrap_range.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/pair.h" 1 3
# 12 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/pair.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__compare/common_comparison_category.h" 1 3
# 12 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__compare/common_comparison_category.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__compare/ordering.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__compare/ordering.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 276 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__compare/ordering.h" 3
}}
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__compare/common_comparison_category.h" 2 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__compare/common_comparison_category.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 84 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__compare/common_comparison_category.h" 3
}}
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/pair.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__compare/synth_three_way.h" 1 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__compare/synth_three_way.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__compare/three_way_comparable.h" 1 3
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__compare/three_way_comparable.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 53 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__compare/three_way_comparable.h" 3
}}
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__compare/synth_three_way.h" 2 3
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__compare/synth_three_way.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 55 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__compare/synth_three_way.h" 3
}}
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/pair.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/different_from.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/different_from.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 29 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/different_from.h" 3
}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/pair.h" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__fwd/array.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__fwd/array.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp, size_t _Size>
struct array;

}}
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/pair.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__fwd/get.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__fwd/get.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__fwd/subrange.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__fwd/subrange.h" 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__fwd/get.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__fwd/tuple.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__fwd/tuple.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



template <class...>
class tuple;



}}
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__fwd/get.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__tuple/tuple_element.h" 1 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__tuple/tuple_element.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__tuple/tuple_indices.h" 1 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__tuple/tuple_indices.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/integer_sequence.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/integer_sequence.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <size_t...>
struct __tuple_indices;

template <class _IdxType, _IdxType... _Values>
struct __integer_sequence {
  template <template <class _OIdxType, _OIdxType...> class _ToIndexSeq, class _ToIndexType>
  using __convert = _ToIndexSeq<_ToIndexType, _Values...>;

  template <size_t _Sp>
  using __to_tuple_indices = __tuple_indices<(_Values + _Sp)...>;
};
# 86 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/integer_sequence.h" 3
template <size_t _Ep, size_t _Sp>
using __make_indices_imp =
    typename __make_integer_seq<__integer_sequence, size_t, _Ep - _Sp>::template __to_tuple_indices<_Sp>;
# 97 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/integer_sequence.h" 3
template <class _Tp, _Tp... _Ip>
struct integer_sequence {
  typedef _Tp value_type;
  static_assert(is_integral<_Tp>::value, "std::integer_sequence can only be instantiated with an integral type");
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr size_t size() noexcept { return sizeof...(_Ip); }
};

template <size_t... _Ip>
using index_sequence = integer_sequence<size_t, _Ip...>;



template <class _Tp, _Tp _Ep>
using __make_integer_sequence __attribute__((__nodebug__)) = __make_integer_seq<integer_sequence, _Tp, _Ep>;
# 132 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/integer_sequence.h" 3
template <class _Tp, _Tp _Np>
using make_integer_sequence = __make_integer_sequence<_Tp, _Np>;

template <size_t _Np>
using make_index_sequence = make_integer_sequence<size_t, _Np>;

template <class... _Tp>
using index_sequence_for = make_index_sequence<sizeof...(_Tp)>;
# 151 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/integer_sequence.h" 3
}}
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__tuple/tuple_indices.h" 2 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__tuple/tuple_indices.h" 3




namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <size_t...>
struct __tuple_indices {};

template <size_t _Ep, size_t _Sp = 0>
struct __make_tuple_indices {
  static_assert(_Sp <= _Ep, "__make_tuple_indices input error");
  typedef __make_indices_imp<_Ep, _Sp> type;
};

}}
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__tuple/tuple_element.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__tuple/tuple_types.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__tuple/tuple_types.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class... _Tp>
struct __tuple_types {};

}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__tuple/tuple_element.h" 2 3
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__tuple/tuple_element.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <size_t _Ip, class _Tp>
struct tuple_element;

template <size_t _Ip, class _Tp>
struct tuple_element<_Ip, const _Tp> {
  typedef __attribute__((__nodebug__)) typename add_const<typename tuple_element<_Ip, _Tp>::type>::type type;
};

template <size_t _Ip, class _Tp>
struct tuple_element<_Ip, volatile _Tp> {
  typedef __attribute__((__nodebug__)) typename add_volatile<typename tuple_element<_Ip, _Tp>::type>::type type;
};

template <size_t _Ip, class _Tp>
struct tuple_element<_Ip, const volatile _Tp> {
  typedef __attribute__((__nodebug__)) typename add_cv<typename tuple_element<_Ip, _Tp>::type>::type type;
};
# 72 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__tuple/tuple_element.h" 3
template <size_t _Ip, class... _Types>
struct tuple_element<_Ip, __tuple_types<_Types...> > {
  static_assert(_Ip < sizeof...(_Types), "tuple_element index out of range");
  typedef __attribute__((__nodebug__)) __type_pack_element<_Ip, _Types...> type;
};


template <size_t _Ip, class... _Tp>
using tuple_element_t __attribute__((__nodebug__)) = typename tuple_element<_Ip, _Tp...>::type;




}}
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__fwd/get.h" 2 3
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__fwd/get.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



template <size_t _Ip, class... _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr typename tuple_element<_Ip, tuple<_Tp...> >::type&
get(tuple<_Tp...>&) noexcept;

template <size_t _Ip, class... _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const typename tuple_element<_Ip, tuple<_Tp...> >::type&
get(const tuple<_Tp...>&) noexcept;

template <size_t _Ip, class... _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr typename tuple_element<_Ip, tuple<_Tp...> >::type&&
get(tuple<_Tp...>&&) noexcept;

template <size_t _Ip, class... _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const typename tuple_element<_Ip, tuple<_Tp...> >::type&&
get(const tuple<_Tp...>&&) noexcept;



template <size_t _Ip, class _T1, class _T2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr typename tuple_element<_Ip, pair<_T1, _T2> >::type&
get(pair<_T1, _T2>&) noexcept;

template <size_t _Ip, class _T1, class _T2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const typename tuple_element<_Ip, pair<_T1, _T2> >::type&
get(const pair<_T1, _T2>&) noexcept;


template <size_t _Ip, class _T1, class _T2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr typename tuple_element<_Ip, pair<_T1, _T2> >::type&&
get(pair<_T1, _T2>&&) noexcept;

template <size_t _Ip, class _T1, class _T2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const typename tuple_element<_Ip, pair<_T1, _T2> >::type&&
get(const pair<_T1, _T2>&&) noexcept;


template <size_t _Ip, class _Tp, size_t _Size>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Tp& get(array<_Tp, _Size>&) noexcept;

template <size_t _Ip, class _Tp, size_t _Size>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const _Tp& get(const array<_Tp, _Size>&) noexcept;


template <size_t _Ip, class _Tp, size_t _Size>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Tp&& get(array<_Tp, _Size>&&) noexcept;

template <size_t _Ip, class _Tp, size_t _Size>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const _Tp&& get(const array<_Tp, _Size>&&) noexcept;
# 97 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__fwd/get.h" 3
}}
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/pair.h" 2 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__tuple/pair_like.h" 1 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__tuple/pair_like.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__tuple/tuple_like.h" 1 3
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__tuple/tuple_like.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 49 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__tuple/tuple_like.h" 3
}}
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__tuple/pair_like.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__tuple/tuple_size.h" 1 3
# 21 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__tuple/tuple_size.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
struct tuple_size;


template <class _Tp, class...>
using __enable_if_tuple_size_imp = _Tp;

template <class _Tp>
struct tuple_size<__enable_if_tuple_size_imp< const _Tp,
                                                                   __enable_if_t<!is_volatile<_Tp>::value>,
                                                                   integral_constant<size_t, sizeof(tuple_size<_Tp>)>>>
    : public integral_constant<size_t, tuple_size<_Tp>::value> {};

template <class _Tp>
struct tuple_size<__enable_if_tuple_size_imp< volatile _Tp,
                                                                   __enable_if_t<!is_const<_Tp>::value>,
                                                                   integral_constant<size_t, sizeof(tuple_size<_Tp>)>>>
    : public integral_constant<size_t, tuple_size<_Tp>::value> {};

template <class _Tp>
struct
    tuple_size<__enable_if_tuple_size_imp< const volatile _Tp, integral_constant<size_t, sizeof(tuple_size<_Tp>)>>>
    : public integral_constant<size_t, tuple_size<_Tp>::value> {};
# 60 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__tuple/tuple_size.h" 3
template <class... _Tp>
struct tuple_size<tuple<_Tp...> > : public integral_constant<size_t, sizeof...(_Tp)> {};

template <class... _Tp>
struct tuple_size<__tuple_types<_Tp...> > : public integral_constant<size_t, sizeof...(_Tp)> {};



}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__tuple/pair_like.h" 2 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__tuple/pair_like.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 30 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__tuple/pair_like.h" 3
}}
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/pair.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__tuple/sfinae_helpers.h" 1 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__tuple/sfinae_helpers.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__tuple/make_tuple_types.h" 1 3
# 26 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__tuple/make_tuple_types.h" 3




namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {






template <class _TupleTypes, class _TupleIndices>
struct __make_tuple_types_flat;

template <template <class...> class _Tuple, class... _Types, size_t... _Idx>
struct __make_tuple_types_flat<_Tuple<_Types...>, __tuple_indices<_Idx...>> {

  template <class _Tp>
  using __apply_quals __attribute__((__nodebug__)) = __tuple_types<__apply_cv_t<_Tp, __type_pack_element<_Idx, _Types...>>...>;
};

template <class _Vt, size_t _Np, size_t... _Idx>
struct __make_tuple_types_flat<array<_Vt, _Np>, __tuple_indices<_Idx...>> {
  template <size_t>
  using __value_type = _Vt;
  template <class _Tp>
  using __apply_quals = __tuple_types<__apply_cv_t<_Tp, __value_type<_Idx>>...>;
};

template <class _Tp,
          size_t _Ep = tuple_size<__libcpp_remove_reference_t<_Tp> >::value,
          size_t _Sp = 0,
          bool _SameSize = (_Ep == tuple_size<__libcpp_remove_reference_t<_Tp> >::value)>
struct __make_tuple_types {
  static_assert(_Sp <= _Ep, "__make_tuple_types input error");
  using _RawTp = __remove_cv_t<__libcpp_remove_reference_t<_Tp> >;
  using _Maker = __make_tuple_types_flat<_RawTp, typename __make_tuple_indices<_Ep, _Sp>::type>;
  using type = typename _Maker::template __apply_quals<_Tp>;
};

template <class... _Types, size_t _Ep>
struct __make_tuple_types<tuple<_Types...>, _Ep, 0, true> {
  typedef __attribute__((__nodebug__)) __tuple_types<_Types...> type;
};

template <class... _Types, size_t _Ep>
struct __make_tuple_types<__tuple_types<_Types...>, _Ep, 0, true> {
  typedef __attribute__((__nodebug__)) __tuple_types<_Types...> type;
};

}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__tuple/sfinae_helpers.h" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__tuple/tuple_like_ext.h" 1 3
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__tuple/tuple_like_ext.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
struct __tuple_like_ext : false_type {};

template <class _Tp>
struct __tuple_like_ext<const _Tp> : public __tuple_like_ext<_Tp> {};
template <class _Tp>
struct __tuple_like_ext<volatile _Tp> : public __tuple_like_ext<_Tp> {};
template <class _Tp>
struct __tuple_like_ext<const volatile _Tp> : public __tuple_like_ext<_Tp> {};


template <class... _Tp>
struct __tuple_like_ext<tuple<_Tp...> > : true_type {};


template <class _T1, class _T2>
struct __tuple_like_ext<pair<_T1, _T2> > : true_type {};

template <class _Tp, size_t _Size>
struct __tuple_like_ext<array<_Tp, _Size> > : true_type {};

template <class... _Tp>
struct __tuple_like_ext<__tuple_types<_Tp...> > : true_type {};

}}
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__tuple/sfinae_helpers.h" 2 3
# 29 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__tuple/sfinae_helpers.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



template <bool... _Preds>
struct __all_dummy;

template <bool... _Pred>
struct __all : _IsSame<__all_dummy<_Pred...>, __all_dummy<((void)_Pred, true)...>> {};

struct __tuple_sfinae_base {
  template <template <class, class...> class _Trait, class... _LArgs, class... _RArgs>
  static auto __do_test(__tuple_types<_LArgs...>, __tuple_types<_RArgs...>)
      -> __all<__enable_if_t<_Trait<_LArgs, _RArgs>::value, bool>{true}...>;
  template <template <class...> class>
  static auto __do_test(...) -> false_type;

  template <class _FromArgs, class _ToArgs>
  using __constructible = decltype(__do_test<is_constructible>(_ToArgs{}, _FromArgs{}));
};



template <class _Tp,
          class _Up,
          bool = __tuple_like_ext<__libcpp_remove_reference_t<_Tp> >::value,
          bool = __tuple_like_ext<_Up>::value>
struct __tuple_constructible : public false_type {};

template <class _Tp, class _Up>
struct __tuple_constructible<_Tp, _Up, true, true>
    : public __tuple_sfinae_base::__constructible< typename __make_tuple_types<_Tp>::type,
                                                   typename __make_tuple_types<_Up>::type > {};

template <size_t _Ip, class... _Tp>
struct tuple_element<_Ip, tuple<_Tp...> > {
  typedef __attribute__((__nodebug__)) typename tuple_element<_Ip, __tuple_types<_Tp...> >::type type;
};

struct __attribute__((__visibility__("default"))) __check_tuple_constructor_fail {
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool __enable_explicit_default() { return false; }
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool __enable_implicit_default() { return false; }
  template <class...>
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool __enable_explicit() {
    return false;
  }
  template <class...>
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool __enable_implicit() {
    return false;
  }
  template <class...>
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool __enable_assign() {
    return false;
  }
};




template <bool _CanCopy, bool _CanMove>
struct __sfinae_ctor_base {};
template <>
struct __sfinae_ctor_base<false, false> {
  __sfinae_ctor_base() = default;
  __sfinae_ctor_base(__sfinae_ctor_base const&) = delete;
  __sfinae_ctor_base(__sfinae_ctor_base&&) = delete;
  __sfinae_ctor_base& operator=(__sfinae_ctor_base const&) = default;
  __sfinae_ctor_base& operator=(__sfinae_ctor_base&&) = default;
};
template <>
struct __sfinae_ctor_base<true, false> {
  __sfinae_ctor_base() = default;
  __sfinae_ctor_base(__sfinae_ctor_base const&) = default;
  __sfinae_ctor_base(__sfinae_ctor_base&&) = delete;
  __sfinae_ctor_base& operator=(__sfinae_ctor_base const&) = default;
  __sfinae_ctor_base& operator=(__sfinae_ctor_base&&) = default;
};
template <>
struct __sfinae_ctor_base<false, true> {
  __sfinae_ctor_base() = default;
  __sfinae_ctor_base(__sfinae_ctor_base const&) = delete;
  __sfinae_ctor_base(__sfinae_ctor_base&&) = default;
  __sfinae_ctor_base& operator=(__sfinae_ctor_base const&) = default;
  __sfinae_ctor_base& operator=(__sfinae_ctor_base&&) = default;
};

template <bool _CanCopy, bool _CanMove>
struct __sfinae_assign_base {};
template <>
struct __sfinae_assign_base<false, false> {
  __sfinae_assign_base() = default;
  __sfinae_assign_base(__sfinae_assign_base const&) = default;
  __sfinae_assign_base(__sfinae_assign_base&&) = default;
  __sfinae_assign_base& operator=(__sfinae_assign_base const&) = delete;
  __sfinae_assign_base& operator=(__sfinae_assign_base&&) = delete;
};
template <>
struct __sfinae_assign_base<true, false> {
  __sfinae_assign_base() = default;
  __sfinae_assign_base(__sfinae_assign_base const&) = default;
  __sfinae_assign_base(__sfinae_assign_base&&) = default;
  __sfinae_assign_base& operator=(__sfinae_assign_base const&) = default;
  __sfinae_assign_base& operator=(__sfinae_assign_base&&) = delete;
};
template <>
struct __sfinae_assign_base<false, true> {
  __sfinae_assign_base() = default;
  __sfinae_assign_base(__sfinae_assign_base const&) = default;
  __sfinae_assign_base(__sfinae_assign_base&&) = default;
  __sfinae_assign_base& operator=(__sfinae_assign_base const&) = delete;
  __sfinae_assign_base& operator=(__sfinae_assign_base&&) = default;
};


}}
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/pair.h" 2 3
# 52 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/pair.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/piecewise_construct.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/piecewise_construct.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

struct piecewise_construct_t {
  explicit piecewise_construct_t() = default;
};


inline constexpr piecewise_construct_t piecewise_construct = piecewise_construct_t();




}}
# 53 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/pair.h" 2 3
# 57 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/pair.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 61 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/pair.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class, class>
struct __non_trivially_copyable_base {
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __non_trivially_copyable_base() noexcept {}
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
  __non_trivially_copyable_base(__non_trivially_copyable_base const&) noexcept {}
};
# 79 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/pair.h" 3
template <class _T1, class _T2>
struct pair



{
  using first_type = _T1;
  using second_type = _T2;

  _T1 first;
  _T2 second;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) pair(pair const&) = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) pair(pair&&) = default;
# 121 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/pair.h" 3
  struct _CheckArgs {
    template <int&...>
    static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool __enable_explicit_default() {
      return is_default_constructible<_T1>::value && is_default_constructible<_T2>::value &&
             !__enable_implicit_default<>();
    }

    template <int&...>
    static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool __enable_implicit_default() {
      return __is_implicitly_default_constructible<_T1>::value && __is_implicitly_default_constructible<_T2>::value;
    }

    template <class _U1, class _U2>
    static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool __is_pair_constructible() {
      return is_constructible<first_type, _U1>::value && is_constructible<second_type, _U2>::value;
    }

    template <class _U1, class _U2>
    static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool __is_implicit() {
      return is_convertible<_U1, first_type>::value && is_convertible<_U2, second_type>::value;
    }

    template <class _U1, class _U2>
    static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool __enable_explicit() {
      return __is_pair_constructible<_U1, _U2>() && !__is_implicit<_U1, _U2>();
    }

    template <class _U1, class _U2>
    static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool __enable_implicit() {
      return __is_pair_constructible<_U1, _U2>() && __is_implicit<_U1, _U2>();
    }
  };

  template <bool _MaybeEnable>
  using _CheckArgsDep __attribute__((__nodebug__)) =
      typename conditional< _MaybeEnable, _CheckArgs, __check_tuple_constructor_fail>::type;

  template <bool _Dummy = true, __enable_if_t<_CheckArgsDep<_Dummy>::__enable_explicit_default(), int> = 0>
  explicit __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pair() noexcept(is_nothrow_default_constructible<first_type>::value&& is_nothrow_default_constructible<second_type>::value)

      : first(), second() {}

  template <bool _Dummy = true, __enable_if_t<_CheckArgsDep<_Dummy>::__enable_implicit_default(), int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pair() noexcept(is_nothrow_default_constructible<first_type>::value&& is_nothrow_default_constructible<second_type>::value)

      : first(), second() {}

  template <bool _Dummy = true,
            __enable_if_t<_CheckArgsDep<_Dummy>::template __enable_explicit<_T1 const&, _T2 const&>(), int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr explicit pair(_T1 const& __t1, _T2 const& __t2)
      noexcept(is_nothrow_copy_constructible<first_type>::value&& is_nothrow_copy_constructible<second_type>::value)
      : first(__t1), second(__t2) {}

  template <bool _Dummy = true,
            __enable_if_t<_CheckArgsDep<_Dummy>::template __enable_implicit<_T1 const&, _T2 const&>(), int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pair(_T1 const& __t1, _T2 const& __t2)
      noexcept(is_nothrow_copy_constructible<first_type>::value&& is_nothrow_copy_constructible<second_type>::value)
      : first(__t1), second(__t2) {}

  template <




      class _U1,
      class _U2,

      __enable_if_t<_CheckArgs::template __enable_explicit<_U1, _U2>(), int> = 0 >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr explicit pair(_U1&& __u1, _U2&& __u2)
      noexcept(is_nothrow_constructible<first_type, _U1>::value&& is_nothrow_constructible<second_type, _U2>::value)
      : first(std::forward<_U1>(__u1)), second(std::forward<_U2>(__u2)) {
  }

  template <




      class _U1,
      class _U2,

      __enable_if_t<_CheckArgs::template __enable_implicit<_U1, _U2>(), int> = 0 >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pair(_U1&& __u1, _U2&& __u2)
      noexcept(is_nothrow_constructible<first_type, _U1>::value&& is_nothrow_constructible<second_type, _U2>::value)
      : first(std::forward<_U1>(__u1)), second(std::forward<_U2>(__u2)) {
  }
# 218 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/pair.h" 3
  template <class _U1,
            class _U2,
            __enable_if_t<_CheckArgs::template __enable_explicit<_U1 const&, _U2 const&>(), int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr explicit pair(pair<_U1, _U2> const& __p)
      noexcept(is_nothrow_constructible<first_type, _U1 const&>::value&& is_nothrow_constructible<second_type, _U2 const&>::value)

      : first(__p.first), second(__p.second) {}

  template <class _U1,
            class _U2,
            __enable_if_t<_CheckArgs::template __enable_implicit<_U1 const&, _U2 const&>(), int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pair(pair<_U1, _U2> const& __p)
      noexcept(is_nothrow_constructible<first_type, _U1 const&>::value&& is_nothrow_constructible<second_type, _U2 const&>::value)

      : first(__p.first), second(__p.second) {}

  template <class _U1, class _U2, __enable_if_t<_CheckArgs::template __enable_explicit<_U1, _U2>(), int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr explicit pair(pair<_U1, _U2>&& __p) noexcept(is_nothrow_constructible<first_type, _U1&&>::value&& is_nothrow_constructible<second_type, _U2&&>::value)

      : first(std::forward<_U1>(__p.first)), second(std::forward<_U2>(__p.second)) {}

  template <class _U1, class _U2, __enable_if_t<_CheckArgs::template __enable_implicit<_U1, _U2>(), int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pair(pair<_U1, _U2>&& __p) noexcept(is_nothrow_constructible<first_type, _U1&&>::value&& is_nothrow_constructible<second_type, _U2&&>::value)

      : first(std::forward<_U1>(__p.first)), second(std::forward<_U2>(__p.second)) {}
# 273 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/pair.h" 3
  template <class... _Args1, class... _Args2>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
  pair(piecewise_construct_t __pc, tuple<_Args1...> __first_args, tuple<_Args2...> __second_args) noexcept(is_nothrow_constructible<first_type, _Args1...>::value&& is_nothrow_constructible<second_type, _Args2...>::value)

      : pair(__pc,
             __first_args,
             __second_args,
             typename __make_tuple_indices<sizeof...(_Args1)>::type(),
             typename __make_tuple_indices<sizeof...(_Args2) >::type()) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) pair&
  operator=(__conditional_t< is_copy_assignable<first_type>::value && is_copy_assignable<second_type>::value,
                             pair,
                             __nat> const& __p)
      noexcept(is_nothrow_copy_assignable<first_type>::value&& is_nothrow_copy_assignable<second_type>::value) {
    first = __p.first;
    second = __p.second;
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) pair& operator=(
      __conditional_t< is_move_assignable<first_type>::value && is_move_assignable<second_type>::value, pair, __nat>&&
          __p)
      noexcept(is_nothrow_move_assignable<first_type>::value&& is_nothrow_move_assignable<second_type>::value) {
    first = std::forward<first_type>(__p.first);
    second = std::forward<second_type>(__p.second);
    return *this;
  }

  template <class _U1,
            class _U2,
            __enable_if_t< is_assignable<first_type&, _U1 const&>::value &&
                           is_assignable<second_type&, _U2 const&>::value >* = nullptr>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) pair& operator=(pair<_U1, _U2> const& __p) {
    first = __p.first;
    second = __p.second;
    return *this;
  }

  template <
      class _U1,
      class _U2,
      __enable_if_t< is_assignable<first_type&, _U1>::value && is_assignable<second_type&, _U2>::value >* = nullptr>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) pair& operator=(pair<_U1, _U2>&& __p) {
    first = std::forward<_U1>(__p.first);
    second = std::forward<_U2>(__p.second);
    return *this;
  }
# 385 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/pair.h" 3
  template <
      class _U1,
      class _U2,
      __enable_if_t< is_convertible<_U1 const&, _T1>::value && is_convertible<_U2 const&, _T2>::value >* = nullptr>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pair(tuple<_U1, _U2> const& __p)
      : first(std::get<0>(__p)), second(std::get<1>(__p)) {}

  template <
      class _U1,
      class _U2,
      __enable_if_t< is_constructible<_T1, _U1 const&>::value && is_constructible<_T2, _U2 const&>::value &&
                     !(is_convertible<_U1 const&, _T1>::value && is_convertible<_U2 const&, _T2>::value) >* = nullptr>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr explicit pair(tuple<_U1, _U2> const& __p)
      : first(std::get<0>(__p)), second(std::get<1>(__p)) {}

  template <class _U1,
            class _U2,
            __enable_if_t< is_convertible<_U1, _T1>::value && is_convertible<_U2, _T2>::value >* = nullptr>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pair(tuple<_U1, _U2>&& __p)
      : first(std::get<0>(std::move(__p))), second(std::get<1>(std::move(__p))) {}

  template <class _U1,
            class _U2,
            __enable_if_t< is_constructible<_T1, _U1>::value && is_constructible<_T2, _U2>::value &&
                           !(is_convertible<_U1, _T1>::value && is_convertible<_U2, _T2>::value) >* = nullptr>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr explicit pair(tuple<_U1, _U2>&& __p)
      : first(std::get<0>(std::move(__p))), second(std::get<1>(std::move(__p))) {}

  template <
      class _U1,
      class _U2,
      __enable_if_t< is_assignable<_T1&, _U1 const&>::value && is_assignable<_T2&, _U2 const&>::value >* = nullptr>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pair& operator=(tuple<_U1, _U2> const& __p) {
    first = std::get<0>(__p);
    second = std::get<1>(__p);
    return *this;
  }

  template <class _U1,
            class _U2,
            __enable_if_t< is_assignable<_T1&, _U1&&>::value && is_assignable<_T2&, _U2&&>::value >* = nullptr>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pair& operator=(tuple<_U1, _U2>&& __p) {
    first = std::get<0>(std::move(__p));
    second = std::get<1>(std::move(__p));
    return *this;
  }


  template <
      class _Up,
      __enable_if_t< is_convertible<_Up const&, _T1>::value && is_convertible<_Up const&, _T2>::value >* = nullptr>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pair(array<_Up, 2> const& __p) : first(__p[0]), second(__p[1]) {}

  template <
      class _Up,
      __enable_if_t< is_constructible<_T1, _Up const&>::value && is_constructible<_T2, _Up const&>::value &&
                     !(is_convertible<_Up const&, _T1>::value && is_convertible<_Up const&, _T2>::value) >* = nullptr>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr explicit pair(array<_Up, 2> const& __p)
      : first(__p[0]), second(__p[1]) {}

  template <class _Up, __enable_if_t< is_convertible<_Up, _T1>::value && is_convertible<_Up, _T2>::value >* = nullptr>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pair(array<_Up, 2>&& __p)
      : first(std::move(__p)[0]), second(std::move(__p)[1]) {}

  template <class _Up,
            __enable_if_t< is_constructible<_T1, _Up>::value && is_constructible<_T2, _Up>::value &&
                           !(is_convertible<_Up, _T1>::value && is_convertible<_Up, _T2>::value) >* = nullptr>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr explicit pair(array<_Up, 2>&& __p)
      : first(std::move(__p)[0]), second(std::move(__p)[1]) {}

  template <
      class _Up,
      __enable_if_t< is_assignable<_T1&, _Up const&>::value && is_assignable<_T2&, _Up const&>::value >* = nullptr>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pair& operator=(array<_Up, 2> const& __p) {
    first = std::get<0>(__p);
    second = std::get<1>(__p);
    return *this;
  }

  template <class _Up, __enable_if_t< is_assignable<_T1&, _Up>::value && is_assignable<_T2&, _Up>::value >* = nullptr>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pair& operator=(array<_Up, 2>&& __p) {
    first = std::get<0>(std::move(__p));
    second = std::get<1>(std::move(__p));
    return *this;
  }



  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void swap(pair& __p)
      noexcept(__is_nothrow_swappable<first_type>::value&& __is_nothrow_swappable<second_type>::value) {
    using std::swap;
    swap(first, __p.first);
    swap(second, __p.second);
  }
# 489 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/pair.h" 3
private:

  template <class... _Args1, class... _Args2, size_t... _I1, size_t... _I2>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
  pair(piecewise_construct_t,
       tuple<_Args1...>& __first_args,
       tuple<_Args2...>& __second_args,
       __tuple_indices<_I1...>,
       __tuple_indices<_I2...>);

};


template <class _T1, class _T2>
pair(_T1, _T2) -> pair<_T1, _T2>;




template <class _T1, class _T2, class _U1, class _U2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool
operator==(const pair<_T1, _T2>& __x, const pair<_U1, _U2>& __y) {
  return __x.first == __y.first && __x.second == __y.second;
}
# 528 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/pair.h" 3
template <class _T1, class _T2, class _U1, class _U2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool
operator!=(const pair<_T1, _T2>& __x, const pair<_U1, _U2>& __y) {
  return !(__x == __y);
}

template <class _T1, class _T2, class _U1, class _U2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool
operator<(const pair<_T1, _T2>& __x, const pair<_U1, _U2>& __y) {
  return __x.first < __y.first || (!(__y.first < __x.first) && __x.second < __y.second);
}

template <class _T1, class _T2, class _U1, class _U2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool
operator>(const pair<_T1, _T2>& __x, const pair<_U1, _U2>& __y) {
  return __y < __x;
}

template <class _T1, class _T2, class _U1, class _U2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool
operator>=(const pair<_T1, _T2>& __x, const pair<_U1, _U2>& __y) {
  return !(__x < __y);
}

template <class _T1, class _T2, class _U1, class _U2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool
operator<=(const pair<_T1, _T2>& __x, const pair<_U1, _U2>& __y) {
  return !(__y < __x);
}
# 576 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/pair.h" 3
template <class _T1, class _T2, __enable_if_t<__is_swappable<_T1>::value && __is_swappable<_T2>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void swap(pair<_T1, _T2>& __x, pair<_T1, _T2>& __y)
    noexcept(__is_nothrow_swappable<_T1>::value&& __is_nothrow_swappable<_T2>::value) {
  __x.swap(__y);
}
# 591 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/pair.h" 3
template <class _T1, class _T2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr
    pair<typename __unwrap_ref_decay<_T1>::type, typename __unwrap_ref_decay<_T2>::type>
    make_pair(_T1&& __t1, _T2&& __t2) {
  return pair<typename __unwrap_ref_decay<_T1>::type, typename __unwrap_ref_decay<_T2>::type>(
      std::forward<_T1>(__t1), std::forward<_T2>(__t2));
}

template <class _T1, class _T2>
struct tuple_size<pair<_T1, _T2> > : public integral_constant<size_t, 2> {};

template <size_t _Ip, class _T1, class _T2>
struct tuple_element<_Ip, pair<_T1, _T2> > {
  static_assert(_Ip < 2, "Index out of bounds in std::tuple_element<std::pair<T1, T2>>");
};

template <class _T1, class _T2>
struct tuple_element<0, pair<_T1, _T2> > {
  using type __attribute__((__nodebug__)) = _T1;
};

template <class _T1, class _T2>
struct tuple_element<1, pair<_T1, _T2> > {
  using type __attribute__((__nodebug__)) = _T2;
};

template <size_t _Ip>
struct __get_pair;

template <>
struct __get_pair<0> {
  template <class _T1, class _T2>
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _T1& get(pair<_T1, _T2>& __p) noexcept {
    return __p.first;
  }

  template <class _T1, class _T2>
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const _T1& get(const pair<_T1, _T2>& __p) noexcept {
    return __p.first;
  }

  template <class _T1, class _T2>
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _T1&& get(pair<_T1, _T2>&& __p) noexcept {
    return std::forward<_T1>(__p.first);
  }

  template <class _T1, class _T2>
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const _T1&& get(const pair<_T1, _T2>&& __p) noexcept {
    return std::forward<const _T1>(__p.first);
  }
};

template <>
struct __get_pair<1> {
  template <class _T1, class _T2>
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _T2& get(pair<_T1, _T2>& __p) noexcept {
    return __p.second;
  }

  template <class _T1, class _T2>
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const _T2& get(const pair<_T1, _T2>& __p) noexcept {
    return __p.second;
  }

  template <class _T1, class _T2>
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _T2&& get(pair<_T1, _T2>&& __p) noexcept {
    return std::forward<_T2>(__p.second);
  }

  template <class _T1, class _T2>
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const _T2&& get(const pair<_T1, _T2>&& __p) noexcept {
    return std::forward<const _T2>(__p.second);
  }
};

template <size_t _Ip, class _T1, class _T2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr typename tuple_element<_Ip, pair<_T1, _T2> >::type&
get(pair<_T1, _T2>& __p) noexcept {
  return __get_pair<_Ip>::get(__p);
}

template <size_t _Ip, class _T1, class _T2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const typename tuple_element<_Ip, pair<_T1, _T2> >::type&
get(const pair<_T1, _T2>& __p) noexcept {
  return __get_pair<_Ip>::get(__p);
}

template <size_t _Ip, class _T1, class _T2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr typename tuple_element<_Ip, pair<_T1, _T2> >::type&&
get(pair<_T1, _T2>&& __p) noexcept {
  return __get_pair<_Ip>::get(std::move(__p));
}

template <size_t _Ip, class _T1, class _T2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const typename tuple_element<_Ip, pair<_T1, _T2> >::type&&
get(const pair<_T1, _T2>&& __p) noexcept {
  return __get_pair<_Ip>::get(std::move(__p));
}


template <class _T1, class _T2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _T1& get(pair<_T1, _T2>& __p) noexcept {
  return __get_pair<0>::get(__p);
}

template <class _T1, class _T2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _T1 const& get(pair<_T1, _T2> const& __p) noexcept {
  return __get_pair<0>::get(__p);
}

template <class _T1, class _T2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _T1&& get(pair<_T1, _T2>&& __p) noexcept {
  return __get_pair<0>::get(std::move(__p));
}

template <class _T1, class _T2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _T1 const&& get(pair<_T1, _T2> const&& __p) noexcept {
  return __get_pair<0>::get(std::move(__p));
}

template <class _T1, class _T2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _T1& get(pair<_T2, _T1>& __p) noexcept {
  return __get_pair<1>::get(__p);
}

template <class _T1, class _T2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _T1 const& get(pair<_T2, _T1> const& __p) noexcept {
  return __get_pair<1>::get(__p);
}

template <class _T1, class _T2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _T1&& get(pair<_T2, _T1>&& __p) noexcept {
  return __get_pair<1>::get(std::move(__p));
}

template <class _T1, class _T2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _T1 const&& get(pair<_T2, _T1> const&& __p) noexcept {
  return __get_pair<1>::get(std::move(__p));
}



}}
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/unwrap_range.h" 2 3
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/unwrap_range.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 27 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/unwrap_range.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 84 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/unwrap_range.h" 3
template <class _Iter, class _Unwrapped = decltype(std::__unwrap_iter(std::declval<_Iter>()))>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pair<_Unwrapped, _Unwrapped> __unwrap_range(_Iter __first, _Iter __last) {
  return std::make_pair(std::__unwrap_iter(std::move(__first)), std::__unwrap_iter(std::move(__last)));
}

template <class _Iter, class _Unwrapped>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Iter __rewrap_range(_Iter __orig_iter, _Unwrapped __iter) {
  return std::__rewrap_iter(std::move(__orig_iter), std::move(__iter));
}


}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/copy_move_common.h" 2 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__string/constexpr_c_functions.h" 1 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__string/constexpr_c_functions.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/construct_at.h" 1 3
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/construct_at.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/access.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/access.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp, size_t _Np>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Tp* begin(_Tp (&__array)[_Np]) noexcept {
  return __array;
}

template <class _Tp, size_t _Np>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Tp* end(_Tp (&__array)[_Np]) noexcept {
  return __array + _Np;
}



template <class _Cp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr auto begin(_Cp& __c) -> decltype(__c.begin()) {
  return __c.begin();
}

template <class _Cp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr auto begin(const _Cp& __c) -> decltype(__c.begin()) {
  return __c.begin();
}

template <class _Cp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr auto end(_Cp& __c) -> decltype(__c.end()) {
  return __c.end();
}

template <class _Cp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr auto end(const _Cp& __c) -> decltype(__c.end()) {
  return __c.end();
}



template <class _Cp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr auto cbegin(const _Cp& __c) noexcept(noexcept(std::begin(__c)))
    -> decltype(std::begin(__c)) {
  return std::begin(__c);
}

template <class _Cp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr auto cend(const _Cp& __c) noexcept(noexcept(std::end(__c))) -> decltype(std::end(__c)) {
  return std::end(__c);
}
# 93 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/access.h" 3
}}
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/construct_at.h" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/voidify.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/voidify.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <typename _Tp>
__attribute__((__always_inline__)) __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void* __voidify(_Tp& __from) {

  return const_cast<void*>(static_cast<const volatile void*>(std::addressof(__from)));
}

}}
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/construct_at.h" 2 3





# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\new" 1 3
# 93 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\new" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__exception/exception.h" 1 3
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__exception/exception.h" 3


namespace std {
# 72 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__exception/exception.h" 3
class __attribute__((__visibility__("default"))) exception {
public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) exception() noexcept {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) exception(const exception&) noexcept = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) exception& operator=(const exception&) noexcept = default;

  virtual ~exception() noexcept;
  virtual const char* what() const noexcept;
};

class __attribute__((__visibility__("default"))) bad_exception : public exception {
public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bad_exception() noexcept {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bad_exception(const bad_exception&) noexcept = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bad_exception& operator=(const bad_exception&) noexcept = default;
  ~bad_exception() noexcept override;
  const char* what() const noexcept override;
};


}
# 94 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\new" 2 3




# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cstdlib" 1 3
# 87 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cstdlib" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\stdlib.h" 1 3
# 92 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\stdlib.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdlib.h" 1 3
# 52 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdlib.h" 3
      namespace std {

          extern "C" {
# 64 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdlib.h" 3
    typedef unsigned int size_t;
# 96 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdlib.h" 3
typedef struct div_t { int quot, rem; } div_t;

typedef struct ldiv_t { long int quot, rem; } ldiv_t;


typedef struct lldiv_t { long long quot, rem; } lldiv_t;
# 139 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdlib.h" 3
extern __attribute__((__nothrow__)) int __aeabi_MB_CUR_MAX(void);
# 158 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdlib.h" 3
extern __attribute__((__nothrow__)) double atof(const char * ) __attribute__((__nonnull__(1)));





extern __attribute__((__nothrow__)) int atoi(const char * ) __attribute__((__nonnull__(1)));





extern __attribute__((__nothrow__)) long int atol(const char * ) __attribute__((__nonnull__(1)));






extern __attribute__((__nothrow__)) long long atoll(const char * ) __attribute__((__nonnull__(1)));







extern __attribute__((__nothrow__)) double strtod(const char * __restrict , char ** __restrict ) __attribute__((__nonnull__(1)));
# 206 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdlib.h" 3
extern __attribute__((__nothrow__)) float strtof(const char * __restrict , char ** __restrict ) __attribute__((__nonnull__(1)));
extern __attribute__((__nothrow__)) long double strtold(const char * __restrict , char ** __restrict ) __attribute__((__nonnull__(1)));




extern __attribute__((__nothrow__)) long int strtol(const char * __restrict ,
                        char ** __restrict , int ) __attribute__((__nonnull__(1)));
# 243 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdlib.h" 3
extern __attribute__((__nothrow__)) unsigned long int strtoul(const char * __restrict ,
                                       char ** __restrict , int ) __attribute__((__nonnull__(1)));
# 275 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdlib.h" 3
extern __attribute__((__nothrow__)) long long strtoll(const char * __restrict ,
                                  char ** __restrict , int )
                          __attribute__((__nonnull__(1)));






extern __attribute__((__nothrow__)) unsigned long long strtoull(const char * __restrict ,
                                            char ** __restrict , int )
                                   __attribute__((__nonnull__(1)));






extern __attribute__((__nothrow__)) int rand(void);
# 303 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdlib.h" 3
extern __attribute__((__nothrow__)) void srand(unsigned int );
# 313 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdlib.h" 3
struct _rand_state { int __x[57]; };
extern __attribute__((__nothrow__)) int _rand_r(struct _rand_state *);
extern __attribute__((__nothrow__)) void _srand_r(struct _rand_state *, unsigned int);
struct _ANSI_rand_state { int __x[1]; };
extern __attribute__((__nothrow__)) int _ANSI_rand_r(struct _ANSI_rand_state *);
extern __attribute__((__nothrow__)) void _ANSI_srand_r(struct _ANSI_rand_state *, unsigned int);





extern __attribute__((__nothrow__)) void *calloc(size_t , size_t );





extern __attribute__((__nothrow__)) void free(void * );







extern __attribute__((__nothrow__)) void *malloc(size_t );





extern __attribute__((__nothrow__)) void *realloc(void * , size_t );
# 374 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdlib.h" 3
typedef int (*__heapprt)(void *, char const *, ...);
extern __attribute__((__nothrow__)) void __heapstats(int (* )(void * ,
                                           char const * , ...),
                        void * ) __attribute__((__nonnull__(1)));
# 390 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdlib.h" 3
extern __attribute__((__nothrow__)) int __heapvalid(int (* )(void * ,
                                           char const * , ...),
                       void * , int ) __attribute__((__nonnull__(1)));
# 411 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdlib.h" 3
extern __attribute__((__nothrow__)) __attribute__((__noreturn__)) void abort(void);
# 422 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdlib.h" 3
extern __attribute__((__nothrow__)) int atexit(void (* )(void)) __attribute__((__nonnull__(1)));
# 444 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdlib.h" 3
extern __attribute__((__nothrow__)) __attribute__((__noreturn__)) void exit(int );
# 460 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdlib.h" 3
extern __attribute__((__nothrow__)) __attribute__((__noreturn__)) void _Exit(int );
# 471 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdlib.h" 3
extern __attribute__((__nothrow__)) char *getenv(const char * ) __attribute__((__nonnull__(1)));
# 484 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdlib.h" 3
extern __attribute__((__nothrow__)) int system(const char * );
# 497 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdlib.h" 3
extern void *bsearch(const void * , const void * ,
              size_t , size_t ,
              int (* )(const void *, const void *)) __attribute__((__nonnull__(1,2,5)));
# 532 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdlib.h" 3
extern void qsort(void * , size_t , size_t ,
           int (* )(const void *, const void *)) __attribute__((__nonnull__(1,4)));
# 560 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdlib.h" 3
extern __attribute__((__nothrow__)) __attribute__((__const__)) int abs(int );






extern __attribute__((__nothrow__)) __attribute__((__const__)) div_t div(int , int );
# 579 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdlib.h" 3
extern __attribute__((__nothrow__)) __attribute__((__const__)) long int labs(long int );






   extern "C++" inline __attribute__((__nothrow__)) __attribute__((__const__)) long abs(long int x) { return labs(x); }


extern __attribute__((__nothrow__)) __attribute__((__const__)) ldiv_t ldiv(long int , long int );
# 604 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdlib.h" 3
   extern "C++" inline __attribute__((__nothrow__)) __attribute__((__const__)) ldiv_t div(long int __numer, long int __denom) {
       return ldiv(__numer, __denom);
   }



extern __attribute__((__nothrow__)) __attribute__((__const__)) long long llabs(long long );






   extern "C++" inline __attribute__((__nothrow__)) __attribute__((__const__)) long long abs(long long x) { return llabs(x); }


extern __attribute__((__nothrow__)) __attribute__((__const__)) lldiv_t lldiv(long long , long long );
# 635 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdlib.h" 3
   extern "C++" inline __attribute__((__nothrow__)) __attribute__((__const__)) lldiv_t div(long long __numer, long long __denom) {
       return lldiv(__numer, __denom);
   }






typedef struct __sdiv32by16 { long quot, rem; } __sdiv32by16;
typedef struct __udiv32by16 { unsigned long quot, rem; } __udiv32by16;

typedef struct __sdiv64by32 { long rem, quot; } __sdiv64by32;

__attribute__((__value_in_regs__)) extern __attribute__((__nothrow__)) __attribute__((__const__)) __sdiv32by16 __rt_sdiv32by16(
     int ,
     short int );



__attribute__((__value_in_regs__)) extern __attribute__((__nothrow__)) __attribute__((__const__)) __udiv32by16 __rt_udiv32by16(
     unsigned int ,
     unsigned short );



__attribute__((__value_in_regs__)) extern __attribute__((__nothrow__)) __attribute__((__const__)) __sdiv64by32 __rt_sdiv64by32(
     int , unsigned int ,
     int );







extern __attribute__((__nothrow__)) unsigned int __fp_status(unsigned int , unsigned int );
# 705 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdlib.h" 3
extern __attribute__((__nothrow__)) int mblen(const char * , size_t );
# 720 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdlib.h" 3
extern __attribute__((__nothrow__)) int mbtowc(wchar_t * __restrict ,
                   const char * __restrict , size_t );
# 739 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdlib.h" 3
extern __attribute__((__nothrow__)) int wctomb(char * , wchar_t );
# 761 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdlib.h" 3
extern __attribute__((__nothrow__)) size_t mbstowcs(wchar_t * __restrict ,
                      const char * __restrict , size_t ) __attribute__((__nonnull__(2)));
# 779 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdlib.h" 3
extern __attribute__((__nothrow__)) size_t wcstombs(char * __restrict ,
                      const wchar_t * __restrict , size_t ) __attribute__((__nonnull__(2)));
# 798 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdlib.h" 3
extern __attribute__((__nothrow__)) void __use_realtime_heap(void);
extern __attribute__((__nothrow__)) void __use_realtime_division(void);
extern __attribute__((__nothrow__)) void __use_two_region_memory(void);
extern __attribute__((__nothrow__)) void __use_no_heap(void);
extern __attribute__((__nothrow__)) void __use_no_heap_region(void);

extern __attribute__((__nothrow__)) char const *__C_library_version_string(void);
extern __attribute__((__nothrow__)) int __C_library_version_number(void);


         }
      }
# 820 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdlib.h" 3
        using ::std::atoll;
        using ::std::lldiv_t;

      using ::std::div_t;
      using ::std::ldiv_t;
      using ::std::atof;
      using ::std::atoi;
      using ::std::atol;
      using ::std::strtod;

      using ::std::strtof;
      using ::std::strtold;

      using ::std::strtol;
      using ::std::strtoul;
      using ::std::strtoll;
      using ::std::strtoull;
      using ::std::rand;
      using ::std::srand;
      using ::std::_rand_state;
      using ::std::_rand_r;
      using ::std::_srand_r;
      using ::std::_ANSI_rand_state;
      using ::std::_ANSI_rand_r;
      using ::std::_ANSI_srand_r;
      using ::std::calloc;
      using ::std::free;
      using ::std::malloc;
      using ::std::realloc;



      using ::std::__heapprt;
      using ::std::__heapstats;
      using ::std::__heapvalid;
      using ::std::abort;
      using ::std::atexit;
      using ::std::exit;
      using ::std::_Exit;
      using ::std::getenv;
      using ::std::system;
      using ::std::bsearch;
      using ::std::qsort;
      using ::std::abs;
      using ::std::div;
      using ::std::labs;
      using ::std::ldiv;

        using ::std::llabs;
        using ::std::lldiv;

      using ::std::__sdiv32by16;
      using ::std::__udiv32by16;
      using ::std::__sdiv64by32;
      using ::std::__rt_sdiv32by16;
      using ::std::__rt_udiv32by16;
      using ::std::__rt_sdiv64by32;
      using ::std::__fp_status;
      using ::std::mblen;
      using ::std::mbtowc;
      using ::std::wctomb;
      using ::std::mbstowcs;
      using ::std::wcstombs;
      using ::std::__use_realtime_heap;
      using ::std::__use_realtime_division;
      using ::std::__use_two_region_memory;
      using ::std::__use_no_heap;
      using ::std::__use_no_heap_region;
      using ::std::__C_library_version_string;
      using ::std::__C_library_version_number;
      using ::std::size_t;
      using ::std::__aeabi_MB_CUR_MAX;
# 96 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\stdlib.h" 2 3



extern "C++" {
# 120 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\stdlib.h" 3
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float abs(float __lcpp_x) noexcept {
  return __builtin_fabsf(__lcpp_x);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double abs(double __lcpp_x) noexcept {
  return __builtin_fabs(__lcpp_x);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double abs(long double __lcpp_x) noexcept {
  return __builtin_fabsl(__lcpp_x);
}
# 151 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\stdlib.h" 3
}
# 88 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cstdlib" 2 3
# 99 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cstdlib" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

using ::size_t __attribute__((__using_if_exists__));
using ::div_t __attribute__((__using_if_exists__));
using ::ldiv_t __attribute__((__using_if_exists__));
using ::lldiv_t __attribute__((__using_if_exists__));
using ::atof __attribute__((__using_if_exists__));
using ::atoi __attribute__((__using_if_exists__));
using ::atol __attribute__((__using_if_exists__));
using ::atoll __attribute__((__using_if_exists__));
using ::strtod __attribute__((__using_if_exists__));
using ::strtof __attribute__((__using_if_exists__));
using ::strtold __attribute__((__using_if_exists__));
using ::strtol __attribute__((__using_if_exists__));
using ::strtoll __attribute__((__using_if_exists__));
using ::strtoul __attribute__((__using_if_exists__));
using ::strtoull __attribute__((__using_if_exists__));
using ::rand __attribute__((__using_if_exists__));
using ::srand __attribute__((__using_if_exists__));
using ::calloc __attribute__((__using_if_exists__));
using ::free __attribute__((__using_if_exists__));
using ::malloc __attribute__((__using_if_exists__));
using ::realloc __attribute__((__using_if_exists__));
using ::abort __attribute__((__using_if_exists__));
using ::atexit __attribute__((__using_if_exists__));
using ::exit __attribute__((__using_if_exists__));
using ::_Exit __attribute__((__using_if_exists__));
using ::getenv __attribute__((__using_if_exists__));
using ::system __attribute__((__using_if_exists__));
using ::bsearch __attribute__((__using_if_exists__));
using ::qsort __attribute__((__using_if_exists__));
using ::abs __attribute__((__using_if_exists__));
using ::labs __attribute__((__using_if_exists__));
using ::llabs __attribute__((__using_if_exists__));
using ::div __attribute__((__using_if_exists__));
using ::ldiv __attribute__((__using_if_exists__));
using ::lldiv __attribute__((__using_if_exists__));
using ::mblen __attribute__((__using_if_exists__));

using ::mbtowc __attribute__((__using_if_exists__));
using ::wctomb __attribute__((__using_if_exists__));
using ::mbstowcs __attribute__((__using_if_exists__));
using ::wcstombs __attribute__((__using_if_exists__));


using ::at_quick_exit __attribute__((__using_if_exists__));
using ::quick_exit __attribute__((__using_if_exists__));


using ::aligned_alloc __attribute__((__using_if_exists__));


}}
# 99 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\new" 2 3
# 107 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\new" 3
# 123 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\new" 3
extern "C" __attribute__((__nothrow__)) int posix_memalign(void**, size_t, size_t);


namespace std
{


struct __attribute__((__visibility__("default"))) nothrow_t {
  explicit nothrow_t() = default;
};
extern __attribute__((__visibility__("default"))) const nothrow_t nothrow;

class __attribute__((__visibility__("default"))) bad_alloc : public exception {
public:
  bad_alloc() noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bad_alloc(const bad_alloc&) noexcept = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bad_alloc& operator=(const bad_alloc&) noexcept = default;
  ~bad_alloc() noexcept override;
  const char* what() const noexcept override;
};

class __attribute__((__visibility__("default"))) bad_array_new_length : public bad_alloc {
public:
  bad_array_new_length() noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bad_array_new_length(const bad_array_new_length&) noexcept = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bad_array_new_length& operator=(const bad_array_new_length&) noexcept = default;
  ~bad_array_new_length() noexcept override;
  const char* what() const noexcept override;
};

typedef void (*new_handler)();
__attribute__((__visibility__("default"))) new_handler set_new_handler(new_handler) noexcept;
__attribute__((__visibility__("default"))) new_handler get_new_handler() noexcept;
# 177 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\new" 3
[[noreturn]] __attribute__((__visibility__("default"))) void __throw_bad_alloc();

[[noreturn]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __throw_bad_array_new_length() {



  ::std::__libcpp_verbose_abort("bad_array_new_length was thrown in -fno-exceptions mode");

}



enum class align_val_t : size_t {};
# 204 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\new" 3
}
# 214 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\new" 3
[[__nodiscard__]] __attribute__((__visibility__("default"))) void* operator new(std::size_t __sz) ;
[[__nodiscard__]] __attribute__((__visibility__("default"))) void*
operator new(std::size_t __sz, const std::nothrow_t&) noexcept __attribute__((__malloc__));
__attribute__((__visibility__("default"))) void operator delete(void* __p) noexcept;
__attribute__((__visibility__("default"))) void operator delete(void* __p, const std::nothrow_t&) noexcept;

__attribute__((__visibility__("default"))) void operator delete(void* __p, std::size_t __sz) noexcept;


[[__nodiscard__]] __attribute__((__visibility__("default"))) void* operator new[](std::size_t __sz) ;
[[__nodiscard__]] __attribute__((__visibility__("default"))) void*
operator new[](std::size_t __sz, const std::nothrow_t&) noexcept __attribute__((__malloc__));
__attribute__((__visibility__("default"))) void operator delete[](void* __p) noexcept;
__attribute__((__visibility__("default"))) void operator delete[](void* __p, const std::nothrow_t&) noexcept;

__attribute__((__visibility__("default"))) void operator delete[](void* __p, std::size_t __sz) noexcept;



[[__nodiscard__]] __attribute__((__visibility__("default"))) void*
operator new(std::size_t __sz, std::align_val_t) ;
[[__nodiscard__]] __attribute__((__visibility__("default"))) void*
operator new(std::size_t __sz, std::align_val_t, const std::nothrow_t&) noexcept __attribute__((__malloc__));
__attribute__((__visibility__("default"))) void operator delete(void* __p, std::align_val_t) noexcept;
__attribute__((__visibility__("default"))) void operator delete(void* __p, std::align_val_t, const std::nothrow_t&) noexcept;

__attribute__((__visibility__("default"))) void operator delete(void* __p, std::size_t __sz, std::align_val_t) noexcept;


[[__nodiscard__]] __attribute__((__visibility__("default"))) void*
operator new[](std::size_t __sz, std::align_val_t) ;
[[__nodiscard__]] __attribute__((__visibility__("default"))) void*
operator new[](std::size_t __sz, std::align_val_t, const std::nothrow_t&) noexcept __attribute__((__malloc__));
__attribute__((__visibility__("default"))) void operator delete[](void* __p, std::align_val_t) noexcept;
__attribute__((__visibility__("default"))) void operator delete[](void* __p, std::align_val_t, const std::nothrow_t&) noexcept;

__attribute__((__visibility__("default"))) void operator delete[](void* __p, std::size_t __sz, std::align_val_t) noexcept;



[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void* operator new(std::size_t, void* __p) noexcept {
  return __p;
}
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void* operator new[](std::size_t, void* __p) noexcept {
  return __p;
}
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void operator delete(void*, void*) noexcept {}
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void operator delete[](void*, void*) noexcept {}



namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

constexpr inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool __is_overaligned_for_new(size_t __align) noexcept {

  return __align > 8U;



}

template <class... _Args>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void* __libcpp_operator_new(_Args... __args) {

  return __builtin_operator_new(__args...);



}

template <class... _Args>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __libcpp_operator_delete(_Args... __args) {

  __builtin_operator_delete(__args...);



}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void* __libcpp_allocate(size_t __size, size_t __align) {

  if (__is_overaligned_for_new(__align)) {
    const align_val_t __align_val = static_cast<align_val_t>(__align);
    return __libcpp_operator_new(__size, __align_val);
  }


  (void)__align;
  return __libcpp_operator_new(__size);
}

template <class... _Args>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __do_deallocate_handle_size(void* __ptr, size_t __size, _Args... __args) {




  return std::__libcpp_operator_delete(__ptr, __size, __args...);

}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __libcpp_deallocate(void* __ptr, size_t __size, size_t __align) {




  if (__is_overaligned_for_new(__align)) {
    const align_val_t __align_val = static_cast<align_val_t>(__align);
    return __do_deallocate_handle_size(__ptr, __size, __align_val);
  } else {
    return __do_deallocate_handle_size(__ptr, __size);
  }

}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __libcpp_deallocate_unsized(void* __ptr, size_t __align) {




  if (__is_overaligned_for_new(__align)) {
    const align_val_t __align_val = static_cast<align_val_t>(__align);
    return __libcpp_operator_delete(__ptr, __align_val);
  } else {
    return __libcpp_operator_delete(__ptr);
  }

}

template <class _Tp>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Tp* __launder(_Tp* __p) noexcept {
  static_assert(!(is_function<_Tp>::value), "can't launder functions");
  static_assert(!(is_same<void, __remove_cv_t<_Tp> >::value), "can't launder cv-void");
  return __builtin_launder(__p);
}


template <class _Tp>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Tp* launder(_Tp* __p) noexcept {
  return std::__launder(__p);
}
# 368 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\new" 3
}}
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/construct_at.h" 2 3
# 27 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/construct_at.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 31 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/construct_at.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 46 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/construct_at.h" 3
template <class _Tp, class... _Args, class = decltype(::new(std::declval<void*>()) _Tp(std::declval<_Args>()...))>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Tp* __construct_at(_Tp* __location, _Args&&... __args) {



  return ((void)0),
         ::new (std::__voidify(*__location)) _Tp(std::forward<_Args>(__args)...);

}






template <class _ForwardIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _ForwardIterator __destroy(_ForwardIterator, _ForwardIterator);

template <class _Tp, __enable_if_t<!is_array<_Tp>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __destroy_at(_Tp* __loc) {
  ((void)0);
  __loc->~_Tp();
}
# 78 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/construct_at.h" 3
template <class _ForwardIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _ForwardIterator
__destroy(_ForwardIterator __first, _ForwardIterator __last) {
  for (; __first != __last; ++__first)
    std::__destroy_at(std::addressof(*__first));
  return __first;
}

template <class _BidirectionalIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _BidirectionalIterator
__reverse_destroy(_BidirectionalIterator __first, _BidirectionalIterator __last) {
  while (__last != __first) {
    --__last;
    std::__destroy_at(std::addressof(*__last));
  }
  return __last;
}



template <class _Tp, enable_if_t<!is_array_v<_Tp>, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void destroy_at(_Tp* __loc) {
  std::__destroy_at(__loc);
}
# 110 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/construct_at.h" 3
template <class _ForwardIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void destroy(_ForwardIterator __first, _ForwardIterator __last) {
  (void)std::__destroy(std::move(__first), std::move(__last));
}

template <class _ForwardIterator, class _Size>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _ForwardIterator destroy_n(_ForwardIterator __first, _Size __n) {
  for (; __n > 0; (void)++__first, --__n)
    std::__destroy_at(std::addressof(*__first));
  return __first;
}



}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__string/constexpr_c_functions.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/datasizeof.h" 1 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/datasizeof.h" 3








namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
struct __libcpp_datasizeof {

  static const size_t value = __datasizeof(_Tp);
# 61 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/datasizeof.h" 3
};

}}
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__string/constexpr_c_functions.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_always_bitcastable.h" 1 3
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_always_bitcastable.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {







template <class _From, class _To>
struct __is_always_bitcastable {
  using _UnqualFrom = __remove_cv_t<_From>;
  using _UnqualTo = __remove_cv_t<_To>;


  static const bool value =

      (is_same<_UnqualFrom, _UnqualTo>::value && is_trivially_copyable<_UnqualFrom>::value) ||
# 74 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_always_bitcastable.h" 3
      (
        sizeof(_From) == sizeof(_To) &&
        is_integral<_From>::value &&
        is_integral<_To>::value &&
        !is_same<_UnqualTo, bool>::value
      );

};

}}
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__string/constexpr_c_functions.h" 2 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_equality_comparable.h" 1 3
# 26 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_equality_comparable.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp, class _Up, class = void>
struct __is_equality_comparable : false_type {};

template <class _Tp, class _Up>
struct __is_equality_comparable<_Tp, _Up, __void_t<decltype(std::declval<_Tp>() == std::declval<_Up>())> > : true_type {
};
# 49 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_equality_comparable.h" 3
template <class _Tp, class _Up, class = void>
struct __libcpp_is_trivially_equality_comparable_impl : false_type {};

template <class _Tp>
struct __libcpp_is_trivially_equality_comparable_impl<_Tp, _Tp>

    : integral_constant<bool, __is_trivially_equality_comparable(_Tp) && __is_equality_comparable<_Tp, _Tp>::value> {
};





template <class _Tp, class _Up>
struct __libcpp_is_trivially_equality_comparable_impl<
    _Tp,
    _Up,
    __enable_if_t<is_integral<_Tp>::value && is_integral<_Up>::value && !is_same<_Tp, _Up>::value &&
                  is_signed<_Tp>::value == is_signed<_Up>::value && sizeof(_Tp) == sizeof(_Up)> > : true_type {};

template <class _Tp>
struct __libcpp_is_trivially_equality_comparable_impl<_Tp*, _Tp*> : true_type {};


template <class _Tp, class _Up>
struct __libcpp_is_trivially_equality_comparable_impl<_Tp*, _Up*>
    : integral_constant<
          bool,
          __is_equality_comparable<_Tp*, _Up*>::value &&
              (is_same<__remove_cv_t<_Tp>, __remove_cv_t<_Up> >::value || is_void<_Tp>::value || is_void<_Up>::value)> {
};

template <class _Tp, class _Up>
using __libcpp_is_trivially_equality_comparable =
    __libcpp_is_trivially_equality_comparable_impl<__remove_cv_t<_Tp>, __remove_cv_t<_Up> >;

}}
# 21 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__string/constexpr_c_functions.h" 2 3


# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_trivially_lexicographically_comparable.h" 1 3
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_trivially_lexicographically_comparable.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 45 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_trivially_lexicographically_comparable.h" 3
template <class _Tp, class _Up>
struct __libcpp_is_trivially_lexicographically_comparable
    : integral_constant<bool,
                        is_same<__remove_cv_t<_Tp>, __remove_cv_t<_Up> >::value && sizeof(_Tp) == 1 &&
                            is_unsigned<_Tp>::value> {};

}}
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__string/constexpr_c_functions.h" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/is_pointer_in_range.h" 1 3
# 12 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/is_pointer_in_range.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/comp.h" 1 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/comp.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/operation_traits.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/operation_traits.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {


struct __equal_tag {};
struct __plus_tag {};
# 35 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/operation_traits.h" 3
template <class _CanonicalTag, class _Operation, class... _Args>
struct __desugars_to : false_type {};

}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/comp.h" 2 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/comp.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

struct __equal_to {
  template <class _T1, class _T2>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool operator()(const _T1& __x, const _T2& __y) const {
    return __x == __y;
  }
};

template <class _Tp, class _Up>
struct __desugars_to<__equal_tag, __equal_to, _Tp, _Up> : true_type {};



template <class _T1 = void, class _T2 = _T1>
struct __less {};

template <>
struct __less<void, void> {
  template <class _Tp, class _Up>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool operator()(const _Tp& __lhs, const _Up& __rhs) const {
    return __lhs < __rhs;
  }
};

}}
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/is_pointer_in_range.h" 2 3
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/is_pointer_in_range.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp, class _Up, class = void>
struct __is_less_than_comparable : false_type {};

template <class _Tp, class _Up>
struct __is_less_than_comparable<_Tp, _Up, __void_t<decltype(std::declval<_Tp>() < std::declval<_Up>())> > : true_type {
};

template <class _Tp, class _Up, __enable_if_t<__is_less_than_comparable<const _Tp*, const _Up*>::value, int> = 0>
constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__no_sanitize__("address"))) bool __is_pointer_in_range(
    const _Tp* __begin, const _Tp* __end, const _Up* __ptr) {
  if (__libcpp_is_constant_evaluated()) {
    ((void)0);



    if (!__builtin_constant_p(__begin <= __ptr && __ptr < __end))
      return false;
  }


  return !__less<>()(__ptr, __begin) && __less<>()(__ptr, __end);
}

template <class _Tp, class _Up, __enable_if_t<!__is_less_than_comparable<const _Tp*, const _Up*>::value, int> = 0>
constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__no_sanitize__("address"))) bool __is_pointer_in_range(
    const _Tp* __begin, const _Tp* __end, const _Up* __ptr) {
  if (__libcpp_is_constant_evaluated())
    return false;

  return reinterpret_cast<const char*>(__begin) <= reinterpret_cast<const char*>(__ptr) &&
         reinterpret_cast<const char*>(__ptr) < reinterpret_cast<const char*>(__end);
}

}}
# 26 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__string/constexpr_c_functions.h" 2 3
# 30 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__string/constexpr_c_functions.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



enum class __element_count : size_t {};

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr size_t __constexpr_strlen(const char* __str) {
# 49 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__string/constexpr_c_functions.h" 3
  return __builtin_strlen(__str);
}




template <class _Tp, class _Up>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr int
__constexpr_memcmp(const _Tp* __lhs, const _Up* __rhs, __element_count __n) {
  static_assert(__libcpp_is_trivially_lexicographically_comparable<_Tp, _Up>::value,
                "_Tp and _Up have to be trivially lexicographically comparable");

  auto __count = static_cast<size_t>(__n);

  if (__libcpp_is_constant_evaluated()) {

    if (sizeof(_Tp) == 1 && !is_same<_Tp, bool>::value)
      return __builtin_memcmp(__lhs, __rhs, __count * sizeof(_Tp));


    while (__count != 0) {
      if (*__lhs < *__rhs)
        return -1;
      if (*__rhs < *__lhs)
        return 1;

      --__count;
      ++__lhs;
      ++__rhs;
    }
    return 0;
  } else {
    return __builtin_memcmp(__lhs, __rhs, __count * sizeof(_Tp));
  }
}




template <class _Tp, class _Up>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool
__constexpr_memcmp_equal(const _Tp* __lhs, const _Up* __rhs, __element_count __n) {
  static_assert(__libcpp_is_trivially_equality_comparable<_Tp, _Up>::value,
                "_Tp and _Up have to be trivially equality comparable");

  auto __count = static_cast<size_t>(__n);

  if (__libcpp_is_constant_evaluated()) {

    if (sizeof(_Tp) == 1 && is_integral<_Tp>::value && !is_same<_Tp, bool>::value)
      return __builtin_memcmp(__lhs, __rhs, __count * sizeof(_Tp)) == 0;

    while (__count != 0) {
      if (*__lhs != *__rhs)
        return false;

      --__count;
      ++__lhs;
      ++__rhs;
    }
    return true;
  } else {
    return __builtin_memcmp(__lhs, __rhs, __count * sizeof(_Tp)) == 0;
  }
}

template <class _Tp, class _Up>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Tp* __constexpr_memchr(_Tp* __str, _Up __value, size_t __count) {
  static_assert(sizeof(_Tp) == 1 && __libcpp_is_trivially_equality_comparable<_Tp, _Up>::value,
                "Calling memchr on non-trivially equality comparable types is unsafe.");

  if (__libcpp_is_constant_evaluated()) {


    if constexpr (is_same_v<remove_cv_t<_Tp>, char> && is_same_v<remove_cv_t<_Up>, char>)
      return __builtin_char_memchr(__str, __value, __count);


    for (; __count; --__count) {
      if (*__str == __value)
        return __str;
      ++__str;
    }
    return nullptr;
  } else {
    char __value_buffer = 0;
    __builtin_memcpy(&__value_buffer, &__value, sizeof(char));
    return static_cast<_Tp*>(__builtin_memchr(__str, __value_buffer, __count));
  }
}
# 150 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__string/constexpr_c_functions.h" 3
template <class _Tp, class _Up, __enable_if_t<is_assignable<_Tp&, _Up const&>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Tp& __assign_trivially_copyable(_Tp& __dest, _Up const& __src) {
  __dest = __src;
  return __dest;
}


template <class _Tp, class _Up, __enable_if_t<!is_assignable<_Tp&, _Up const&>::value &&
                                               is_assignable<_Tp&, _Up&&>::value, int> = 0>

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Tp& __assign_trivially_copyable(_Tp& __dest, _Up& __src) {
  __dest =
      static_cast<_Up&&>(__src);
  return __dest;
}


template <class _Tp, class _Up, __enable_if_t<!is_assignable<_Tp&, _Up const&>::value &&
                                              !is_assignable<_Tp&, _Up&&>::value &&
                                               is_constructible<_Tp, _Up const&>::value, int> = 0>

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp& __assign_trivially_copyable(_Tp& __dest, _Up const& __src) {


  std::__construct_at(std::addressof(__dest), __src);
  return __dest;
}


template <class _Tp, class _Up, __enable_if_t<!is_assignable<_Tp&, _Up const&>::value &&
                                              !is_assignable<_Tp&, _Up&&>::value &&
                                              !is_constructible<_Tp, _Up const&>::value &&
                                               is_constructible<_Tp, _Up&&>::value, int> = 0>

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp& __assign_trivially_copyable(_Tp& __dest, _Up& __src) {


  std::__construct_at(
      std::addressof(__dest),
      static_cast<_Up&&>(__src));
  return __dest;
}

template <class _Tp, class _Up, __enable_if_t<__is_always_bitcastable<_Up, _Tp>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Tp*
__constexpr_memmove(_Tp* __dest, _Up* __src, __element_count __n) {
  size_t __count = static_cast<size_t>(__n);
  if (__libcpp_is_constant_evaluated()) {

    if (is_same<__remove_cv_t<_Tp>, __remove_cv_t<_Up> >::value) {
      ::__builtin_memmove(__dest, __src, __count * sizeof(_Tp));
      return __dest;
    }

    if (std::__is_pointer_in_range(__src, __src + __count, __dest)) {
      for (; __count > 0; --__count)
        std::__assign_trivially_copyable(__dest[__count - 1], __src[__count - 1]);
    } else {
      for (size_t __i = 0; __i != __count; ++__i)
        std::__assign_trivially_copyable(__dest[__i], __src[__i]);
    }
  } else if (__count > 0) {
    ::__builtin_memmove(__dest, __src, (__count - 1) * sizeof(_Tp) + __libcpp_datasizeof<_Tp>::value);
  }
  return __dest;
}

}}
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/copy_move_common.h" 2 3
# 32 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/copy_move_common.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 36 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/copy_move_common.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



template <class _From, class _To>
struct __can_lower_copy_assignment_to_memmove {
  static const bool value =

      __is_always_bitcastable<_From, _To>::value &&

      is_trivially_assignable<_To&, const _From&>::value &&

      !is_volatile<_From>::value && !is_volatile<_To>::value;
};

template <class _From, class _To>
struct __can_lower_move_assignment_to_memmove {
  static const bool value =
      __is_always_bitcastable<_From, _To>::value && is_trivially_assignable<_To&, _From&&>::value &&
      !is_volatile<_From>::value && !is_volatile<_To>::value;
};



template <class _In, class _Out>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pair<_In*, _Out*>
__copy_trivial_impl(_In* __first, _In* __last, _Out* __result) {
  const size_t __n = static_cast<size_t>(__last - __first);

  std::__constexpr_memmove(__result, __first, __element_count(__n));

  return std::make_pair(__last, __result + __n);
}

template <class _In, class _Out>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pair<_In*, _Out*>
__copy_backward_trivial_impl(_In* __first, _In* __last, _Out* __result) {
  const size_t __n = static_cast<size_t>(__last - __first);
  __result -= __n;

  std::__constexpr_memmove(__result, __first, __element_count(__n));

  return std::make_pair(__last, __result);
}



template <class _F1, class _F2>
struct __overload : _F1, _F2 {
  using _F1::operator();
  using _F2::operator();
};

template <class _InIter, class _Sent, class _OutIter, class = void>
struct __can_rewrap : false_type {};

template <class _InIter, class _Sent, class _OutIter>
struct __can_rewrap<_InIter,
                    _Sent,
                    _OutIter,

                    __enable_if_t< is_copy_constructible<_InIter>::value && is_copy_constructible<_OutIter>::value > >
    : true_type {};

template <class _Algorithm,
          class _InIter,
          class _Sent,
          class _OutIter,
          __enable_if_t<__can_rewrap<_InIter, _Sent, _OutIter>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pair<_InIter, _OutIter>
__unwrap_and_dispatch(_InIter __first, _Sent __last, _OutIter __out_first) {
  auto __range = std::__unwrap_range(__first, std::move(__last));
  auto __result = _Algorithm()(std::move(__range.first), std::move(__range.second), std::__unwrap_iter(__out_first));
  return std::make_pair(std::__rewrap_range<_Sent>(std::move(__first), std::move(__result.first)),
                        std::__rewrap_iter(std::move(__out_first), std::move(__result.second)));
}

template <class _Algorithm,
          class _InIter,
          class _Sent,
          class _OutIter,
          __enable_if_t<!__can_rewrap<_InIter, _Sent, _OutIter>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pair<_InIter, _OutIter>
__unwrap_and_dispatch(_InIter __first, _Sent __last, _OutIter __out_first) {
  return _Algorithm()(std::move(__first), std::move(__last), std::move(__out_first));
}

template <class _AlgPolicy,
          class _NaiveAlgorithm,
          class _OptimizedAlgorithm,
          class _InIter,
          class _Sent,
          class _OutIter>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pair<_InIter, _OutIter>
__dispatch_copy_or_move(_InIter __first, _Sent __last, _OutIter __out_first) {
  using _Algorithm = __overload<_NaiveAlgorithm, _OptimizedAlgorithm>;
  return std::__unwrap_and_dispatch<_Algorithm>(std::move(__first), std::move(__last), std::move(__out_first));
}

}}
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/copy.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/for_each_segment.h" 1 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/for_each_segment.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/segmented_iterator.h" 1 3
# 49 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/segmented_iterator.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Iterator>
struct __segmented_iterator_traits;
# 68 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/segmented_iterator.h" 3
template <class _Tp, size_t = 0>
struct __has_specialization : false_type {};

template <class _Tp>
struct __has_specialization<_Tp, sizeof(_Tp) * 0> : true_type {};

template <class _Iterator>
using __is_segmented_iterator = __has_specialization<__segmented_iterator_traits<_Iterator> >;

}}
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/for_each_segment.h" 2 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/for_each_segment.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {





template <class _SegmentedIterator, class _Functor>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr void
__for_each_segment(_SegmentedIterator __first, _SegmentedIterator __last, _Functor __func) {
  using _Traits = __segmented_iterator_traits<_SegmentedIterator>;

  auto __sfirst = _Traits::__segment(__first);
  auto __slast = _Traits::__segment(__last);


  if (__sfirst == __slast) {
    __func(_Traits::__local(__first), _Traits::__local(__last));
    return;
  }


  __func(_Traits::__local(__first), _Traits::__end(__sfirst));
  ++__sfirst;

  while (__sfirst != __slast) {
    __func(_Traits::__begin(__sfirst), _Traits::__end(__sfirst));
    ++__sfirst;
  }

  __func(_Traits::__begin(__sfirst), _Traits::__local(__last));
}

}}
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/copy.h" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/min.h" 1 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/min.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/comp_ref_type.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/comp_ref_type.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Compare>
struct __debug_less {
  _Compare& __comp_;
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __debug_less(_Compare& __c) : __comp_(__c) {}

  template <class _Tp, class _Up>
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator()(const _Tp& __x, const _Up& __y) {
    bool __r = __comp_(__x, __y);
    if (__r)
      __do_compare_assert(0, __y, __x);
    return __r;
  }

  template <class _Tp, class _Up>
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator()(_Tp& __x, _Up& __y) {
    bool __r = __comp_(__x, __y);
    if (__r)
      __do_compare_assert(0, __y, __x);
    return __r;
  }

  template <class _LHS, class _RHS>
  constexpr inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) decltype((void)std::declval<_Compare&>()(
      std::declval<_LHS&>(), std::declval<_RHS&>()))
  __do_compare_assert(int, _LHS& __l, _RHS& __r) {
    ((void)0);
    (void)__l;
    (void)__r;
  }

  template <class _LHS, class _RHS>
  constexpr inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __do_compare_assert(long, _LHS&, _RHS&) {}
};






template <class _Comp>
using __comp_ref_type = _Comp&;


}}
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/min.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/min_element.h" 1 3
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/min_element.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__functional/identity.h" 1 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__functional/identity.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__functional/reference_wrapper.h" 1 3
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__functional/reference_wrapper.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__functional/weak_result_type.h" 1 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__functional/weak_result_type.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__functional/binary_function.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__functional/binary_function.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 32 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__functional/binary_function.h" 3
template <class _Arg1, class _Arg2, class _Result>
struct __binary_function_keep_layout_base {

  using first_argument_type __attribute__((__deprecated__)) = _Arg1;
  using second_argument_type __attribute__((__deprecated__)) = _Arg2;
  using result_type __attribute__((__deprecated__)) = _Result;

};
# 48 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__functional/binary_function.h" 3
template <class _Arg1, class _Arg2, class _Result>
using __binary_function = __binary_function_keep_layout_base<_Arg1, _Arg2, _Result>;


}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__functional/weak_result_type.h" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__functional/unary_function.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__functional/unary_function.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 30 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__functional/unary_function.h" 3
template <class _Arg, class _Result>
struct __unary_function_keep_layout_base {

  using argument_type __attribute__((__deprecated__)) = _Arg;
  using result_type __attribute__((__deprecated__)) = _Result;

};
# 45 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__functional/unary_function.h" 3
template <class _Arg, class _Result>
using __unary_function = __unary_function_keep_layout_base<_Arg, _Result>;


}}
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__functional/weak_result_type.h" 2 3
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__functional/weak_result_type.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
struct __has_result_type {
private:
  template <class _Up>
  static false_type __test(...);
  template <class _Up>
  static true_type __test(typename _Up::result_type* = 0);

public:
  static const bool value = decltype(__test<_Tp>(0))::value;
};



template <class _Tp>
struct __derives_from_unary_function {
private:
  struct __two {
    char __lx;
    char __lxx;
  };
  static __two __test(...);
  template <class _Ap, class _Rp>
  static __unary_function<_Ap, _Rp> __test(const volatile __unary_function<_Ap, _Rp>*);

public:
  static const bool value = !is_same<decltype(__test((_Tp*)0)), __two>::value;
  typedef decltype(__test((_Tp*)0)) type;
};

template <class _Tp>
struct __derives_from_binary_function {
private:
  struct __two {
    char __lx;
    char __lxx;
  };
  static __two __test(...);
  template <class _A1, class _A2, class _Rp>
  static __binary_function<_A1, _A2, _Rp> __test(const volatile __binary_function<_A1, _A2, _Rp>*);

public:
  static const bool value = !is_same<decltype(__test((_Tp*)0)), __two>::value;
  typedef decltype(__test((_Tp*)0)) type;
};

template <class _Tp, bool = __derives_from_unary_function<_Tp>::value>
struct __maybe_derive_from_unary_function
    : public __derives_from_unary_function<_Tp>::type {};

template <class _Tp>
struct __maybe_derive_from_unary_function<_Tp, false> {};

template <class _Tp, bool = __derives_from_binary_function<_Tp>::value>
struct __maybe_derive_from_binary_function
    : public __derives_from_binary_function<_Tp>::type {};

template <class _Tp>
struct __maybe_derive_from_binary_function<_Tp, false> {};

template <class _Tp, bool = __has_result_type<_Tp>::value>
struct __weak_result_type_imp
    : public __maybe_derive_from_unary_function<_Tp>,
      public __maybe_derive_from_binary_function<_Tp> {

  using result_type __attribute__((__nodebug__)) __attribute__((__deprecated__)) = typename _Tp::result_type;

};

template <class _Tp>
struct __weak_result_type_imp<_Tp, false>
    : public __maybe_derive_from_unary_function<_Tp>, public __maybe_derive_from_binary_function<_Tp> {};

template <class _Tp>
struct __weak_result_type : public __weak_result_type_imp<_Tp> {};



template <class _Rp>
struct __weak_result_type<_Rp()> {

  using result_type __attribute__((__nodebug__)) __attribute__((__deprecated__)) = _Rp;

};

template <class _Rp>
struct __weak_result_type<_Rp (&)()> {

  using result_type __attribute__((__nodebug__)) __attribute__((__deprecated__)) = _Rp;

};

template <class _Rp>
struct __weak_result_type<_Rp (*)()> {

  using result_type __attribute__((__nodebug__)) __attribute__((__deprecated__)) = _Rp;

};



template <class _Rp, class _A1>
struct __weak_result_type<_Rp(_A1)> : public __unary_function<_A1, _Rp> {};

template <class _Rp, class _A1>
struct __weak_result_type<_Rp (&)(_A1)> : public __unary_function<_A1, _Rp> {};

template <class _Rp, class _A1>
struct __weak_result_type<_Rp (*)(_A1)> : public __unary_function<_A1, _Rp> {};

template <class _Rp, class _Cp>
struct __weak_result_type<_Rp (_Cp::*)()> : public __unary_function<_Cp*, _Rp> {};

template <class _Rp, class _Cp>
struct __weak_result_type<_Rp (_Cp::*)() const> : public __unary_function<const _Cp*, _Rp> {};

template <class _Rp, class _Cp>
struct __weak_result_type<_Rp (_Cp::*)() volatile> : public __unary_function<volatile _Cp*, _Rp> {};

template <class _Rp, class _Cp>
struct __weak_result_type<_Rp (_Cp::*)() const volatile> : public __unary_function<const volatile _Cp*, _Rp> {};



template <class _Rp, class _A1, class _A2>
struct __weak_result_type<_Rp(_A1, _A2)> : public __binary_function<_A1, _A2, _Rp> {};

template <class _Rp, class _A1, class _A2>
struct __weak_result_type<_Rp (*)(_A1, _A2)> : public __binary_function<_A1, _A2, _Rp> {};

template <class _Rp, class _A1, class _A2>
struct __weak_result_type<_Rp (&)(_A1, _A2)> : public __binary_function<_A1, _A2, _Rp> {};

template <class _Rp, class _Cp, class _A1>
struct __weak_result_type<_Rp (_Cp::*)(_A1)> : public __binary_function<_Cp*, _A1, _Rp> {};

template <class _Rp, class _Cp, class _A1>
struct __weak_result_type<_Rp (_Cp::*)(_A1) const> : public __binary_function<const _Cp*, _A1, _Rp> {};

template <class _Rp, class _Cp, class _A1>
struct __weak_result_type<_Rp (_Cp::*)(_A1) volatile> : public __binary_function<volatile _Cp*, _A1, _Rp> {};

template <class _Rp, class _Cp, class _A1>
struct __weak_result_type<_Rp (_Cp::*)(_A1) const volatile> : public __binary_function<const volatile _Cp*, _A1, _Rp> {
};



template <class _Rp, class _A1, class _A2, class _A3, class... _A4>
struct __weak_result_type<_Rp(_A1, _A2, _A3, _A4...)> {

  using result_type __attribute__((__nodebug__)) __attribute__((__deprecated__)) = _Rp;

};

template <class _Rp, class _A1, class _A2, class _A3, class... _A4>
struct __weak_result_type<_Rp (&)(_A1, _A2, _A3, _A4...)> {

  using result_type __attribute__((__nodebug__)) __attribute__((__deprecated__)) = _Rp;

};

template <class _Rp, class _A1, class _A2, class _A3, class... _A4>
struct __weak_result_type<_Rp (*)(_A1, _A2, _A3, _A4...)> {

  using result_type __attribute__((__nodebug__)) __attribute__((__deprecated__)) = _Rp;

};

template <class _Rp, class _Cp, class _A1, class _A2, class... _A3>
struct __weak_result_type<_Rp (_Cp::*)(_A1, _A2, _A3...)> {

  using result_type __attribute__((__nodebug__)) __attribute__((__deprecated__)) = _Rp;

};

template <class _Rp, class _Cp, class _A1, class _A2, class... _A3>
struct __weak_result_type<_Rp (_Cp::*)(_A1, _A2, _A3...) const> {

  using result_type __attribute__((__nodebug__)) __attribute__((__deprecated__)) = _Rp;

};

template <class _Rp, class _Cp, class _A1, class _A2, class... _A3>
struct __weak_result_type<_Rp (_Cp::*)(_A1, _A2, _A3...) volatile> {

  using result_type __attribute__((__nodebug__)) __attribute__((__deprecated__)) = _Rp;

};

template <class _Rp, class _Cp, class _A1, class _A2, class... _A3>
struct __weak_result_type<_Rp (_Cp::*)(_A1, _A2, _A3...) const volatile> {

  using result_type __attribute__((__nodebug__)) __attribute__((__deprecated__)) = _Rp;

};

template <class _Tp, class... _Args>
struct __invoke_return {
  typedef decltype(std::__invoke(std::declval<_Tp>(), std::declval<_Args>()...)) type;
};

}}
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__functional/reference_wrapper.h" 2 3
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__functional/reference_wrapper.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
class reference_wrapper : public __weak_result_type<_Tp> {
public:

  typedef _Tp type;

private:
  type* __f_;

  static void __fun(_Tp&) noexcept;
  static void __fun(_Tp&&) = delete;

public:
  template <
      class _Up,
      class = __enable_if_t<!__is_same_uncvref<_Up, reference_wrapper>::value, decltype(__fun(std::declval<_Up>())) > >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) reference_wrapper(_Up&& __u)
      noexcept(noexcept(__fun(std::declval<_Up>()))) {
    type& __f = static_cast<_Up&&>(__u);
    __f_ = std::addressof(__f);
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) operator type&() const noexcept { return *__f_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) type& get() const noexcept { return *__f_; }


  template <class... _ArgTypes>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) typename __invoke_of<type&, _ArgTypes...>::type
  operator()(_ArgTypes&&... __args) const



      noexcept(is_nothrow_invocable_v<_Tp&, _ArgTypes...>)

  {
    return std::__invoke(get(), std::forward<_ArgTypes>(__args)...);
  }
};


template <class _Tp>
reference_wrapper(_Tp&) -> reference_wrapper<_Tp>;


template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) reference_wrapper<_Tp> ref(_Tp& __t) noexcept {
  return reference_wrapper<_Tp>(__t);
}

template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) reference_wrapper<_Tp>
ref(reference_wrapper<_Tp> __t) noexcept {
  return __t;
}

template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) reference_wrapper<const _Tp> cref(const _Tp& __t) noexcept {
  return reference_wrapper<const _Tp>(__t);
}

template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) reference_wrapper<const _Tp>
cref(reference_wrapper<_Tp> __t) noexcept {
  return __t;
}

template <class _Tp>
void ref(const _Tp&&) = delete;
template <class _Tp>
void cref(const _Tp&&) = delete;

}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__functional/identity.h" 2 3
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__functional/identity.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
struct __is_identity : false_type {};

struct __identity {
  template <class _Tp>
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Tp&& operator()(_Tp&& __t) const noexcept {
    return std::forward<_Tp>(__t);
  }

  using is_transparent = void;
};

template <>
struct __is_identity<__identity> : true_type {};
template <>
struct __is_identity<reference_wrapper<__identity> > : true_type {};
template <>
struct __is_identity<reference_wrapper<const __identity> > : true_type {};
# 63 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__functional/identity.h" 3
}}
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/min_element.h" 2 3
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/min_element.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 27 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/min_element.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Comp, class _Iter, class _Sent, class _Proj>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Iter
__min_element(_Iter __first, _Sent __last, _Comp __comp, _Proj& __proj) {
  if (__first == __last)
    return __first;

  _Iter __i = __first;
  while (++__i != __last)
    if (std::__invoke(__comp, std::__invoke(__proj, *__i), std::__invoke(__proj, *__first)))
      __first = __i;

  return __first;
}

template <class _Comp, class _Iter, class _Sent>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Iter __min_element(_Iter __first, _Sent __last, _Comp __comp) {
  auto __proj = __identity();
  return std::__min_element<_Comp>(std::move(__first), std::move(__last), __comp, __proj);
}

template <class _ForwardIterator, class _Compare>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _ForwardIterator
min_element(_ForwardIterator __first, _ForwardIterator __last, _Compare __comp) {
  static_assert(
      __has_forward_iterator_category<_ForwardIterator>::value, "std::min_element requires a ForwardIterator");
  static_assert(
      __is_callable<_Compare, decltype(*__first), decltype(*__first)>::value, "The comparator has to be callable");

  return std::__min_element<__comp_ref_type<_Compare> >(std::move(__first), std::move(__last), __comp);
}

template <class _ForwardIterator>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _ForwardIterator
min_element(_ForwardIterator __first, _ForwardIterator __last) {
  return std::min_element(__first, __last, __less<>());
}

}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/min.h" 2 3
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/min.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/min.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp, class _Compare>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const _Tp&
min([[_Clang::__lifetimebound__]] const _Tp& __a, [[_Clang::__lifetimebound__]] const _Tp& __b, _Compare __comp) {
  return __comp(__b, __a) ? __b : __a;
}

template <class _Tp>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const _Tp&
min([[_Clang::__lifetimebound__]] const _Tp& __a, [[_Clang::__lifetimebound__]] const _Tp& __b) {
  return std::min(__a, __b, __less<>());
}



template <class _Tp, class _Compare>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Tp
min(initializer_list<_Tp> __t, _Compare __comp) {
  return *std::__min_element<__comp_ref_type<_Compare> >(__t.begin(), __t.end(), __comp);
}

template <class _Tp>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Tp min(initializer_list<_Tp> __t) {
  return *std::min_element(__t.begin(), __t.end(), __less<>());
}



}}
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/copy.h" 2 3
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/copy.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 28 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/copy.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class, class _InIter, class _Sent, class _OutIter>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pair<_InIter, _OutIter> __copy(_InIter, _Sent, _OutIter);

template <class _AlgPolicy>
struct __copy_loop {
  template <class _InIter, class _Sent, class _OutIter>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pair<_InIter, _OutIter>
  operator()(_InIter __first, _Sent __last, _OutIter __result) const {
    while (__first != __last) {
      *__result = *__first;
      ++__first;
      ++__result;
    }

    return std::make_pair(std::move(__first), std::move(__result));
  }

  template <class _InIter, class _OutIter>
  struct _CopySegment {
    using _Traits = __segmented_iterator_traits<_InIter>;

    _OutIter& __result_;

    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr explicit _CopySegment(_OutIter& __result)
        : __result_(__result) {}

    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr void
    operator()(typename _Traits::__local_iterator __lfirst, typename _Traits::__local_iterator __llast) {
      __result_ = std::__copy<_AlgPolicy>(__lfirst, __llast, std::move(__result_)).second;
    }
  };

  template <class _InIter, class _OutIter, __enable_if_t<__is_segmented_iterator<_InIter>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pair<_InIter, _OutIter>
  operator()(_InIter __first, _InIter __last, _OutIter __result) const {
    std::__for_each_segment(__first, __last, _CopySegment<_InIter, _OutIter>(__result));
    return std::make_pair(__last, std::move(__result));
  }

  template <class _InIter,
            class _OutIter,
            __enable_if_t<__has_random_access_iterator_category<_InIter>::value &&
                              !__is_segmented_iterator<_InIter>::value && __is_segmented_iterator<_OutIter>::value,
                          int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pair<_InIter, _OutIter>
  operator()(_InIter __first, _InIter __last, _OutIter __result) const {
    using _Traits = __segmented_iterator_traits<_OutIter>;
    using _DiffT = typename common_type<__iter_diff_t<_InIter>, __iter_diff_t<_OutIter> >::type;

    if (__first == __last)
      return std::make_pair(std::move(__first), std::move(__result));

    auto __local_first = _Traits::__local(__result);
    auto __segment_iterator = _Traits::__segment(__result);
    while (true) {
      auto __local_last = _Traits::__end(__segment_iterator);
      auto __size = std::min<_DiffT>(__local_last - __local_first, __last - __first);
      auto __iters = std::__copy<_AlgPolicy>(__first, __first + __size, __local_first);
      __first = std::move(__iters.first);

      if (__first == __last)
        return std::make_pair(std::move(__first), _Traits::__compose(__segment_iterator, std::move(__iters.second)));

      __local_first = _Traits::__begin(++__segment_iterator);
    }
  }
};

struct __copy_trivial {

  template <class _In, class _Out, __enable_if_t<__can_lower_copy_assignment_to_memmove<_In, _Out>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pair<_In*, _Out*>
  operator()(_In* __first, _In* __last, _Out* __result) const {
    return std::__copy_trivial_impl(__first, __last, __result);
  }
};

template <class _AlgPolicy, class _InIter, class _Sent, class _OutIter>
pair<_InIter, _OutIter> inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr
__copy(_InIter __first, _Sent __last, _OutIter __result) {
  return std::__dispatch_copy_or_move<_AlgPolicy, __copy_loop<_AlgPolicy>, __copy_trivial>(
      std::move(__first), std::move(__last), std::move(__result));
}

template <class _InputIterator, class _OutputIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _OutputIterator
copy(_InputIterator __first, _InputIterator __last, _OutputIterator __result) {
  return std::__copy<_ClassicAlgPolicy>(__first, __last, __result).second;
}

}}
# 309 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\vector" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/equal.h" 1 3
# 31 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/equal.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 35 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/equal.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _InputIterator1, class _InputIterator2, class _BinaryPredicate>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool __equal_iter_impl(
    _InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _BinaryPredicate& __pred) {
  for (; __first1 != __last1; ++__first1, (void)++__first2)
    if (!__pred(*__first1, *__first2))
      return false;
  return true;
}

template <class _Tp,
          class _Up,
          class _BinaryPredicate,
          __enable_if_t<__desugars_to<__equal_tag, _BinaryPredicate, _Tp, _Up>::value && !is_volatile<_Tp>::value &&
                            !is_volatile<_Up>::value && __libcpp_is_trivially_equality_comparable<_Tp, _Up>::value,
                        int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
__equal_iter_impl(_Tp* __first1, _Tp* __last1, _Up* __first2, _BinaryPredicate&) {
  return std::__constexpr_memcmp_equal(__first1, __first2, __element_count(__last1 - __first1));
}

template <class _InputIterator1, class _InputIterator2, class _BinaryPredicate>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
equal(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _BinaryPredicate __pred) {
  return std::__equal_iter_impl(
      std::__unwrap_iter(__first1), std::__unwrap_iter(__last1), std::__unwrap_iter(__first2), __pred);
}

template <class _InputIterator1, class _InputIterator2>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
equal(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2) {
  return std::equal(__first1, __last1, __first2, __equal_to());
}


template <class _BinaryPredicate, class _InputIterator1, class _InputIterator2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
__equal(_InputIterator1 __first1,
        _InputIterator1 __last1,
        _InputIterator2 __first2,
        _InputIterator2 __last2,
        _BinaryPredicate __pred,
        input_iterator_tag,
        input_iterator_tag) {
  for (; __first1 != __last1 && __first2 != __last2; ++__first1, (void)++__first2)
    if (!__pred(*__first1, *__first2))
      return false;
  return __first1 == __last1 && __first2 == __last2;
}

template <class _Iter1, class _Sent1, class _Iter2, class _Sent2, class _Pred, class _Proj1, class _Proj2>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool __equal_impl(
    _Iter1 __first1, _Sent1 __last1, _Iter2 __first2, _Sent2 __last2, _Pred& __comp, _Proj1& __proj1, _Proj2& __proj2) {
  while (__first1 != __last1 && __first2 != __last2) {
    if (!std::__invoke(__comp, std::__invoke(__proj1, *__first1), std::__invoke(__proj2, *__first2)))
      return false;
    ++__first1;
    ++__first2;
  }
  return __first1 == __last1 && __first2 == __last2;
}

template <class _Tp,
          class _Up,
          class _Pred,
          class _Proj1,
          class _Proj2,
          __enable_if_t<__desugars_to<__equal_tag, _Pred, _Tp, _Up>::value && __is_identity<_Proj1>::value &&
                            __is_identity<_Proj2>::value && !is_volatile<_Tp>::value && !is_volatile<_Up>::value &&
                            __libcpp_is_trivially_equality_comparable<_Tp, _Up>::value,
                        int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
__equal_impl(_Tp* __first1, _Tp* __last1, _Up* __first2, _Up*, _Pred&, _Proj1&, _Proj2&) {
  return std::__constexpr_memcmp_equal(__first1, __first2, __element_count(__last1 - __first1));
}

template <class _BinaryPredicate, class _RandomAccessIterator1, class _RandomAccessIterator2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
__equal(_RandomAccessIterator1 __first1,
        _RandomAccessIterator1 __last1,
        _RandomAccessIterator2 __first2,
        _RandomAccessIterator2 __last2,
        _BinaryPredicate __pred,
        random_access_iterator_tag,
        random_access_iterator_tag) {
  if (std::distance(__first1, __last1) != std::distance(__first2, __last2))
    return false;
  __identity __proj;
  return std::__equal_impl(
      std::__unwrap_iter(__first1),
      std::__unwrap_iter(__last1),
      std::__unwrap_iter(__first2),
      std::__unwrap_iter(__last2),
      __pred,
      __proj,
      __proj);
}

template <class _InputIterator1, class _InputIterator2, class _BinaryPredicate>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
equal(_InputIterator1 __first1,
      _InputIterator1 __last1,
      _InputIterator2 __first2,
      _InputIterator2 __last2,
      _BinaryPredicate __pred) {
  return std::__equal<_BinaryPredicate&>(
      __first1,
      __last1,
      __first2,
      __last2,
      __pred,
      typename iterator_traits<_InputIterator1>::iterator_category(),
      typename iterator_traits<_InputIterator2>::iterator_category());
}

template <class _InputIterator1, class _InputIterator2>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
equal(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2) {
  return std::__equal(
      __first1,
      __last1,
      __first2,
      __last2,
      __equal_to(),
      typename iterator_traits<_InputIterator1>::iterator_category(),
      typename iterator_traits<_InputIterator2>::iterator_category());
}


}}
# 310 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\vector" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/fill_n.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/fill_n.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



template <class _OutputIterator, class _Size, class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _OutputIterator
__fill_n(_OutputIterator __first, _Size __n, const _Tp& __value) {
  for (; __n > 0; ++__first, (void)--__n)
    *__first = __value;
  return __first;
}

template <class _OutputIterator, class _Size, class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _OutputIterator
fill_n(_OutputIterator __first, _Size __n, const _Tp& __value) {
  return std::__fill_n(__first, std::__convert_to_integral(__n), __value);
}

}}
# 311 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\vector" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/lexicographical_compare.h" 1 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/lexicographical_compare.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Compare, class _InputIterator1, class _InputIterator2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool __lexicographical_compare(
    _InputIterator1 __first1,
    _InputIterator1 __last1,
    _InputIterator2 __first2,
    _InputIterator2 __last2,
    _Compare __comp) {
  for (; __first2 != __last2; ++__first1, (void)++__first2) {
    if (__first1 == __last1 || __comp(*__first1, *__first2))
      return true;
    if (__comp(*__first2, *__first1))
      return false;
  }
  return false;
}

template <class _InputIterator1, class _InputIterator2, class _Compare>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool lexicographical_compare(
    _InputIterator1 __first1,
    _InputIterator1 __last1,
    _InputIterator2 __first2,
    _InputIterator2 __last2,
    _Compare __comp) {
  return std::__lexicographical_compare<__comp_ref_type<_Compare> >(__first1, __last1, __first2, __last2, __comp);
}

template <class _InputIterator1, class _InputIterator2>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool lexicographical_compare(
    _InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2) {
  return std::lexicographical_compare(__first1, __last1, __first2, __last2, __less<>());
}

}}
# 313 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\vector" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/lexicographical_compare_three_way.h" 1 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/lexicographical_compare_three_way.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/three_way_comp_ref_type.h" 1 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/three_way_comp_ref_type.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 71 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/three_way_comp_ref_type.h" 3
}}
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/lexicographical_compare_three_way.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__compare/compare_three_way.h" 1 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__compare/compare_three_way.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 38 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__compare/compare_three_way.h" 3
}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/lexicographical_compare_three_way.h" 2 3
# 25 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/lexicographical_compare_three_way.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 29 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/lexicographical_compare_three_way.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 121 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/lexicographical_compare_three_way.h" 3
}}
# 314 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\vector" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/remove.h" 1 3
# 12 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/remove.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/find.h" 1 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/find.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/find_segment_if.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/find_segment_if.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {







template <class _SegmentedIterator, class _Pred, class _Proj>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _SegmentedIterator
__find_segment_if(_SegmentedIterator __first, _SegmentedIterator __last, _Pred __pred, _Proj& __proj) {
  using _Traits = __segmented_iterator_traits<_SegmentedIterator>;

  auto __sfirst = _Traits::__segment(__first);
  auto __slast = _Traits::__segment(__last);


  if (__sfirst == __slast)
    return _Traits::__compose(__sfirst, __pred(_Traits::__local(__first), _Traits::__local(__last), __proj));

  {
    auto __llast = _Traits::__end(__sfirst);
    auto __liter = __pred(_Traits::__local(__first), __llast, __proj);
    if (__liter != __llast)
      return _Traits::__compose(__sfirst, __liter);
  }
  ++__sfirst;


  while (__sfirst != __slast) {
    auto __llast = _Traits::__end(__sfirst);
    auto __liter = __pred(_Traits::__begin(__sfirst), _Traits::__end(__sfirst), __proj);
    if (__liter != __llast)
      return _Traits::__compose(__sfirst, __liter);
    ++__sfirst;
  }


  return _Traits::__compose(__sfirst, __pred(_Traits::__begin(__sfirst), _Traits::__local(__last), __proj));
}

}}
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/find.h" 2 3


# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__bit/countr.h" 1 3
# 12 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__bit/countr.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__bit/rotate.h" 1 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__bit/rotate.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Tp __rotr(_Tp __t, int __cnt) noexcept {
  static_assert(__libcpp_is_unsigned_integer<_Tp>::value, "__rotr requires an unsigned integer type");
  const unsigned int __dig = numeric_limits<_Tp>::digits;
  if ((__cnt % __dig) == 0)
    return __t;

  if (__cnt < 0) {
    __cnt *= -1;
    return (__t << (__cnt % __dig)) | (__t >> (__dig - (__cnt % __dig)));
  }

  return (__t >> (__cnt % __dig)) | (__t << (__dig - (__cnt % __dig)));
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Tp __rotl(_Tp __t, int __cnt) noexcept {
  return std::__rotr(__t, -__cnt);
}
# 57 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__bit/rotate.h" 3
}}
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__bit/countr.h" 2 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__bit/countr.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__bit/countr.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr int __libcpp_ctz(unsigned __x) noexcept {
  return __builtin_ctz(__x);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr int __libcpp_ctz(unsigned long __x) noexcept {
  return __builtin_ctzl(__x);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr int __libcpp_ctz(unsigned long long __x) noexcept {
  return __builtin_ctzll(__x);
}
# 69 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__bit/countr.h" 3
}}
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/find.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__bit/invert_if.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__bit/invert_if.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <bool _Invert, class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Tp __invert_if(_Tp __v) {
  if (_Invert)
    return ~__v;
  return __v;
}

}}
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/find.h" 2 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__fwd/bit_reference.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__fwd/bit_reference.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Cp, bool _IsConst, typename _Cp::__storage_type = 0>
class __bit_iterator;

}}
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/find.h" 2 3
# 31 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/find.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cwchar" 1 3
# 113 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cwchar" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cwctype" 1 3
# 54 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cwctype" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cctype" 1 3
# 40 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cctype" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\ctype.h" 1 3
# 36 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\ctype.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\ctype.h" 1 3
# 43 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\ctype.h" 3
        namespace std {

        extern "C" {
# 134 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\ctype.h" 3
extern __attribute__((__nothrow__)) __attribute__((__const__)) unsigned char **__rt_ctype_table(void);




    inline int isalnum(int __c) { return ((*std:: __rt_ctype_table())[__c] & (16 +8 +32)); }







    inline int isalpha(int __c) { return ((*std:: __rt_ctype_table())[__c] & (16 +8 +128)); }







    inline int iscntrl(int __c) { return ((*std:: __rt_ctype_table())[__c] & 64); }
# 165 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\ctype.h" 3
    inline int isdigit(int __c) { return ((*std:: __rt_ctype_table())[__c] == 32); }






    extern int (isblank)(int );





    inline int isgraph(int __c) {return((*std:: __rt_ctype_table())[__c] & (8 +16 +32 +128 +2));}







    inline int islower(int __c) { return ((*std:: __rt_ctype_table())[__c] & 8); }







    inline int isprint(int __c) { return ((*std:: __rt_ctype_table())[__c] & (8 +16 +32 +2 +4)); }
# 203 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\ctype.h" 3
    inline int ispunct(int __c) { return ((*std:: __rt_ctype_table())[__c] & 2); }







    inline int isspace(int __c) { return ((*std:: __rt_ctype_table())[__c] & 1); }







    inline int isupper(int __c) { return ((*std:: __rt_ctype_table())[__c] & 16); }
# 229 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\ctype.h" 3
inline int __isxdigit_helper(int __t) { return (__t ^ (__t << 2)); }

    inline int isxdigit(int __c){return __isxdigit_helper((*std:: __rt_ctype_table())[__c]) & 128;}
# 240 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\ctype.h" 3
extern int tolower(int );



extern int toupper(int );




         }
      }





      using ::std::isalnum;
      using ::std::isalpha;
      using ::std::iscntrl;
      using ::std::isdigit;
      using ::std::isblank;
      using ::std::isgraph;
      using ::std::islower;
      using ::std::isprint;
      using ::std::ispunct;
      using ::std::isspace;
      using ::std::isupper;
      using ::std::isxdigit;
      using ::std::tolower;
      using ::std::toupper;
# 40 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\ctype.h" 2 3
# 41 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cctype" 2 3
# 51 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cctype" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 111 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cctype" 3
using ::isalnum __attribute__((__using_if_exists__));
using ::isalpha __attribute__((__using_if_exists__));
using ::isblank __attribute__((__using_if_exists__));
using ::iscntrl __attribute__((__using_if_exists__));
using ::isdigit __attribute__((__using_if_exists__));
using ::isgraph __attribute__((__using_if_exists__));
using ::islower __attribute__((__using_if_exists__));
using ::isprint __attribute__((__using_if_exists__));
using ::ispunct __attribute__((__using_if_exists__));
using ::isspace __attribute__((__using_if_exists__));
using ::isupper __attribute__((__using_if_exists__));
using ::isxdigit __attribute__((__using_if_exists__));
using ::tolower __attribute__((__using_if_exists__));
using ::toupper __attribute__((__using_if_exists__));

}}
# 55 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cwctype" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\wctype.h" 1 3
# 56 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\wctype.h" 3
# 68 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\wctype.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\wctype.h" 1 3
# 21 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\wctype.h" 3
        namespace std {
      extern "C" {






      typedef int wint_t;





    typedef void *wctype_t;
    typedef void *wctrans_t;




    __attribute__((__nothrow__)) int iswalnum(wint_t );
    __attribute__((__nothrow__)) int iswalpha(wint_t );
    __attribute__((__nothrow__)) int iswblank(wint_t );
    __attribute__((__nothrow__)) int iswcntrl(wint_t );
    __attribute__((__nothrow__)) int iswgraph(wint_t );
    __attribute__((__nothrow__)) int iswprint(wint_t );
    __attribute__((__nothrow__)) int iswpunct(wint_t );
    __attribute__((__nothrow__)) int iswspace(wint_t );
    __attribute__((__nothrow__)) int iswlower(wint_t );
    __attribute__((__nothrow__)) int iswupper(wint_t );
    __attribute__((__nothrow__)) int iswdigit(wint_t );
    __attribute__((__nothrow__)) int iswxdigit(wint_t );
    __attribute__((__nothrow__)) wint_t towlower(wint_t );
    __attribute__((__nothrow__)) wint_t towupper(wint_t );

    __attribute__((__nothrow__)) wctype_t wctype(const char * ) __attribute__((__nonnull__(1)));
    __attribute__((__nothrow__)) int iswctype(wint_t , wctype_t );

    __attribute__((__nothrow__)) wctrans_t wctrans(const char * ) __attribute__((__nonnull__(1)));
    __attribute__((__nothrow__)) wint_t towctrans(wint_t , wctrans_t );


         }
      }
# 74 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\wctype.h" 3
      using ::std::wint_t;
      using ::std::wctype_t;
      using ::std::wctrans_t;
      using ::std::iswalnum;
      using ::std::iswalpha;
      using ::std::iswblank;
      using ::std::iswcntrl;
      using ::std::iswgraph;
      using ::std::iswprint;
      using ::std::iswpunct;
      using ::std::iswspace;
      using ::std::iswlower;
      using ::std::iswupper;
      using ::std::iswdigit;
      using ::std::iswxdigit;
      using ::std::towlower;
      using ::std::towupper;
      using ::std::wctype;
      using ::std::iswctype;
      using ::std::wctrans;
      using ::std::towctrans;
# 69 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\wctype.h" 2 3
# 57 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cwctype" 2 3
# 68 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cwctype" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {


using ::wint_t __attribute__((__using_if_exists__));
using ::wctrans_t __attribute__((__using_if_exists__));
using ::wctype_t __attribute__((__using_if_exists__));
using ::iswalnum __attribute__((__using_if_exists__));
using ::iswalpha __attribute__((__using_if_exists__));
using ::iswblank __attribute__((__using_if_exists__));
using ::iswcntrl __attribute__((__using_if_exists__));
using ::iswdigit __attribute__((__using_if_exists__));
using ::iswgraph __attribute__((__using_if_exists__));
using ::iswlower __attribute__((__using_if_exists__));
using ::iswprint __attribute__((__using_if_exists__));
using ::iswpunct __attribute__((__using_if_exists__));
using ::iswspace __attribute__((__using_if_exists__));
using ::iswupper __attribute__((__using_if_exists__));
using ::iswxdigit __attribute__((__using_if_exists__));
using ::iswctype __attribute__((__using_if_exists__));
using ::wctype __attribute__((__using_if_exists__));
using ::towlower __attribute__((__using_if_exists__));
using ::towupper __attribute__((__using_if_exists__));
using ::towctrans __attribute__((__using_if_exists__));
using ::wctrans __attribute__((__using_if_exists__));


}}
# 114 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cwchar" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\wchar.h" 1 3
# 109 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\wchar.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\stddef.h" 1 3
# 110 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\wchar.h" 2 3
# 118 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\wchar.h" 3
# 127 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\wchar.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\wchar.h" 1 3
# 25 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\wchar.h" 3
        namespace std {
        extern "C" {
# 36 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\wchar.h" 3
        typedef unsigned int size_t;
# 59 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\wchar.h" 3
      typedef int wint_t;
# 87 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\wchar.h" 3
        typedef __builtin_va_list __va_list;
# 105 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\wchar.h" 3
      struct __FILE;
# 134 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\wchar.h" 3
      typedef struct __mbstate_t {
          unsigned int __state, __state2;
      } mbstate_t;







    struct tm;

    extern __attribute__((__nothrow__)) size_t wcsftime(wchar_t * __restrict , size_t ,
                       const wchar_t * __restrict , const struct tm * __restrict ) __attribute__((__nonnull__(1,3,4)));





#pragma __printf_args
    int swprintf(wchar_t * __restrict , size_t ,
                 const wchar_t * __restrict , ...) __attribute__((__nonnull__(3)));
#pragma __printf_args
    int vswprintf(wchar_t * __restrict , size_t ,
                  const wchar_t * __restrict , __va_list ) __attribute__((__nonnull__(3)));
#pragma __scanf_args
    int swscanf(const wchar_t * __restrict ,
                const wchar_t * __restrict , ...) __attribute__((__nonnull__(1,2)));
#pragma __scanf_args
    int vswscanf(const wchar_t * __restrict ,
                 const wchar_t * __restrict , __va_list ) __attribute__((__nonnull__(1,2)));


#pragma __printf_args
    int fwprintf(struct __FILE * __restrict ,
                 const wchar_t * __restrict , ...) __attribute__((__nonnull__(1,2)));
#pragma __printf_args
    int vfwprintf(struct __FILE * __restrict ,
                  const wchar_t * __restrict , __va_list ) __attribute__((__nonnull__(1,2)));
#pragma __scanf_args
    int fwscanf(struct __FILE * __restrict ,
                const wchar_t * __restrict , ...) __attribute__((__nonnull__(1,2)));
#pragma __scanf_args
    int vfwscanf(struct __FILE * __restrict ,
                 const wchar_t * __restrict , __va_list ) __attribute__((__nonnull__(1,2)));


#pragma __printf_args
    int wprintf(const wchar_t * __restrict , ...) __attribute__((__nonnull__(1)));
#pragma __printf_args
    int vwprintf(const wchar_t * __restrict , __va_list ) __attribute__((__nonnull__(1)));
#pragma __scanf_args
    int wscanf(const wchar_t * __restrict , ...) __attribute__((__nonnull__(1)));
#pragma __scanf_args
    int vwscanf(const wchar_t * __restrict , __va_list ) __attribute__((__nonnull__(1)));




    wint_t fgetwc(struct __FILE * ) __attribute__((__nonnull__(1)));
    wchar_t *fgetws(wchar_t * __restrict , int , struct __FILE * __restrict ) __attribute__((__nonnull__(1,3)));
    wint_t fputwc(wchar_t , struct __FILE * ) __attribute__((__nonnull__(2)));
    int fputws(const wchar_t * __restrict , struct __FILE * __restrict ) __attribute__((__nonnull__(1,2)));
    int fwide(struct __FILE * , int ) __attribute__((__nonnull__(1)));
    wint_t getwc(struct __FILE * ) __attribute__((__nonnull__(1)));
    wint_t getwchar(void);
    wint_t putwc(wchar_t , struct __FILE * ) __attribute__((__nonnull__(2)));
    wint_t putwchar(wchar_t );
    wint_t ungetwc(wint_t , struct __FILE * ) __attribute__((__nonnull__(2)));


    wint_t btowc(int );
    wint_t wctob(int );
    int mbsinit(const mbstate_t * );
    size_t mbrlen(const char * __restrict , size_t ,
                  mbstate_t * __restrict );
    size_t mbrtowc(wchar_t * __restrict ,
                   const char * __restrict ,
                   size_t , mbstate_t * __restrict );
    size_t wcrtomb(char * __restrict , wchar_t ,
                   mbstate_t * __restrict );
    size_t mbsrtowcs(wchar_t * __restrict ,
                     const char ** __restrict ,
                     size_t , mbstate_t * __restrict ) __attribute__((__nonnull__(2)));
    size_t wcsrtombs(char * __restrict ,
                     const wchar_t ** __restrict ,
                     size_t , mbstate_t * __restrict ) __attribute__((__nonnull__(2)));
    size_t _mbsnrtowcs(wchar_t * __restrict ,
                       const char ** __restrict ,
                       size_t ,
                       size_t , mbstate_t * __restrict ) __attribute__((__nonnull__(2)));
    size_t _wcsnrtombs(char * __restrict ,
                       const wchar_t ** __restrict ,
                       size_t ,
                       size_t , mbstate_t * __restrict ) __attribute__((__nonnull__(2)));
# 243 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\wchar.h" 3
    __attribute__((__nothrow__)) double wcstod(const wchar_t * , wchar_t ** ) __attribute__((__nonnull__(1)));
    __attribute__((__nothrow__)) float wcstof(const wchar_t * , wchar_t ** ) __attribute__((__nonnull__(1)));
    __attribute__((__nothrow__)) long double wcstold(const wchar_t * , wchar_t ** ) __attribute__((__nonnull__(1)));
    long int wcstol(const wchar_t * , wchar_t ** ,
                    int ) __attribute__((__nonnull__(1)));
    unsigned long int wcstoul(const wchar_t * ,
                              wchar_t ** , int ) __attribute__((__nonnull__(1)));

    long long int wcstoll(const wchar_t * __restrict ,
                          wchar_t ** __restrict , int ) __attribute__((__nonnull__(1)));
    unsigned long long int wcstoull(const wchar_t * __restrict ,
                                    wchar_t ** __restrict ,
                                    int ) __attribute__((__nonnull__(1)));





    wchar_t *wcscpy(wchar_t * __restrict ,
                    const wchar_t * __restrict ) __attribute__((__nonnull__(1,2)));
    wchar_t *wcsncpy(wchar_t * __restrict ,
                     const wchar_t * __restrict , size_t ) __attribute__((__nonnull__(1,2)));
    wchar_t *wmemcpy(wchar_t * __restrict ,
                     const wchar_t * __restrict , size_t ) __attribute__((__nonnull__(1,2)));
    wchar_t *wmemmove(wchar_t * __restrict ,
                      const wchar_t * __restrict , size_t ) __attribute__((__nonnull__(1,2)));
    wchar_t *wcscat(wchar_t * __restrict ,
                    const wchar_t * __restrict ) __attribute__((__nonnull__(1,2)));
    wchar_t *wcsncat(wchar_t * __restrict ,
                     const wchar_t * __restrict , size_t ) __attribute__((__nonnull__(1,2)));
    int wcscmp(const wchar_t * __restrict ,
               const wchar_t * __restrict ) __attribute__((__nonnull__(1,2)));
    int wcsncmp(const wchar_t * __restrict ,
                const wchar_t * __restrict , size_t ) __attribute__((__nonnull__(1,2)));
    int wcscasecmp(const wchar_t * __restrict ,
                   const wchar_t * __restrict ) __attribute__((__nonnull__(1,2)));
    int wcsncasecmp(const wchar_t * __restrict ,
                    const wchar_t * __restrict , size_t ) __attribute__((__nonnull__(1,2)));
    int wcscoll(const wchar_t * __restrict ,
                const wchar_t * __restrict ) __attribute__((__nonnull__(1,2)));
    size_t wcsxfrm(wchar_t * __restrict ,
                   const wchar_t * __restrict , size_t ) __attribute__((__nonnull__(2)));
    int wmemcmp(const wchar_t * __restrict ,
                const wchar_t * __restrict , size_t ) __attribute__((__nonnull__(1,2)));
    size_t wcscspn(const wchar_t * __restrict ,
                   const wchar_t * __restrict ) __attribute__((__nonnull__(1,2)));
    size_t wcsspn(const wchar_t * __restrict ,
                  const wchar_t * __restrict ) __attribute__((__nonnull__(1,2)));
    wchar_t *wcstok(wchar_t * __restrict ,
                    const wchar_t * __restrict ,
                    wchar_t ** __restrict ) __attribute__((__nonnull__(2,3)));
    size_t wcslen(const wchar_t * __restrict ) __attribute__((__nonnull__(1)));
    wchar_t *wmemset(wchar_t * __restrict , wchar_t , size_t ) __attribute__((__nonnull__(1)));
# 343 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\wchar.h" 3
  }
  }
  extern "C" {

    wchar_t *wcschr(const wchar_t * __restrict , wchar_t ) __attribute__((__nonnull__(1)));
    wchar_t *wcspbrk(const wchar_t * __restrict ,
                     const wchar_t * __restrict ) __attribute__((__nonnull__(1,2)));
    wchar_t *wcsrchr(const wchar_t * __restrict , wchar_t ) __attribute__((__nonnull__(1)));
    wchar_t *wcsstr(const wchar_t * __restrict ,
                    const wchar_t * __restrict ) __attribute__((__nonnull__(1,2)));
    wchar_t *wmemchr(const wchar_t * __restrict , wchar_t ,
                     ::std:: size_t ) __attribute__((__nonnull__(1)));

  }
  namespace std {
  extern "C" {




         }
      }
# 374 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\wchar.h" 3
      using ::std::size_t;
      using ::std::wint_t;
      using ::std::mbstate_t;
      using ::std::tm;
      using ::std::wcsftime;

      using ::std::swprintf;
      using ::std::vswprintf;
      using ::std::swscanf;
      using ::std::vswscanf;
      using ::std::fwprintf;
      using ::std::vfwprintf;
      using ::std::fwscanf;
      using ::std::vfwscanf;
      using ::std::wprintf;
      using ::std::vwprintf;
      using ::std::wscanf;
      using ::std::vwscanf;
      using ::std::fgetwc;
      using ::std::fgetws;
      using ::std::fputwc;
      using ::std::fputws;
      using ::std::fwide;
      using ::std::getwc;
      using ::std::getwchar;
      using ::std::putwc;
      using ::std::putwchar;
      using ::std::ungetwc;
      using ::std::btowc;

      using ::std::wctob;
      using ::std::mbsinit;
      using ::std::mbrlen;
      using ::std::mbrtowc;
      using ::std::wcrtomb;
      using ::std::mbsrtowcs;
      using ::std::wcsrtombs;
      using ::std::_mbsnrtowcs;
      using ::std::_wcsnrtombs;




      using ::std::wcstod;
      using ::std::wcstof;
      using ::std::wcstold;
      using ::std::wcstol;
      using ::std::wcstoul;

      using ::std::wcstoll;
      using ::std::wcstoull;

      using ::std::wcscpy;
      using ::std::wcsncpy;
      using ::std::wmemcpy;
      using ::std::wmemmove;
      using ::std::wcscat;
      using ::std::wcsncat;
      using ::std::wcscmp;
      using ::std::wcsncmp;
      using ::std::wcscasecmp;
      using ::std::wcsncasecmp;
      using ::std::wcscoll;
      using ::std::wcsxfrm;
      using ::std::wmemcmp;







      using ::std::wcscspn;
      using ::std::wcsspn;
      using ::std::wcstok;
      using ::std::wcslen;
      using ::std::wmemset;
# 128 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\wchar.h" 2 3
# 146 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\wchar.h" 3
extern "C++" {
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) wchar_t* __libcpp_wcschr(const wchar_t* __s, wchar_t __c) {
  return (wchar_t*)wcschr(__s, __c);
}
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__enable_if__(true, ""))) const wchar_t* wcschr(const wchar_t* __s, wchar_t __c) {
  return __libcpp_wcschr(__s, __c);
}
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__enable_if__(true, ""))) wchar_t* wcschr(wchar_t* __s, wchar_t __c) {
  return __libcpp_wcschr(__s, __c);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) wchar_t* __libcpp_wcspbrk(const wchar_t* __s1, const wchar_t* __s2) {
  return (wchar_t*)wcspbrk(__s1, __s2);
}
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__enable_if__(true, ""))) const wchar_t*
wcspbrk(const wchar_t* __s1, const wchar_t* __s2) {
  return __libcpp_wcspbrk(__s1, __s2);
}
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__enable_if__(true, ""))) wchar_t* wcspbrk(wchar_t* __s1, const wchar_t* __s2) {
  return __libcpp_wcspbrk(__s1, __s2);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) wchar_t* __libcpp_wcsrchr(const wchar_t* __s, wchar_t __c) {
  return (wchar_t*)wcsrchr(__s, __c);
}
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__enable_if__(true, ""))) const wchar_t* wcsrchr(const wchar_t* __s, wchar_t __c) {
  return __libcpp_wcsrchr(__s, __c);
}
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__enable_if__(true, ""))) wchar_t* wcsrchr(wchar_t* __s, wchar_t __c) {
  return __libcpp_wcsrchr(__s, __c);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) wchar_t* __libcpp_wcsstr(const wchar_t* __s1, const wchar_t* __s2) {
  return (wchar_t*)wcsstr(__s1, __s2);
}
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__enable_if__(true, ""))) const wchar_t*
wcsstr(const wchar_t* __s1, const wchar_t* __s2) {
  return __libcpp_wcsstr(__s1, __s2);
}
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__enable_if__(true, ""))) wchar_t* wcsstr(wchar_t* __s1, const wchar_t* __s2) {
  return __libcpp_wcsstr(__s1, __s2);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) wchar_t* __libcpp_wmemchr(const wchar_t* __s, wchar_t __c, size_t __n) {
  return (wchar_t*)wmemchr(__s, __c, __n);
}
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__enable_if__(true, ""))) const wchar_t*
wmemchr(const wchar_t* __s, wchar_t __c, size_t __n) {
  return __libcpp_wmemchr(__s, __c, __n);
}
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__enable_if__(true, ""))) wchar_t* wmemchr(wchar_t* __s, wchar_t __c, size_t __n) {
  return __libcpp_wmemchr(__s, __c, __n);
}
}
# 116 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cwchar" 2 3
# 127 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cwchar" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

using ::mbstate_t; __attribute__((__using_if_exists__));
using ::size_t; __attribute__((__using_if_exists__));
using ::tm; __attribute__((__using_if_exists__));
using ::wint_t; __attribute__((__using_if_exists__));




using ::fwprintf __attribute__((__using_if_exists__));
using ::fwscanf __attribute__((__using_if_exists__));
using ::swprintf __attribute__((__using_if_exists__));
using ::vfwprintf __attribute__((__using_if_exists__));
using ::vswprintf __attribute__((__using_if_exists__));
using ::swscanf __attribute__((__using_if_exists__));
using ::vfwscanf __attribute__((__using_if_exists__));
using ::vswscanf __attribute__((__using_if_exists__));
using ::fgetwc __attribute__((__using_if_exists__));
using ::fgetws __attribute__((__using_if_exists__));
using ::fputwc __attribute__((__using_if_exists__));
using ::fputws __attribute__((__using_if_exists__));
using ::fwide __attribute__((__using_if_exists__));
using ::getwc __attribute__((__using_if_exists__));
using ::putwc __attribute__((__using_if_exists__));
using ::ungetwc __attribute__((__using_if_exists__));
using ::wcstod __attribute__((__using_if_exists__));
using ::wcstof __attribute__((__using_if_exists__));
using ::wcstold __attribute__((__using_if_exists__));
using ::wcstol __attribute__((__using_if_exists__));
using ::wcstoll __attribute__((__using_if_exists__));
using ::wcstoul __attribute__((__using_if_exists__));
using ::wcstoull __attribute__((__using_if_exists__));
using ::wcscpy __attribute__((__using_if_exists__));
using ::wcsncpy __attribute__((__using_if_exists__));
using ::wcscat __attribute__((__using_if_exists__));
using ::wcsncat __attribute__((__using_if_exists__));
using ::wcscmp __attribute__((__using_if_exists__));
using ::wcscoll __attribute__((__using_if_exists__));
using ::wcsncmp __attribute__((__using_if_exists__));
using ::wcsxfrm __attribute__((__using_if_exists__));
using ::wcschr __attribute__((__using_if_exists__));
using ::wcspbrk __attribute__((__using_if_exists__));
using ::wcsrchr __attribute__((__using_if_exists__));
using ::wcsstr __attribute__((__using_if_exists__));
using ::wmemchr __attribute__((__using_if_exists__));
using ::wcscspn __attribute__((__using_if_exists__));
using ::wcslen __attribute__((__using_if_exists__));
using ::wcsspn __attribute__((__using_if_exists__));
using ::wcstok __attribute__((__using_if_exists__));
using ::wmemcmp __attribute__((__using_if_exists__));
using ::wmemcpy __attribute__((__using_if_exists__));
using ::wmemmove __attribute__((__using_if_exists__));
using ::wmemset __attribute__((__using_if_exists__));
using ::wcsftime __attribute__((__using_if_exists__));
using ::btowc __attribute__((__using_if_exists__));
using ::wctob __attribute__((__using_if_exists__));
using ::mbsinit __attribute__((__using_if_exists__));
using ::mbrlen __attribute__((__using_if_exists__));
using ::mbrtowc __attribute__((__using_if_exists__));
using ::wcrtomb __attribute__((__using_if_exists__));
using ::mbsrtowcs __attribute__((__using_if_exists__));
using ::wcsrtombs __attribute__((__using_if_exists__));

using ::getwchar __attribute__((__using_if_exists__));
using ::vwscanf __attribute__((__using_if_exists__));
using ::wscanf __attribute__((__using_if_exists__));

using ::putwchar __attribute__((__using_if_exists__));
using ::vwprintf __attribute__((__using_if_exists__));
using ::wprintf __attribute__((__using_if_exists__));

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr size_t __constexpr_wcslen(const wchar_t* __str) {

  return __builtin_wcslen(__str);
# 213 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cwchar" 3
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr int
__constexpr_wmemcmp(const wchar_t* __lhs, const wchar_t* __rhs, size_t __count) {

  return __builtin_wmemcmp(__lhs, __rhs, __count);
# 231 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cwchar" 3
}

template <class _Tp, class _Up>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Tp* __constexpr_wmemchr(_Tp* __str, _Up __value, size_t __count) {
  static_assert(sizeof(_Tp) == sizeof(wchar_t)&& alignof(_Tp) >= alignof(wchar_t) &&
                    __libcpp_is_trivially_equality_comparable<_Tp, _Tp>::value,
                "Calling wmemchr on non-trivially equality comparable types is unsafe.");


  if (!__libcpp_is_constant_evaluated()) {
    wchar_t __value_buffer = 0;
    __builtin_memcpy(&__value_buffer, &__value, sizeof(wchar_t));
    return reinterpret_cast<_Tp*>(
        __builtin_wmemchr(reinterpret_cast<__apply_cv_t<_Tp, wchar_t>*>(__str), __value_buffer, __count));
  }

  else if constexpr (is_same_v<remove_cv_t<_Tp>, wchar_t>)
    return __builtin_wmemchr(__str, __value, __count);



  for (; __count; --__count) {
    if (*__str == __value)
      return __str;
    ++__str;
  }
  return nullptr;
}

}}
# 32 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/find.h" 2 3
# 36 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/find.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 40 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/find.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {


template <class _Iter, class _Sent, class _Tp, class _Proj>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Iter
__find_impl(_Iter __first, _Sent __last, const _Tp& __value, _Proj& __proj) {
  for (; __first != __last; ++__first)
    if (std::__invoke(__proj, *__first) == __value)
      break;
  return __first;
}


template <class _Tp,
          class _Up,
          class _Proj,
          __enable_if_t<__is_identity<_Proj>::value && __libcpp_is_trivially_equality_comparable<_Tp, _Up>::value &&
                            sizeof(_Tp) == 1,
                        int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Tp*
__find_impl(_Tp* __first, _Tp* __last, const _Up& __value, _Proj&) {
  if (auto __ret = std::__constexpr_memchr(__first, __value, __last - __first))
    return __ret;
  return __last;
}


template <class _Tp,
          class _Up,
          class _Proj,
          __enable_if_t<__is_identity<_Proj>::value && __libcpp_is_trivially_equality_comparable<_Tp, _Up>::value &&
                            sizeof(_Tp) == sizeof(wchar_t) && alignof(_Tp) >= alignof(wchar_t),
                        int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Tp*
__find_impl(_Tp* __first, _Tp* __last, const _Up& __value, _Proj&) {
  if (auto __ret = std::__constexpr_wmemchr(__first, __value, __last - __first))
    return __ret;
  return __last;
}




template <class _Tp,
          class _Up,
          class _Proj,
          __enable_if_t<__is_identity<_Proj>::value && !__libcpp_is_trivially_equality_comparable<_Tp, _Up>::value &&
                            is_integral<_Tp>::value && is_integral<_Up>::value &&
                            is_signed<_Tp>::value == is_signed<_Up>::value,
                        int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Tp*
__find_impl(_Tp* __first, _Tp* __last, const _Up& __value, _Proj& __proj) {
  if (__value < numeric_limits<_Tp>::min() || __value > numeric_limits<_Tp>::max())
    return __last;
  return std::__find_impl(__first, __last, _Tp(__value), __proj);
}


template <bool _ToFind, class _Cp, bool _IsConst>
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __bit_iterator<_Cp, _IsConst>
__find_bool(__bit_iterator<_Cp, _IsConst> __first, typename _Cp::size_type __n) {
  using _It = __bit_iterator<_Cp, _IsConst>;
  using __storage_type = typename _It::__storage_type;

  const int __bits_per_word = _It::__bits_per_word;

  if (__first.__ctz_ != 0) {
    __storage_type __clz_f = static_cast<__storage_type>(__bits_per_word - __first.__ctz_);
    __storage_type __dn = std::min(__clz_f, __n);
    __storage_type __m = (~__storage_type(0) << __first.__ctz_) & (~__storage_type(0) >> (__clz_f - __dn));
    __storage_type __b = std::__invert_if<!_ToFind>(*__first.__seg_) & __m;
    if (__b)
      return _It(__first.__seg_, static_cast<unsigned>(std::__libcpp_ctz(__b)));
    if (__n == __dn)
      return __first + __n;
    __n -= __dn;
    ++__first.__seg_;
  }

  for (; __n >= __bits_per_word; ++__first.__seg_, __n -= __bits_per_word) {
    __storage_type __b = std::__invert_if<!_ToFind>(*__first.__seg_);
    if (__b)
      return _It(__first.__seg_, static_cast<unsigned>(std::__libcpp_ctz(__b)));
  }

  if (__n > 0) {
    __storage_type __m = ~__storage_type(0) >> (__bits_per_word - __n);
    __storage_type __b = std::__invert_if<!_ToFind>(*__first.__seg_) & __m;
    if (__b)
      return _It(__first.__seg_, static_cast<unsigned>(std::__libcpp_ctz(__b)));
  }
  return _It(__first.__seg_, static_cast<unsigned>(__n));
}

template <class _Cp, bool _IsConst, class _Tp, class _Proj, __enable_if_t<__is_identity<_Proj>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __bit_iterator<_Cp, _IsConst>
__find_impl(__bit_iterator<_Cp, _IsConst> __first, __bit_iterator<_Cp, _IsConst> __last, const _Tp& __value, _Proj&) {
  if (static_cast<bool>(__value))
    return std::__find_bool<true>(__first, static_cast<typename _Cp::size_type>(__last - __first));
  return std::__find_bool<false>(__first, static_cast<typename _Cp::size_type>(__last - __first));
}



template <class>
struct __find_segment;

template <class _SegmentedIterator,
          class _Tp,
          class _Proj,
          __enable_if_t<__is_segmented_iterator<_SegmentedIterator>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _SegmentedIterator
__find_impl(_SegmentedIterator __first, _SegmentedIterator __last, const _Tp& __value, _Proj& __proj) {
  return std::__find_segment_if(std::move(__first), std::move(__last), __find_segment<_Tp>(__value), __proj);
}

template <class _Tp>
struct __find_segment {
  const _Tp& __value_;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr __find_segment(const _Tp& __value) : __value_(__value) {}

  template <class _InputIterator, class _Proj>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _InputIterator
  operator()(_InputIterator __first, _InputIterator __last, _Proj& __proj) const {
    return std::__find_impl(__first, __last, __value_, __proj);
  }
};


template <class _InputIterator, class _Tp>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _InputIterator
find(_InputIterator __first, _InputIterator __last, const _Tp& __value) {
  __identity __proj;
  return std::__rewrap_iter(
      __first, std::__find_impl(std::__unwrap_iter(__first), std::__unwrap_iter(__last), __value, __proj));
}

}}
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/remove.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/find_if.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/find_if.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _InputIterator, class _Predicate>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _InputIterator
find_if(_InputIterator __first, _InputIterator __last, _Predicate __pred) {
  for (; __first != __last; ++__first)
    if (__pred(*__first))
      break;
  return __first;
}

}}
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/remove.h" 2 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/remove.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/remove.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _ForwardIterator, class _Tp>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _ForwardIterator
remove(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value) {
  __first = std::find(__first, __last, __value);
  if (__first != __last) {
    _ForwardIterator __i = __first;
    while (++__i != __last) {
      if (!(*__i == __value)) {
        *__first = std::move(*__i);
        ++__first;
      }
    }
  }
  return __first;
}

}}
# 315 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\vector" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/remove_if.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/remove_if.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/remove_if.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _ForwardIterator, class _Predicate>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _ForwardIterator
remove_if(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred) {
  __first = std::find_if<_ForwardIterator, _Predicate&>(__first, __last, __pred);
  if (__first != __last) {
    _ForwardIterator __i = __first;
    while (++__i != __last) {
      if (!__pred(*__i)) {
        *__first = std::move(*__i);
        ++__first;
      }
    }
  }
  return __first;
}

}}
# 316 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\vector" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/rotate.h" 1 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/rotate.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/move.h" 1 3
# 25 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/move.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 29 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/move.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _AlgPolicy, class _InIter, class _Sent, class _OutIter>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pair<_InIter, _OutIter>
__move(_InIter __first, _Sent __last, _OutIter __result);

template <class _AlgPolicy>
struct __move_loop {
  template <class _InIter, class _Sent, class _OutIter>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pair<_InIter, _OutIter>
  operator()(_InIter __first, _Sent __last, _OutIter __result) const {
    while (__first != __last) {
      *__result = _IterOps<_AlgPolicy>::__iter_move(__first);
      ++__first;
      ++__result;
    }
    return std::make_pair(std::move(__first), std::move(__result));
  }

  template <class _InIter, class _OutIter>
  struct _MoveSegment {
    using _Traits = __segmented_iterator_traits<_InIter>;

    _OutIter& __result_;

    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr explicit _MoveSegment(_OutIter& __result)
        : __result_(__result) {}

    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr void
    operator()(typename _Traits::__local_iterator __lfirst, typename _Traits::__local_iterator __llast) {
      __result_ = std::__move<_AlgPolicy>(__lfirst, __llast, std::move(__result_)).second;
    }
  };

  template <class _InIter, class _OutIter, __enable_if_t<__is_segmented_iterator<_InIter>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pair<_InIter, _OutIter>
  operator()(_InIter __first, _InIter __last, _OutIter __result) const {
    std::__for_each_segment(__first, __last, _MoveSegment<_InIter, _OutIter>(__result));
    return std::make_pair(__last, std::move(__result));
  }

  template <class _InIter,
            class _OutIter,
            __enable_if_t<__has_random_access_iterator_category<_InIter>::value &&
                              !__is_segmented_iterator<_InIter>::value && __is_segmented_iterator<_OutIter>::value,
                          int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pair<_InIter, _OutIter>
  operator()(_InIter __first, _InIter __last, _OutIter __result) const {
    using _Traits = __segmented_iterator_traits<_OutIter>;
    using _DiffT = typename common_type<__iter_diff_t<_InIter>, __iter_diff_t<_OutIter> >::type;

    if (__first == __last)
      return std::make_pair(std::move(__first), std::move(__result));

    auto __local_first = _Traits::__local(__result);
    auto __segment_iterator = _Traits::__segment(__result);
    while (true) {
      auto __local_last = _Traits::__end(__segment_iterator);
      auto __size = std::min<_DiffT>(__local_last - __local_first, __last - __first);
      auto __iters = std::__move<_AlgPolicy>(__first, __first + __size, __local_first);
      __first = std::move(__iters.first);

      if (__first == __last)
        return std::make_pair(std::move(__first), _Traits::__compose(__segment_iterator, std::move(__iters.second)));

      __local_first = _Traits::__begin(++__segment_iterator);
    }
  }
};

struct __move_trivial {

  template <class _In, class _Out, __enable_if_t<__can_lower_move_assignment_to_memmove<_In, _Out>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pair<_In*, _Out*>
  operator()(_In* __first, _In* __last, _Out* __result) const {
    return std::__copy_trivial_impl(__first, __last, __result);
  }
};

template <class _AlgPolicy, class _InIter, class _Sent, class _OutIter>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pair<_InIter, _OutIter>
__move(_InIter __first, _Sent __last, _OutIter __result) {
  return std::__dispatch_copy_or_move<_AlgPolicy, __move_loop<_AlgPolicy>, __move_trivial>(
      std::move(__first), std::move(__last), std::move(__result));
}

template <class _InputIterator, class _OutputIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _OutputIterator
move(_InputIterator __first, _InputIterator __last, _OutputIterator __result) {
  static_assert(is_copy_constructible<_InputIterator>::value, "Iterators has to be copy constructible.");
  static_assert(is_copy_constructible<_OutputIterator>::value, "The output iterator has to be copy constructible.");

  return std::__move<_ClassicAlgPolicy>(std::move(__first), std::move(__last), std::move(__result)).second;
}

}}
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/rotate.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/move_backward.h" 1 3
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/move_backward.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 28 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/move_backward.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _AlgPolicy, class _BidirectionalIterator1, class _Sentinel, class _BidirectionalIterator2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) pair<_BidirectionalIterator1, _BidirectionalIterator2>
__move_backward(_BidirectionalIterator1 __first, _Sentinel __last, _BidirectionalIterator2 __result);

template <class _AlgPolicy>
struct __move_backward_loop {
  template <class _InIter, class _Sent, class _OutIter>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pair<_InIter, _OutIter>
  operator()(_InIter __first, _Sent __last, _OutIter __result) const {
    auto __last_iter = _IterOps<_AlgPolicy>::next(__first, __last);
    auto __original_last_iter = __last_iter;

    while (__first != __last_iter) {
      *--__result = _IterOps<_AlgPolicy>::__iter_move(--__last_iter);
    }

    return std::make_pair(std::move(__original_last_iter), std::move(__result));
  }

  template <class _InIter, class _OutIter, __enable_if_t<__is_segmented_iterator<_InIter>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pair<_InIter, _OutIter>
  operator()(_InIter __first, _InIter __last, _OutIter __result) const {
    using _Traits = __segmented_iterator_traits<_InIter>;
    auto __sfirst = _Traits::__segment(__first);
    auto __slast = _Traits::__segment(__last);
    if (__sfirst == __slast) {
      auto __iters =
          std::__move_backward<_AlgPolicy>(_Traits::__local(__first), _Traits::__local(__last), std::move(__result));
      return std::make_pair(__last, __iters.second);
    }

    __result =
        std::__move_backward<_AlgPolicy>(_Traits::__begin(__slast), _Traits::__local(__last), std::move(__result))
            .second;
    --__slast;
    while (__sfirst != __slast) {
      __result =
          std::__move_backward<_AlgPolicy>(_Traits::__begin(__slast), _Traits::__end(__slast), std::move(__result))
              .second;
      --__slast;
    }
    __result = std::__move_backward<_AlgPolicy>(_Traits::__local(__first), _Traits::__end(__slast), std::move(__result))
                   .second;
    return std::make_pair(__last, std::move(__result));
  }

  template <class _InIter,
            class _OutIter,
            __enable_if_t<__has_random_access_iterator_category<_InIter>::value &&
                              !__is_segmented_iterator<_InIter>::value && __is_segmented_iterator<_OutIter>::value,
                          int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pair<_InIter, _OutIter>
  operator()(_InIter __first, _InIter __last, _OutIter __result) const {
    using _Traits = __segmented_iterator_traits<_OutIter>;
    using _DiffT = typename common_type<__iter_diff_t<_InIter>, __iter_diff_t<_OutIter> >::type;


    if (__first == __last)
      return std::make_pair(__first, __result);

    auto __orig_last = __last;

    auto __local_last = _Traits::__local(__result);
    auto __segment_iterator = _Traits::__segment(__result);
    while (true) {
      auto __local_first = _Traits::__begin(__segment_iterator);
      auto __size = std::min<_DiffT>(__local_last - __local_first, __last - __first);
      auto __iter = std::__move_backward<_AlgPolicy>(__last - __size, __last, __local_last).second;
      __last -= __size;

      if (__first == __last)
        return std::make_pair(std::move(__orig_last), _Traits::__compose(__segment_iterator, std::move(__iter)));

      __local_last = _Traits::__end(--__segment_iterator);
    }
  }
};

struct __move_backward_trivial {

  template <class _In, class _Out, __enable_if_t<__can_lower_move_assignment_to_memmove<_In, _Out>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pair<_In*, _Out*>
  operator()(_In* __first, _In* __last, _Out* __result) const {
    return std::__copy_backward_trivial_impl(__first, __last, __result);
  }
};

template <class _AlgPolicy, class _BidirectionalIterator1, class _Sentinel, class _BidirectionalIterator2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) pair<_BidirectionalIterator1, _BidirectionalIterator2>
__move_backward(_BidirectionalIterator1 __first, _Sentinel __last, _BidirectionalIterator2 __result) {
  static_assert(std::is_copy_constructible<_BidirectionalIterator1>::value &&
                    std::is_copy_constructible<_BidirectionalIterator1>::value,
                "Iterators must be copy constructible.");

  return std::__dispatch_copy_or_move<_AlgPolicy, __move_backward_loop<_AlgPolicy>, __move_backward_trivial>(
      std::move(__first), std::move(__last), std::move(__result));
}

template <class _BidirectionalIterator1, class _BidirectionalIterator2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _BidirectionalIterator2
move_backward(_BidirectionalIterator1 __first, _BidirectionalIterator1 __last, _BidirectionalIterator2 __result) {
  return std::__move_backward<_ClassicAlgPolicy>(std::move(__first), std::move(__last), std::move(__result)).second;
}

}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/rotate.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/swap_ranges.h" 1 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/swap_ranges.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/swap_ranges.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {


template <class _AlgPolicy, class _ForwardIterator1, class _Sentinel1, class _ForwardIterator2, class _Sentinel2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) pair<_ForwardIterator1, _ForwardIterator2>
__swap_ranges(_ForwardIterator1 __first1, _Sentinel1 __last1, _ForwardIterator2 __first2, _Sentinel2 __last2) {
  while (__first1 != __last1 && __first2 != __last2) {
    _IterOps<_AlgPolicy>::iter_swap(__first1, __first2);
    ++__first1;
    ++__first2;
  }

  return pair<_ForwardIterator1, _ForwardIterator2>(std::move(__first1), std::move(__first2));
}


template <class _AlgPolicy, class _ForwardIterator1, class _Sentinel1, class _ForwardIterator2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) pair<_ForwardIterator1, _ForwardIterator2>
__swap_ranges(_ForwardIterator1 __first1, _Sentinel1 __last1, _ForwardIterator2 __first2) {
  while (__first1 != __last1) {
    _IterOps<_AlgPolicy>::iter_swap(__first1, __first2);
    ++__first1;
    ++__first2;
  }

  return pair<_ForwardIterator1, _ForwardIterator2>(std::move(__first1), std::move(__first2));
}

template <class _ForwardIterator1, class _ForwardIterator2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _ForwardIterator2
swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2) {
  return std::__swap_ranges<_ClassicAlgPolicy>(std::move(__first1), std::move(__last1), std::move(__first2)).second;
}

}}
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/rotate.h" 2 3
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/rotate.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 28 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/rotate.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _AlgPolicy, class _ForwardIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _ForwardIterator
__rotate_left(_ForwardIterator __first, _ForwardIterator __last) {
  typedef typename iterator_traits<_ForwardIterator>::value_type value_type;
  using _Ops = _IterOps<_AlgPolicy>;

  value_type __tmp = _Ops::__iter_move(__first);
  _ForwardIterator __lm1 = std::__move<_AlgPolicy>(_Ops::next(__first), __last, __first).second;
  *__lm1 = std::move(__tmp);
  return __lm1;
}

template <class _AlgPolicy, class _BidirectionalIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _BidirectionalIterator
__rotate_right(_BidirectionalIterator __first, _BidirectionalIterator __last) {
  typedef typename iterator_traits<_BidirectionalIterator>::value_type value_type;
  using _Ops = _IterOps<_AlgPolicy>;

  _BidirectionalIterator __lm1 = _Ops::prev(__last);
  value_type __tmp = _Ops::__iter_move(__lm1);
  _BidirectionalIterator __fp1 = std::__move_backward<_AlgPolicy>(__first, __lm1, std::move(__last)).second;
  *__first = std::move(__tmp);
  return __fp1;
}

template <class _AlgPolicy, class _ForwardIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _ForwardIterator
__rotate_forward(_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator __last) {
  _ForwardIterator __i = __middle;
  while (true) {
    _IterOps<_AlgPolicy>::iter_swap(__first, __i);
    ++__first;
    if (++__i == __last)
      break;
    if (__first == __middle)
      __middle = __i;
  }
  _ForwardIterator __r = __first;
  if (__first != __middle) {
    __i = __middle;
    while (true) {
      _IterOps<_AlgPolicy>::iter_swap(__first, __i);
      ++__first;
      if (++__i == __last) {
        if (__first == __middle)
          break;
        __i = __middle;
      } else if (__first == __middle)
        __middle = __i;
    }
  }
  return __r;
}

template <typename _Integral>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Integral __algo_gcd(_Integral __x, _Integral __y) {
  do {
    _Integral __t = __x % __y;
    __x = __y;
    __y = __t;
  } while (__y);
  return __x;
}

template <class _AlgPolicy, typename _RandomAccessIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _RandomAccessIterator
__rotate_gcd(_RandomAccessIterator __first, _RandomAccessIterator __middle, _RandomAccessIterator __last) {
  typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type;
  typedef typename iterator_traits<_RandomAccessIterator>::value_type value_type;
  using _Ops = _IterOps<_AlgPolicy>;

  const difference_type __m1 = __middle - __first;
  const difference_type __m2 = _Ops::distance(__middle, __last);
  if (__m1 == __m2) {
    std::__swap_ranges<_AlgPolicy>(__first, __middle, __middle, __last);
    return __middle;
  }
  const difference_type __g = std::__algo_gcd(__m1, __m2);
  for (_RandomAccessIterator __p = __first + __g; __p != __first;) {
    value_type __t(_Ops::__iter_move(--__p));
    _RandomAccessIterator __p1 = __p;
    _RandomAccessIterator __p2 = __p1 + __m1;
    do {
      *__p1 = _Ops::__iter_move(__p2);
      __p1 = __p2;
      const difference_type __d = _Ops::distance(__p2, __last);
      if (__m1 < __d)
        __p2 += __m1;
      else
        __p2 = __first + (__m1 - __d);
    } while (__p2 != __p);
    *__p1 = std::move(__t);
  }
  return __first + __m2;
}

template <class _AlgPolicy, class _ForwardIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _ForwardIterator
__rotate_impl(_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator __last, std::forward_iterator_tag) {
  typedef typename iterator_traits<_ForwardIterator>::value_type value_type;
  if (is_trivially_move_assignable<value_type>::value) {
    if (_IterOps<_AlgPolicy>::next(__first) == __middle)
      return std::__rotate_left<_AlgPolicy>(__first, __last);
  }
  return std::__rotate_forward<_AlgPolicy>(__first, __middle, __last);
}

template <class _AlgPolicy, class _BidirectionalIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _BidirectionalIterator __rotate_impl(
    _BidirectionalIterator __first,
    _BidirectionalIterator __middle,
    _BidirectionalIterator __last,
    bidirectional_iterator_tag) {
  typedef typename iterator_traits<_BidirectionalIterator>::value_type value_type;
  if (is_trivially_move_assignable<value_type>::value) {
    if (_IterOps<_AlgPolicy>::next(__first) == __middle)
      return std::__rotate_left<_AlgPolicy>(__first, __last);
    if (_IterOps<_AlgPolicy>::next(__middle) == __last)
      return std::__rotate_right<_AlgPolicy>(__first, __last);
  }
  return std::__rotate_forward<_AlgPolicy>(__first, __middle, __last);
}

template <class _AlgPolicy, class _RandomAccessIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _RandomAccessIterator __rotate_impl(
    _RandomAccessIterator __first,
    _RandomAccessIterator __middle,
    _RandomAccessIterator __last,
    random_access_iterator_tag) {
  typedef typename iterator_traits<_RandomAccessIterator>::value_type value_type;
  if (is_trivially_move_assignable<value_type>::value) {
    if (_IterOps<_AlgPolicy>::next(__first) == __middle)
      return std::__rotate_left<_AlgPolicy>(__first, __last);
    if (_IterOps<_AlgPolicy>::next(__middle) == __last)
      return std::__rotate_right<_AlgPolicy>(__first, __last);
    return std::__rotate_gcd<_AlgPolicy>(__first, __middle, __last);
  }
  return std::__rotate_forward<_AlgPolicy>(__first, __middle, __last);
}

template <class _AlgPolicy, class _Iterator, class _Sentinel>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pair<_Iterator, _Iterator>
__rotate(_Iterator __first, _Iterator __middle, _Sentinel __last) {
  using _Ret = pair<_Iterator, _Iterator>;
  _Iterator __last_iter = _IterOps<_AlgPolicy>::next(__middle, __last);

  if (__first == __middle)
    return _Ret(__last_iter, __last_iter);
  if (__middle == __last)
    return _Ret(std::move(__first), std::move(__last_iter));

  using _IterCategory = typename _IterOps<_AlgPolicy>::template __iterator_category<_Iterator>;
  auto __result = std::__rotate_impl<_AlgPolicy>(std::move(__first), std::move(__middle), __last_iter, _IterCategory());

  return _Ret(std::move(__result), std::move(__last_iter));
}

template <class _ForwardIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _ForwardIterator
rotate(_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator __last) {
  return std::__rotate<_ClassicAlgPolicy>(std::move(__first), std::move(__middle), std::move(__last)).first;
}

}}
# 317 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\vector" 2 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__bit_reference" 1 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__bit_reference" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/copy_n.h" 1 3
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/copy_n.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _InputIterator,
          class _Size,
          class _OutputIterator,
          __enable_if_t<__has_input_iterator_category<_InputIterator>::value &&
                            !__has_random_access_iterator_category<_InputIterator>::value,
                        int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _OutputIterator
copy_n(_InputIterator __first, _Size __orig_n, _OutputIterator __result) {
  typedef decltype(std::__convert_to_integral(__orig_n)) _IntegralSize;
  _IntegralSize __n = __orig_n;
  if (__n > 0) {
    *__result = *__first;
    ++__result;
    for (--__n; __n > 0; --__n) {
      ++__first;
      *__result = *__first;
      ++__result;
    }
  }
  return __result;
}

template <class _InputIterator,
          class _Size,
          class _OutputIterator,
          __enable_if_t<__has_random_access_iterator_category<_InputIterator>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _OutputIterator
copy_n(_InputIterator __first, _Size __orig_n, _OutputIterator __result) {
  typedef typename iterator_traits<_InputIterator>::difference_type difference_type;
  typedef decltype(std::__convert_to_integral(__orig_n)) _IntegralSize;
  _IntegralSize __n = __orig_n;
  return std::copy(__first, __first + difference_type(__n), __result);
}

}}
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__bit_reference" 2 3




# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__bit/popcount.h" 1 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__bit/popcount.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__bit/popcount.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr int __libcpp_popcount(unsigned __x) noexcept {
  return __builtin_popcount(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr int __libcpp_popcount(unsigned long __x) noexcept {
  return __builtin_popcountl(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr int __libcpp_popcount(unsigned long long __x) noexcept {
  return __builtin_popcountll(__x);
}
# 60 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__bit/popcount.h" 3
}}
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__bit_reference" 2 3







# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cstring" 1 3
# 63 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cstring" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string.h" 1 3
# 58 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\string.h" 1 3
# 32 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\string.h" 3
        namespace std {

        extern "C" {
# 44 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\string.h" 3
    typedef unsigned int size_t;
# 58 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\string.h" 3
extern __attribute__((__nothrow__)) void *memcpy(void * __restrict ,
                    const void * __restrict , size_t ) __attribute__((__nonnull__(1,2)));






extern __attribute__((__nothrow__)) void *memmove(void * ,
                    const void * , size_t ) __attribute__((__nonnull__(1,2)));
# 77 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\string.h" 3
extern __attribute__((__nothrow__)) char *strcpy(char * __restrict , const char * __restrict ) __attribute__((__nonnull__(1,2)));






extern __attribute__((__nothrow__)) char *strncpy(char * __restrict , const char * __restrict , size_t ) __attribute__((__nonnull__(1,2)));
# 93 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\string.h" 3
extern __attribute__((__nothrow__)) char *strcat(char * __restrict , const char * __restrict ) __attribute__((__nonnull__(1,2)));






extern __attribute__((__nothrow__)) char *strncat(char * __restrict , const char * __restrict , size_t ) __attribute__((__nonnull__(1,2)));
# 117 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\string.h" 3
extern __attribute__((__nothrow__)) int memcmp(const void * , const void * , size_t ) __attribute__((__nonnull__(1,2)));







extern __attribute__((__nothrow__)) int strcmp(const char * , const char * ) __attribute__((__nonnull__(1,2)));






extern __attribute__((__nothrow__)) int strncmp(const char * , const char * , size_t ) __attribute__((__nonnull__(1,2)));
# 141 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\string.h" 3
extern __attribute__((__nothrow__)) int strcasecmp(const char * , const char * ) __attribute__((__nonnull__(1,2)));







extern __attribute__((__nothrow__)) int strncasecmp(const char * , const char * , size_t ) __attribute__((__nonnull__(1,2)));
# 158 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\string.h" 3
extern __attribute__((__nothrow__)) int strcoll(const char * , const char * ) __attribute__((__nonnull__(1,2)));
# 169 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\string.h" 3
extern __attribute__((__nothrow__)) size_t strxfrm(char * __restrict , const char * __restrict , size_t ) __attribute__((__nonnull__(2)));
# 188 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\string.h" 3
extern __attribute__((__nothrow__)) const void *memchr(const void * , int , size_t ) __attribute__((__nonnull__(1)));
extern "C++" void *memchr(void * __s, int __c, size_t __n) __attribute__((__nonnull__(1)));
extern "C++" inline void *memchr(void * __s, int __c, size_t __n)
    { return const_cast<void *>(memchr(const_cast<const void *>(__s), __c, __n)); }
# 204 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\string.h" 3
extern __attribute__((__nothrow__)) const char *strchr(const char * , int ) __attribute__((__nonnull__(1)));
extern "C++" char *strchr(char * __s, int __c) __attribute__((__nonnull__(1)));
extern "C++" inline char *strchr(char * __s, int __c)
    { return const_cast<char *>(strchr(const_cast<const char *>(__s), __c)); }
# 218 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\string.h" 3
extern __attribute__((__nothrow__)) size_t strcspn(const char * , const char * ) __attribute__((__nonnull__(1,2)));
# 227 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\string.h" 3
extern __attribute__((__nothrow__)) const char *strpbrk(const char * , const char * ) __attribute__((__nonnull__(1,2)));
extern "C++" char *strpbrk(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
extern "C++" inline char *strpbrk(char * __s1, const char * __s2)
    { return const_cast<char *>(strpbrk(const_cast<const char *>(__s1), __s2)); }
# 242 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\string.h" 3
extern __attribute__((__nothrow__)) const char *strrchr(const char * , int ) __attribute__((__nonnull__(1)));
extern "C++" char *strrchr(char * __s, int __c) __attribute__((__nonnull__(1)));
extern "C++" inline char *strrchr(char * __s, int __c)
    { return const_cast<char *>(strrchr(const_cast<const char *>(__s), __c)); }
# 257 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\string.h" 3
extern __attribute__((__nothrow__)) size_t strspn(const char * , const char * ) __attribute__((__nonnull__(1,2)));







extern __attribute__((__nothrow__)) const char *strstr(const char * , const char * ) __attribute__((__nonnull__(1,2)));
extern "C++" char *strstr(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
extern "C++" inline char *strstr(char * __s1, const char * __s2)
    { return const_cast<char *>(strstr(const_cast<const char *>(__s1), __s2)); }
# 280 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\string.h" 3
extern __attribute__((__nothrow__)) char *strtok(char * __restrict , const char * __restrict ) __attribute__((__nonnull__(2)));
extern __attribute__((__nothrow__)) char *_strtok_r(char * , const char * , char ** ) __attribute__((__nonnull__(2,3)));
# 321 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\string.h" 3
extern __attribute__((__nothrow__)) void *memset(void * , int , size_t ) __attribute__((__nonnull__(1)));





extern __attribute__((__nothrow__)) char *strerror(int );







extern __attribute__((__nothrow__)) size_t strlen(const char * ) __attribute__((__nonnull__(1)));





extern __attribute__((__nothrow__)) size_t strnlen(const char * , size_t ) __attribute__((__nonnull__(1)));







extern __attribute__((__nothrow__)) size_t strlcpy(char * , const char * , size_t ) __attribute__((__nonnull__(1,2)));
# 369 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\string.h" 3
extern __attribute__((__nothrow__)) size_t strlcat(char * , const char * , size_t ) __attribute__((__nonnull__(1,2)));
# 395 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\string.h" 3
extern __attribute__((__nothrow__)) void _membitcpybl(void * , const void * , int , int , size_t ) __attribute__((__nonnull__(1,2)));
extern __attribute__((__nothrow__)) void _membitcpybb(void * , const void * , int , int , size_t ) __attribute__((__nonnull__(1,2)));
extern __attribute__((__nothrow__)) void _membitcpyhl(void * , const void * , int , int , size_t ) __attribute__((__nonnull__(1,2)));
extern __attribute__((__nothrow__)) void _membitcpyhb(void * , const void * , int , int , size_t ) __attribute__((__nonnull__(1,2)));
extern __attribute__((__nothrow__)) void _membitcpywl(void * , const void * , int , int , size_t ) __attribute__((__nonnull__(1,2)));
extern __attribute__((__nothrow__)) void _membitcpywb(void * , const void * , int , int , size_t ) __attribute__((__nonnull__(1,2)));
extern __attribute__((__nothrow__)) void _membitmovebl(void * , const void * , int , int , size_t ) __attribute__((__nonnull__(1,2)));
extern __attribute__((__nothrow__)) void _membitmovebb(void * , const void * , int , int , size_t ) __attribute__((__nonnull__(1,2)));
extern __attribute__((__nothrow__)) void _membitmovehl(void * , const void * , int , int , size_t ) __attribute__((__nonnull__(1,2)));
extern __attribute__((__nothrow__)) void _membitmovehb(void * , const void * , int , int , size_t ) __attribute__((__nonnull__(1,2)));
extern __attribute__((__nothrow__)) void _membitmovewl(void * , const void * , int , int , size_t ) __attribute__((__nonnull__(1,2)));
extern __attribute__((__nothrow__)) void _membitmovewb(void * , const void * , int , int , size_t ) __attribute__((__nonnull__(1,2)));
# 457 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\string.h" 3
         }
      }





      using ::std::size_t;
      using ::std::memcpy;
      using ::std::memmove;
      using ::std::strcpy;
      using ::std::strncpy;
      using ::std::strcat;
      using ::std::strncat;
      using ::std::memcmp;
      using ::std::strcmp;
      using ::std::strncmp;
      using ::std::strcasecmp;
      using ::std::strncasecmp;
      using ::std::strcoll;
      using ::std::strxfrm;
      using ::std::memchr;
      using ::std::strchr;
      using ::std::strcspn;
      using ::std::strpbrk;
      using ::std::strrchr;
      using ::std::strspn;
      using ::std::strstr;
      using ::std::strtok;



      using ::std::_strtok_r;
      using ::std::memset;
      using ::std::strerror;
      using ::std::strlen;
      using ::std::strnlen;
      using ::std::strlcpy;
      using ::std::strlcat;
      using ::std::_membitcpybl;
      using ::std::_membitcpybb;
      using ::std::_membitcpyhl;
      using ::std::_membitcpyhb;
      using ::std::_membitcpywl;
      using ::std::_membitcpywb;
      using ::std::_membitmovebl;
      using ::std::_membitmovebb;
      using ::std::_membitmovehl;
      using ::std::_membitmovehb;
      using ::std::_membitmovewl;
      using ::std::_membitmovewb;
# 62 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string.h" 2 3
# 72 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string.h" 3
extern "C++" {
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__enable_if__(true, ""))) const char* strchr(const char* __s, int __c) {
  return __builtin_strchr(__s, __c);
}
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__enable_if__(true, ""))) char* strchr(char* __s, int __c) {
  return __builtin_strchr(__s, __c);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__enable_if__(true, ""))) const char* strpbrk(const char* __s1, const char* __s2) {
  return __builtin_strpbrk(__s1, __s2);
}
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__enable_if__(true, ""))) char* strpbrk(char* __s1, const char* __s2) {
  return __builtin_strpbrk(__s1, __s2);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__enable_if__(true, ""))) const char* strrchr(const char* __s, int __c) {
  return __builtin_strrchr(__s, __c);
}
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__enable_if__(true, ""))) char* strrchr(char* __s, int __c) {
  return __builtin_strrchr(__s, __c);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__enable_if__(true, ""))) const void* memchr(const void* __s, int __c, size_t __n) {
  return __builtin_memchr(__s, __c, __n);
}
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__enable_if__(true, ""))) void* memchr(void* __s, int __c, size_t __n) {
  return __builtin_memchr(__s, __c, __n);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__enable_if__(true, ""))) const char* strstr(const char* __s1, const char* __s2) {
  return __builtin_strstr(__s1, __s2);
}
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__enable_if__(true, ""))) char* strstr(char* __s1, const char* __s2) {
  return __builtin_strstr(__s1, __s2);
}
}
# 64 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cstring" 2 3
# 75 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cstring" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

using ::size_t __attribute__((__using_if_exists__));
using ::memcpy __attribute__((__using_if_exists__));
using ::memmove __attribute__((__using_if_exists__));
using ::strcpy __attribute__((__using_if_exists__));
using ::strncpy __attribute__((__using_if_exists__));
using ::strcat __attribute__((__using_if_exists__));
using ::strncat __attribute__((__using_if_exists__));
using ::memcmp __attribute__((__using_if_exists__));
using ::strcmp __attribute__((__using_if_exists__));
using ::strncmp __attribute__((__using_if_exists__));
using ::strcoll __attribute__((__using_if_exists__));
using ::strxfrm __attribute__((__using_if_exists__));
using ::memchr __attribute__((__using_if_exists__));
using ::strchr __attribute__((__using_if_exists__));
using ::strcspn __attribute__((__using_if_exists__));
using ::strpbrk __attribute__((__using_if_exists__));
using ::strrchr __attribute__((__using_if_exists__));
using ::strspn __attribute__((__using_if_exists__));
using ::strstr __attribute__((__using_if_exists__));
using ::strtok __attribute__((__using_if_exists__));
using ::memset __attribute__((__using_if_exists__));
using ::strerror __attribute__((__using_if_exists__));
using ::strlen __attribute__((__using_if_exists__));

}}
# 27 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__bit_reference" 2 3
# 30 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__bit_reference" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 34 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__bit_reference" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Cp>
class __bit_const_reference;

template <class _Tp>
struct __has_storage_type {
  static const bool value = false;
};

template <class _Cp, bool = __has_storage_type<_Cp>::value>
class __bit_reference {
  using __storage_type = typename _Cp::__storage_type;
  using __storage_pointer = typename _Cp::__storage_pointer;

  __storage_pointer __seg_;
  __storage_type __mask_;

  friend typename _Cp::__self;

  friend class __bit_const_reference<_Cp>;
  friend class __bit_iterator<_Cp, false>;

public:
  using __container = typename _Cp::__self;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __bit_reference(const __bit_reference&) = default;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) operator bool() const noexcept {
    return static_cast<bool>(*__seg_ & __mask_);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator~() const noexcept {
    return !static_cast<bool>(*this);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __bit_reference& operator=(bool __x) noexcept {
    if (__x)
      *__seg_ |= __mask_;
    else
      *__seg_ &= ~__mask_;
    return *this;
  }
# 88 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__bit_reference" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __bit_reference& operator=(const __bit_reference& __x) noexcept {
    return operator=(static_cast<bool>(__x));
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void flip() noexcept { *__seg_ ^= __mask_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __bit_iterator<_Cp, false> operator&() const noexcept {
    return __bit_iterator<_Cp, false>(__seg_, static_cast<unsigned>(std::__libcpp_ctz(__mask_)));
  }

private:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit __bit_reference(
      __storage_pointer __s, __storage_type __m) noexcept
      : __seg_(__s),
        __mask_(__m) {}
};

template <class _Cp>
class __bit_reference<_Cp, false> {};

template <class _Cp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
swap(__bit_reference<_Cp> __x, __bit_reference<_Cp> __y) noexcept {
  bool __t = __x;
  __x = __y;
  __y = __t;
}

template <class _Cp, class _Dp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
swap(__bit_reference<_Cp> __x, __bit_reference<_Dp> __y) noexcept {
  bool __t = __x;
  __x = __y;
  __y = __t;
}

template <class _Cp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void swap(__bit_reference<_Cp> __x, bool& __y) noexcept {
  bool __t = __x;
  __x = __y;
  __y = __t;
}

template <class _Cp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void swap(bool& __x, __bit_reference<_Cp> __y) noexcept {
  bool __t = __x;
  __x = __y;
  __y = __t;
}

template <class _Cp>
class __bit_const_reference {
  using __storage_type = typename _Cp::__storage_type;
  using __storage_pointer = typename _Cp::__const_storage_pointer;

  __storage_pointer __seg_;
  __storage_type __mask_;

  friend typename _Cp::__self;
  friend class __bit_iterator<_Cp, true>;

public:
  using __container = typename _Cp::__self;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __bit_const_reference(const __bit_const_reference&) = default;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __bit_const_reference(const __bit_reference<_Cp>& __x) noexcept
      : __seg_(__x.__seg_),
        __mask_(__x.__mask_) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr operator bool() const noexcept {
    return static_cast<bool>(*__seg_ & __mask_);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __bit_iterator<_Cp, true> operator&() const noexcept {
    return __bit_iterator<_Cp, true>(__seg_, static_cast<unsigned>(std::__libcpp_ctz(__mask_)));
  }

private:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr explicit __bit_const_reference(
      __storage_pointer __s, __storage_type __m) noexcept
      : __seg_(__s),
        __mask_(__m) {}

  __bit_const_reference& operator=(const __bit_const_reference&) = delete;
};



template <bool _FillVal, class _Cp>
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
__fill_n(__bit_iterator<_Cp, false> __first, typename _Cp::size_type __n) {
  using _It = __bit_iterator<_Cp, false>;
  using __storage_type = typename _It::__storage_type;

  const int __bits_per_word = _It::__bits_per_word;

  if (__first.__ctz_ != 0) {
    __storage_type __clz_f = static_cast<__storage_type>(__bits_per_word - __first.__ctz_);
    __storage_type __dn = std::min(__clz_f, __n);
    __storage_type __m = (~__storage_type(0) << __first.__ctz_) & (~__storage_type(0) >> (__clz_f - __dn));
    if (_FillVal)
      *__first.__seg_ |= __m;
    else
      *__first.__seg_ &= ~__m;
    __n -= __dn;
    ++__first.__seg_;
  }

  __storage_type __nw = __n / __bits_per_word;
  std::fill_n(std::__to_address(__first.__seg_), __nw, _FillVal ? static_cast<__storage_type>(-1) : 0);
  __n -= __nw * __bits_per_word;

  if (__n > 0) {
    __first.__seg_ += __nw;
    __storage_type __m = ~__storage_type(0) >> (__bits_per_word - __n);
    if (_FillVal)
      *__first.__seg_ |= __m;
    else
      *__first.__seg_ &= ~__m;
  }
}

template <class _Cp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
fill_n(__bit_iterator<_Cp, false> __first, typename _Cp::size_type __n, bool __value) {
  if (__n > 0) {
    if (__value)
      std::__fill_n<true>(__first, __n);
    else
      std::__fill_n<false>(__first, __n);
  }
}



template <class _Cp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
fill(__bit_iterator<_Cp, false> __first, __bit_iterator<_Cp, false> __last, bool __value) {
  std::fill_n(__first, static_cast<typename _Cp::size_type>(__last - __first), __value);
}



template <class _Cp, bool _IsConst>
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __bit_iterator<_Cp, false> __copy_aligned(
    __bit_iterator<_Cp, _IsConst> __first, __bit_iterator<_Cp, _IsConst> __last, __bit_iterator<_Cp, false> __result) {
  using _In = __bit_iterator<_Cp, _IsConst>;
  using difference_type = typename _In::difference_type;
  using __storage_type = typename _In::__storage_type;

  const int __bits_per_word = _In::__bits_per_word;
  difference_type __n = __last - __first;
  if (__n > 0) {

    if (__first.__ctz_ != 0) {
      unsigned __clz = __bits_per_word - __first.__ctz_;
      difference_type __dn = std::min(static_cast<difference_type>(__clz), __n);
      __n -= __dn;
      __storage_type __m = (~__storage_type(0) << __first.__ctz_) & (~__storage_type(0) >> (__clz - __dn));
      __storage_type __b = *__first.__seg_ & __m;
      *__result.__seg_ &= ~__m;
      *__result.__seg_ |= __b;
      __result.__seg_ += (__dn + __result.__ctz_) / __bits_per_word;
      __result.__ctz_ = static_cast<unsigned>((__dn + __result.__ctz_) % __bits_per_word);
      ++__first.__seg_;

    }


    __storage_type __nw = __n / __bits_per_word;
    std::copy_n(std::__to_address(__first.__seg_), __nw, std::__to_address(__result.__seg_));
    __n -= __nw * __bits_per_word;
    __result.__seg_ += __nw;

    if (__n > 0) {
      __first.__seg_ += __nw;
      __storage_type __m = ~__storage_type(0) >> (__bits_per_word - __n);
      __storage_type __b = *__first.__seg_ & __m;
      *__result.__seg_ &= ~__m;
      *__result.__seg_ |= __b;
      __result.__ctz_ = static_cast<unsigned>(__n);
    }
  }
  return __result;
}

template <class _Cp, bool _IsConst>
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __bit_iterator<_Cp, false> __copy_unaligned(
    __bit_iterator<_Cp, _IsConst> __first, __bit_iterator<_Cp, _IsConst> __last, __bit_iterator<_Cp, false> __result) {
  using _In = __bit_iterator<_Cp, _IsConst>;
  using difference_type = typename _In::difference_type;
  using __storage_type = typename _In::__storage_type;

  const int __bits_per_word = _In::__bits_per_word;
  difference_type __n = __last - __first;
  if (__n > 0) {

    if (__first.__ctz_ != 0) {
      unsigned __clz_f = __bits_per_word - __first.__ctz_;
      difference_type __dn = std::min(static_cast<difference_type>(__clz_f), __n);
      __n -= __dn;
      __storage_type __m = (~__storage_type(0) << __first.__ctz_) & (~__storage_type(0) >> (__clz_f - __dn));
      __storage_type __b = *__first.__seg_ & __m;
      unsigned __clz_r = __bits_per_word - __result.__ctz_;
      __storage_type __ddn = std::min<__storage_type>(__dn, __clz_r);
      __m = (~__storage_type(0) << __result.__ctz_) & (~__storage_type(0) >> (__clz_r - __ddn));
      *__result.__seg_ &= ~__m;
      if (__result.__ctz_ > __first.__ctz_)
        *__result.__seg_ |= __b << (__result.__ctz_ - __first.__ctz_);
      else
        *__result.__seg_ |= __b >> (__first.__ctz_ - __result.__ctz_);
      __result.__seg_ += (__ddn + __result.__ctz_) / __bits_per_word;
      __result.__ctz_ = static_cast<unsigned>((__ddn + __result.__ctz_) % __bits_per_word);
      __dn -= __ddn;
      if (__dn > 0) {
        __m = ~__storage_type(0) >> (__bits_per_word - __dn);
        *__result.__seg_ &= ~__m;
        *__result.__seg_ |= __b >> (__first.__ctz_ + __ddn);
        __result.__ctz_ = static_cast<unsigned>(__dn);
      }
      ++__first.__seg_;

    }


    unsigned __clz_r = __bits_per_word - __result.__ctz_;
    __storage_type __m = ~__storage_type(0) << __result.__ctz_;
    for (; __n >= __bits_per_word; __n -= __bits_per_word, ++__first.__seg_) {
      __storage_type __b = *__first.__seg_;
      *__result.__seg_ &= ~__m;
      *__result.__seg_ |= __b << __result.__ctz_;
      ++__result.__seg_;
      *__result.__seg_ &= __m;
      *__result.__seg_ |= __b >> __clz_r;
    }

    if (__n > 0) {
      __m = ~__storage_type(0) >> (__bits_per_word - __n);
      __storage_type __b = *__first.__seg_ & __m;
      __storage_type __dn = std::min(__n, static_cast<difference_type>(__clz_r));
      __m = (~__storage_type(0) << __result.__ctz_) & (~__storage_type(0) >> (__clz_r - __dn));
      *__result.__seg_ &= ~__m;
      *__result.__seg_ |= __b << __result.__ctz_;
      __result.__seg_ += (__dn + __result.__ctz_) / __bits_per_word;
      __result.__ctz_ = static_cast<unsigned>((__dn + __result.__ctz_) % __bits_per_word);
      __n -= __dn;
      if (__n > 0) {
        __m = ~__storage_type(0) >> (__bits_per_word - __n);
        *__result.__seg_ &= ~__m;
        *__result.__seg_ |= __b >> __dn;
        __result.__ctz_ = static_cast<unsigned>(__n);
      }
    }
  }
  return __result;
}

template <class _Cp, bool _IsConst>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __bit_iterator<_Cp, false>
copy(__bit_iterator<_Cp, _IsConst> __first, __bit_iterator<_Cp, _IsConst> __last, __bit_iterator<_Cp, false> __result) {
  if (__first.__ctz_ == __result.__ctz_)
    return std::__copy_aligned(__first, __last, __result);
  return std::__copy_unaligned(__first, __last, __result);
}



template <class _Cp, bool _IsConst>
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __bit_iterator<_Cp, false> __copy_backward_aligned(
    __bit_iterator<_Cp, _IsConst> __first, __bit_iterator<_Cp, _IsConst> __last, __bit_iterator<_Cp, false> __result) {
  using _In = __bit_iterator<_Cp, _IsConst>;
  using difference_type = typename _In::difference_type;
  using __storage_type = typename _In::__storage_type;

  const int __bits_per_word = _In::__bits_per_word;
  difference_type __n = __last - __first;
  if (__n > 0) {

    if (__last.__ctz_ != 0) {
      difference_type __dn = std::min(static_cast<difference_type>(__last.__ctz_), __n);
      __n -= __dn;
      unsigned __clz = __bits_per_word - __last.__ctz_;
      __storage_type __m = (~__storage_type(0) << (__last.__ctz_ - __dn)) & (~__storage_type(0) >> __clz);
      __storage_type __b = *__last.__seg_ & __m;
      *__result.__seg_ &= ~__m;
      *__result.__seg_ |= __b;
      __result.__ctz_ = static_cast<unsigned>(((-__dn & (__bits_per_word - 1)) + __result.__ctz_) % __bits_per_word);

    }



    __storage_type __nw = __n / __bits_per_word;
    __result.__seg_ -= __nw;
    __last.__seg_ -= __nw;
    std::copy_n(std::__to_address(__last.__seg_), __nw, std::__to_address(__result.__seg_));
    __n -= __nw * __bits_per_word;

    if (__n > 0) {
      __storage_type __m = ~__storage_type(0) << (__bits_per_word - __n);
      __storage_type __b = *--__last.__seg_ & __m;
      *--__result.__seg_ &= ~__m;
      *__result.__seg_ |= __b;
      __result.__ctz_ = static_cast<unsigned>(-__n & (__bits_per_word - 1));
    }
  }
  return __result;
}

template <class _Cp, bool _IsConst>
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __bit_iterator<_Cp, false> __copy_backward_unaligned(
    __bit_iterator<_Cp, _IsConst> __first, __bit_iterator<_Cp, _IsConst> __last, __bit_iterator<_Cp, false> __result) {
  using _In = __bit_iterator<_Cp, _IsConst>;
  using difference_type = typename _In::difference_type;
  using __storage_type = typename _In::__storage_type;

  const int __bits_per_word = _In::__bits_per_word;
  difference_type __n = __last - __first;
  if (__n > 0) {

    if (__last.__ctz_ != 0) {
      difference_type __dn = std::min(static_cast<difference_type>(__last.__ctz_), __n);
      __n -= __dn;
      unsigned __clz_l = __bits_per_word - __last.__ctz_;
      __storage_type __m = (~__storage_type(0) << (__last.__ctz_ - __dn)) & (~__storage_type(0) >> __clz_l);
      __storage_type __b = *__last.__seg_ & __m;
      unsigned __clz_r = __bits_per_word - __result.__ctz_;
      __storage_type __ddn = std::min(__dn, static_cast<difference_type>(__result.__ctz_));
      if (__ddn > 0) {
        __m = (~__storage_type(0) << (__result.__ctz_ - __ddn)) & (~__storage_type(0) >> __clz_r);
        *__result.__seg_ &= ~__m;
        if (__result.__ctz_ > __last.__ctz_)
          *__result.__seg_ |= __b << (__result.__ctz_ - __last.__ctz_);
        else
          *__result.__seg_ |= __b >> (__last.__ctz_ - __result.__ctz_);
        __result.__ctz_ = static_cast<unsigned>(((-__ddn & (__bits_per_word - 1)) + __result.__ctz_) % __bits_per_word);
        __dn -= __ddn;
      }
      if (__dn > 0) {

        --__result.__seg_;
        __result.__ctz_ = static_cast<unsigned>(-__dn & (__bits_per_word - 1));
        __m = ~__storage_type(0) << __result.__ctz_;
        *__result.__seg_ &= ~__m;
        __last.__ctz_ -= __dn + __ddn;
        *__result.__seg_ |= __b << (__result.__ctz_ - __last.__ctz_);
      }

    }



    unsigned __clz_r = __bits_per_word - __result.__ctz_;
    __storage_type __m = ~__storage_type(0) >> __clz_r;
    for (; __n >= __bits_per_word; __n -= __bits_per_word) {
      __storage_type __b = *--__last.__seg_;
      *__result.__seg_ &= ~__m;
      *__result.__seg_ |= __b >> __clz_r;
      *--__result.__seg_ &= __m;
      *__result.__seg_ |= __b << __result.__ctz_;
    }

    if (__n > 0) {
      __m = ~__storage_type(0) << (__bits_per_word - __n);
      __storage_type __b = *--__last.__seg_ & __m;
      __clz_r = __bits_per_word - __result.__ctz_;
      __storage_type __dn = std::min(__n, static_cast<difference_type>(__result.__ctz_));
      __m = (~__storage_type(0) << (__result.__ctz_ - __dn)) & (~__storage_type(0) >> __clz_r);
      *__result.__seg_ &= ~__m;
      *__result.__seg_ |= __b >> (__bits_per_word - __result.__ctz_);
      __result.__ctz_ = static_cast<unsigned>(((-__dn & (__bits_per_word - 1)) + __result.__ctz_) % __bits_per_word);
      __n -= __dn;
      if (__n > 0) {

        --__result.__seg_;
        __result.__ctz_ = static_cast<unsigned>(-__n & (__bits_per_word - 1));
        __m = ~__storage_type(0) << __result.__ctz_;
        *__result.__seg_ &= ~__m;
        *__result.__seg_ |= __b << (__result.__ctz_ - (__bits_per_word - __n - __dn));
      }
    }
  }
  return __result;
}

template <class _Cp, bool _IsConst>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __bit_iterator<_Cp, false> copy_backward(
    __bit_iterator<_Cp, _IsConst> __first, __bit_iterator<_Cp, _IsConst> __last, __bit_iterator<_Cp, false> __result) {
  if (__last.__ctz_ == __result.__ctz_)
    return std::__copy_backward_aligned(__first, __last, __result);
  return std::__copy_backward_unaligned(__first, __last, __result);
}



template <class _Cp, bool _IsConst>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __bit_iterator<_Cp, false>
move(__bit_iterator<_Cp, _IsConst> __first, __bit_iterator<_Cp, _IsConst> __last, __bit_iterator<_Cp, false> __result) {
  return std::copy(__first, __last, __result);
}



template <class _Cp, bool _IsConst>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __bit_iterator<_Cp, false> move_backward(
    __bit_iterator<_Cp, _IsConst> __first, __bit_iterator<_Cp, _IsConst> __last, __bit_iterator<_Cp, false> __result) {
  return std::copy_backward(__first, __last, __result);
}



template <class _Cl, class _Cr>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __bit_iterator<_Cr, false> __swap_ranges_aligned(
    __bit_iterator<_Cl, false> __first, __bit_iterator<_Cl, false> __last, __bit_iterator<_Cr, false> __result) {
  using _I1 = __bit_iterator<_Cl, false>;
  using difference_type = typename _I1::difference_type;
  using __storage_type = typename _I1::__storage_type;

  const int __bits_per_word = _I1::__bits_per_word;
  difference_type __n = __last - __first;
  if (__n > 0) {

    if (__first.__ctz_ != 0) {
      unsigned __clz = __bits_per_word - __first.__ctz_;
      difference_type __dn = std::min(static_cast<difference_type>(__clz), __n);
      __n -= __dn;
      __storage_type __m = (~__storage_type(0) << __first.__ctz_) & (~__storage_type(0) >> (__clz - __dn));
      __storage_type __b1 = *__first.__seg_ & __m;
      *__first.__seg_ &= ~__m;
      __storage_type __b2 = *__result.__seg_ & __m;
      *__result.__seg_ &= ~__m;
      *__result.__seg_ |= __b1;
      *__first.__seg_ |= __b2;
      __result.__seg_ += (__dn + __result.__ctz_) / __bits_per_word;
      __result.__ctz_ = static_cast<unsigned>((__dn + __result.__ctz_) % __bits_per_word);
      ++__first.__seg_;

    }


    for (; __n >= __bits_per_word; __n -= __bits_per_word, ++__first.__seg_, ++__result.__seg_)
      swap(*__first.__seg_, *__result.__seg_);

    if (__n > 0) {
      __storage_type __m = ~__storage_type(0) >> (__bits_per_word - __n);
      __storage_type __b1 = *__first.__seg_ & __m;
      *__first.__seg_ &= ~__m;
      __storage_type __b2 = *__result.__seg_ & __m;
      *__result.__seg_ &= ~__m;
      *__result.__seg_ |= __b1;
      *__first.__seg_ |= __b2;
      __result.__ctz_ = static_cast<unsigned>(__n);
    }
  }
  return __result;
}

template <class _Cl, class _Cr>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __bit_iterator<_Cr, false> __swap_ranges_unaligned(
    __bit_iterator<_Cl, false> __first, __bit_iterator<_Cl, false> __last, __bit_iterator<_Cr, false> __result) {
  using _I1 = __bit_iterator<_Cl, false>;
  using difference_type = typename _I1::difference_type;
  using __storage_type = typename _I1::__storage_type;

  const int __bits_per_word = _I1::__bits_per_word;
  difference_type __n = __last - __first;
  if (__n > 0) {

    if (__first.__ctz_ != 0) {
      unsigned __clz_f = __bits_per_word - __first.__ctz_;
      difference_type __dn = std::min(static_cast<difference_type>(__clz_f), __n);
      __n -= __dn;
      __storage_type __m = (~__storage_type(0) << __first.__ctz_) & (~__storage_type(0) >> (__clz_f - __dn));
      __storage_type __b1 = *__first.__seg_ & __m;
      *__first.__seg_ &= ~__m;
      unsigned __clz_r = __bits_per_word - __result.__ctz_;
      __storage_type __ddn = std::min<__storage_type>(__dn, __clz_r);
      __m = (~__storage_type(0) << __result.__ctz_) & (~__storage_type(0) >> (__clz_r - __ddn));
      __storage_type __b2 = *__result.__seg_ & __m;
      *__result.__seg_ &= ~__m;
      if (__result.__ctz_ > __first.__ctz_) {
        unsigned __s = __result.__ctz_ - __first.__ctz_;
        *__result.__seg_ |= __b1 << __s;
        *__first.__seg_ |= __b2 >> __s;
      } else {
        unsigned __s = __first.__ctz_ - __result.__ctz_;
        *__result.__seg_ |= __b1 >> __s;
        *__first.__seg_ |= __b2 << __s;
      }
      __result.__seg_ += (__ddn + __result.__ctz_) / __bits_per_word;
      __result.__ctz_ = static_cast<unsigned>((__ddn + __result.__ctz_) % __bits_per_word);
      __dn -= __ddn;
      if (__dn > 0) {
        __m = ~__storage_type(0) >> (__bits_per_word - __dn);
        __b2 = *__result.__seg_ & __m;
        *__result.__seg_ &= ~__m;
        unsigned __s = __first.__ctz_ + __ddn;
        *__result.__seg_ |= __b1 >> __s;
        *__first.__seg_ |= __b2 << __s;
        __result.__ctz_ = static_cast<unsigned>(__dn);
      }
      ++__first.__seg_;

    }


    __storage_type __m = ~__storage_type(0) << __result.__ctz_;
    unsigned __clz_r = __bits_per_word - __result.__ctz_;
    for (; __n >= __bits_per_word; __n -= __bits_per_word, ++__first.__seg_) {
      __storage_type __b1 = *__first.__seg_;
      __storage_type __b2 = *__result.__seg_ & __m;
      *__result.__seg_ &= ~__m;
      *__result.__seg_ |= __b1 << __result.__ctz_;
      *__first.__seg_ = __b2 >> __result.__ctz_;
      ++__result.__seg_;
      __b2 = *__result.__seg_ & ~__m;
      *__result.__seg_ &= __m;
      *__result.__seg_ |= __b1 >> __clz_r;
      *__first.__seg_ |= __b2 << __clz_r;
    }

    if (__n > 0) {
      __m = ~__storage_type(0) >> (__bits_per_word - __n);
      __storage_type __b1 = *__first.__seg_ & __m;
      *__first.__seg_ &= ~__m;
      __storage_type __dn = std::min<__storage_type>(__n, __clz_r);
      __m = (~__storage_type(0) << __result.__ctz_) & (~__storage_type(0) >> (__clz_r - __dn));
      __storage_type __b2 = *__result.__seg_ & __m;
      *__result.__seg_ &= ~__m;
      *__result.__seg_ |= __b1 << __result.__ctz_;
      *__first.__seg_ |= __b2 >> __result.__ctz_;
      __result.__seg_ += (__dn + __result.__ctz_) / __bits_per_word;
      __result.__ctz_ = static_cast<unsigned>((__dn + __result.__ctz_) % __bits_per_word);
      __n -= __dn;
      if (__n > 0) {
        __m = ~__storage_type(0) >> (__bits_per_word - __n);
        __b2 = *__result.__seg_ & __m;
        *__result.__seg_ &= ~__m;
        *__result.__seg_ |= __b1 >> __dn;
        *__first.__seg_ |= __b2 << __dn;
        __result.__ctz_ = static_cast<unsigned>(__n);
      }
    }
  }
  return __result;
}

template <class _Cl, class _Cr>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __bit_iterator<_Cr, false> swap_ranges(
    __bit_iterator<_Cl, false> __first1, __bit_iterator<_Cl, false> __last1, __bit_iterator<_Cr, false> __first2) {
  if (__first1.__ctz_ == __first2.__ctz_)
    return std::__swap_ranges_aligned(__first1, __last1, __first2);
  return std::__swap_ranges_unaligned(__first1, __last1, __first2);
}



template <class _Cp>
struct __bit_array {
  using difference_type = typename _Cp::difference_type;
  using __storage_type = typename _Cp::__storage_type;
  using __storage_pointer = typename _Cp::__storage_pointer;
  using iterator = typename _Cp::iterator;

  static const unsigned __bits_per_word = _Cp::__bits_per_word;
  static const unsigned _Np = 4;

  difference_type __size_;
  __storage_type __word_[_Np];

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static difference_type capacity() {
    return static_cast<difference_type>(_Np * __bits_per_word);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit __bit_array(difference_type __s) : __size_(__s) {
    if (__libcpp_is_constant_evaluated()) {
      for (size_t __i = 0; __i != __bit_array<_Cp>::_Np; ++__i)
        std::__construct_at(__word_ + __i, 0);
    }
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iterator begin() {
    return iterator(pointer_traits<__storage_pointer>::pointer_to(__word_[0]), 0);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iterator end() {
    return iterator(pointer_traits<__storage_pointer>::pointer_to(__word_[0]) + __size_ / __bits_per_word,
                    static_cast<unsigned>(__size_ % __bits_per_word));
  }
};

template <class _Cp>
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __bit_iterator<_Cp, false>
rotate(__bit_iterator<_Cp, false> __first, __bit_iterator<_Cp, false> __middle, __bit_iterator<_Cp, false> __last) {
  using _I1 = __bit_iterator<_Cp, false>;
  using difference_type = typename _I1::difference_type;

  difference_type __d1 = __middle - __first;
  difference_type __d2 = __last - __middle;
  _I1 __r = __first + __d2;
  while (__d1 != 0 && __d2 != 0) {
    if (__d1 <= __d2) {
      if (__d1 <= __bit_array<_Cp>::capacity()) {
        __bit_array<_Cp> __b(__d1);
        std::copy(__first, __middle, __b.begin());
        std::copy(__b.begin(), __b.end(), std::copy(__middle, __last, __first));
        break;
      } else {
        __bit_iterator<_Cp, false> __mp = std::swap_ranges(__first, __middle, __middle);
        __first = __middle;
        __middle = __mp;
        __d2 -= __d1;
      }
    } else {
      if (__d2 <= __bit_array<_Cp>::capacity()) {
        __bit_array<_Cp> __b(__d2);
        std::copy(__middle, __last, __b.begin());
        std::copy_backward(__b.begin(), __b.end(), std::copy_backward(__first, __middle, __last));
        break;
      } else {
        __bit_iterator<_Cp, false> __mp = __first + __d2;
        std::swap_ranges(__first, __mp, __middle);
        __first = __mp;
        __d1 -= __d2;
      }
    }
  }
  return __r;
}



template <class _Cp, bool _IC1, bool _IC2>
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool __equal_unaligned(
    __bit_iterator<_Cp, _IC1> __first1, __bit_iterator<_Cp, _IC1> __last1, __bit_iterator<_Cp, _IC2> __first2) {
  using _It = __bit_iterator<_Cp, _IC1>;
  using difference_type = typename _It::difference_type;
  using __storage_type = typename _It::__storage_type;

  const int __bits_per_word = _It::__bits_per_word;
  difference_type __n = __last1 - __first1;
  if (__n > 0) {

    if (__first1.__ctz_ != 0) {
      unsigned __clz_f = __bits_per_word - __first1.__ctz_;
      difference_type __dn = std::min(static_cast<difference_type>(__clz_f), __n);
      __n -= __dn;
      __storage_type __m = (~__storage_type(0) << __first1.__ctz_) & (~__storage_type(0) >> (__clz_f - __dn));
      __storage_type __b = *__first1.__seg_ & __m;
      unsigned __clz_r = __bits_per_word - __first2.__ctz_;
      __storage_type __ddn = std::min<__storage_type>(__dn, __clz_r);
      __m = (~__storage_type(0) << __first2.__ctz_) & (~__storage_type(0) >> (__clz_r - __ddn));
      if (__first2.__ctz_ > __first1.__ctz_) {
        if ((*__first2.__seg_ & __m) != (__b << (__first2.__ctz_ - __first1.__ctz_)))
          return false;
      } else {
        if ((*__first2.__seg_ & __m) != (__b >> (__first1.__ctz_ - __first2.__ctz_)))
          return false;
      }
      __first2.__seg_ += (__ddn + __first2.__ctz_) / __bits_per_word;
      __first2.__ctz_ = static_cast<unsigned>((__ddn + __first2.__ctz_) % __bits_per_word);
      __dn -= __ddn;
      if (__dn > 0) {
        __m = ~__storage_type(0) >> (__bits_per_word - __dn);
        if ((*__first2.__seg_ & __m) != (__b >> (__first1.__ctz_ + __ddn)))
          return false;
        __first2.__ctz_ = static_cast<unsigned>(__dn);
      }
      ++__first1.__seg_;

    }


    unsigned __clz_r = __bits_per_word - __first2.__ctz_;
    __storage_type __m = ~__storage_type(0) << __first2.__ctz_;
    for (; __n >= __bits_per_word; __n -= __bits_per_word, ++__first1.__seg_) {
      __storage_type __b = *__first1.__seg_;
      if ((*__first2.__seg_ & __m) != (__b << __first2.__ctz_))
        return false;
      ++__first2.__seg_;
      if ((*__first2.__seg_ & ~__m) != (__b >> __clz_r))
        return false;
    }

    if (__n > 0) {
      __m = ~__storage_type(0) >> (__bits_per_word - __n);
      __storage_type __b = *__first1.__seg_ & __m;
      __storage_type __dn = std::min(__n, static_cast<difference_type>(__clz_r));
      __m = (~__storage_type(0) << __first2.__ctz_) & (~__storage_type(0) >> (__clz_r - __dn));
      if ((*__first2.__seg_ & __m) != (__b << __first2.__ctz_))
        return false;
      __first2.__seg_ += (__dn + __first2.__ctz_) / __bits_per_word;
      __first2.__ctz_ = static_cast<unsigned>((__dn + __first2.__ctz_) % __bits_per_word);
      __n -= __dn;
      if (__n > 0) {
        __m = ~__storage_type(0) >> (__bits_per_word - __n);
        if ((*__first2.__seg_ & __m) != (__b >> __dn))
          return false;
      }
    }
  }
  return true;
}

template <class _Cp, bool _IC1, bool _IC2>
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool __equal_aligned(
    __bit_iterator<_Cp, _IC1> __first1, __bit_iterator<_Cp, _IC1> __last1, __bit_iterator<_Cp, _IC2> __first2) {
  using _It = __bit_iterator<_Cp, _IC1>;
  using difference_type = typename _It::difference_type;
  using __storage_type = typename _It::__storage_type;

  const int __bits_per_word = _It::__bits_per_word;
  difference_type __n = __last1 - __first1;
  if (__n > 0) {

    if (__first1.__ctz_ != 0) {
      unsigned __clz = __bits_per_word - __first1.__ctz_;
      difference_type __dn = std::min(static_cast<difference_type>(__clz), __n);
      __n -= __dn;
      __storage_type __m = (~__storage_type(0) << __first1.__ctz_) & (~__storage_type(0) >> (__clz - __dn));
      if ((*__first2.__seg_ & __m) != (*__first1.__seg_ & __m))
        return false;
      ++__first2.__seg_;
      ++__first1.__seg_;


    }



    for (; __n >= __bits_per_word; __n -= __bits_per_word, ++__first1.__seg_, ++__first2.__seg_)
      if (*__first2.__seg_ != *__first1.__seg_)
        return false;

    if (__n > 0) {
      __storage_type __m = ~__storage_type(0) >> (__bits_per_word - __n);
      if ((*__first2.__seg_ & __m) != (*__first1.__seg_ & __m))
        return false;
    }
  }
  return true;
}

template <class _Cp, bool _IC1, bool _IC2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
equal(__bit_iterator<_Cp, _IC1> __first1, __bit_iterator<_Cp, _IC1> __last1, __bit_iterator<_Cp, _IC2> __first2) {
  if (__first1.__ctz_ == __first2.__ctz_)
    return std::__equal_aligned(__first1, __last1, __first2);
  return std::__equal_unaligned(__first1, __last1, __first2);
}

template <class _Cp, bool _IsConst, typename _Cp::__storage_type>
class __bit_iterator {
public:
  using difference_type = typename _Cp::difference_type;
  using value_type = bool;
  using pointer = __bit_iterator;



  using reference = __conditional_t<_IsConst, bool, __bit_reference<_Cp> >;

  using iterator_category = random_access_iterator_tag;

private:
  using __storage_type = typename _Cp::__storage_type;
  using __storage_pointer =
      __conditional_t<_IsConst, typename _Cp::__const_storage_pointer, typename _Cp::__storage_pointer>;

  static const unsigned __bits_per_word = _Cp::__bits_per_word;

  __storage_pointer __seg_;
  unsigned __ctz_;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __bit_iterator() noexcept

      : __seg_(nullptr),
        __ctz_(0)

  {
  }






  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __bit_iterator(const __bit_iterator<_Cp, false>& __it) noexcept
      : __seg_(__it.__seg_),
        __ctz_(__it.__ctz_) {}






  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __bit_iterator&
  operator=(const _If<_IsConst, struct __private_nat, __bit_iterator>& __it) {
    __seg_ = __it.__seg_;
    __ctz_ = __it.__ctz_;
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) reference operator*() const noexcept {
    return __conditional_t<_IsConst, __bit_const_reference<_Cp>, __bit_reference<_Cp> >(
        __seg_, __storage_type(1) << __ctz_);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __bit_iterator& operator++() {
    if (__ctz_ != __bits_per_word - 1)
      ++__ctz_;
    else {
      __ctz_ = 0;
      ++__seg_;
    }
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __bit_iterator operator++(int) {
    __bit_iterator __tmp = *this;
    ++(*this);
    return __tmp;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __bit_iterator& operator--() {
    if (__ctz_ != 0)
      --__ctz_;
    else {
      __ctz_ = __bits_per_word - 1;
      --__seg_;
    }
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __bit_iterator operator--(int) {
    __bit_iterator __tmp = *this;
    --(*this);
    return __tmp;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __bit_iterator& operator+=(difference_type __n) {
    if (__n >= 0)
      __seg_ += (__n + __ctz_) / __bits_per_word;
    else
      __seg_ += static_cast<difference_type>(__n - __bits_per_word + __ctz_ + 1) /
                static_cast<difference_type>(__bits_per_word);
    __n &= (__bits_per_word - 1);
    __ctz_ = static_cast<unsigned>((__n + __ctz_) % __bits_per_word);
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __bit_iterator& operator-=(difference_type __n) {
    return *this += -__n;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __bit_iterator operator+(difference_type __n) const {
    __bit_iterator __t(*this);
    __t += __n;
    return __t;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __bit_iterator operator-(difference_type __n) const {
    __bit_iterator __t(*this);
    __t -= __n;
    return __t;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) friend __bit_iterator
  operator+(difference_type __n, const __bit_iterator& __it) {
    return __it + __n;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) friend difference_type
  operator-(const __bit_iterator& __x, const __bit_iterator& __y) {
    return (__x.__seg_ - __y.__seg_) * __bits_per_word + __x.__ctz_ - __y.__ctz_;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) reference operator[](difference_type __n) const {
    return *(*this + __n);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) friend bool
  operator==(const __bit_iterator& __x, const __bit_iterator& __y) {
    return __x.__seg_ == __y.__seg_ && __x.__ctz_ == __y.__ctz_;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) friend bool
  operator!=(const __bit_iterator& __x, const __bit_iterator& __y) {
    return !(__x == __y);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) friend bool
  operator<(const __bit_iterator& __x, const __bit_iterator& __y) {
    return __x.__seg_ < __y.__seg_ || (__x.__seg_ == __y.__seg_ && __x.__ctz_ < __y.__ctz_);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) friend bool
  operator>(const __bit_iterator& __x, const __bit_iterator& __y) {
    return __y < __x;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) friend bool
  operator<=(const __bit_iterator& __x, const __bit_iterator& __y) {
    return !(__y < __x);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) friend bool
  operator>=(const __bit_iterator& __x, const __bit_iterator& __y) {
    return !(__x < __y);
  }

private:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit __bit_iterator(
      __storage_pointer __s, unsigned __ctz) noexcept
      : __seg_(__s),
        __ctz_(__ctz) {}

  friend typename _Cp::__self;

  friend class __bit_reference<_Cp>;
  friend class __bit_const_reference<_Cp>;
  friend class __bit_iterator<_Cp, true>;
  template <class _Dp>
  friend struct __bit_array;
  template <bool _FillVal, class _Dp>
                                friend void __fill_n(__bit_iterator<_Dp, false> __first, typename _Dp::size_type __n);

  template <class _Dp, bool _IC>
                                friend __bit_iterator<_Dp, false> __copy_aligned(
      __bit_iterator<_Dp, _IC> __first, __bit_iterator<_Dp, _IC> __last, __bit_iterator<_Dp, false> __result);
  template <class _Dp, bool _IC>
                                friend __bit_iterator<_Dp, false> __copy_unaligned(
      __bit_iterator<_Dp, _IC> __first, __bit_iterator<_Dp, _IC> __last, __bit_iterator<_Dp, false> __result);
  template <class _Dp, bool _IC>
                                friend __bit_iterator<_Dp, false>
  copy(__bit_iterator<_Dp, _IC> __first, __bit_iterator<_Dp, _IC> __last, __bit_iterator<_Dp, false> __result);
  template <class _Dp, bool _IC>
                                friend __bit_iterator<_Dp, false> __copy_backward_aligned(
      __bit_iterator<_Dp, _IC> __first, __bit_iterator<_Dp, _IC> __last, __bit_iterator<_Dp, false> __result);
  template <class _Dp, bool _IC>
                                friend __bit_iterator<_Dp, false> __copy_backward_unaligned(
      __bit_iterator<_Dp, _IC> __first, __bit_iterator<_Dp, _IC> __last, __bit_iterator<_Dp, false> __result);
  template <class _Dp, bool _IC>
                                friend __bit_iterator<_Dp, false>
  copy_backward(__bit_iterator<_Dp, _IC> __first, __bit_iterator<_Dp, _IC> __last, __bit_iterator<_Dp, false> __result);
  template <class _Cl, class _Cr>
  friend __bit_iterator<_Cr, false>
      __swap_ranges_aligned(__bit_iterator<_Cl, false>, __bit_iterator<_Cl, false>, __bit_iterator<_Cr, false>);
  template <class _Cl, class _Cr>
  friend __bit_iterator<_Cr, false>
      __swap_ranges_unaligned(__bit_iterator<_Cl, false>, __bit_iterator<_Cl, false>, __bit_iterator<_Cr, false>);
  template <class _Cl, class _Cr>
  friend __bit_iterator<_Cr, false>
      swap_ranges(__bit_iterator<_Cl, false>, __bit_iterator<_Cl, false>, __bit_iterator<_Cr, false>);
  template <class _Dp>
                                friend __bit_iterator<_Dp, false>
      rotate(__bit_iterator<_Dp, false>, __bit_iterator<_Dp, false>, __bit_iterator<_Dp, false>);
  template <class _Dp, bool _IC1, bool _IC2>
                                friend bool
      __equal_aligned(__bit_iterator<_Dp, _IC1>, __bit_iterator<_Dp, _IC1>, __bit_iterator<_Dp, _IC2>);
  template <class _Dp, bool _IC1, bool _IC2>
                                friend bool
      __equal_unaligned(__bit_iterator<_Dp, _IC1>, __bit_iterator<_Dp, _IC1>, __bit_iterator<_Dp, _IC2>);
  template <class _Dp, bool _IC1, bool _IC2>
                                friend bool
      equal(__bit_iterator<_Dp, _IC1>, __bit_iterator<_Dp, _IC1>, __bit_iterator<_Dp, _IC2>);
  template <bool _ToFind, class _Dp, bool _IC>
                                friend __bit_iterator<_Dp, _IC>
      __find_bool(__bit_iterator<_Dp, _IC>, typename _Dp::size_type);
  template <bool _ToCount, class _Dp, bool _IC>
  friend typename __bit_iterator<_Dp, _IC>::difference_type __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
      __count_bool(__bit_iterator<_Dp, _IC>, typename _Dp::size_type);
};

}}
# 321 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\vector" 2 3


# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/enable_insertable.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/enable_insertable.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 33 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/enable_insertable.h" 3
}}
# 324 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\vector" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/formatter.h" 1 3
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/formatter.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/format_fwd.h" 1 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/format_fwd.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 37 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/format_fwd.h" 3
}}
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/formatter.h" 2 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/formatter.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 52 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/formatter.h" 3
}}
# 325 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\vector" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/formatter_bool.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/formatter_bool.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/concepts.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/concepts.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/format_parse_context.h" 1 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/format_parse_context.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/format_error.h" 1 3
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/format_error.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\stdexcept" 1 3
# 47 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\stdexcept" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__fwd/string.h" 1 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__fwd/string.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__fwd/memory_resource.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__fwd/memory_resource.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

namespace pmr {
template <class _ValueType>
class polymorphic_allocator;
}

}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__fwd/string.h" 2 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__fwd/string.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _CharT>
struct char_traits;
template <>
struct char_traits<char>;






template <>
struct char_traits<char16_t>;
template <>
struct char_traits<char32_t>;


template <>
struct char_traits<wchar_t>;


template <class _Tp>
class allocator;

template <class _CharT, class _Traits = char_traits<_CharT>, class _Allocator = allocator<_CharT> >
class basic_string;

using string = basic_string<char>;


using wstring = basic_string<wchar_t>;






using u16string = basic_string<char16_t>;
using u32string = basic_string<char32_t>;



namespace pmr {
template <class _CharT, class _Traits = char_traits<_CharT>>
using basic_string = std::basic_string<_CharT, _Traits, polymorphic_allocator<_CharT>>;

using string = basic_string<char>;


using wstring = basic_string<wchar_t>;






using u16string = basic_string<char16_t>;
using u32string = basic_string<char32_t>;
}




template <class _CharT, class _Traits, class _Allocator>
class __attribute__((__preferred_name__(string)))

      __attribute__((__preferred_name__(wstring)))




      __attribute__((__preferred_name__(u16string)))
      __attribute__((__preferred_name__(u32string)))

      __attribute__((__preferred_name__(pmr::string)))

      __attribute__((__preferred_name__(pmr::wstring)))




      __attribute__((__preferred_name__(pmr::u16string)))
      __attribute__((__preferred_name__(pmr::u32string)))

      basic_string;


}}
# 48 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\stdexcept" 2 3
# 52 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\stdexcept" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {


class __attribute__((__visibility__("hidden"))) __libcpp_refstring {
  const char* __imp_;

  bool __uses_refcount() const;

public:
  explicit __libcpp_refstring(const char* __msg);
  __libcpp_refstring(const __libcpp_refstring& __s) noexcept;
  __libcpp_refstring& operator=(const __libcpp_refstring& __s) noexcept;
  ~__libcpp_refstring();

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const char* c_str() const noexcept { return __imp_; }
};


}}

namespace std
{

class __attribute__((__visibility__("default"))) logic_error : public exception {


private:
  std::__libcpp_refstring __imp_;

public:
  explicit logic_error(const string&);
  explicit logic_error(const char*);

  logic_error(const logic_error&) noexcept;
  logic_error& operator=(const logic_error&) noexcept;

  ~logic_error() noexcept override;

  const char* what() const noexcept override;






};

class __attribute__((__visibility__("default"))) runtime_error : public exception {


private:
  std::__libcpp_refstring __imp_;

public:
  explicit runtime_error(const string&);
  explicit runtime_error(const char*);

  runtime_error(const runtime_error&) noexcept;
  runtime_error& operator=(const runtime_error&) noexcept;

  ~runtime_error() noexcept override;

  const char* what() const noexcept override;






};

class __attribute__((__visibility__("default"))) domain_error : public logic_error {
public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit domain_error(const string& __s) : logic_error(__s) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit domain_error(const char* __s) : logic_error(__s) {}


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) domain_error(const domain_error&) noexcept = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) domain_error& operator=(const domain_error&) noexcept = default;
  ~domain_error() noexcept override;

};

class __attribute__((__visibility__("default"))) invalid_argument : public logic_error {
public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit invalid_argument(const string& __s) : logic_error(__s) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit invalid_argument(const char* __s) : logic_error(__s) {}


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) invalid_argument(const invalid_argument&) noexcept = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) invalid_argument& operator=(const invalid_argument&) noexcept = default;
  ~invalid_argument() noexcept override;

};

class __attribute__((__visibility__("default"))) length_error : public logic_error {
public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit length_error(const string& __s) : logic_error(__s) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit length_error(const char* __s) : logic_error(__s) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) length_error(const length_error&) noexcept = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) length_error& operator=(const length_error&) noexcept = default;
  ~length_error() noexcept override;

};

class __attribute__((__visibility__("default"))) out_of_range : public logic_error {
public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit out_of_range(const string& __s) : logic_error(__s) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit out_of_range(const char* __s) : logic_error(__s) {}


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) out_of_range(const out_of_range&) noexcept = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) out_of_range& operator=(const out_of_range&) noexcept = default;
  ~out_of_range() noexcept override;

};

class __attribute__((__visibility__("default"))) range_error : public runtime_error {
public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit range_error(const string& __s) : runtime_error(__s) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit range_error(const char* __s) : runtime_error(__s) {}


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) range_error(const range_error&) noexcept = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) range_error& operator=(const range_error&) noexcept = default;
  ~range_error() noexcept override;

};

class __attribute__((__visibility__("default"))) overflow_error : public runtime_error {
public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit overflow_error(const string& __s) : runtime_error(__s) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit overflow_error(const char* __s) : runtime_error(__s) {}


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) overflow_error(const overflow_error&) noexcept = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) overflow_error& operator=(const overflow_error&) noexcept = default;
  ~overflow_error() noexcept override;

};

class __attribute__((__visibility__("default"))) underflow_error : public runtime_error {
public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit underflow_error(const string& __s) : runtime_error(__s) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit underflow_error(const char* __s) : runtime_error(__s) {}


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) underflow_error(const underflow_error&) noexcept = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) underflow_error& operator=(const underflow_error&) noexcept = default;
  ~underflow_error() noexcept override;

};

}

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {


[[noreturn]] __attribute__((__visibility__("default"))) void __throw_runtime_error(const char*);

[[noreturn]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __throw_logic_error(const char* __msg) {



  ::std::__libcpp_verbose_abort("logic_error was thrown in -fno-exceptions mode with message \"%s\"", __msg);

}

[[noreturn]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __throw_domain_error(const char* __msg) {



  ::std::__libcpp_verbose_abort("domain_error was thrown in -fno-exceptions mode with message \"%s\"", __msg);

}

[[noreturn]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __throw_invalid_argument(const char* __msg) {



  ::std::__libcpp_verbose_abort("invalid_argument was thrown in -fno-exceptions mode with message \"%s\"", __msg);

}

[[noreturn]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __throw_length_error(const char* __msg) {



  ::std::__libcpp_verbose_abort("length_error was thrown in -fno-exceptions mode with message \"%s\"", __msg);

}

[[noreturn]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __throw_out_of_range(const char* __msg) {



  ::std::__libcpp_verbose_abort("out_of_range was thrown in -fno-exceptions mode with message \"%s\"", __msg);

}

[[noreturn]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __throw_range_error(const char* __msg) {



  ::std::__libcpp_verbose_abort("range_error was thrown in -fno-exceptions mode with message \"%s\"", __msg);

}

[[noreturn]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __throw_overflow_error(const char* __msg) {



  ::std::__libcpp_verbose_abort("overflow_error was thrown in -fno-exceptions mode with message \"%s\"", __msg);

}

[[noreturn]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __throw_underflow_error(const char* __msg) {



  ::std::__libcpp_verbose_abort("underflow_error was thrown in -fno-exceptions mode with message \"%s\"", __msg);

}

}}



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\exception" 1 3
# 82 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\exception" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__exception/exception_ptr.h" 1 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__exception/exception_ptr.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__exception/operations.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__exception/operations.h" 3


namespace std {
# 29 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__exception/operations.h" 3
using terminate_handler = void (*)();
__attribute__((__visibility__("default"))) terminate_handler set_terminate(terminate_handler) noexcept;
__attribute__((__visibility__("default"))) terminate_handler get_terminate() noexcept;

__attribute__((__visibility__("default"))) bool uncaught_exception() noexcept;
__attribute__((__visibility__("default"))) int uncaught_exceptions() noexcept;

class __attribute__((__visibility__("default"))) exception_ptr;

__attribute__((__visibility__("default"))) exception_ptr current_exception() noexcept;
[[noreturn]] __attribute__((__visibility__("default"))) void rethrow_exception(exception_ptr);
}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__exception/exception_ptr.h" 2 3






# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\typeinfo" 1 3
# 70 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\typeinfo" 3






namespace std
{
# 186 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\typeinfo" 3
struct __type_info_implementations {
  struct __string_impl_base {
    typedef const char* __type_name_t;
    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__always_inline__)) constexpr static const char*
    __type_name_to_string(__type_name_t __v) noexcept {
      return __v;
    }
    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__always_inline__)) constexpr static __type_name_t
    __string_to_type_name(const char* __v) noexcept {
      return __v;
    }
  };

  struct __unique_impl : __string_impl_base {
    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__always_inline__)) static size_t __hash(__type_name_t __v) noexcept {
      return reinterpret_cast<size_t>(__v);
    }
    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__always_inline__)) static bool __eq(__type_name_t __lhs, __type_name_t __rhs) noexcept {
      return __lhs == __rhs;
    }
    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__always_inline__)) static bool __lt(__type_name_t __lhs, __type_name_t __rhs) noexcept {
      return __lhs < __rhs;
    }
  };

  struct __non_unique_impl : __string_impl_base {
    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__always_inline__)) static size_t __hash(__type_name_t __ptr) noexcept {
      size_t __hash = 5381;
      while (unsigned char __c = static_cast<unsigned char>(*__ptr++))
        __hash = (__hash * 33) ^ __c;
      return __hash;
    }
    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__always_inline__)) static bool __eq(__type_name_t __lhs, __type_name_t __rhs) noexcept {
      return __lhs == __rhs || __builtin_strcmp(__lhs, __rhs) == 0;
    }
    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__always_inline__)) static bool __lt(__type_name_t __lhs, __type_name_t __rhs) noexcept {
      return __builtin_strcmp(__lhs, __rhs) < 0;
    }
  };

  struct __non_unique_arm_rtti_bit_impl {
    typedef uintptr_t __type_name_t;

    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__always_inline__)) static const char* __type_name_to_string(__type_name_t __v) noexcept {
      return reinterpret_cast<const char*>(__v & ~__non_unique_rtti_bit::value);
    }
    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__always_inline__)) static __type_name_t __string_to_type_name(const char* __v) noexcept {
      return reinterpret_cast<__type_name_t>(__v);
    }

    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__always_inline__)) static size_t __hash(__type_name_t __v) noexcept {
      if (__is_type_name_unique(__v))
        return __v;
      return __non_unique_impl::__hash(__type_name_to_string(__v));
    }
    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__always_inline__)) static bool __eq(__type_name_t __lhs, __type_name_t __rhs) noexcept {
      if (__lhs == __rhs)
        return true;
      if (__is_type_name_unique(__lhs) || __is_type_name_unique(__rhs))


        return false;
      return __builtin_strcmp(__type_name_to_string(__lhs), __type_name_to_string(__rhs)) == 0;
    }
    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__always_inline__)) static bool __lt(__type_name_t __lhs, __type_name_t __rhs) noexcept {
      if (__is_type_name_unique(__lhs) || __is_type_name_unique(__rhs))
        return __lhs < __rhs;
      return __builtin_strcmp(__type_name_to_string(__lhs), __type_name_to_string(__rhs)) < 0;
    }

  private:


    typedef integral_constant<__type_name_t, (1ULL << ((8 * sizeof(__type_name_t)) - 1))>
        __non_unique_rtti_bit;

    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static bool __is_type_name_unique(__type_name_t __lhs) noexcept {
      return !(__lhs & __non_unique_rtti_bit::value);
    }
  };

  typedef

      __unique_impl







          __impl;
};

class __attribute__((__visibility__("default"))) type_info {
  type_info& operator=(const type_info&);
  type_info(const type_info&);

protected:
  typedef __type_info_implementations::__impl __impl;

  __impl::__type_name_t __type_name;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit type_info(const char* __n) : __type_name(__impl::__string_to_type_name(__n)) {}

public:
  virtual ~type_info();

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const char* name() const noexcept { return __impl::__type_name_to_string(__type_name); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool before(const type_info& __arg) const noexcept {
    return __impl::__lt(__type_name, __arg.__type_name);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_t hash_code() const noexcept { return __impl::__hash(__type_name); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator==(const type_info& __arg) const noexcept {


    if (__libcpp_is_constant_evaluated()) {
      return this == &__arg;
    }
    return __impl::__eq(__type_name, __arg.__type_name);
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator!=(const type_info& __arg) const noexcept { return !operator==(__arg); }

};


class __attribute__((__visibility__("default"))) bad_cast : public exception {
public:
  bad_cast() noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bad_cast(const bad_cast&) noexcept = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bad_cast& operator=(const bad_cast&) noexcept = default;
  ~bad_cast() noexcept override;
  const char* what() const noexcept override;
};

class __attribute__((__visibility__("default"))) bad_typeid : public exception {
public:
  bad_typeid() noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bad_typeid(const bad_typeid&) noexcept = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bad_typeid& operator=(const bad_typeid&) noexcept = default;
  ~bad_typeid() noexcept override;
  const char* what() const noexcept override;
};

}
# 363 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\typeinfo" 3
namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
[[noreturn]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __throw_bad_cast() {



  ::std::__libcpp_verbose_abort("bad_cast was thrown in -fno-exceptions mode");

}
}}
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__exception/exception_ptr.h" 2 3
# 25 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__exception/exception_ptr.h" 3




namespace __cxxabiv1 {

extern "C" {
__attribute__((__visibility__("default"))) void* __cxa_allocate_exception(size_t) throw();
__attribute__((__visibility__("default"))) void __cxa_free_exception(void*) throw();

struct __cxa_exception;
__attribute__((__visibility__("default"))) __cxa_exception* __cxa_init_primary_exception(
    void*,
    std::type_info*,
    void(



            *)(void*)) throw();
}

}



namespace std {



class __attribute__((__visibility__("default"))) exception_ptr {
  void* __ptr_;

  static exception_ptr __from_native_exception_pointer(void*) noexcept;

  template <class _Ep>
  friend __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) exception_ptr make_exception_ptr(_Ep) noexcept;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) exception_ptr() noexcept : __ptr_() {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) exception_ptr(nullptr_t) noexcept : __ptr_() {}

  exception_ptr(const exception_ptr&) noexcept;
  exception_ptr& operator=(const exception_ptr&) noexcept;
  ~exception_ptr() noexcept;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit operator bool() const noexcept { return __ptr_ != nullptr; }

  friend __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator==(const exception_ptr& __x, const exception_ptr& __y) noexcept {
    return __x.__ptr_ == __y.__ptr_;
  }

  friend __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator!=(const exception_ptr& __x, const exception_ptr& __y) noexcept {
    return !(__x == __y);
  }

  friend __attribute__((__visibility__("default"))) exception_ptr current_exception() noexcept;
  friend __attribute__((__visibility__("default"))) void rethrow_exception(exception_ptr);
};

template <class _Ep>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) exception_ptr make_exception_ptr(_Ep __e) noexcept {
# 110 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__exception/exception_ptr.h" 3
  ((void)__e);
  std::abort();

}
# 157 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__exception/exception_ptr.h" 3
}
# 83 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\exception" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__exception/nested_exception.h" 1 3
# 27 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__exception/nested_exception.h" 3


namespace std {

class __attribute__((__visibility__("default"))) nested_exception {
  exception_ptr __ptr_;

public:
  nested_exception() noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) nested_exception(const nested_exception&) noexcept = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) nested_exception& operator=(const nested_exception&) noexcept = default;
  virtual ~nested_exception() noexcept;


  [[noreturn]] void rethrow_nested() const;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) exception_ptr nested_ptr() const noexcept { return __ptr_; }
};

template <class _Tp>
struct __nested : public _Tp, public nested_exception {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit __nested(const _Tp& __t) : _Tp(__t) {}
};
# 67 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__exception/nested_exception.h" 3
template <class _Tp>
[[noreturn]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void throw_with_nested(_Tp&& __t) {
# 77 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__exception/nested_exception.h" 3
  ((void)__t);


}

template <class _From, class _To>
struct __can_dynamic_cast
    : _BoolConstant< is_polymorphic<_From>::value &&
                     (!is_base_of<_To, _From>::value || is_convertible<const _From*, const _To*>::value)> {};

template <class _Ep>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
rethrow_if_nested(const _Ep& __e, __enable_if_t< __can_dynamic_cast<_Ep, nested_exception>::value>* = 0) {
  const nested_exception* __nep = dynamic_cast<const nested_exception*>(std::addressof(__e));
  if (__nep)
    __nep->rethrow_nested();
}

template <class _Ep>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
rethrow_if_nested(const _Ep&, __enable_if_t<!__can_dynamic_cast<_Ep, nested_exception>::value>* = 0) {}

}
# 84 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\exception" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__exception/terminate.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__exception/terminate.h" 3


namespace std {
[[noreturn]] __attribute__((__visibility__("default"))) void terminate() noexcept;
}
# 86 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\exception" 2 3
# 90 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\exception" 3
# 284 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\stdexcept" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\iosfwd" 1 3
# 111 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\iosfwd" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__fwd/fstream.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__fwd/fstream.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _CharT, class _Traits = char_traits<_CharT> >
class basic_filebuf;
template <class _CharT, class _Traits = char_traits<_CharT> >
class basic_ifstream;
template <class _CharT, class _Traits = char_traits<_CharT> >
class basic_ofstream;
template <class _CharT, class _Traits = char_traits<_CharT> >
class basic_fstream;

using filebuf = basic_filebuf<char>;
using ifstream = basic_ifstream<char>;
using ofstream = basic_ofstream<char>;
using fstream = basic_fstream<char>;


using wfilebuf = basic_filebuf<wchar_t>;
using wifstream = basic_ifstream<wchar_t>;
using wofstream = basic_ofstream<wchar_t>;
using wfstream = basic_fstream<wchar_t>;


template <class _CharT, class _Traits>
class __attribute__((__preferred_name__(filebuf))) __attribute__((__preferred_name__(wfilebuf))) basic_filebuf;
template <class _CharT, class _Traits>
class __attribute__((__preferred_name__(ifstream))) __attribute__((__preferred_name__(wifstream))) basic_ifstream;
template <class _CharT, class _Traits>
class __attribute__((__preferred_name__(ofstream))) __attribute__((__preferred_name__(wofstream))) basic_ofstream;
template <class _CharT, class _Traits>
class __attribute__((__preferred_name__(fstream))) __attribute__((__preferred_name__(wfstream))) basic_fstream;

}}
# 112 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\iosfwd" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__fwd/ios.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__fwd/ios.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _CharT, class _Traits = char_traits<_CharT> >
class basic_ios;

using ios = basic_ios<char>;

using wios = basic_ios<wchar_t>;


template <class _CharT, class _Traits>
class __attribute__((__preferred_name__(ios))) __attribute__((__preferred_name__(wios))) basic_ios;





using streamoff = long long;


}}
# 113 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\iosfwd" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__fwd/istream.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__fwd/istream.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _CharT, class _Traits = char_traits<_CharT> >
class basic_istream;

template <class _CharT, class _Traits = char_traits<_CharT> >
class basic_iostream;

using istream = basic_istream<char>;
using iostream = basic_iostream<char>;


using wistream = basic_istream<wchar_t>;
using wiostream = basic_iostream<wchar_t>;


template <class _CharT, class _Traits>
class __attribute__((__preferred_name__(istream))) __attribute__((__preferred_name__(wistream))) basic_istream;

template <class _CharT, class _Traits>
class __attribute__((__preferred_name__(iostream))) __attribute__((__preferred_name__(wiostream))) basic_iostream;

}}
# 114 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\iosfwd" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__fwd/ostream.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__fwd/ostream.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _CharT, class _Traits = char_traits<_CharT> >
class basic_ostream;

using ostream = basic_ostream<char>;


using wostream = basic_ostream<wchar_t>;


template <class _CharT, class _Traits>
class __attribute__((__preferred_name__(ostream))) __attribute__((__preferred_name__(wostream))) basic_ostream;

}}
# 115 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\iosfwd" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__fwd/sstream.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__fwd/sstream.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _CharT, class _Traits = char_traits<_CharT>, class _Allocator = allocator<_CharT> >
class basic_stringbuf;

template <class _CharT, class _Traits = char_traits<_CharT>, class _Allocator = allocator<_CharT> >
class basic_istringstream;
template <class _CharT, class _Traits = char_traits<_CharT>, class _Allocator = allocator<_CharT> >
class basic_ostringstream;
template <class _CharT, class _Traits = char_traits<_CharT>, class _Allocator = allocator<_CharT> >
class basic_stringstream;

using stringbuf = basic_stringbuf<char>;
using istringstream = basic_istringstream<char>;
using ostringstream = basic_ostringstream<char>;
using stringstream = basic_stringstream<char>;


using wstringbuf = basic_stringbuf<wchar_t>;
using wistringstream = basic_istringstream<wchar_t>;
using wostringstream = basic_ostringstream<wchar_t>;
using wstringstream = basic_stringstream<wchar_t>;


template <class _CharT, class _Traits, class _Allocator>
class __attribute__((__preferred_name__(stringbuf))) __attribute__((__preferred_name__(wstringbuf))) basic_stringbuf;
template <class _CharT, class _Traits, class _Allocator>
class __attribute__((__preferred_name__(istringstream)))
    __attribute__((__preferred_name__(wistringstream))) basic_istringstream;
template <class _CharT, class _Traits, class _Allocator>
class __attribute__((__preferred_name__(ostringstream)))
    __attribute__((__preferred_name__(wostringstream))) basic_ostringstream;
template <class _CharT, class _Traits, class _Allocator>
class __attribute__((__preferred_name__(stringstream)))
    __attribute__((__preferred_name__(wstringstream))) basic_stringstream;

}}
# 116 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\iosfwd" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__fwd/streambuf.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__fwd/streambuf.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _CharT, class _Traits = char_traits<_CharT> >
class basic_streambuf;

using streambuf = basic_streambuf<char>;


using wstreambuf = basic_streambuf<wchar_t>;


template <class _CharT, class _Traits>
class __attribute__((__preferred_name__(streambuf))) __attribute__((__preferred_name__(wstreambuf))) basic_streambuf;

}}
# 117 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\iosfwd" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__std_mbstate_t.h" 1 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__std_mbstate_t.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__mbstate_t.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__mbstate_t.h" 3
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__std_mbstate_t.h" 2 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__std_mbstate_t.h" 3





namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

using ::mbstate_t __attribute__((__using_if_exists__));

}}
# 119 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\iosfwd" 2 3
# 123 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\iosfwd" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

class __attribute__((__visibility__("default"))) ios_base;

template <class _CharT, class _Traits = char_traits<_CharT> >
class istreambuf_iterator;
template <class _CharT, class _Traits = char_traits<_CharT> >
class ostreambuf_iterator;

template <class _State>
class fpos;
typedef fpos<mbstate_t> streampos;

typedef fpos<mbstate_t> wstreampos;




typedef fpos<mbstate_t> u16streampos;
typedef fpos<mbstate_t> u32streampos;
# 167 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\iosfwd" 3
template <class _Tp, class _Alloc = allocator<_Tp> >
class vector;

template <class _CharT, class _Traits>
class __save_flags {
  typedef basic_ios<_CharT, _Traits> __stream_type;
  typedef typename __stream_type::fmtflags fmtflags;

  __stream_type& __stream_;
  fmtflags __fmtflags_;
  _CharT __fill_;

  __save_flags(const __save_flags&);
  __save_flags& operator=(const __save_flags&);

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit __save_flags(__stream_type& __stream)
      : __stream_(__stream), __fmtflags_(__stream.flags()), __fill_(__stream.fill()) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) ~__save_flags() {
    __stream_.flags(__fmtflags_);
    __stream_.fill(__fill_);
  }
};

}}
# 285 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\stdexcept" 2 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/format_error.h" 2 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/format_error.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 48 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/format_error.h" 3
}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/format_parse_context.h" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string_view" 1 3
# 211 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string_view" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__functional/hash.h" 1 3
# 34 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__functional/hash.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Size __loadword(const void* __p) {
  _Size __r;
  std::memcpy(&__r, __p, sizeof(__r));
  return __r;
}




template <class _Size, size_t = sizeof(_Size) * 8>
struct __murmur2_or_cityhash;

template <class _Size>
struct __murmur2_or_cityhash<_Size, 32> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__no_sanitize__("unsigned-integer-overflow"))) _Size
  operator()(const void* __key, _Size __len) const {

    const _Size __m = 0x5bd1e995;
    const _Size __r = 24;
    _Size __h = __len;
    const unsigned char* __data = static_cast<const unsigned char*>(__key);
    for (; __len >= 4; __data += 4, __len -= 4) {
      _Size __k = std::__loadword<_Size>(__data);
      __k *= __m;
      __k ^= __k >> __r;
      __k *= __m;
      __h *= __m;
      __h ^= __k;
    }
    switch (__len) {
    case 3:
      __h ^= static_cast<_Size>(__data[2] << 16);
      [[fallthrough]];
    case 2:
      __h ^= static_cast<_Size>(__data[1] << 8);
      [[fallthrough]];
    case 1:
      __h ^= __data[0];
      __h *= __m;
    }
    __h ^= __h >> 13;
    __h *= __m;
    __h ^= __h >> 15;
    return __h;
  }
};

template <class _Size>
struct __murmur2_or_cityhash<_Size, 64> {

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__no_sanitize__("unsigned-integer-overflow"))) _Size
  operator()(const void* __key, _Size __len) const {
    const char* __s = static_cast<const char*>(__key);
    if (__len <= 32) {
      if (__len <= 16) {
        return __hash_len_0_to_16(__s, __len);
      } else {
        return __hash_len_17_to_32(__s, __len);
      }
    } else if (__len <= 64) {
      return __hash_len_33_to_64(__s, __len);
    }



    _Size __x = std::__loadword<_Size>(__s + __len - 40);
    _Size __y = std::__loadword<_Size>(__s + __len - 16) + std::__loadword<_Size>(__s + __len - 56);
    _Size __z =
        __hash_len_16(std::__loadword<_Size>(__s + __len - 48) + __len, std::__loadword<_Size>(__s + __len - 24));
    pair<_Size, _Size> __v = __weak_hash_len_32_with_seeds(__s + __len - 64, __len, __z);
    pair<_Size, _Size> __w = __weak_hash_len_32_with_seeds(__s + __len - 32, __y + __k1, __x);
    __x = __x * __k1 + std::__loadword<_Size>(__s);


    __len = (__len - 1) & ~static_cast<_Size>(63);
    do {
      __x = __rotate(__x + __y + __v.first + std::__loadword<_Size>(__s + 8), 37) * __k1;
      __y = __rotate(__y + __v.second + std::__loadword<_Size>(__s + 48), 42) * __k1;
      __x ^= __w.second;
      __y += __v.first + std::__loadword<_Size>(__s + 40);
      __z = __rotate(__z + __w.first, 33) * __k1;
      __v = __weak_hash_len_32_with_seeds(__s, __v.second * __k1, __x + __w.first);
      __w = __weak_hash_len_32_with_seeds(__s + 32, __z + __w.second, __y + std::__loadword<_Size>(__s + 16));
      std::swap(__z, __x);
      __s += 64;
      __len -= 64;
    } while (__len != 0);
    return __hash_len_16(__hash_len_16(__v.first, __w.first) + __shift_mix(__y) * __k1 + __z,
                         __hash_len_16(__v.second, __w.second) + __x);
  }

private:

  static const _Size __k0 = 0xc3a5c85c97cb3127ULL;
  static const _Size __k1 = 0xb492b66fbe98f273ULL;
  static const _Size __k2 = 0x9ae16a3b2f90404fULL;
  static const _Size __k3 = 0xc949d7c7509e6557ULL;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static _Size __rotate(_Size __val, int __shift) {
    return __shift == 0 ? __val : ((__val >> __shift) | (__val << (64 - __shift)));
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static _Size __rotate_by_at_least_1(_Size __val, int __shift) {
    return (__val >> __shift) | (__val << (64 - __shift));
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static _Size __shift_mix(_Size __val) { return __val ^ (__val >> 47); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__no_sanitize__("unsigned-integer-overflow"))) static _Size __hash_len_16(_Size __u, _Size __v) {
    const _Size __mul = 0x9ddfea08eb382d69ULL;
    _Size __a = (__u ^ __v) * __mul;
    __a ^= (__a >> 47);
    _Size __b = (__v ^ __a) * __mul;
    __b ^= (__b >> 47);
    __b *= __mul;
    return __b;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__no_sanitize__("unsigned-integer-overflow"))) static _Size
  __hash_len_0_to_16(const char* __s, _Size __len) {
    if (__len > 8) {
      const _Size __a = std::__loadword<_Size>(__s);
      const _Size __b = std::__loadword<_Size>(__s + __len - 8);
      return __hash_len_16(__a, __rotate_by_at_least_1(__b + __len, __len)) ^ __b;
    }
    if (__len >= 4) {
      const uint32_t __a = std::__loadword<uint32_t>(__s);
      const uint32_t __b = std::__loadword<uint32_t>(__s + __len - 4);

      return __hash_len_16(__len + (static_cast<_Size>(__a) << 3), __b);



    }
    if (__len > 0) {
      const unsigned char __a = static_cast<unsigned char>(__s[0]);
      const unsigned char __b = static_cast<unsigned char>(__s[__len >> 1]);
      const unsigned char __c = static_cast<unsigned char>(__s[__len - 1]);
      const uint32_t __y = static_cast<uint32_t>(__a) + (static_cast<uint32_t>(__b) << 8);
      const uint32_t __z = __len + (static_cast<uint32_t>(__c) << 2);
      return __shift_mix(__y * __k2 ^ __z * __k3) * __k2;
    }
    return __k2;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__no_sanitize__("unsigned-integer-overflow"))) static _Size
  __hash_len_17_to_32(const char* __s, _Size __len) {
    const _Size __a = std::__loadword<_Size>(__s) * __k1;
    const _Size __b = std::__loadword<_Size>(__s + 8);
    const _Size __c = std::__loadword<_Size>(__s + __len - 8) * __k2;
    const _Size __d = std::__loadword<_Size>(__s + __len - 16) * __k0;
    return __hash_len_16(
        __rotate(__a - __b, 43) + __rotate(__c, 30) + __d, __a + __rotate(__b ^ __k3, 20) - __c + __len);
  }



  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__no_sanitize__("unsigned-integer-overflow"))) static pair<_Size, _Size>
  __weak_hash_len_32_with_seeds(_Size __w, _Size __x, _Size __y, _Size __z, _Size __a, _Size __b) {
    __a += __w;
    __b = __rotate(__b + __a + __z, 21);
    const _Size __c = __a;
    __a += __x;
    __a += __y;
    __b += __rotate(__a, 44);
    return pair<_Size, _Size>(__a + __z, __b + __c);
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__no_sanitize__("unsigned-integer-overflow"))) static pair<_Size, _Size>
  __weak_hash_len_32_with_seeds(const char* __s, _Size __a, _Size __b) {
    return __weak_hash_len_32_with_seeds(
        std::__loadword<_Size>(__s),
        std::__loadword<_Size>(__s + 8),
        std::__loadword<_Size>(__s + 16),
        std::__loadword<_Size>(__s + 24),
        __a,
        __b);
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__no_sanitize__("unsigned-integer-overflow"))) static _Size
  __hash_len_33_to_64(const char* __s, size_t __len) {
    _Size __z = std::__loadword<_Size>(__s + 24);
    _Size __a = std::__loadword<_Size>(__s) + (__len + std::__loadword<_Size>(__s + __len - 16)) * __k0;
    _Size __b = __rotate(__a + __z, 52);
    _Size __c = __rotate(__a, 37);
    __a += std::__loadword<_Size>(__s + 8);
    __c += __rotate(__a, 7);
    __a += std::__loadword<_Size>(__s + 16);
    _Size __vf = __a + __z;
    _Size __vs = __b + __rotate(__a, 31) + __c;
    __a = std::__loadword<_Size>(__s + 16) + std::__loadword<_Size>(__s + __len - 32);
    __z += std::__loadword<_Size>(__s + __len - 8);
    __b = __rotate(__a + __z, 52);
    __c = __rotate(__a, 37);
    __a += std::__loadword<_Size>(__s + __len - 24);
    __c += __rotate(__a, 7);
    __a += std::__loadword<_Size>(__s + __len - 16);
    _Size __wf = __a + __z;
    _Size __ws = __b + __rotate(__a, 31) + __c;
    _Size __r = __shift_mix((__vf + __ws) * __k2 + (__wf + __vs) * __k0);
    return __shift_mix(__r * __k0 + __vs) * __k2;
  }
};

template <class _Tp, size_t = sizeof(_Tp) / sizeof(size_t)>
struct __scalar_hash;

template <class _Tp>
struct __scalar_hash<_Tp, 0> : public __unary_function<_Tp, size_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_t operator()(_Tp __v) const noexcept {
    union {
      _Tp __t;
      size_t __a;
    } __u;
    __u.__a = 0;
    __u.__t = __v;
    return __u.__a;
  }
};

template <class _Tp>
struct __scalar_hash<_Tp, 1> : public __unary_function<_Tp, size_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((pcs("aapcs"))) size_t operator()(_Tp __v) const noexcept {
    union {
      _Tp __t;
      size_t __a;
    } __u;
    __u.__t = __v;
    return __u.__a;
  }
};

template <class _Tp>
struct __scalar_hash<_Tp, 2> : public __unary_function<_Tp, size_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((pcs("aapcs"))) size_t operator()(_Tp __v) const noexcept {
    union {
      _Tp __t;
      struct {
        size_t __a;
        size_t __b;
      } __s;
    } __u;
    __u.__t = __v;
    return __murmur2_or_cityhash<size_t>()(&__u, sizeof(__u));
  }
};

template <class _Tp>
struct __scalar_hash<_Tp, 3> : public __unary_function<_Tp, size_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_t operator()(_Tp __v) const noexcept {
    union {
      _Tp __t;
      struct {
        size_t __a;
        size_t __b;
        size_t __c;
      } __s;
    } __u;
    __u.__t = __v;
    return __murmur2_or_cityhash<size_t>()(&__u, sizeof(__u));
  }
};

template <class _Tp>
struct __scalar_hash<_Tp, 4> : public __unary_function<_Tp, size_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_t operator()(_Tp __v) const noexcept {
    union {
      _Tp __t;
      struct {
        size_t __a;
        size_t __b;
        size_t __c;
        size_t __d;
      } __s;
    } __u;
    __u.__t = __v;
    return __murmur2_or_cityhash<size_t>()(&__u, sizeof(__u));
  }
};

struct _PairT {
  size_t first;
  size_t second;
};

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline size_t __hash_combine(size_t __lhs, size_t __rhs) noexcept {
  typedef __scalar_hash<_PairT> _HashT;
  const _PairT __p = {__lhs, __rhs};
  return _HashT()(__p);
}

template <class _Tp>
struct hash<_Tp*> : public __unary_function<_Tp*, size_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_t operator()(_Tp* __v) const noexcept {
    union {
      _Tp* __t;
      size_t __a;
    } __u;
    __u.__t = __v;
    return __murmur2_or_cityhash<size_t>()(&__u, sizeof(__u));
  }
};

template <>
struct hash<bool> : public __unary_function<bool, size_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_t operator()(bool __v) const noexcept { return static_cast<size_t>(__v); }
};

template <>
struct hash<char> : public __unary_function<char, size_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_t operator()(char __v) const noexcept { return static_cast<size_t>(__v); }
};

template <>
struct hash<signed char> : public __unary_function<signed char, size_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_t operator()(signed char __v) const noexcept { return static_cast<size_t>(__v); }
};

template <>
struct hash<unsigned char> : public __unary_function<unsigned char, size_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_t operator()(unsigned char __v) const noexcept { return static_cast<size_t>(__v); }
};
# 371 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__functional/hash.h" 3
template <>
struct hash<char16_t> : public __unary_function<char16_t, size_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_t operator()(char16_t __v) const noexcept { return static_cast<size_t>(__v); }
};

template <>
struct hash<char32_t> : public __unary_function<char32_t, size_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_t operator()(char32_t __v) const noexcept { return static_cast<size_t>(__v); }
};


template <>
struct hash<wchar_t> : public __unary_function<wchar_t, size_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_t operator()(wchar_t __v) const noexcept { return static_cast<size_t>(__v); }
};


template <>
struct hash<short> : public __unary_function<short, size_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_t operator()(short __v) const noexcept { return static_cast<size_t>(__v); }
};

template <>
struct hash<unsigned short> : public __unary_function<unsigned short, size_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_t operator()(unsigned short __v) const noexcept { return static_cast<size_t>(__v); }
};

template <>
struct hash<int> : public __unary_function<int, size_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_t operator()(int __v) const noexcept { return static_cast<size_t>(__v); }
};

template <>
struct hash<unsigned int> : public __unary_function<unsigned int, size_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_t operator()(unsigned int __v) const noexcept { return static_cast<size_t>(__v); }
};

template <>
struct hash<long> : public __unary_function<long, size_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_t operator()(long __v) const noexcept { return static_cast<size_t>(__v); }
};

template <>
struct hash<unsigned long> : public __unary_function<unsigned long, size_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_t operator()(unsigned long __v) const noexcept { return static_cast<size_t>(__v); }
};

template <>
struct hash<long long> : public __scalar_hash<long long> {};

template <>
struct hash<unsigned long long> : public __scalar_hash<unsigned long long> {};
# 434 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__functional/hash.h" 3
template <>
struct hash<float> : public __scalar_hash<float> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_t operator()(float __v) const noexcept {

    if (__v == 0.0f)
      return 0;
    return __scalar_hash<float>::operator()(__v);
  }
};

template <>
struct hash<double> : public __scalar_hash<double> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_t operator()(double __v) const noexcept {

    if (__v == 0.0)
      return 0;
    return __scalar_hash<double>::operator()(__v);
  }
};


template <>
struct hash<long double> : public __scalar_hash<long double> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_t operator()(long double __v) const noexcept {

    if (__v == 0.0L)
      return 0;
# 492 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__functional/hash.h" 3
    return __scalar_hash<long double>::operator()(__v);

  }
};


template <class _Tp, bool = is_enum<_Tp>::value>
struct __enum_hash : public __unary_function<_Tp, size_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_t operator()(_Tp __v) const noexcept {
    typedef typename underlying_type<_Tp>::type type;
    return hash<type>()(static_cast<type>(__v));
  }
};
template <class _Tp>
struct __enum_hash<_Tp, false> {
  __enum_hash() = delete;
  __enum_hash(__enum_hash const&) = delete;
  __enum_hash& operator=(__enum_hash const&) = delete;
};

template <class _Tp>
struct hash : public __enum_hash<_Tp> {};



template <>
struct hash<nullptr_t> : public __unary_function<nullptr_t, size_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_t operator()(nullptr_t) const noexcept { return 662607004ull; }
};



template <class _Key, class _Hash>
using __check_hash_requirements __attribute__((__nodebug__)) =
    integral_constant<bool,
                      is_copy_constructible<_Hash>::value && is_move_constructible<_Hash>::value &&
                          __invokable_r<size_t, _Hash, _Key const&>::value >;

template <class _Key, class _Hash = hash<_Key> >
using __has_enabled_hash __attribute__((__nodebug__)) =
    integral_constant<bool, __check_hash_requirements<_Key, _Hash>::value && is_default_constructible<_Hash>::value >;


template <class _Type, class>
using __enable_hash_helper_imp __attribute__((__nodebug__)) = _Type;

template <class _Type, class... _Keys>
using __enable_hash_helper __attribute__((__nodebug__)) =
    __enable_hash_helper_imp<_Type, __enable_if_t<__all<__has_enabled_hash<_Keys>::value...>::value> >;







}}
# 212 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string_view" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__fwd/string_view.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__fwd/string_view.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _CharT, class _Traits = char_traits<_CharT> >
class basic_string_view;

typedef basic_string_view<char> string_view;



typedef basic_string_view<char16_t> u16string_view;
typedef basic_string_view<char32_t> u32string_view;

typedef basic_string_view<wchar_t> wstring_view;



template <class _CharT, class _Traits>
class __attribute__((__preferred_name__(string_view)))

      __attribute__((__preferred_name__(wstring_view)))




      __attribute__((__preferred_name__(u16string_view)))
      __attribute__((__preferred_name__(u32string_view)))
      basic_string_view;

}}
# 214 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string_view" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/bounded_iter.h" 1 3
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/bounded_iter.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 28 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/bounded_iter.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 41 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/bounded_iter.h" 3
template <class _Iterator, class = __enable_if_t< __libcpp_is_contiguous_iterator<_Iterator>::value > >
struct __bounded_iter {
  using value_type = typename iterator_traits<_Iterator>::value_type;
  using difference_type = typename iterator_traits<_Iterator>::difference_type;
  using pointer = typename iterator_traits<_Iterator>::pointer;
  using reference = typename iterator_traits<_Iterator>::reference;
  using iterator_category = typename iterator_traits<_Iterator>::iterator_category;
# 56 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/bounded_iter.h" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __bounded_iter() = default;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __bounded_iter(__bounded_iter const&) = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __bounded_iter(__bounded_iter&&) = default;

  template <class _OtherIterator, class = __enable_if_t< is_convertible<_OtherIterator, _Iterator>::value > >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr __bounded_iter(__bounded_iter<_OtherIterator> const& __other) noexcept
      : __current_(__other.__current_),
        __begin_(__other.__begin_),
        __end_(__other.__end_) {}


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __bounded_iter& operator=(__bounded_iter const&) = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __bounded_iter& operator=(__bounded_iter&&) = default;

private:
# 81 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/bounded_iter.h" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr explicit __bounded_iter(
      _Iterator __current, _Iterator __begin, _Iterator __end)
      : __current_(__current), __begin_(__begin), __end_(__end) {
    ((void)0);
  }

  template <class _It>
  friend constexpr __bounded_iter<_It> __make_bounded_iter(_It, _It, _It);

public:



  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr reference operator*() const noexcept {
    ((void)0);

    return *__current_;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pointer operator->() const noexcept {
    ((void)0);

    return std::__to_address(__current_);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr reference operator[](difference_type __n) const noexcept {
    ((void)0);

    return __current_[__n];
  }





  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr __bounded_iter& operator++() noexcept {
    ++__current_;
    return *this;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr __bounded_iter operator++(int) noexcept {
    __bounded_iter __tmp(*this);
    ++*this;
    return __tmp;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr __bounded_iter& operator--() noexcept {
    --__current_;
    return *this;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr __bounded_iter operator--(int) noexcept {
    __bounded_iter __tmp(*this);
    --*this;
    return __tmp;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr __bounded_iter& operator+=(difference_type __n) noexcept {
    __current_ += __n;
    return *this;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr friend __bounded_iter
  operator+(__bounded_iter const& __self, difference_type __n) noexcept {
    __bounded_iter __tmp(__self);
    __tmp += __n;
    return __tmp;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr friend __bounded_iter
  operator+(difference_type __n, __bounded_iter const& __self) noexcept {
    __bounded_iter __tmp(__self);
    __tmp += __n;
    return __tmp;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr __bounded_iter& operator-=(difference_type __n) noexcept {
    __current_ -= __n;
    return *this;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr friend __bounded_iter
  operator-(__bounded_iter const& __self, difference_type __n) noexcept {
    __bounded_iter __tmp(__self);
    __tmp -= __n;
    return __tmp;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr friend difference_type
  operator-(__bounded_iter const& __x, __bounded_iter const& __y) noexcept {
    return __x.__current_ - __y.__current_;
  }







  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr friend bool
  operator==(__bounded_iter const& __x, __bounded_iter const& __y) noexcept {
    return __x.__current_ == __y.__current_;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr friend bool
  operator!=(__bounded_iter const& __x, __bounded_iter const& __y) noexcept {
    return __x.__current_ != __y.__current_;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr friend bool
  operator<(__bounded_iter const& __x, __bounded_iter const& __y) noexcept {
    return __x.__current_ < __y.__current_;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr friend bool
  operator>(__bounded_iter const& __x, __bounded_iter const& __y) noexcept {
    return __x.__current_ > __y.__current_;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr friend bool
  operator<=(__bounded_iter const& __x, __bounded_iter const& __y) noexcept {
    return __x.__current_ <= __y.__current_;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr friend bool
  operator>=(__bounded_iter const& __x, __bounded_iter const& __y) noexcept {
    return __x.__current_ >= __y.__current_;
  }

private:

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool __in_bounds(_Iterator const& __iter) const {
    return __iter >= __begin_ && __iter < __end_;
  }

  template <class>
  friend struct pointer_traits;
  _Iterator __current_;
  _Iterator __begin_, __end_;
};

template <class _It>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr __bounded_iter<_It> __make_bounded_iter(_It __it, _It __begin, _It __end) {
  return __bounded_iter<_It>(std::move(__it), std::move(__begin), std::move(__end));
}


template <class _Iterator>
struct __libcpp_is_contiguous_iterator<__bounded_iter<_Iterator> > : true_type {};


template <class _Iterator>
struct pointer_traits<__bounded_iter<_Iterator> > {
  using pointer = __bounded_iter<_Iterator>;
  using element_type = typename pointer_traits<_Iterator>::element_type;
  using difference_type = typename pointer_traits<_Iterator>::difference_type;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr static element_type* to_address(pointer __it) noexcept {
    return std::__to_address(__it.__current_);
  }
};

}}
# 215 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string_view" 2 3


# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/reverse_iterator.h" 1 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/reverse_iterator.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__compare/compare_three_way_result.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__compare/compare_three_way_result.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 43 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__compare/compare_three_way_result.h" 3
}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/reverse_iterator.h" 2 3








# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/iterator.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/iterator.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Category, class _Tp, class _Distance = ptrdiff_t, class _Pointer = _Tp*, class _Reference = _Tp&>
struct __attribute__((__deprecated__)) iterator {
  typedef _Tp value_type;
  typedef _Distance difference_type;
  typedef _Pointer pointer;
  typedef _Reference reference;
  typedef _Category iterator_category;
};

}}
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/reverse_iterator.h" 2 3








# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/subrange.h" 1 3
# 28 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/subrange.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/dangling.h" 1 3
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/dangling.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 40 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/dangling.h" 3
}}
# 29 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/subrange.h" 2 3


# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/view_interface.h" 1 3
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/view_interface.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/empty.h" 1 3
# 21 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/empty.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 69 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/empty.h" 3
}}
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/view_interface.h" 2 3
# 30 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/view_interface.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 159 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/view_interface.h" 3
}}
# 32 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/subrange.h" 2 3
# 47 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/subrange.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 51 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/subrange.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 272 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/subrange.h" 3
}}
# 33 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/reverse_iterator.h" 2 3
# 45 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/reverse_iterator.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

#pragma GCC diagnostic push
# 49 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/reverse_iterator.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 49 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/reverse_iterator.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template <class _Iter>
class reverse_iterator

    : public iterator<typename iterator_traits<_Iter>::iterator_category,
                      typename iterator_traits<_Iter>::value_type,
                      typename iterator_traits<_Iter>::difference_type,
                      typename iterator_traits<_Iter>::pointer,
                      typename iterator_traits<_Iter>::reference>

{
#pragma GCC diagnostic pop

private:

  _Iter __t_;







protected:
  _Iter current;

public:
  using iterator_type = _Iter;

  using iterator_category =
      _If<__has_random_access_iterator_category<_Iter>::value,
          random_access_iterator_tag,
          typename iterator_traits<_Iter>::iterator_category>;
  using pointer = typename iterator_traits<_Iter>::pointer;






  using value_type = typename iterator_traits<_Iter>::value_type;
  using difference_type = typename iterator_traits<_Iter>::difference_type;
  using reference = typename iterator_traits<_Iter>::reference;



  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr reverse_iterator() : __t_(), current() {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr explicit reverse_iterator(_Iter __x) : __t_(__x), current(__x) {}

  template <class _Up,
            class = __enable_if_t< !is_same<_Up, _Iter>::value && is_convertible<_Up const&, _Iter>::value > >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr reverse_iterator(const reverse_iterator<_Up>& __u)
      : __t_(__u.base()), current(__u.base()) {}

  template <class _Up,
            class = __enable_if_t< !is_same<_Up, _Iter>::value && is_convertible<_Up const&, _Iter>::value &&
                                   is_assignable<_Iter&, _Up const&>::value > >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr reverse_iterator& operator=(const reverse_iterator<_Up>& __u) {
    __t_ = current = __u.base();
    return *this;
  }
# 129 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/reverse_iterator.h" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Iter base() const { return current; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr reference operator*() const {
    _Iter __tmp = current;
    return *--__tmp;
  }
# 146 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/reverse_iterator.h" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pointer operator->() const { return std::addressof(operator*()); }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr reverse_iterator& operator++() {
    --current;
    return *this;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr reverse_iterator operator++(int) {
    reverse_iterator __tmp(*this);
    --current;
    return __tmp;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr reverse_iterator& operator--() {
    ++current;
    return *this;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr reverse_iterator operator--(int) {
    reverse_iterator __tmp(*this);
    ++current;
    return __tmp;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr reverse_iterator operator+(difference_type __n) const {
    return reverse_iterator(current - __n);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr reverse_iterator& operator+=(difference_type __n) {
    current -= __n;
    return *this;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr reverse_iterator operator-(difference_type __n) const {
    return reverse_iterator(current + __n);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr reverse_iterator& operator-=(difference_type __n) {
    current += __n;
    return *this;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr reference operator[](difference_type __n) const {
    return *(*this + __n);
  }
# 203 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/reverse_iterator.h" 3
};

template <class _Iter1, class _Iter2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool
operator==(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)





{
  return __x.base() == __y.base();
}

template <class _Iter1, class _Iter2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool
operator<(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)





{
  return __x.base() > __y.base();
}

template <class _Iter1, class _Iter2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool
operator!=(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)





{
  return __x.base() != __y.base();
}

template <class _Iter1, class _Iter2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool
operator>(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)





{
  return __x.base() < __y.base();
}

template <class _Iter1, class _Iter2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool
operator>=(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)





{
  return __x.base() <= __y.base();
}

template <class _Iter1, class _Iter2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool
operator<=(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)





{
  return __x.base() >= __y.base();
}
# 286 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/reverse_iterator.h" 3
template <class _Iter1, class _Iter2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr auto
operator-(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)
    -> decltype(__y.base() - __x.base()) {
  return __y.base() - __x.base();
}
# 300 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/reverse_iterator.h" 3
template <class _Iter>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr reverse_iterator<_Iter>
operator+(typename reverse_iterator<_Iter>::difference_type __n, const reverse_iterator<_Iter>& __x) {
  return reverse_iterator<_Iter>(__x.base() - __n);
}
# 313 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/reverse_iterator.h" 3
template <class _Iter>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr reverse_iterator<_Iter> make_reverse_iterator(_Iter __i) {
  return reverse_iterator<_Iter>(__i);
}



template <class _Iter>
using __unconstrained_reverse_iterator = reverse_iterator<_Iter>;
# 469 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/reverse_iterator.h" 3
template <template <class> class _RevIter1, template <class> class _RevIter2, class _Iter>
struct __unwrap_reverse_iter_impl {
  using _UnwrappedIter = decltype(__unwrap_iter_impl<_Iter>::__unwrap(std::declval<_Iter>()));
  using _ReverseWrapper = _RevIter1<_RevIter2<_Iter> >;

  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _ReverseWrapper
  __rewrap(_ReverseWrapper __orig_iter, _UnwrappedIter __unwrapped_iter) {
    return _ReverseWrapper(
        _RevIter2<_Iter>(__unwrap_iter_impl<_Iter>::__rewrap(__orig_iter.base().base(), __unwrapped_iter)));
  }

  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _UnwrappedIter __unwrap(_ReverseWrapper __i) noexcept {
    return __unwrap_iter_impl<_Iter>::__unwrap(__i.base().base());
  }
};
# 495 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/reverse_iterator.h" 3
template <class _Iter, bool __b>
struct __unwrap_iter_impl<reverse_iterator<reverse_iterator<_Iter> >, __b>
    : __unwrap_reverse_iter_impl<reverse_iterator, reverse_iterator, _Iter> {};
# 515 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/reverse_iterator.h" 3
}}
# 218 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string_view" 2 3






# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__string/char_traits.h" 1 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__string/char_traits.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/find_end.h" 1 3
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/find_end.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/search.h" 1 3
# 27 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/search.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _AlgPolicy,
          class _Iter1,
          class _Sent1,
          class _Iter2,
          class _Sent2,
          class _Pred,
          class _Proj1,
          class _Proj2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pair<_Iter1, _Iter1> __search_forward_impl(
    _Iter1 __first1, _Sent1 __last1, _Iter2 __first2, _Sent2 __last2, _Pred& __pred, _Proj1& __proj1, _Proj2& __proj2) {
  if (__first2 == __last2)
    return std::make_pair(__first1, __first1);
  while (true) {

    while (true) {
      if (__first1 == __last1) {
        _IterOps<_AlgPolicy>::__advance_to(__first1, __last1);
        return std::make_pair(__first1, __first1);
      }
      if (std::__invoke(__pred, std::__invoke(__proj1, *__first1), std::__invoke(__proj2, *__first2)))
        break;
      ++__first1;
    }

    _Iter1 __m1 = __first1;
    _Iter2 __m2 = __first2;
    while (true) {
      if (++__m2 == __last2)
        return std::make_pair(__first1, ++__m1);
      if (++__m1 == __last1) {
        return std::make_pair(__m1, __m1);
      }


      if (!std::__invoke(__pred, std::__invoke(__proj1, *__m1), std::__invoke(__proj2, *__m2))) {
        ++__first1;
        break;
      }
    }
  }
}

template <class _AlgPolicy,
          class _Iter1,
          class _Sent1,
          class _Iter2,
          class _Sent2,
          class _Pred,
          class _Proj1,
          class _Proj2,
          class _DiffT1,
          class _DiffT2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pair<_Iter1, _Iter1> __search_random_access_impl(
    _Iter1 __first1,
    _Sent1 __last1,
    _Iter2 __first2,
    _Sent2 __last2,
    _Pred& __pred,
    _Proj1& __proj1,
    _Proj2& __proj2,
    _DiffT1 __size1,
    _DiffT2 __size2) {
  const _Iter1 __s = __first1 + __size1 - _DiffT1(__size2 - 1);

  while (true) {
    while (true) {
      if (__first1 == __s) {
        _IterOps<_AlgPolicy>::__advance_to(__first1, __last1);
        return std::make_pair(__first1, __first1);
      }
      if (std::__invoke(__pred, std::__invoke(__proj1, *__first1), std::__invoke(__proj2, *__first2)))
        break;
      ++__first1;
    }

    _Iter1 __m1 = __first1;
    _Iter2 __m2 = __first2;
    while (true) {
      if (++__m2 == __last2)
        return std::make_pair(__first1, __first1 + _DiffT1(__size2));
      ++__m1;
      if (!std::__invoke(__pred, std::__invoke(__proj1, *__m1), std::__invoke(__proj2, *__m2))) {
        ++__first1;
        break;
      }
    }
  }
}

template <class _Iter1, class _Sent1, class _Iter2, class _Sent2, class _Pred, class _Proj1, class _Proj2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pair<_Iter1, _Iter1> __search_impl(
    _Iter1 __first1,
    _Sent1 __last1,
    _Iter2 __first2,
    _Sent2 __last2,
    _Pred& __pred,
    _Proj1& __proj1,
    _Proj2& __proj2,
    __enable_if_t<__has_random_access_iterator_category<_Iter1>::value &&
                  __has_random_access_iterator_category<_Iter2>::value>* = nullptr) {
  auto __size2 = __last2 - __first2;
  if (__size2 == 0)
    return std::make_pair(__first1, __first1);

  auto __size1 = __last1 - __first1;
  if (__size1 < __size2) {
    return std::make_pair(__last1, __last1);
  }

  return std::__search_random_access_impl<_ClassicAlgPolicy>(
      __first1, __last1, __first2, __last2, __pred, __proj1, __proj2, __size1, __size2);
}

template <class _Iter1, class _Sent1, class _Iter2, class _Sent2, class _Pred, class _Proj1, class _Proj2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pair<_Iter1, _Iter1> __search_impl(
    _Iter1 __first1,
    _Sent1 __last1,
    _Iter2 __first2,
    _Sent2 __last2,
    _Pred& __pred,
    _Proj1& __proj1,
    _Proj2& __proj2,
    __enable_if_t<__has_forward_iterator_category<_Iter1>::value && __has_forward_iterator_category<_Iter2>::value &&
                  !(__has_random_access_iterator_category<_Iter1>::value &&
                    __has_random_access_iterator_category<_Iter2>::value)>* = nullptr) {
  return std::__search_forward_impl<_ClassicAlgPolicy>(__first1, __last1, __first2, __last2, __pred, __proj1, __proj2);
}

template <class _ForwardIterator1, class _ForwardIterator2, class _BinaryPredicate>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _ForwardIterator1
search(_ForwardIterator1 __first1,
       _ForwardIterator1 __last1,
       _ForwardIterator2 __first2,
       _ForwardIterator2 __last2,
       _BinaryPredicate __pred) {
  static_assert(__is_callable<_BinaryPredicate, decltype(*__first1), decltype(*__first2)>::value,
                "BinaryPredicate has to be callable");
  auto __proj = __identity();
  return std::__search_impl(__first1, __last1, __first2, __last2, __pred, __proj, __proj).first;
}

template <class _ForwardIterator1, class _ForwardIterator2>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _ForwardIterator1
search(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2) {
  return std::search(__first1, __last1, __first2, __last2, __equal_to());
}


template <class _ForwardIterator, class _Searcher>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _ForwardIterator
search(_ForwardIterator __f, _ForwardIterator __l, const _Searcher& __s) {
  return __s(__f, __l).first;
}



}}
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/find_end.h" 2 3
# 27 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/find_end.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template < class _AlgPolicy,
           class _Iter1,
           class _Sent1,
           class _Iter2,
           class _Sent2,
           class _Pred,
           class _Proj1,
           class _Proj2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline constexpr pair<_Iter1, _Iter1> __find_end_impl(
    _Iter1 __first1,
    _Sent1 __last1,
    _Iter2 __first2,
    _Sent2 __last2,
    _Pred& __pred,
    _Proj1& __proj1,
    _Proj2& __proj2,
    forward_iterator_tag,
    forward_iterator_tag) {

  _Iter1 __match_first = _IterOps<_AlgPolicy>::next(__first1, __last1);
  _Iter1 __match_last = __match_first;
  if (__first2 == __last2)
    return pair<_Iter1, _Iter1>(__match_last, __match_last);
  while (true) {
    while (true) {
      if (__first1 == __last1)
        return pair<_Iter1, _Iter1>(__match_first, __match_last);
      if (std::__invoke(__pred, std::__invoke(__proj1, *__first1), std::__invoke(__proj2, *__first2)))
        break;
      ++__first1;
    }

    _Iter1 __m1 = __first1;
    _Iter2 __m2 = __first2;
    while (true) {
      if (++__m2 == __last2) {
        __match_first = __first1;
        __match_last = ++__m1;
        ++__first1;
        break;
      }
      if (++__m1 == __last1)
        return pair<_Iter1, _Iter1>(__match_first, __match_last);

      if (!std::__invoke(__pred, std::__invoke(__proj1, *__m1), std::__invoke(__proj2, *__m2))) {
        ++__first1;
        break;
      }
    }
  }
}

template < class _IterOps,
           class _Pred,
           class _Iter1,
           class _Sent1,
           class _Iter2,
           class _Sent2,
           class _Proj1,
           class _Proj2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Iter1 __find_end(
    _Iter1 __first1,
    _Sent1 __sent1,
    _Iter2 __first2,
    _Sent2 __sent2,
    _Pred& __pred,
    _Proj1& __proj1,
    _Proj2& __proj2,
    bidirectional_iterator_tag,
    bidirectional_iterator_tag) {
  auto __last1 = _IterOps::next(__first1, __sent1);
  auto __last2 = _IterOps::next(__first2, __sent2);

  if (__first2 == __last2)
    return __last1;
  _Iter1 __l1 = __last1;
  _Iter2 __l2 = __last2;
  --__l2;
  while (true) {

    while (true) {
      if (__first1 == __l1)
        return __last1;
      if (std::__invoke(__pred, std::__invoke(__proj1, *--__l1), std::__invoke(__proj2, *__l2)))
        break;
    }

    _Iter1 __m1 = __l1;
    _Iter2 __m2 = __l2;
    while (true) {
      if (__m2 == __first2)
        return __m1;
      if (__m1 == __first1)
        return __last1;


      if (!std::__invoke(__pred, std::__invoke(__proj1, *--__m1), std::__invoke(__proj2, *--__m2))) {
        break;
      }
    }
  }
}

template < class _AlgPolicy,
           class _Pred,
           class _Iter1,
           class _Sent1,
           class _Iter2,
           class _Sent2,
           class _Proj1,
           class _Proj2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Iter1 __find_end(
    _Iter1 __first1,
    _Sent1 __sent1,
    _Iter2 __first2,
    _Sent2 __sent2,
    _Pred& __pred,
    _Proj1& __proj1,
    _Proj2& __proj2,
    random_access_iterator_tag,
    random_access_iterator_tag) {
  typedef typename iterator_traits<_Iter1>::difference_type _D1;
  auto __last1 = _IterOps<_AlgPolicy>::next(__first1, __sent1);
  auto __last2 = _IterOps<_AlgPolicy>::next(__first2, __sent2);

  auto __len2 = __last2 - __first2;
  if (__len2 == 0)
    return __last1;
  auto __len1 = __last1 - __first1;
  if (__len1 < __len2)
    return __last1;
  const _Iter1 __s = __first1 + _D1(__len2 - 1);
  _Iter1 __l1 = __last1;
  _Iter2 __l2 = __last2;
  --__l2;
  while (true) {
    while (true) {
      if (__s == __l1)
        return __last1;
      if (std::__invoke(__pred, std::__invoke(__proj1, *--__l1), std::__invoke(__proj2, *__l2)))
        break;
    }
    _Iter1 __m1 = __l1;
    _Iter2 __m2 = __l2;
    while (true) {
      if (__m2 == __first2)
        return __m1;

      if (!std::__invoke(__pred, std::__invoke(__proj1, *--__m1), std::__invoke(*--__m2))) {
        break;
      }
    }
  }
}

template <class _ForwardIterator1, class _ForwardIterator2, class _BinaryPredicate>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _ForwardIterator1 __find_end_classic(
    _ForwardIterator1 __first1,
    _ForwardIterator1 __last1,
    _ForwardIterator2 __first2,
    _ForwardIterator2 __last2,
    _BinaryPredicate& __pred) {
  auto __proj = __identity();
  return std::__find_end_impl<_ClassicAlgPolicy>(
             __first1,
             __last1,
             __first2,
             __last2,
             __pred,
             __proj,
             __proj,
             typename iterator_traits<_ForwardIterator1>::iterator_category(),
             typename iterator_traits<_ForwardIterator2>::iterator_category())
      .first;
}

template <class _ForwardIterator1, class _ForwardIterator2, class _BinaryPredicate>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _ForwardIterator1 find_end(
    _ForwardIterator1 __first1,
    _ForwardIterator1 __last1,
    _ForwardIterator2 __first2,
    _ForwardIterator2 __last2,
    _BinaryPredicate __pred) {
  return std::__find_end_classic(__first1, __last1, __first2, __last2, __pred);
}

template <class _ForwardIterator1, class _ForwardIterator2>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _ForwardIterator1
find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2) {
  return std::find_end(__first1, __last1, __first2, __last2, __equal_to());
}

}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__string/char_traits.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/find_first_of.h" 1 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/find_first_of.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _ForwardIterator1, class _ForwardIterator2, class _BinaryPredicate>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _ForwardIterator1 __find_first_of_ce(
    _ForwardIterator1 __first1,
    _ForwardIterator1 __last1,
    _ForwardIterator2 __first2,
    _ForwardIterator2 __last2,
    _BinaryPredicate&& __pred) {
  for (; __first1 != __last1; ++__first1)
    for (_ForwardIterator2 __j = __first2; __j != __last2; ++__j)
      if (__pred(*__first1, *__j))
        return __first1;
  return __last1;
}

template <class _ForwardIterator1, class _ForwardIterator2, class _BinaryPredicate>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _ForwardIterator1 find_first_of(
    _ForwardIterator1 __first1,
    _ForwardIterator1 __last1,
    _ForwardIterator2 __first2,
    _ForwardIterator2 __last2,
    _BinaryPredicate __pred) {
  return std::__find_first_of_ce(__first1, __last1, __first2, __last2, __pred);
}

template <class _ForwardIterator1, class _ForwardIterator2>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _ForwardIterator1 find_first_of(
    _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2) {
  return std::__find_first_of_ce(__first1, __last1, __first2, __last2, __equal_to());
}

}}
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__string/char_traits.h" 2 3
# 26 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__string/char_traits.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cstdio" 1 3
# 101 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cstdio" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\stdio.h" 1 3
# 105 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\stdio.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdio.h" 1 3
# 41 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdio.h" 3
      namespace std {

        extern "C" {
# 53 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdio.h" 3
    typedef unsigned int size_t;
# 68 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdio.h" 3
    typedef __builtin_va_list __va_list;
# 87 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdio.h" 3
typedef struct __fpos_t_struct {
    unsigned long long int __pos;





    struct {
        unsigned int __state1, __state2;
    } __mbstate;
} fpos_t;
# 108 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdio.h" 3
typedef struct __FILE FILE;
# 119 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdio.h" 3
struct __FILE {
    union {
        long __FILE_alignment;



        char __FILE_size[84];

    } __FILE_opaque;
};
# 138 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdio.h" 3
extern FILE __stdin, __stdout, __stderr;
extern FILE *__aeabi_stdin, *__aeabi_stdout, *__aeabi_stderr;
# 224 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdio.h" 3
extern __attribute__((__nothrow__)) int remove(const char * ) __attribute__((__nonnull__(1)));







extern __attribute__((__nothrow__)) int rename(const char * , const char * ) __attribute__((__nonnull__(1,2)));
# 243 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdio.h" 3
extern __attribute__((__nothrow__)) FILE *tmpfile(void);






extern __attribute__((__nothrow__)) char *tmpnam(char * );
# 265 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdio.h" 3
extern __attribute__((__nothrow__)) int fclose(FILE * ) __attribute__((__nonnull__(1)));
# 275 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdio.h" 3
extern __attribute__((__nothrow__)) int fflush(FILE * );
# 285 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdio.h" 3
extern __attribute__((__nothrow__)) FILE *fopen(const char * __restrict ,
                           const char * __restrict ) __attribute__((__nonnull__(1,2)));
# 329 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdio.h" 3
extern __attribute__((__nothrow__)) FILE *freopen(const char * __restrict ,
                    const char * __restrict ,
                    FILE * __restrict ) __attribute__((__nonnull__(2,3)));
# 342 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdio.h" 3
extern __attribute__((__nothrow__)) void setbuf(FILE * __restrict ,
                    char * __restrict ) __attribute__((__nonnull__(1)));






extern __attribute__((__nothrow__)) int setvbuf(FILE * __restrict ,
                   char * __restrict ,
                   int , size_t ) __attribute__((__nonnull__(1)));
# 370 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdio.h" 3
#pragma __printf_args
extern __attribute__((__nothrow__)) int fprintf(FILE * __restrict ,
                    const char * __restrict , ...) __attribute__((__nonnull__(1,2)));
# 393 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdio.h" 3
#pragma __printf_args
extern __attribute__((__nothrow__)) int _fprintf(FILE * __restrict ,
                     const char * __restrict , ...) __attribute__((__nonnull__(1,2)));





#pragma __printf_args
extern __attribute__((__nothrow__)) int printf(const char * __restrict , ...) __attribute__((__nonnull__(1)));






#pragma __printf_args
extern __attribute__((__nothrow__)) int _printf(const char * __restrict , ...) __attribute__((__nonnull__(1)));





#pragma __printf_args
extern __attribute__((__nothrow__)) int sprintf(char * __restrict , const char * __restrict , ...) __attribute__((__nonnull__(1,2)));








#pragma __printf_args
extern __attribute__((__nothrow__)) int _sprintf(char * __restrict , const char * __restrict , ...) __attribute__((__nonnull__(1,2)));






#pragma __printf_args
extern __attribute__((__nothrow__)) int __ARM_snprintf(char * __restrict , size_t ,
                     const char * __restrict , ...) __attribute__((__nonnull__(3)));


#pragma __printf_args
extern __attribute__((__nothrow__)) int snprintf(char * __restrict , size_t ,
                     const char * __restrict , ...) __attribute__((__nonnull__(3)));
# 460 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdio.h" 3
#pragma __printf_args
extern __attribute__((__nothrow__)) int _snprintf(char * __restrict , size_t ,
                      const char * __restrict , ...) __attribute__((__nonnull__(3)));





#pragma __scanf_args
extern __attribute__((__nothrow__)) int fscanf(FILE * __restrict ,
                    const char * __restrict , ...) __attribute__((__nonnull__(1,2)));
# 503 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdio.h" 3
#pragma __scanf_args
extern __attribute__((__nothrow__)) int _fscanf(FILE * __restrict ,
                     const char * __restrict , ...) __attribute__((__nonnull__(1,2)));





#pragma __scanf_args
extern __attribute__((__nothrow__)) int scanf(const char * __restrict , ...) __attribute__((__nonnull__(1)));








#pragma __scanf_args
extern __attribute__((__nothrow__)) int _scanf(const char * __restrict , ...) __attribute__((__nonnull__(1)));





#pragma __scanf_args
extern __attribute__((__nothrow__)) int sscanf(const char * __restrict ,
                    const char * __restrict , ...) __attribute__((__nonnull__(1,2)));
# 541 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdio.h" 3
#pragma __scanf_args
extern __attribute__((__nothrow__)) int _sscanf(const char * __restrict ,
                     const char * __restrict , ...) __attribute__((__nonnull__(1,2)));







extern __attribute__((__nothrow__)) int vfscanf(FILE * __restrict , const char * __restrict , __va_list) __attribute__((__nonnull__(1,2)));
extern __attribute__((__nothrow__)) int vscanf(const char * __restrict , __va_list) __attribute__((__nonnull__(1)));
extern __attribute__((__nothrow__)) int vsscanf(const char * __restrict , const char * __restrict , __va_list) __attribute__((__nonnull__(1,2)));

extern __attribute__((__nothrow__)) int _vfscanf(FILE * __restrict , const char * __restrict , __va_list) __attribute__((__nonnull__(1,2)));
extern __attribute__((__nothrow__)) int _vscanf(const char * __restrict , __va_list) __attribute__((__nonnull__(1)));
extern __attribute__((__nothrow__)) int _vsscanf(const char * __restrict , const char * __restrict , __va_list) __attribute__((__nonnull__(1,2)));
extern __attribute__((__nothrow__)) int __ARM_vsscanf(const char * __restrict , const char * __restrict , __va_list) __attribute__((__nonnull__(1,2)));

extern __attribute__((__nothrow__)) int vprintf(const char * __restrict , __va_list ) __attribute__((__nonnull__(1)));







extern __attribute__((__nothrow__)) int _vprintf(const char * __restrict , __va_list ) __attribute__((__nonnull__(1)));





extern __attribute__((__nothrow__)) int vfprintf(FILE * __restrict ,
                    const char * __restrict , __va_list ) __attribute__((__nonnull__(1,2)));
# 584 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdio.h" 3
extern __attribute__((__nothrow__)) int vsprintf(char * __restrict ,
                     const char * __restrict , __va_list ) __attribute__((__nonnull__(1,2)));
# 594 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdio.h" 3
extern __attribute__((__nothrow__)) int __ARM_vsnprintf(char * __restrict , size_t ,
                     const char * __restrict , __va_list ) __attribute__((__nonnull__(3)));

extern __attribute__((__nothrow__)) int vsnprintf(char * __restrict , size_t ,
                     const char * __restrict , __va_list ) __attribute__((__nonnull__(3)));
# 609 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdio.h" 3
extern __attribute__((__nothrow__)) int _vsprintf(char * __restrict ,
                      const char * __restrict , __va_list ) __attribute__((__nonnull__(1,2)));





extern __attribute__((__nothrow__)) int _vfprintf(FILE * __restrict ,
                     const char * __restrict , __va_list ) __attribute__((__nonnull__(1,2)));





extern __attribute__((__nothrow__)) int _vsnprintf(char * __restrict , size_t ,
                      const char * __restrict , __va_list ) __attribute__((__nonnull__(3)));
# 635 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdio.h" 3
#pragma __printf_args
extern __attribute__((__nothrow__)) int __ARM_asprintf(char ** , const char * __restrict , ...) __attribute__((__nonnull__(2)));
extern __attribute__((__nothrow__)) int __ARM_vasprintf(char ** , const char * __restrict , __va_list ) __attribute__((__nonnull__(2)));
# 649 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdio.h" 3
extern __attribute__((__nothrow__)) int fgetc(FILE * ) __attribute__((__nonnull__(1)));
# 659 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdio.h" 3
extern __attribute__((__nothrow__)) char *fgets(char * __restrict , int ,
                    FILE * __restrict ) __attribute__((__nonnull__(1,3)));
# 673 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdio.h" 3
extern __attribute__((__nothrow__)) int fputc(int , FILE * ) __attribute__((__nonnull__(2)));
# 683 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdio.h" 3
extern __attribute__((__nothrow__)) int fputs(const char * __restrict , FILE * __restrict ) __attribute__((__nonnull__(1,2)));






extern __attribute__((__nothrow__)) int getc(FILE * ) __attribute__((__nonnull__(1)));
# 701 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdio.h" 3
    inline int getchar() { return getc((&::std:: __stdin)); }
# 713 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdio.h" 3
extern __attribute__((__nothrow__)) char *gets(char * ) __attribute__((__nonnull__(1)));
# 725 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdio.h" 3
extern __attribute__((__nothrow__)) int putc(int , FILE * ) __attribute__((__nonnull__(2)));
# 734 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdio.h" 3
    inline int putchar(int __c) { return putc(__c, (&::std:: __stdout)); }
# 744 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdio.h" 3
extern __attribute__((__nothrow__)) int puts(const char * ) __attribute__((__nonnull__(1)));







extern __attribute__((__nothrow__)) int ungetc(int , FILE * ) __attribute__((__nonnull__(2)));
# 778 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdio.h" 3
extern __attribute__((__nothrow__)) size_t fread(void * __restrict ,
                    size_t , size_t , FILE * __restrict ) __attribute__((__nonnull__(1,4)));
# 794 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdio.h" 3
extern __attribute__((__nothrow__)) size_t __fread_bytes_avail(void * __restrict ,
                    size_t , FILE * __restrict ) __attribute__((__nonnull__(1,3)));
# 810 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdio.h" 3
extern __attribute__((__nothrow__)) size_t fwrite(const void * __restrict ,
                    size_t , size_t , FILE * __restrict ) __attribute__((__nonnull__(1,4)));
# 822 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdio.h" 3
extern __attribute__((__nothrow__)) int fgetpos(FILE * __restrict , fpos_t * __restrict ) __attribute__((__nonnull__(1,2)));
# 833 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdio.h" 3
extern __attribute__((__nothrow__)) int fseek(FILE * , long int , int ) __attribute__((__nonnull__(1)));
# 850 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdio.h" 3
extern __attribute__((__nothrow__)) int fsetpos(FILE * __restrict , const fpos_t * __restrict ) __attribute__((__nonnull__(1,2)));
# 863 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdio.h" 3
extern __attribute__((__nothrow__)) long int ftell(FILE * ) __attribute__((__nonnull__(1)));
# 877 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdio.h" 3
extern __attribute__((__nothrow__)) void rewind(FILE * ) __attribute__((__nonnull__(1)));
# 886 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdio.h" 3
extern __attribute__((__nothrow__)) void clearerr(FILE * ) __attribute__((__nonnull__(1)));







extern __attribute__((__nothrow__)) int feof(FILE * ) __attribute__((__nonnull__(1)));




extern __attribute__((__nothrow__)) int ferror(FILE * ) __attribute__((__nonnull__(1)));




extern __attribute__((__nothrow__)) void perror(const char * );
# 917 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdio.h" 3
extern __attribute__((__nothrow__)) int _fisatty(FILE * ) __attribute__((__nonnull__(1)));



extern __attribute__((__nothrow__)) void __use_no_semihosting_swi(void);
extern __attribute__((__nothrow__)) void __use_no_semihosting(void);
# 932 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdio.h" 3
        }
      }
# 942 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdio.h" 3
    using ::std::size_t;
    using ::std::fpos_t;
    using ::std::FILE;
    using ::std::remove;
    using ::std::rename;
    using ::std::tmpfile;
    using ::std::tmpnam;
    using ::std::fclose;
    using ::std::fflush;
    using ::std::fopen;
    using ::std::freopen;
    using ::std::setbuf;
    using ::std::setvbuf;
    using ::std::fprintf;
    using ::std::_fprintf;
    using ::std::printf;
    using ::std::_printf;
    using ::std::sprintf;
    using ::std::_sprintf;
    using ::std::snprintf;
    using ::std::vsnprintf;
    using ::std::vfscanf;
    using ::std::vscanf;
    using ::std::vsscanf;
    using ::std::_snprintf;
    using ::std::_vsnprintf;




    using ::std::__ARM_asprintf;
    using ::std::__ARM_vasprintf;
    using ::std::__ARM_vsnprintf;
    using ::std::__ARM_snprintf;
    using ::std::__ARM_vsscanf;
    using ::std::fscanf;
    using ::std::_fscanf;
    using ::std::scanf;
    using ::std::_scanf;
    using ::std::sscanf;
    using ::std::_sscanf;
    using ::std::_vfscanf;
    using ::std::_vscanf;
    using ::std::_vsscanf;
    using ::std::vprintf;
    using ::std::_vprintf;
    using ::std::vfprintf;
    using ::std::_vfprintf;
    using ::std::vsprintf;
    using ::std::_vsprintf;
    using ::std::fgetc;
    using ::std::fgets;
    using ::std::fputc;
    using ::std::fputs;
    using ::std::getc;
    using ::std::getchar;
    using ::std::gets;
    using ::std::putc;
    using ::std::putchar;
    using ::std::puts;
    using ::std::ungetc;
    using ::std::fread;
    using ::std::__fread_bytes_avail;
    using ::std::fwrite;
    using ::std::fgetpos;
    using ::std::fseek;
    using ::std::fsetpos;
    using ::std::ftell;
    using ::std::rewind;
    using ::std::clearerr;
    using ::std::feof;
    using ::std::ferror;
    using ::std::perror;
    using ::std::_fisatty;
    using ::std::__use_no_semihosting_swi;
    using ::std::__use_no_semihosting;
# 109 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\stdio.h" 2 3
# 102 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cstdio" 2 3
# 113 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cstdio" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

using ::FILE __attribute__((__using_if_exists__));
using ::fpos_t __attribute__((__using_if_exists__));
using ::size_t __attribute__((__using_if_exists__));

using ::fclose __attribute__((__using_if_exists__));
using ::fflush __attribute__((__using_if_exists__));
using ::setbuf __attribute__((__using_if_exists__));
using ::setvbuf __attribute__((__using_if_exists__));
using ::fprintf __attribute__((__using_if_exists__));
using ::fscanf __attribute__((__using_if_exists__));
using ::snprintf __attribute__((__using_if_exists__));
using ::sprintf __attribute__((__using_if_exists__));
using ::sscanf __attribute__((__using_if_exists__));
using ::vfprintf __attribute__((__using_if_exists__));
using ::vfscanf __attribute__((__using_if_exists__));
using ::vsscanf __attribute__((__using_if_exists__));
using ::vsnprintf __attribute__((__using_if_exists__));
using ::vsprintf __attribute__((__using_if_exists__));
using ::fgetc __attribute__((__using_if_exists__));
using ::fgets __attribute__((__using_if_exists__));
using ::fputc __attribute__((__using_if_exists__));
using ::fputs __attribute__((__using_if_exists__));
using ::getc __attribute__((__using_if_exists__));
using ::putc __attribute__((__using_if_exists__));
using ::ungetc __attribute__((__using_if_exists__));
using ::fread __attribute__((__using_if_exists__));
using ::fwrite __attribute__((__using_if_exists__));
using ::fgetpos __attribute__((__using_if_exists__));
using ::fseek __attribute__((__using_if_exists__));
using ::fsetpos __attribute__((__using_if_exists__));
using ::ftell __attribute__((__using_if_exists__));
using ::rewind __attribute__((__using_if_exists__));
using ::clearerr __attribute__((__using_if_exists__));
using ::feof __attribute__((__using_if_exists__));
using ::ferror __attribute__((__using_if_exists__));
using ::perror __attribute__((__using_if_exists__));

using ::fopen __attribute__((__using_if_exists__));
using ::freopen __attribute__((__using_if_exists__));
using ::remove __attribute__((__using_if_exists__));
using ::rename __attribute__((__using_if_exists__));
using ::tmpfile __attribute__((__using_if_exists__));
using ::tmpnam __attribute__((__using_if_exists__));

using ::getchar __attribute__((__using_if_exists__));



using ::scanf __attribute__((__using_if_exists__));
using ::vscanf __attribute__((__using_if_exists__));

using ::printf __attribute__((__using_if_exists__));
using ::putchar __attribute__((__using_if_exists__));
using ::puts __attribute__((__using_if_exists__));
using ::vprintf __attribute__((__using_if_exists__));

}}
# 27 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__string/char_traits.h" 2 3
# 35 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__string/char_traits.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 39 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__string/char_traits.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _CharT>
struct char_traits;
# 77 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__string/char_traits.h" 3
template <>
struct char_traits<char> {
  using char_type = char;
  using int_type = int;
  using off_type = streamoff;
  using pos_type = streampos;
  using state_type = mbstate_t;




  static inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr void
  assign(char_type& __c1, const char_type& __c2) noexcept {
    __c1 = __c2;
  }


  static inline __attribute__((__visibility__("hidden"))) constexpr bool eq(char_type __c1, char_type __c2) noexcept {
    return __c1 == __c2;
  }
  static inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool lt(char_type __c1, char_type __c2) noexcept {
    return (unsigned char)__c1 < (unsigned char)__c2;
  }



  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr int
  compare(const char_type* __lhs, const char_type* __rhs, size_t __count) noexcept {
    if (__libcpp_is_constant_evaluated()) {

      return __builtin_memcmp(__lhs, __rhs, __count);
# 121 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__string/char_traits.h" 3
    } else {
      return __builtin_memcmp(__lhs, __rhs, __count);
    }
  }

  static inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_t constexpr length(const char_type* __s) noexcept {
    return std::__constexpr_strlen(__s);
  }

  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const char_type*
  find(const char_type* __s, size_t __n, const char_type& __a) noexcept {
    if (__n == 0)
      return nullptr;
    return std::__constexpr_memchr(__s, __a, __n);
  }

  static inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) char_type*
  move(char_type* __s1, const char_type* __s2, size_t __n) noexcept {
    return std::__constexpr_memmove(__s1, __s2, __element_count(__n));
  }

  static inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) char_type*
  copy(char_type* __s1, const char_type* __s2, size_t __n) noexcept {
    ((void)0);

    std::copy_n(__s2, __n, __s1);
    return __s1;
  }

  static inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) char_type*
  assign(char_type* __s, size_t __n, char_type __a) noexcept {
    std::fill_n(__s, __n, __a);
    return __s;
  }

  static inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr int_type not_eof(int_type __c) noexcept {
    return eq_int_type(__c, eof()) ? ~eof() : __c;
  }
  static inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr char_type to_char_type(int_type __c) noexcept {
    return char_type(__c);
  }
  static inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr int_type to_int_type(char_type __c) noexcept {
    return int_type((unsigned char)__c);
  }
  static inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool eq_int_type(int_type __c1, int_type __c2) noexcept {
    return __c1 == __c2;
  }
  static inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr int_type eof() noexcept { return int_type((-1)); }
};




template <>
struct char_traits<wchar_t> {
  using char_type = wchar_t;
  using int_type = wint_t;
  using off_type = streamoff;
  using pos_type = streampos;
  using state_type = mbstate_t;




  static inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr void
  assign(char_type& __c1, const char_type& __c2) noexcept {
    __c1 = __c2;
  }
  static inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool eq(char_type __c1, char_type __c2) noexcept {
    return __c1 == __c2;
  }
  static inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool lt(char_type __c1, char_type __c2) noexcept {
    return __c1 < __c2;
  }

  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr int
  compare(const char_type* __s1, const char_type* __s2, size_t __n) noexcept {
    if (__n == 0)
      return 0;
    return std::__constexpr_wmemcmp(__s1, __s2, __n);
  }

  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr size_t length(const char_type* __s) noexcept {
    return std::__constexpr_wcslen(__s);
  }

  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const char_type*
  find(const char_type* __s, size_t __n, const char_type& __a) noexcept {
    if (__n == 0)
      return nullptr;
    return std::__constexpr_wmemchr(__s, __a, __n);
  }

  static inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) char_type*
  move(char_type* __s1, const char_type* __s2, size_t __n) noexcept {
    return std::__constexpr_memmove(__s1, __s2, __element_count(__n));
  }

  static inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) char_type*
  copy(char_type* __s1, const char_type* __s2, size_t __n) noexcept {
    ((void)0);

    std::copy_n(__s2, __n, __s1);
    return __s1;
  }

  static inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) char_type*
  assign(char_type* __s, size_t __n, char_type __a) noexcept {
    std::fill_n(__s, __n, __a);
    return __s;
  }

  static inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr int_type not_eof(int_type __c) noexcept {
    return eq_int_type(__c, eof()) ? ~eof() : __c;
  }
  static inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr char_type to_char_type(int_type __c) noexcept {
    return char_type(__c);
  }
  static inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr int_type to_int_type(char_type __c) noexcept {
    return int_type(__c);
  }
  static inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool eq_int_type(int_type __c1, int_type __c2) noexcept {
    return __c1 == __c2;
  }
  static inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr int_type eof() noexcept { return int_type(((::std:: wint_t)-1)); }
};
# 331 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__string/char_traits.h" 3
template <>
struct char_traits<char16_t> {
  using char_type = char16_t;
  using int_type = uint_least16_t;
  using off_type = streamoff;
  using pos_type = u16streampos;
  using state_type = mbstate_t;




  static inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr void
  assign(char_type& __c1, const char_type& __c2) noexcept {
    __c1 = __c2;
  }
  static inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool eq(char_type __c1, char_type __c2) noexcept {
    return __c1 == __c2;
  }
  static inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool lt(char_type __c1, char_type __c2) noexcept {
    return __c1 < __c2;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr int
  compare(const char_type* __s1, const char_type* __s2, size_t __n) noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr size_t length(const char_type* __s) noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr const char_type*
  find(const char_type* __s, size_t __n, const char_type& __a) noexcept;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static char_type*
  move(char_type* __s1, const char_type* __s2, size_t __n) noexcept {
    return std::__constexpr_memmove(__s1, __s2, __element_count(__n));
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static char_type*
  copy(char_type* __s1, const char_type* __s2, size_t __n) noexcept {
    ((void)0);

    std::copy_n(__s2, __n, __s1);
    return __s1;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static char_type*
  assign(char_type* __s, size_t __n, char_type __a) noexcept {
    std::fill_n(__s, __n, __a);
    return __s;
  }

  static inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr int_type not_eof(int_type __c) noexcept {
    return eq_int_type(__c, eof()) ? ~eof() : __c;
  }
  static inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr char_type to_char_type(int_type __c) noexcept {
    return char_type(__c);
  }
  static inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr int_type to_int_type(char_type __c) noexcept {
    return int_type(__c);
  }
  static inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool eq_int_type(int_type __c1, int_type __c2) noexcept {
    return __c1 == __c2;
  }
  static inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr int_type eof() noexcept { return int_type(0xFFFF); }
};

inline constexpr int
char_traits<char16_t>::compare(const char_type* __s1, const char_type* __s2, size_t __n) noexcept {
  for (; __n; --__n, ++__s1, ++__s2) {
    if (lt(*__s1, *__s2))
      return -1;
    if (lt(*__s2, *__s1))
      return 1;
  }
  return 0;
}

inline constexpr size_t char_traits<char16_t>::length(const char_type* __s) noexcept {
  size_t __len = 0;
  for (; !eq(*__s, char_type(0)); ++__s)
    ++__len;
  return __len;
}

inline constexpr const char16_t*
char_traits<char16_t>::find(const char_type* __s, size_t __n, const char_type& __a) noexcept {
  for (; __n; --__n) {
    if (eq(*__s, __a))
      return __s;
    ++__s;
  }
  return nullptr;
}

template <>
struct char_traits<char32_t> {
  using char_type = char32_t;
  using int_type = uint_least32_t;
  using off_type = streamoff;
  using pos_type = u32streampos;
  using state_type = mbstate_t;




  static inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr void
  assign(char_type& __c1, const char_type& __c2) noexcept {
    __c1 = __c2;
  }
  static inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool eq(char_type __c1, char_type __c2) noexcept {
    return __c1 == __c2;
  }
  static inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool lt(char_type __c1, char_type __c2) noexcept {
    return __c1 < __c2;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr int
  compare(const char_type* __s1, const char_type* __s2, size_t __n) noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr size_t length(const char_type* __s) noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr const char_type*
  find(const char_type* __s, size_t __n, const char_type& __a) noexcept;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static char_type*
  move(char_type* __s1, const char_type* __s2, size_t __n) noexcept {
    return std::__constexpr_memmove(__s1, __s2, __element_count(__n));
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static char_type*
  copy(char_type* __s1, const char_type* __s2, size_t __n) noexcept {
    std::copy_n(__s2, __n, __s1);
    return __s1;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static char_type*
  assign(char_type* __s, size_t __n, char_type __a) noexcept {
    std::fill_n(__s, __n, __a);
    return __s;
  }

  static inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr int_type not_eof(int_type __c) noexcept {
    return eq_int_type(__c, eof()) ? ~eof() : __c;
  }
  static inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr char_type to_char_type(int_type __c) noexcept {
    return char_type(__c);
  }
  static inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr int_type to_int_type(char_type __c) noexcept {
    return int_type(__c);
  }
  static inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool eq_int_type(int_type __c1, int_type __c2) noexcept {
    return __c1 == __c2;
  }
  static inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr int_type eof() noexcept { return int_type(0xFFFFFFFF); }
};

inline constexpr int
char_traits<char32_t>::compare(const char_type* __s1, const char_type* __s2, size_t __n) noexcept {
  for (; __n; --__n, ++__s1, ++__s2) {
    if (lt(*__s1, *__s2))
      return -1;
    if (lt(*__s2, *__s1))
      return 1;
  }
  return 0;
}

inline constexpr size_t char_traits<char32_t>::length(const char_type* __s) noexcept {
  size_t __len = 0;
  for (; !eq(*__s, char_type(0)); ++__s)
    ++__len;
  return __len;
}

inline constexpr const char32_t*
char_traits<char32_t>::find(const char_type* __s, size_t __n, const char_type& __a) noexcept {
  for (; __n; --__n) {
    if (eq(*__s, __a))
      return __s;
    ++__s;
  }
  return nullptr;
}




template <class _CharT, class _SizeT, class _Traits, _SizeT __npos>
inline _SizeT constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
__str_find(const _CharT* __p, _SizeT __sz, _CharT __c, _SizeT __pos) noexcept {
  if (__pos >= __sz)
    return __npos;
  const _CharT* __r = _Traits::find(__p + __pos, __sz - __pos, __c);
  if (__r == nullptr)
    return __npos;
  return static_cast<_SizeT>(__r - __p);
}

template <class _CharT, class _Traits>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline constexpr const _CharT* __search_substring(
    const _CharT* __first1, const _CharT* __last1, const _CharT* __first2, const _CharT* __last2) noexcept {


  const ptrdiff_t __len2 = __last2 - __first2;
  if (__len2 == 0)
    return __first1;

  ptrdiff_t __len1 = __last1 - __first1;
  if (__len1 < __len2)
    return __last1;


  _CharT __f2 = *__first2;
  while (true) {
    __len1 = __last1 - __first1;

    if (__len1 < __len2)
      return __last1;


    __first1 = _Traits::find(__first1, __len1 - __len2 + 1, __f2);
    if (__first1 == nullptr)
      return __last1;






    if (_Traits::compare(__first1, __first2, __len2) == 0)
      return __first1;

    ++__first1;
  }
}

template <class _CharT, class _SizeT, class _Traits, _SizeT __npos>
inline _SizeT constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
__str_find(const _CharT* __p, _SizeT __sz, const _CharT* __s, _SizeT __pos, _SizeT __n) noexcept {
  if (__pos > __sz)
    return __npos;

  if (__n == 0)
    return __pos;

  const _CharT* __r = std::__search_substring<_CharT, _Traits>(__p + __pos, __p + __sz, __s, __s + __n);

  if (__r == __p + __sz)
    return __npos;
  return static_cast<_SizeT>(__r - __p);
}



template <class _CharT, class _SizeT, class _Traits, _SizeT __npos>
inline _SizeT constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
__str_rfind(const _CharT* __p, _SizeT __sz, _CharT __c, _SizeT __pos) noexcept {
  if (__sz < 1)
    return __npos;
  if (__pos < __sz)
    ++__pos;
  else
    __pos = __sz;
  for (const _CharT* __ps = __p + __pos; __ps != __p;) {
    if (_Traits::eq(*--__ps, __c))
      return static_cast<_SizeT>(__ps - __p);
  }
  return __npos;
}

template <class _CharT, class _SizeT, class _Traits, _SizeT __npos>
inline _SizeT constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
__str_rfind(const _CharT* __p, _SizeT __sz, const _CharT* __s, _SizeT __pos, _SizeT __n) noexcept {
  __pos = std::min(__pos, __sz);
  if (__n < __sz - __pos)
    __pos += __n;
  else
    __pos = __sz;
  const _CharT* __r = std::__find_end_classic(__p, __p + __pos, __s, __s + __n, _Traits::eq);
  if (__n > 0 && __r == __p + __pos)
    return __npos;
  return static_cast<_SizeT>(__r - __p);
}


template <class _CharT, class _SizeT, class _Traits, _SizeT __npos>
inline _SizeT constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
__str_find_first_of(const _CharT* __p, _SizeT __sz, const _CharT* __s, _SizeT __pos, _SizeT __n) noexcept {
  if (__pos >= __sz || __n == 0)
    return __npos;
  const _CharT* __r = std::__find_first_of_ce(__p + __pos, __p + __sz, __s, __s + __n, _Traits::eq);
  if (__r == __p + __sz)
    return __npos;
  return static_cast<_SizeT>(__r - __p);
}


template <class _CharT, class _SizeT, class _Traits, _SizeT __npos>
inline _SizeT constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
__str_find_last_of(const _CharT* __p, _SizeT __sz, const _CharT* __s, _SizeT __pos, _SizeT __n) noexcept {
  if (__n != 0) {
    if (__pos < __sz)
      ++__pos;
    else
      __pos = __sz;
    for (const _CharT* __ps = __p + __pos; __ps != __p;) {
      const _CharT* __r = _Traits::find(__s, __n, *--__ps);
      if (__r)
        return static_cast<_SizeT>(__ps - __p);
    }
  }
  return __npos;
}


template <class _CharT, class _SizeT, class _Traits, _SizeT __npos>
inline _SizeT constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
__str_find_first_not_of(const _CharT* __p, _SizeT __sz, const _CharT* __s, _SizeT __pos, _SizeT __n) noexcept {
  if (__pos < __sz) {
    const _CharT* __pe = __p + __sz;
    for (const _CharT* __ps = __p + __pos; __ps != __pe; ++__ps)
      if (_Traits::find(__s, __n, *__ps) == nullptr)
        return static_cast<_SizeT>(__ps - __p);
  }
  return __npos;
}

template <class _CharT, class _SizeT, class _Traits, _SizeT __npos>
inline _SizeT constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
__str_find_first_not_of(const _CharT* __p, _SizeT __sz, _CharT __c, _SizeT __pos) noexcept {
  if (__pos < __sz) {
    const _CharT* __pe = __p + __sz;
    for (const _CharT* __ps = __p + __pos; __ps != __pe; ++__ps)
      if (!_Traits::eq(*__ps, __c))
        return static_cast<_SizeT>(__ps - __p);
  }
  return __npos;
}


template <class _CharT, class _SizeT, class _Traits, _SizeT __npos>
inline _SizeT constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
__str_find_last_not_of(const _CharT* __p, _SizeT __sz, const _CharT* __s, _SizeT __pos, _SizeT __n) noexcept {
  if (__pos < __sz)
    ++__pos;
  else
    __pos = __sz;
  for (const _CharT* __ps = __p + __pos; __ps != __p;)
    if (_Traits::find(__s, __n, *--__ps) == nullptr)
      return static_cast<_SizeT>(__ps - __p);
  return __npos;
}

template <class _CharT, class _SizeT, class _Traits, _SizeT __npos>
inline _SizeT constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
__str_find_last_not_of(const _CharT* __p, _SizeT __sz, _CharT __c, _SizeT __pos) noexcept {
  if (__pos < __sz)
    ++__pos;
  else
    __pos = __sz;
  for (const _CharT* __ps = __p + __pos; __ps != __p;)
    if (!_Traits::eq(*--__ps, __c))
      return static_cast<_SizeT>(__ps - __p);
  return __npos;
}

template <class _Ptr>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_t __do_string_hash(_Ptr __p, _Ptr __e) {
  typedef typename iterator_traits<_Ptr>::value_type value_type;
  return __murmur2_or_cityhash<size_t>()(__p, (__e - __p) * sizeof(value_type));
}

}}
# 225 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string_view" 2 3
# 243 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string_view" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/data.h" 1 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/data.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



template <class _Cont>
constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) auto data(_Cont& __c) noexcept(noexcept(__c.data())) -> decltype(__c.data()) {
  return __c.data();
}

template <class _Cont>
constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) auto data(const _Cont& __c) noexcept(noexcept(__c.data())) -> decltype(__c.data()) {
  return __c.data();
}

template <class _Tp, size_t _Sz>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Tp* data(_Tp (&__array)[_Sz]) noexcept {
  return __array;
}

template <class _Ep>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const _Ep* data(initializer_list<_Ep> __il) noexcept {
  return __il.begin();
}



}}
# 244 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string_view" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/empty.h" 1 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/empty.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



template <class _Cont>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr auto empty(const _Cont& __c)
    noexcept(noexcept(__c.empty())) -> decltype(__c.empty()) {
  return __c.empty();
}

template <class _Tp, size_t _Sz>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool empty(const _Tp (&)[_Sz]) noexcept {
  return false;
}

template <class _Ep>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool empty(initializer_list<_Ep> __il) noexcept {
  return __il.size() == 0;
}



}}
# 245 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string_view" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/reverse_access.h" 1 3
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/reverse_access.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



template <class _Tp, size_t _Np>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr reverse_iterator<_Tp*> rbegin(_Tp (&__array)[_Np]) {
  return reverse_iterator<_Tp*>(__array + _Np);
}

template <class _Tp, size_t _Np>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr reverse_iterator<_Tp*> rend(_Tp (&__array)[_Np]) {
  return reverse_iterator<_Tp*>(__array);
}

template <class _Ep>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr reverse_iterator<const _Ep*> rbegin(initializer_list<_Ep> __il) {
  return reverse_iterator<const _Ep*>(__il.end());
}

template <class _Ep>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr reverse_iterator<const _Ep*> rend(initializer_list<_Ep> __il) {
  return reverse_iterator<const _Ep*>(__il.begin());
}

template <class _Cp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr auto rbegin(_Cp& __c) -> decltype(__c.rbegin()) {
  return __c.rbegin();
}

template <class _Cp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr auto rbegin(const _Cp& __c) -> decltype(__c.rbegin()) {
  return __c.rbegin();
}

template <class _Cp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr auto rend(_Cp& __c) -> decltype(__c.rend()) {
  return __c.rend();
}

template <class _Cp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr auto rend(const _Cp& __c) -> decltype(__c.rend()) {
  return __c.rend();
}

template <class _Cp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr auto crbegin(const _Cp& __c) -> decltype(std::rbegin(__c)) {
  return std::rbegin(__c);
}

template <class _Cp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr auto crend(const _Cp& __c) -> decltype(std::rend(__c)) {
  return std::rend(__c);
}



}}
# 246 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string_view" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/size.h" 1 3
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/size.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



template <class _Cont>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr auto size(const _Cont& __c) noexcept(noexcept(__c.size())) -> decltype(__c.size()) {
  return __c.size();
}

template <class _Tp, size_t _Sz>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr size_t size(const _Tp (&)[_Sz]) noexcept {
  return _Sz;
}
# 57 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/size.h" 3
}}
# 247 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string_view" 2 3


# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\compare" 1 3
# 145 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\compare" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__compare/compare_partial_order_fallback.h" 1 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__compare/compare_partial_order_fallback.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__compare/partial_order.h" 1 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__compare/partial_order.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__compare/weak_order.h" 1 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__compare/weak_order.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__compare/strong_order.h" 1 3
# 12 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__compare/strong_order.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__bit/bit_cast.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__bit/bit_cast.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 33 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__bit/bit_cast.h" 3
}}
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__compare/strong_order.h" 2 3






# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/priority_tag.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/priority_tag.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <size_t _Ip>
struct __priority_tag : __priority_tag<_Ip - 1> {};
template <>
struct __priority_tag<0> {};

}}
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__compare/strong_order.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cmath" 1 3
# 315 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cmath" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/promote.h" 1 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/promote.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
struct __numeric_type {
  static void __test(...);
  static float __test(float);
  static double __test(char);
  static double __test(int);
  static double __test(unsigned);
  static double __test(long);
  static double __test(unsigned long);
  static double __test(long long);
  static double __test(unsigned long long);




  static double __test(double);
  static long double __test(long double);

  typedef decltype(__test(std::declval<_Tp>())) type;
  static const bool value = _IsNotSame<type, void>::value;
};

template <>
struct __numeric_type<void> {
  static const bool value = true;
};

template <class _A1,
          class _A2 = void,
          class _A3 = void,
          bool = __numeric_type<_A1>::value && __numeric_type<_A2>::value && __numeric_type<_A3>::value>
class __promote_imp {
public:
  static const bool value = false;
};

template <class _A1, class _A2, class _A3>
class __promote_imp<_A1, _A2, _A3, true> {
private:
  typedef typename __promote_imp<_A1>::type __type1;
  typedef typename __promote_imp<_A2>::type __type2;
  typedef typename __promote_imp<_A3>::type __type3;

public:
  typedef decltype(__type1() + __type2() + __type3()) type;
  static const bool value = true;
};

template <class _A1, class _A2>
class __promote_imp<_A1, _A2, void, true> {
private:
  typedef typename __promote_imp<_A1>::type __type1;
  typedef typename __promote_imp<_A2>::type __type2;

public:
  typedef decltype(__type1() + __type2()) type;
  static const bool value = true;
};

template <class _A1>
class __promote_imp<_A1, void, void, true> {
public:
  typedef typename __numeric_type<_A1>::type type;
  static const bool value = true;
};

template <class _A1, class _A2 = void, class _A3 = void>
class __promote : public __promote_imp<_A1, _A2, _A3> {};

}}
# 316 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cmath" 2 3




# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\math.h" 1 3
# 298 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\math.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\math.h" 1 3
# 154 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\math.h" 3
      extern "C" {


extern __attribute__((__pcs__("aapcs"))) unsigned __ARM_dcmp4(double , double );
extern __attribute__((__pcs__("aapcs"))) unsigned __ARM_fcmp4(float , float );







extern __attribute__((__nothrow__)) __attribute__((__pcs__("aapcs"))) int __ARM_fpclassifyf(float );
extern __attribute__((__nothrow__)) __attribute__((__pcs__("aapcs"))) int __ARM_fpclassify(double );



inline __attribute__((__nothrow__)) __attribute__((__pcs__("aapcs"))) int __ARM_isfinitef(float __x)
{
    return (((*(unsigned *)&(__x)) >> 23) & 0xff) != 0xff;
}
inline __attribute__((__nothrow__)) __attribute__((__pcs__("aapcs"))) int __ARM_isfinite(double __x)
{
    return (((*(1 + (unsigned *)&(__x))) >> 20) & 0x7ff) != 0x7ff;
}



inline __attribute__((__nothrow__)) __attribute__((__pcs__("aapcs"))) int __ARM_isinff(float __x)
{
    return ((*(unsigned *)&(__x)) << 1) == 0xff000000;
}
inline __attribute__((__nothrow__)) __attribute__((__pcs__("aapcs"))) int __ARM_isinf(double __x)
{
    return (((*(1 + (unsigned *)&(__x))) << 1) == 0xffe00000) && ((*(unsigned *)&(__x)) == 0);
}



inline __attribute__((__nothrow__)) __attribute__((__pcs__("aapcs"))) int __ARM_islessgreaterf(float __x, float __y)
{
    unsigned __f = __ARM_fcmp4(__x, __y) >> 28;
    return (__f == 8) || (__f == 2);
}
inline __attribute__((__nothrow__)) __attribute__((__pcs__("aapcs"))) int __ARM_islessgreater(double __x, double __y)
{
    unsigned __f = __ARM_dcmp4(__x, __y) >> 28;
    return (__f == 8) || (__f == 2);
}





inline __attribute__((__nothrow__)) __attribute__((__pcs__("aapcs"))) int __ARM_isnanf(float __x)
{
    return (0x7f800000 - ((*(unsigned *)&(__x)) & 0x7fffffff)) >> 31;
}
inline __attribute__((__nothrow__)) __attribute__((__pcs__("aapcs"))) int __ARM_isnan(double __x)
{
    unsigned __xf = (*(1 + (unsigned *)&(__x))) | (((*(unsigned *)&(__x)) == 0) ? 0 : 1);
    return (0x7ff00000 - (__xf & 0x7fffffff)) >> 31;
}



inline __attribute__((__nothrow__)) __attribute__((__pcs__("aapcs"))) int __ARM_isnormalf(float __x)
{
    unsigned __xe = ((*(unsigned *)&(__x)) >> 23) & 0xff;
    return (__xe != 0xff) && (__xe != 0);
}
inline __attribute__((__nothrow__)) __attribute__((__pcs__("aapcs"))) int __ARM_isnormal(double __x)
{
    unsigned __xe = ((*(1 + (unsigned *)&(__x))) >> 20) & 0x7ff;
    return (__xe != 0x7ff) && (__xe != 0);
}



inline __attribute__((__nothrow__)) __attribute__((__pcs__("aapcs"))) int __ARM_signbitf(float __x)
{
    return (*(unsigned *)&(__x)) >> 31;
}
inline __attribute__((__nothrow__)) __attribute__((__pcs__("aapcs"))) int __ARM_signbit(double __x)
{
    return (*(1 + (unsigned *)&(__x))) >> 31;
}




      }






      namespace std {

        extern "C" {
# 266 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\math.h" 3
  typedef float float_t;
  typedef double double_t;
# 282 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\math.h" 3
extern const int math_errhandling;







extern __attribute__((__nothrow__)) double acos(double );



extern __attribute__((__nothrow__)) double asin(double );





extern __attribute__((__nothrow__)) __attribute__((__const__)) double atan(double );



extern __attribute__((__nothrow__)) double atan2(double , double );





extern __attribute__((__nothrow__)) double cos(double );




extern __attribute__((__nothrow__)) double sin(double );





extern void __use_accurate_range_reduction(void);



extern __attribute__((__nothrow__)) double tan(double );





extern __attribute__((__nothrow__)) double cosh(double );




extern __attribute__((__nothrow__)) double sinh(double );






extern __attribute__((__nothrow__)) __attribute__((__const__)) double tanh(double );



extern __attribute__((__nothrow__)) double exp(double );






extern __attribute__((__nothrow__)) double frexp(double , int * ) __attribute__((__nonnull__(2)));







extern __attribute__((__nothrow__)) double ldexp(double , int );




extern __attribute__((__nothrow__)) double log(double );





extern __attribute__((__nothrow__)) double log10(double );



extern __attribute__((__nothrow__)) double modf(double , double * ) __attribute__((__nonnull__(2)));





extern __attribute__((__nothrow__)) double pow(double , double );






extern __attribute__((__nothrow__)) double sqrt(double );






    __attribute__((__always_inline__)) static double __sqrt(double d) {
      __asm__ __volatile__(



      "vsqrt.f64 %0, %0"

      : "+w"(d));
      return d;
    }

    inline double _sqrt(double __x) { return __sqrt(__x); }





    __attribute__((__always_inline__)) static float __sqrtf(float f) {
      __asm__ __volatile__(



      "vsqrt.f32 %0, %0"

      : "+w"(f));
      return f;
    }

    inline float _sqrtf(float __x) { return __sqrtf(__x); }
# 435 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\math.h" 3
extern __attribute__((__nothrow__)) __attribute__((__const__)) double ceil(double );


extern __attribute__((__nothrow__)) __attribute__((__const__)) double fabs(double );



extern __attribute__((__nothrow__)) __attribute__((__const__)) double floor(double );



extern __attribute__((__nothrow__)) double fmod(double , double );
# 467 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\math.h" 3
extern __attribute__((__nothrow__)) double acosh(double );



extern __attribute__((__nothrow__)) double asinh(double );



extern __attribute__((__nothrow__)) double atanh(double );



extern __attribute__((__nothrow__)) double cbrt(double );



inline __attribute__((__nothrow__)) __attribute__((__const__)) double copysign(double __x, double __y)



{
    (*(1 + (unsigned *)&(__x))) = ((*(1 + (unsigned *)&(__x))) & 0x7fffffff) | ((*(1 + (unsigned *)&(__y))) & 0x80000000);
    return __x;
}
inline __attribute__((__nothrow__)) __attribute__((__const__)) float copysignf(float __x, float __y)



{
    (*(unsigned *)&(__x)) = ((*(unsigned *)&(__x)) & 0x7fffffff) | ((*(unsigned *)&(__y)) & 0x80000000);
    return __x;
}
extern __attribute__((__nothrow__)) double erf(double );



extern __attribute__((__nothrow__)) double erfc(double );



extern __attribute__((__nothrow__)) double expm1(double );
# 533 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\math.h" 3
extern __attribute__((__nothrow__)) double hypot(double , double );






extern __attribute__((__nothrow__)) int ilogb(double );



extern __attribute__((__nothrow__)) int ilogbf(float );



extern __attribute__((__nothrow__)) int ilogbl(long double );
# 646 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\math.h" 3
extern __attribute__((__nothrow__)) double lgamma (double );




extern __attribute__((__nothrow__)) double log1p(double );



extern __attribute__((__nothrow__)) double logb(double );



extern __attribute__((__nothrow__)) float logbf(float );



extern __attribute__((__nothrow__)) long double logbl(long double );



extern __attribute__((__nothrow__)) double nextafter(double , double );




extern __attribute__((__nothrow__)) float nextafterf(float , float );




extern __attribute__((__nothrow__)) long double nextafterl(long double , long double );




extern __attribute__((__nothrow__)) double nexttoward(double , long double );




extern __attribute__((__nothrow__)) float nexttowardf(float , long double );




extern __attribute__((__nothrow__)) long double nexttowardl(long double , long double );




extern __attribute__((__nothrow__)) double remainder(double , double );



extern __attribute__((__nothrow__)) __attribute__((__const__)) double rint(double );



extern __attribute__((__nothrow__)) double scalbln(double , long int );



extern __attribute__((__nothrow__)) float scalblnf(float , long int );



extern __attribute__((__nothrow__)) long double scalblnl(long double , long int );



extern __attribute__((__nothrow__)) double scalbn(double , int );



extern __attribute__((__nothrow__)) float scalbnf(float , int );



extern __attribute__((__nothrow__)) long double scalbnl(long double , int );
# 740 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\math.h" 3
extern __attribute__((__nothrow__)) __attribute__((__const__)) float fabsf(float);
inline __attribute__((__nothrow__)) __attribute__((__const__)) float _fabsf(float __f) { return fabsf(__f); }
extern __attribute__((__nothrow__)) float sinf(float );
extern __attribute__((__nothrow__)) float cosf(float );
extern __attribute__((__nothrow__)) float tanf(float );
extern __attribute__((__nothrow__)) float acosf(float );
extern __attribute__((__nothrow__)) float asinf(float );
extern __attribute__((__nothrow__)) float atanf(float );
extern __attribute__((__nothrow__)) float atan2f(float , float );
extern __attribute__((__nothrow__)) float sinhf(float );
extern __attribute__((__nothrow__)) float coshf(float );
extern __attribute__((__nothrow__)) float tanhf(float );
extern __attribute__((__nothrow__)) float expf(float );
extern __attribute__((__nothrow__)) float logf(float );
extern __attribute__((__nothrow__)) float log10f(float );
extern __attribute__((__nothrow__)) float powf(float , float );
extern __attribute__((__nothrow__)) float sqrtf(float );
extern __attribute__((__nothrow__)) float ldexpf(float , int );
extern __attribute__((__nothrow__)) float frexpf(float , int * ) __attribute__((__nonnull__(2)));
extern __attribute__((__nothrow__)) __attribute__((__const__)) float ceilf(float );
extern __attribute__((__nothrow__)) __attribute__((__const__)) float floorf(float );
extern __attribute__((__nothrow__)) float fmodf(float , float );
extern __attribute__((__nothrow__)) float modff(float , float * ) __attribute__((__nonnull__(2)));
# 780 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\math.h" 3
__attribute__((__nothrow__)) long double acosl(long double );
__attribute__((__nothrow__)) long double asinl(long double );
__attribute__((__nothrow__)) long double atanl(long double );
__attribute__((__nothrow__)) long double atan2l(long double , long double );
__attribute__((__nothrow__)) long double ceill(long double );
__attribute__((__nothrow__)) long double cosl(long double );
__attribute__((__nothrow__)) long double coshl(long double );
__attribute__((__nothrow__)) long double expl(long double );
__attribute__((__nothrow__)) long double fabsl(long double );
__attribute__((__nothrow__)) long double floorl(long double );
__attribute__((__nothrow__)) long double fmodl(long double , long double );
__attribute__((__nothrow__)) long double frexpl(long double , int* ) __attribute__((__nonnull__(2)));
__attribute__((__nothrow__)) long double ldexpl(long double , int );
__attribute__((__nothrow__)) long double logl(long double );
__attribute__((__nothrow__)) long double log10l(long double );
__attribute__((__nothrow__)) long double modfl(long double , long double * ) __attribute__((__nonnull__(2)));
__attribute__((__nothrow__)) long double powl(long double , long double );
__attribute__((__nothrow__)) long double sinl(long double );
__attribute__((__nothrow__)) long double sinhl(long double );
__attribute__((__nothrow__)) long double sqrtl(long double );
__attribute__((__nothrow__)) long double tanl(long double );
__attribute__((__nothrow__)) long double tanhl(long double );






extern __attribute__((__nothrow__)) float acoshf(float );
__attribute__((__nothrow__)) long double acoshl(long double );
extern __attribute__((__nothrow__)) float asinhf(float );
__attribute__((__nothrow__)) long double asinhl(long double );
extern __attribute__((__nothrow__)) float atanhf(float );
__attribute__((__nothrow__)) long double atanhl(long double );
__attribute__((__nothrow__)) long double copysignl(long double , long double );
extern __attribute__((__nothrow__)) float cbrtf(float );
__attribute__((__nothrow__)) long double cbrtl(long double );
extern __attribute__((__nothrow__)) float erff(float );
__attribute__((__nothrow__)) long double erfl(long double );
extern __attribute__((__nothrow__)) float erfcf(float );
__attribute__((__nothrow__)) long double erfcl(long double );
extern __attribute__((__nothrow__)) float expm1f(float );
__attribute__((__nothrow__)) long double expm1l(long double );
extern __attribute__((__nothrow__)) float log1pf(float );
__attribute__((__nothrow__)) long double log1pl(long double );
extern __attribute__((__nothrow__)) float hypotf(float , float );
__attribute__((__nothrow__)) long double hypotl(long double , long double );
extern __attribute__((__nothrow__)) float lgammaf(float );
__attribute__((__nothrow__)) long double lgammal(long double );
extern __attribute__((__nothrow__)) float remainderf(float , float );
__attribute__((__nothrow__)) long double remainderl(long double , long double );
extern __attribute__((__nothrow__)) float rintf(float );
__attribute__((__nothrow__)) long double rintl(long double );







extern __attribute__((__nothrow__)) double exp2(double );
extern __attribute__((__nothrow__)) float exp2f(float );
__attribute__((__nothrow__)) long double exp2l(long double );
extern __attribute__((__nothrow__)) double fdim(double , double );
extern __attribute__((__nothrow__)) float fdimf(float , float );
__attribute__((__nothrow__)) long double fdiml(long double , long double );
# 855 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\math.h" 3
extern __attribute__((__nothrow__)) double fma(double , double , double );
extern __attribute__((__nothrow__)) float fmaf(float , float , float );

inline __attribute__((__nothrow__)) long double fmal(long double __x, long double __y, long double __z) { return (long double)fma((double)__x, (double)__y, (double)__z); }


extern __attribute__((__nothrow__)) __attribute__((__const__)) double fmax(double , double );
extern __attribute__((__nothrow__)) __attribute__((__const__)) float fmaxf(float , float );
__attribute__((__nothrow__)) long double fmaxl(long double , long double );
extern __attribute__((__nothrow__)) __attribute__((__const__)) double fmin(double , double );
extern __attribute__((__nothrow__)) __attribute__((__const__)) float fminf(float , float );
__attribute__((__nothrow__)) long double fminl(long double , long double );
extern __attribute__((__nothrow__)) double log2(double );
extern __attribute__((__nothrow__)) float log2f(float );
__attribute__((__nothrow__)) long double log2l(long double );
extern __attribute__((__nothrow__)) long lrint(double );
extern __attribute__((__nothrow__)) long lrintf(float );

inline __attribute__((__nothrow__)) long lrintl(long double __x) { return lrint((double)__x); }


extern __attribute__((__nothrow__)) long long llrint(double );
extern __attribute__((__nothrow__)) long long llrintf(float );

inline __attribute__((__nothrow__)) long long llrintl(long double __x) { return llrint((double)__x); }


extern __attribute__((__nothrow__)) long lround(double );
extern __attribute__((__nothrow__)) long lroundf(float );

inline __attribute__((__nothrow__)) long lroundl(long double __x) { return lround((double)__x); }


extern __attribute__((__nothrow__)) long long llround(double );
extern __attribute__((__nothrow__)) long long llroundf(float );

inline __attribute__((__nothrow__)) long long llroundl(long double __x) { return llround((double)__x); }


extern __attribute__((__nothrow__)) __attribute__((__const__)) double nan(const char * );
extern __attribute__((__nothrow__)) __attribute__((__const__)) float nanf(const char * );

inline __attribute__((__nothrow__)) __attribute__((__const__)) long double nanl(const char *__t) { return (long double)nan(__t); }
# 908 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\math.h" 3
extern __attribute__((__nothrow__)) __attribute__((__const__)) double nearbyint(double );
extern __attribute__((__nothrow__)) __attribute__((__const__)) float nearbyintf(float );
__attribute__((__nothrow__)) long double nearbyintl(long double );
extern __attribute__((__nothrow__)) double remquo(double , double , int * );
extern __attribute__((__nothrow__)) float remquof(float , float , int * );

inline long double remquol(long double __x, long double __y, int *__q) { return (long double)remquo((double)__x, (double)__y, __q); }


extern __attribute__((__nothrow__)) __attribute__((__const__)) double round(double );
extern __attribute__((__nothrow__)) __attribute__((__const__)) float roundf(float );
__attribute__((__nothrow__)) long double roundl(long double );
extern __attribute__((__nothrow__)) double tgamma(double );
extern __attribute__((__nothrow__)) float tgammaf(float );
__attribute__((__nothrow__)) long double tgammal(long double );
extern __attribute__((__nothrow__)) __attribute__((__const__)) double trunc(double );
extern __attribute__((__nothrow__)) __attribute__((__const__)) float truncf(float );
__attribute__((__nothrow__)) long double truncl(long double );
# 945 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\math.h" 3
  extern "C++" {
    [[__nodiscard__]] inline int (fpclassify)(double __x) noexcept { return ((sizeof(__x) == sizeof(float)) ? __ARM_fpclassifyf(__x) : __ARM_fpclassify(__x)); }
    [[__nodiscard__]] inline bool (isfinite)(double __x) noexcept { return ((sizeof(__x) == sizeof(float)) ? __ARM_isfinitef(__x) : __ARM_isfinite(__x)); }
    [[__nodiscard__]] inline bool (isgreater)(double __x, double __y) noexcept { return (((sizeof(__x) == sizeof(float)) && (sizeof(__y) == sizeof(float))) ? ((__ARM_fcmp4((__x), (__y)) & 0xf0000000) == 0x20000000) : ((__ARM_dcmp4((__x), (__y)) & 0xf0000000) == 0x20000000)); }
    [[__nodiscard__]] inline bool (isgreaterequal)(double __x, double __y) noexcept { return (((sizeof(__x) == sizeof(float)) && (sizeof(__y) == sizeof(float))) ? ((__ARM_fcmp4((__x), (__y)) & 0x30000000) == 0x20000000) : ((__ARM_dcmp4((__x), (__y)) & 0x30000000) == 0x20000000)); }
    [[__nodiscard__]] inline bool (isinf)(double __x) noexcept { return ((sizeof(__x) == sizeof(float)) ? __ARM_isinff(__x) : __ARM_isinf(__x)); }
    [[__nodiscard__]] inline bool (isless)(double __x, double __y) noexcept { return (((sizeof(__x) == sizeof(float)) && (sizeof(__y) == sizeof(float))) ? ((__ARM_fcmp4((__x), (__y)) & 0xf0000000) == 0x80000000) : ((__ARM_dcmp4((__x), (__y)) & 0xf0000000) == 0x80000000)); }
    [[__nodiscard__]] inline bool (islessequal)(double __x, double __y) noexcept { return (((sizeof(__x) == sizeof(float)) && (sizeof(__y) == sizeof(float))) ? ((__ARM_fcmp4((__x), (__y)) & 0xc0000000) != 0) : ((__ARM_dcmp4((__x), (__y)) & 0xc0000000) != 0)); }
    [[__nodiscard__]] inline bool (islessgreater)(double __x, double __y) noexcept { return (((sizeof(__x) == sizeof(float)) && (sizeof(__y) == sizeof(float))) ? __ARM_islessgreaterf((__x), (__y)) : __ARM_islessgreater((__x), (__y))); }
    [[__nodiscard__]] inline bool (isnan)(double __x) noexcept { return ((sizeof(__x) == sizeof(float)) ? __ARM_isnanf(__x) : __ARM_isnan(__x)); }
    [[__nodiscard__]] inline bool (isnormal)(double __x) noexcept { return ((sizeof(__x) == sizeof(float)) ? __ARM_isnormalf(__x) : __ARM_isnormal(__x)); }
    [[__nodiscard__]] inline bool (isunordered)(double __x, double __y) noexcept { return (((sizeof(__x) == sizeof(float)) && (sizeof(__y) == sizeof(float))) ? ((__ARM_fcmp4((__x), (__y)) & 0x10000000) == 0x10000000) : ((__ARM_dcmp4((__x), (__y)) & 0x10000000) == 0x10000000)); }

  }
# 1153 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\math.h" 3
        }
      }
# 1163 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\math.h" 3
    using ::std::__use_accurate_range_reduction;



    using ::std::acos;
    using ::std::asin;
    using ::std::atan2;
    using ::std::atan;
    using ::std::ceil;
    using ::std::cos;
    using ::std::cosh;
    using ::std::exp;
    using ::std::fabs;
    using ::std::floor;
    using ::std::fmod;
    using ::std::frexp;
    using ::std::ldexp;
    using ::std::log10;
    using ::std::log;
    using ::std::modf;
    using ::std::pow;
    using ::std::sin;
    using ::std::sinh;
    using ::std::sqrt;
    using ::std::_sqrt;
    using ::std::_sqrtf;
    using ::std::tan;
    using ::std::tanh;
    using ::std::_fabsf;

    using ::std::acosf;
    using ::std::acosl;
    using ::std::asinf;
    using ::std::asinl;
    using ::std::atan2f;
    using ::std::atan2l;
    using ::std::atanf;
    using ::std::atanl;
    using ::std::ceilf;
    using ::std::ceill;
    using ::std::cosf;
    using ::std::coshf;
    using ::std::coshl;
    using ::std::cosl;
    using ::std::expf;
    using ::std::expl;
    using ::std::fabsf;
    using ::std::fabsl;
    using ::std::floorf;
    using ::std::floorl;
    using ::std::fmodf;
    using ::std::fmodl;
    using ::std::frexpf;
    using ::std::frexpl;
    using ::std::ldexpf;
    using ::std::ldexpl;
    using ::std::log10f;
    using ::std::log10l;
    using ::std::logf;
    using ::std::logl;
    using ::std::modff;
    using ::std::modfl;
    using ::std::powf;
    using ::std::powl;
    using ::std::sinf;
    using ::std::sinhf;
    using ::std::sinhl;
    using ::std::sinl;
    using ::std::sqrtf;
    using ::std::sqrtl;
    using ::std::tanf;
    using ::std::tanhf;
    using ::std::tanhl;
    using ::std::tanl;


      using ::std::acosh;
      using ::std::asinh;
      using ::std::atanh;
      using ::std::cbrt;
      using ::std::copysign;
      using ::std::copysignf;
      using ::std::erf;
      using ::std::erfc;
      using ::std::expm1;
      using ::std::hypot;
      using ::std::ilogb;
      using ::std::ilogbf;
      using ::std::ilogbl;
      using ::std::lgamma;
      using ::std::log1p;
      using ::std::logb;
      using ::std::logbf;
      using ::std::logbl;
      using ::std::nextafter;
      using ::std::nextafterf;
      using ::std::nextafterl;
      using ::std::nexttoward;
      using ::std::nexttowardf;
      using ::std::nexttowardl;
      using ::std::remainder;
      using ::std::rint;
      using ::std::scalbln;
      using ::std::scalblnf;
      using ::std::scalblnl;
      using ::std::scalbn;
      using ::std::scalbnf;
      using ::std::scalbnl;
      using ::std::math_errhandling;
      using ::std::acoshf;
      using ::std::acoshl;
      using ::std::asinhf;
      using ::std::asinhl;
      using ::std::atanhf;
      using ::std::atanhl;
      using ::std::copysignl;
      using ::std::cbrtf;
      using ::std::cbrtl;
      using ::std::erff;
      using ::std::erfl;
      using ::std::erfcf;
      using ::std::erfcl;
      using ::std::expm1f;
      using ::std::expm1l;
      using ::std::log1pf;
      using ::std::log1pl;
      using ::std::hypotf;
      using ::std::hypotl;
      using ::std::lgammaf;
      using ::std::lgammal;
      using ::std::remainderf;
      using ::std::remainderl;
      using ::std::rintf;
      using ::std::rintl;

      using ::std::float_t;
      using ::std::double_t;



      using ::std::exp2;
      using ::std::exp2f;
      using ::std::exp2l;
      using ::std::fdim;
      using ::std::fdimf;
      using ::std::fdiml;
      using ::std::fma;
      using ::std::fmaf;

      using ::std::fmal;

      using ::std::fmax;
      using ::std::fmaxf;
      using ::std::fmaxl;
      using ::std::fmin;
      using ::std::fminf;
      using ::std::fminl;
      using ::std::log2;
      using ::std::log2f;
      using ::std::log2l;
      using ::std::lrint;
      using ::std::lrintf;

      using ::std::lrintl;

      using ::std::llrint;
      using ::std::llrintf;

      using ::std::llrintl;

      using ::std::lround;
      using ::std::lroundf;

      using ::std::lroundl;

      using ::std::llround;
      using ::std::llroundf;

      using ::std::llroundl;

      using ::std::nan;
      using ::std::nanf;

      using ::std::nanl;

      using ::std::nearbyint;
      using ::std::nearbyintf;
      using ::std::nearbyintl;
      using ::std::remquo;
      using ::std::remquof;

      using ::std::remquol;

      using ::std::round;
      using ::std::roundf;
      using ::std::roundl;
      using ::std::tgamma;
      using ::std::tgammaf;
      using ::std::tgammal;
      using ::std::trunc;
      using ::std::truncf;
      using ::std::truncl;



      using ::std::fpclassify;
      using ::std::isfinite;
      using ::std::isgreater;
      using ::std::isgreaterequal;
      using ::std::isinf;
      using ::std::isless;
      using ::std::islessequal;
      using ::std::islessgreater;
      using ::std::isnan;
      using ::std::isnormal;
      using ::std::isunordered;
# 302 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\math.h" 2 3






extern "C++" {
# 358 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\math.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__math/abs.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__math/abs.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

namespace __math {



[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float fabs(float __x) noexcept { return __builtin_fabsf(__x); }

template <class = int>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double fabs(double __x) noexcept {
  return __builtin_fabs(__x);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double fabs(long double __x) noexcept {
  return __builtin_fabsl(__x);
}

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double fabs(_A1 __x) noexcept {
  return __builtin_fabs((double)__x);
}

}

}}
# 359 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\math.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__math/copysign.h" 1 3
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__math/copysign.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

namespace __math {



[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float copysign(float __x, float __y) noexcept {
  return ::__builtin_copysignf(__x, __y);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double copysign(long double __x, long double __y) noexcept {
  return ::__builtin_copysignl(__x, __y);
}

template <class _A1, class _A2, __enable_if_t<is_arithmetic<_A1>::value && is_arithmetic<_A2>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) typename __promote<_A1, _A2>::type
copysign(_A1 __x, _A2 __y) noexcept {
  return ::__builtin_copysign(__x, __y);
}

}

}}
# 360 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\math.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__math/error_functions.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__math/error_functions.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

namespace __math {



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float erf(float __x) noexcept { return __builtin_erff(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double erf(double __x) noexcept {
  return __builtin_erf(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double erf(long double __x) noexcept { return __builtin_erfl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double erf(_A1 __x) noexcept {
  return __builtin_erf((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float erfc(float __x) noexcept { return __builtin_erfcf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double erfc(double __x) noexcept {
  return __builtin_erfc(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double erfc(long double __x) noexcept { return __builtin_erfcl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double erfc(_A1 __x) noexcept {
  return __builtin_erfc((double)__x);
}

}

}}
# 361 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\math.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__math/exponential_functions.h" 1 3
# 21 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__math/exponential_functions.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

namespace __math {



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float exp(float __x) noexcept { return __builtin_expf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double exp(double __x) noexcept {
  return __builtin_exp(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double exp(long double __x) noexcept { return __builtin_expl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double exp(_A1 __x) noexcept {
  return __builtin_exp((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float frexp(float __x, int* __e) noexcept { return __builtin_frexpf(__x, __e); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double frexp(double __x, int* __e) noexcept {
  return __builtin_frexp(__x, __e);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double frexp(long double __x, int* __e) noexcept {
  return __builtin_frexpl(__x, __e);
}

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double frexp(_A1 __x, int* __e) noexcept {
  return __builtin_frexp((double)__x, __e);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float ldexp(float __x, int __e) noexcept { return __builtin_ldexpf(__x, __e); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double ldexp(double __x, int __e) noexcept {
  return __builtin_ldexp(__x, __e);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double ldexp(long double __x, int __e) noexcept {
  return __builtin_ldexpl(__x, __e);
}

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double ldexp(_A1 __x, int __e) noexcept {
  return __builtin_ldexp((double)__x, __e);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float exp2(float __x) noexcept { return __builtin_exp2f(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double exp2(double __x) noexcept {
  return __builtin_exp2(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double exp2(long double __x) noexcept { return __builtin_exp2l(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double exp2(_A1 __x) noexcept {
  return __builtin_exp2((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float expm1(float __x) noexcept { return __builtin_expm1f(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double expm1(double __x) noexcept {
  return __builtin_expm1(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double expm1(long double __x) noexcept { return __builtin_expm1l(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double expm1(_A1 __x) noexcept {
  return __builtin_expm1((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float scalbln(float __x, long __y) noexcept { return __builtin_scalblnf(__x, __y); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double scalbln(double __x, long __y) noexcept {
  return __builtin_scalbln(__x, __y);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double scalbln(long double __x, long __y) noexcept {
  return __builtin_scalblnl(__x, __y);
}

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double scalbln(_A1 __x, long __y) noexcept {
  return __builtin_scalbln((double)__x, __y);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float scalbn(float __x, int __y) noexcept { return __builtin_scalbnf(__x, __y); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double scalbn(double __x, int __y) noexcept {
  return __builtin_scalbn(__x, __y);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double scalbn(long double __x, int __y) noexcept {
  return __builtin_scalbnl(__x, __y);
}

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double scalbn(_A1 __x, int __y) noexcept {
  return __builtin_scalbn((double)__x, __y);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float pow(float __x, float __y) noexcept { return __builtin_powf(__x, __y); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double pow(double __x, double __y) noexcept {
  return __builtin_pow(__x, __y);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double pow(long double __x, long double __y) noexcept {
  return __builtin_powl(__x, __y);
}

template <class _A1, class _A2, __enable_if_t<is_arithmetic<_A1>::value && is_arithmetic<_A2>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) typename __promote<_A1, _A2>::type pow(_A1 __x, _A2 __y) noexcept {
  using __result_type = typename __promote<_A1, _A2>::type;
  static_assert((!(_IsSame<_A1, __result_type>::value && _IsSame<_A2, __result_type>::value)), "");
  return __math::pow((__result_type)__x, (__result_type)__y);
}

}

}}
# 362 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\math.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__math/fdim.h" 1 3
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__math/fdim.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

namespace __math {

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float fdim(float __x, float __y) noexcept { return __builtin_fdimf(__x, __y); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double fdim(double __x, double __y) noexcept {
  return __builtin_fdim(__x, __y);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double fdim(long double __x, long double __y) noexcept {
  return __builtin_fdiml(__x, __y);
}

template <class _A1, class _A2, __enable_if_t<is_arithmetic<_A1>::value && is_arithmetic<_A2>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) typename __promote<_A1, _A2>::type fdim(_A1 __x, _A2 __y) noexcept {
  using __result_type = typename __promote<_A1, _A2>::type;
  static_assert((!(_IsSame<_A1, __result_type>::value && _IsSame<_A2, __result_type>::value)), "");
  return __math::fdim((__result_type)__x, (__result_type)__y);
}

}

}}
# 363 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\math.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__math/fma.h" 1 3
# 21 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__math/fma.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

namespace __math {

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float fma(float __x, float __y, float __z) noexcept {
  return __builtin_fmaf(__x, __y, __z);
}

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double fma(double __x, double __y, double __z) noexcept {
  return __builtin_fma(__x, __y, __z);
}


inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double fma(long double __x, long double __y, long double __z) noexcept {
  return __builtin_fmal(__x, __y, __z);
}


template <class _A1,
          class _A2,
          class _A3,
          __enable_if_t<is_arithmetic<_A1>::value && is_arithmetic<_A2>::value && is_arithmetic<_A3>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) typename __promote<_A1, _A2, _A3>::type fma(_A1 __x, _A2 __y, _A3 __z) noexcept {
  using __result_type = typename __promote<_A1, _A2, _A3>::type;
  static_assert((!(_IsSame<_A1, __result_type>::value && _IsSame<_A2, __result_type>::value &&
                   _IsSame<_A3, __result_type>::value)),
                "");
  return __builtin_fma((__result_type)__x, (__result_type)__y, (__result_type)__z);
}

}

}}
# 364 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\math.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__math/gamma.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__math/gamma.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

namespace __math {



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float lgamma(float __x) noexcept { return __builtin_lgammaf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double lgamma(double __x) noexcept {
  return __builtin_lgamma(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double lgamma(long double __x) noexcept { return __builtin_lgammal(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double lgamma(_A1 __x) noexcept {
  return __builtin_lgamma((double)__x);
}





inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float tgamma(float __x) noexcept { return __builtin_tgammaf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double tgamma(double __x) noexcept {
  return __builtin_tgamma(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double tgamma(long double __x) noexcept { return __builtin_tgammal(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double tgamma(_A1 __x) noexcept {
  return __builtin_tgamma((double)__x);
}

}

}}
# 365 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\math.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__math/hyperbolic_functions.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__math/hyperbolic_functions.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

namespace __math {



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float cosh(float __x) noexcept { return __builtin_coshf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double cosh(double __x) noexcept {
  return __builtin_cosh(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double cosh(long double __x) noexcept { return __builtin_coshl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double cosh(_A1 __x) noexcept {
  return __builtin_cosh((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float sinh(float __x) noexcept { return __builtin_sinhf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double sinh(double __x) noexcept {
  return __builtin_sinh(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double sinh(long double __x) noexcept { return __builtin_sinhl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double sinh(_A1 __x) noexcept {
  return __builtin_sinh((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float tanh(float __x) noexcept { return __builtin_tanhf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double tanh(double __x) noexcept {
  return __builtin_tanh(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double tanh(long double __x) noexcept { return __builtin_tanhl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double tanh(_A1 __x) noexcept {
  return __builtin_tanh((double)__x);
}

}

}}
# 366 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\math.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__math/hypot.h" 1 3
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__math/hypot.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

namespace __math {

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float hypot(float __x, float __y) noexcept { return __builtin_hypotf(__x, __y); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double hypot(double __x, double __y) noexcept {
  return __builtin_hypot(__x, __y);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double hypot(long double __x, long double __y) noexcept {
  return __builtin_hypotl(__x, __y);
}

template <class _A1, class _A2, __enable_if_t<is_arithmetic<_A1>::value && is_arithmetic<_A2>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) typename __promote<_A1, _A2>::type hypot(_A1 __x, _A2 __y) noexcept {
  using __result_type = typename __promote<_A1, _A2>::type;
  static_assert((!(_IsSame<_A1, __result_type>::value && _IsSame<_A2, __result_type>::value)), "");
  return __math::hypot((__result_type)__x, (__result_type)__y);
}

}

}}
# 367 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\math.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__math/inverse_hyperbolic_functions.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__math/inverse_hyperbolic_functions.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

namespace __math {



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float acosh(float __x) noexcept { return __builtin_acoshf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double acosh(double __x) noexcept {
  return __builtin_acosh(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double acosh(long double __x) noexcept { return __builtin_acoshl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double acosh(_A1 __x) noexcept {
  return __builtin_acosh((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float asinh(float __x) noexcept { return __builtin_asinhf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double asinh(double __x) noexcept {
  return __builtin_asinh(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double asinh(long double __x) noexcept { return __builtin_asinhl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double asinh(_A1 __x) noexcept {
  return __builtin_asinh((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float atanh(float __x) noexcept { return __builtin_atanhf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double atanh(double __x) noexcept {
  return __builtin_atanh(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double atanh(long double __x) noexcept { return __builtin_atanhl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double atanh(_A1 __x) noexcept {
  return __builtin_atanh((double)__x);
}

}

}}
# 368 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\math.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__math/inverse_trigonometric_functions.h" 1 3
# 21 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__math/inverse_trigonometric_functions.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

namespace __math {



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float acos(float __x) noexcept { return __builtin_acosf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double acos(double __x) noexcept {
  return __builtin_acos(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double acos(long double __x) noexcept { return __builtin_acosl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double acos(_A1 __x) noexcept {
  return __builtin_acos((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float asin(float __x) noexcept { return __builtin_asinf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double asin(double __x) noexcept {
  return __builtin_asin(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double asin(long double __x) noexcept { return __builtin_asinl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double asin(_A1 __x) noexcept {
  return __builtin_asin((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float atan(float __x) noexcept { return __builtin_atanf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double atan(double __x) noexcept {
  return __builtin_atan(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double atan(long double __x) noexcept { return __builtin_atanl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double atan(_A1 __x) noexcept {
  return __builtin_atan((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float atan2(float __y, float __x) noexcept { return __builtin_atan2f(__y, __x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double atan2(double __x, double __y) noexcept {
  return __builtin_atan2(__x, __y);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double atan2(long double __y, long double __x) noexcept {
  return __builtin_atan2l(__y, __x);
}

template <class _A1, class _A2, __enable_if_t<is_arithmetic<_A1>::value && is_arithmetic<_A2>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) typename __promote<_A1, _A2>::type atan2(_A1 __y, _A2 __x) noexcept {
  using __result_type = typename __promote<_A1, _A2>::type;
  static_assert((!(_IsSame<_A1, __result_type>::value && _IsSame<_A2, __result_type>::value)), "");
  return __math::atan2((__result_type)__y, (__result_type)__x);
}

}

}}
# 369 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\math.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__math/logarithms.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__math/logarithms.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

namespace __math {



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float log(float __x) noexcept { return __builtin_logf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double log(double __x) noexcept {
  return __builtin_log(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double log(long double __x) noexcept { return __builtin_logl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double log(_A1 __x) noexcept {
  return __builtin_log((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float log10(float __x) noexcept { return __builtin_log10f(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double log10(double __x) noexcept {
  return __builtin_log10(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double log10(long double __x) noexcept { return __builtin_log10l(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double log10(_A1 __x) noexcept {
  return __builtin_log10((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) int ilogb(float __x) noexcept { return __builtin_ilogbf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double ilogb(double __x) noexcept {
  return __builtin_ilogb(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) int ilogb(long double __x) noexcept { return __builtin_ilogbl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) int ilogb(_A1 __x) noexcept {
  return __builtin_ilogb((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float log1p(float __x) noexcept { return __builtin_log1pf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double log1p(double __x) noexcept {
  return __builtin_log1p(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double log1p(long double __x) noexcept { return __builtin_log1pl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double log1p(_A1 __x) noexcept {
  return __builtin_log1p((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float log2(float __x) noexcept { return __builtin_log2f(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double log2(double __x) noexcept {
  return __builtin_log2(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double log2(long double __x) noexcept { return __builtin_log2l(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double log2(_A1 __x) noexcept {
  return __builtin_log2((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float logb(float __x) noexcept { return __builtin_logbf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double logb(double __x) noexcept {
  return __builtin_logb(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double logb(long double __x) noexcept { return __builtin_logbl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double logb(_A1 __x) noexcept {
  return __builtin_logb((double)__x);
}

}

}}
# 370 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\math.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__math/min_max.h" 1 3
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__math/min_max.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

namespace __math {



[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float fmax(float __x, float __y) noexcept {
  return __builtin_fmaxf(__x, __y);
}

template <class = int>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double fmax(double __x, double __y) noexcept {
  return __builtin_fmax(__x, __y);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double fmax(long double __x, long double __y) noexcept {
  return __builtin_fmaxl(__x, __y);
}

template <class _A1, class _A2, __enable_if_t<is_arithmetic<_A1>::value && is_arithmetic<_A2>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) typename __promote<_A1, _A2>::type fmax(_A1 __x, _A2 __y) noexcept {
  using __result_type = typename __promote<_A1, _A2>::type;
  static_assert((!(_IsSame<_A1, __result_type>::value && _IsSame<_A2, __result_type>::value)), "");
  return __math::fmax((__result_type)__x, (__result_type)__y);
}



[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float fmin(float __x, float __y) noexcept {
  return __builtin_fminf(__x, __y);
}

template <class = int>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double fmin(double __x, double __y) noexcept {
  return __builtin_fmin(__x, __y);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double fmin(long double __x, long double __y) noexcept {
  return __builtin_fminl(__x, __y);
}

template <class _A1, class _A2, __enable_if_t<is_arithmetic<_A1>::value && is_arithmetic<_A2>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) typename __promote<_A1, _A2>::type fmin(_A1 __x, _A2 __y) noexcept {
  using __result_type = typename __promote<_A1, _A2>::type;
  static_assert((!(_IsSame<_A1, __result_type>::value && _IsSame<_A2, __result_type>::value)), "");
  return __math::fmin((__result_type)__x, (__result_type)__y);
}

}

}}
# 371 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\math.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__math/modulo.h" 1 3
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__math/modulo.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

namespace __math {



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float fmod(float __x, float __y) noexcept { return __builtin_fmodf(__x, __y); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double fmod(double __x, double __y) noexcept {
  return __builtin_fmod(__x, __y);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double fmod(long double __x, long double __y) noexcept {
  return __builtin_fmodl(__x, __y);
}

template <class _A1, class _A2, __enable_if_t<is_arithmetic<_A1>::value && is_arithmetic<_A2>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) typename __promote<_A1, _A2>::type fmod(_A1 __x, _A2 __y) noexcept {
  using __result_type = typename __promote<_A1, _A2>::type;
  static_assert((!(_IsSame<_A1, __result_type>::value && _IsSame<_A2, __result_type>::value)), "");
  return __math::fmod((__result_type)__x, (__result_type)__y);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float modf(float __x, float* __y) noexcept { return __builtin_modff(__x, __y); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double modf(double __x, double* __y) noexcept {
  return __builtin_modf(__x, __y);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double modf(long double __x, long double* __y) noexcept {
  return __builtin_modfl(__x, __y);
}

}

}}
# 372 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\math.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__math/remainder.h" 1 3
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__math/remainder.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

namespace __math {



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float remainder(float __x, float __y) noexcept { return __builtin_remainderf(__x, __y); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double remainder(double __x, double __y) noexcept {
  return __builtin_remainder(__x, __y);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double remainder(long double __x, long double __y) noexcept {
  return __builtin_remainderl(__x, __y);
}

template <class _A1, class _A2, __enable_if_t<is_arithmetic<_A1>::value && is_arithmetic<_A2>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) typename __promote<_A1, _A2>::type remainder(_A1 __x, _A2 __y) noexcept {
  using __result_type = typename __promote<_A1, _A2>::type;
  static_assert((!(_IsSame<_A1, __result_type>::value && _IsSame<_A2, __result_type>::value)), "");
  return __math::remainder((__result_type)__x, (__result_type)__y);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float remquo(float __x, float __y, int* __z) noexcept {
  return __builtin_remquof(__x, __y, __z);
}

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double remquo(double __x, double __y, int* __z) noexcept {
  return __builtin_remquo(__x, __y, __z);
}


inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double remquo(long double __x, long double __y, int* __z) noexcept {
  return __builtin_remquol(__x, __y, __z);
}


template <class _A1, class _A2, __enable_if_t<is_arithmetic<_A1>::value && is_arithmetic<_A2>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) typename __promote<_A1, _A2>::type remquo(_A1 __x, _A2 __y, int* __z) noexcept {
  using __result_type = typename __promote<_A1, _A2>::type;
  static_assert((!(_IsSame<_A1, __result_type>::value && _IsSame<_A2, __result_type>::value)), "");
  return __math::remquo((__result_type)__x, (__result_type)__y, __z);
}

}

}}
# 373 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\math.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__math/roots.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__math/roots.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

namespace __math {



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float sqrt(float __x) noexcept { return __builtin_sqrtf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double sqrt(double __x) noexcept {
  return __builtin_sqrt(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double sqrt(long double __x) noexcept { return __builtin_sqrtl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double sqrt(_A1 __x) noexcept {
  return __builtin_sqrt((double)__x);
}



[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float cbrt(float __x) noexcept { return __builtin_cbrtf(__x); }

template <class = int>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double cbrt(double __x) noexcept {
  return __builtin_cbrt(__x);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double cbrt(long double __x) noexcept {
  return __builtin_cbrtl(__x);
}

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double cbrt(_A1 __x) noexcept {
  return __builtin_cbrt((double)__x);
}

}

}}
# 374 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\math.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__math/rounding_functions.h" 1 3
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__math/rounding_functions.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

namespace __math {



[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float ceil(float __x) noexcept { return __builtin_ceilf(__x); }

template <class = int>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double ceil(double __x) noexcept {
  return __builtin_ceil(__x);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double ceil(long double __x) noexcept {
  return __builtin_ceill(__x);
}

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double ceil(_A1 __x) noexcept {
  return __builtin_ceil((double)__x);
}



[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float floor(float __x) noexcept { return __builtin_floorf(__x); }

template <class = int>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double floor(double __x) noexcept {
  return __builtin_floor(__x);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double floor(long double __x) noexcept {
  return __builtin_floorl(__x);
}

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double floor(_A1 __x) noexcept {
  return __builtin_floor((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long long llrint(float __x) noexcept { return __builtin_llrintf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long long llrint(double __x) noexcept {
  return __builtin_llrint(__x);
}


inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long long llrint(long double __x) noexcept
{
    return __builtin_llrintl(__x);
}


template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long long llrint(_A1 __x) noexcept {
  return __builtin_llrint((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long long llround(float __x) noexcept { return __builtin_llroundf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long long llround(double __x) noexcept {
  return __builtin_llround(__x);
}


inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long long llround(long double __x) noexcept
{
    return __builtin_llroundl(__x);
}


template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long long llround(_A1 __x) noexcept {
  return __builtin_llround((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long lrint(float __x) noexcept { return __builtin_lrintf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long lrint(double __x) noexcept {
  return __builtin_lrint(__x);
}


inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long lrint(long double __x) noexcept
{
    return __builtin_lrintl(__x);
}


template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long lrint(_A1 __x) noexcept {
  return __builtin_lrint((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long lround(float __x) noexcept { return __builtin_lroundf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long lround(double __x) noexcept {
  return __builtin_lround(__x);
}


inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long lround(long double __x) noexcept
{
    return __builtin_lroundl(__x);
}


template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long lround(_A1 __x) noexcept {
  return __builtin_lround((double)__x);
}



[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float nearbyint(float __x) noexcept {
  return __builtin_nearbyintf(__x);
}

template <class = int>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double nearbyint(double __x) noexcept {
  return __builtin_nearbyint(__x);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double nearbyint(long double __x) noexcept {
  return __builtin_nearbyintl(__x);
}

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double nearbyint(_A1 __x) noexcept {
  return __builtin_nearbyint((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float nextafter(float __x, float __y) noexcept { return __builtin_nextafterf(__x, __y); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double nextafter(double __x, double __y) noexcept {
  return __builtin_nextafter(__x, __y);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double nextafter(long double __x, long double __y) noexcept {
  return __builtin_nextafterl(__x, __y);
}

template <class _A1, class _A2, __enable_if_t<is_arithmetic<_A1>::value && is_arithmetic<_A2>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) typename __promote<_A1, _A2>::type nextafter(_A1 __x, _A2 __y) noexcept {
  using __result_type = typename __promote<_A1, _A2>::type;
  static_assert((!(_IsSame<_A1, __result_type>::value && _IsSame<_A2, __result_type>::value)), "");
  return __math::nextafter((__result_type)__x, (__result_type)__y);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float nexttoward(float __x, long double __y) noexcept {
  return __builtin_nexttowardf(__x, __y);
}

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double nexttoward(double __x, long double __y) noexcept {
  return __builtin_nexttoward(__x, __y);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double nexttoward(long double __x, long double __y) noexcept {
  return __builtin_nexttowardl(__x, __y);
}

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double nexttoward(_A1 __x, long double __y) noexcept {
  return __builtin_nexttoward((double)__x, __y);
}



[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float rint(float __x) noexcept { return __builtin_rintf(__x); }

template <class = int>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double rint(double __x) noexcept {
  return __builtin_rint(__x);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double rint(long double __x) noexcept {
  return __builtin_rintl(__x);
}

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double rint(_A1 __x) noexcept {
  return __builtin_rint((double)__x);
}



[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float round(float __x) noexcept { return __builtin_round(__x); }

template <class = int>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double round(double __x) noexcept {
  return __builtin_round(__x);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double round(long double __x) noexcept {
  return __builtin_roundl(__x);
}

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double round(_A1 __x) noexcept {
  return __builtin_round((double)__x);
}



[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float trunc(float __x) noexcept { return __builtin_trunc(__x); }

template <class = int>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double trunc(double __x) noexcept {
  return __builtin_trunc(__x);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double trunc(long double __x) noexcept {
  return __builtin_truncl(__x);
}

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double trunc(_A1 __x) noexcept {
  return __builtin_trunc((double)__x);
}

}

}}
# 375 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\math.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__math/traits.h" 1 3
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__math/traits.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

namespace __math {



template <class _A1, __enable_if_t<is_floating_point<_A1>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool signbit(_A1 __x) noexcept {
  return __builtin_signbit(__x);
}

template <class _A1, __enable_if_t<is_integral<_A1>::value && is_signed<_A1>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool signbit(_A1 __x) noexcept {
  return __x < 0;
}

template <class _A1, __enable_if_t<is_integral<_A1>::value && !is_signed<_A1>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool signbit(_A1) noexcept {
  return false;
}



template <class _A1, __enable_if_t<is_arithmetic<_A1>::value && numeric_limits<_A1>::has_infinity, int> = 0>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool isfinite(_A1 __x) noexcept {
  return __builtin_isfinite((typename __promote<_A1>::type)__x);
}

template <class _A1, __enable_if_t<is_arithmetic<_A1>::value && !numeric_limits<_A1>::has_infinity, int> = 0>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool isfinite(_A1) noexcept {
  return true;
}



template <class _A1, __enable_if_t<is_arithmetic<_A1>::value && numeric_limits<_A1>::has_infinity, int> = 0>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool isinf(_A1 __x) noexcept {
  return __builtin_isinf((typename __promote<_A1>::type)__x);
}

template <class _A1, __enable_if_t<is_arithmetic<_A1>::value && !numeric_limits<_A1>::has_infinity, int> = 0>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool isinf(_A1) noexcept {
  return false;
}


[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool isinf(float __x) noexcept {
  return __builtin_isinf(__x);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__enable_if__(true, ""))) bool
isinf(double __x) noexcept {
  return __builtin_isinf(__x);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool isinf(long double __x) noexcept {
  return __builtin_isinf(__x);
}




template <class _A1, __enable_if_t<is_floating_point<_A1>::value, int> = 0>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool isnan(_A1 __x) noexcept {
  return __builtin_isnan(__x);
}

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool isnan(_A1) noexcept {
  return false;
}


[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool isnan(float __x) noexcept {
  return __builtin_isnan(__x);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__enable_if__(true, ""))) bool
isnan(double __x) noexcept {
  return __builtin_isnan(__x);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool isnan(long double __x) noexcept {
  return __builtin_isnan(__x);
}




template <class _A1, __enable_if_t<is_floating_point<_A1>::value, int> = 0>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool isnormal(_A1 __x) noexcept {
  return __builtin_isnormal(__x);
}

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool isnormal(_A1 __x) noexcept {
  return __x != 0;
}



template <class _A1, class _A2, __enable_if_t<is_arithmetic<_A1>::value && is_arithmetic<_A2>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool isgreater(_A1 __x, _A2 __y) noexcept {
  using type = typename __promote<_A1, _A2>::type;
  return __builtin_isgreater((type)__x, (type)__y);
}



template <class _A1, class _A2, __enable_if_t<is_arithmetic<_A1>::value && is_arithmetic<_A2>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool isgreaterequal(_A1 __x, _A2 __y) noexcept {
  using type = typename __promote<_A1, _A2>::type;
  return __builtin_isgreaterequal((type)__x, (type)__y);
}



template <class _A1, class _A2, __enable_if_t<is_arithmetic<_A1>::value && is_arithmetic<_A2>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool isless(_A1 __x, _A2 __y) noexcept {
  using type = typename __promote<_A1, _A2>::type;
  return __builtin_isless((type)__x, (type)__y);
}



template <class _A1, class _A2, __enable_if_t<is_arithmetic<_A1>::value && is_arithmetic<_A2>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool islessequal(_A1 __x, _A2 __y) noexcept {
  using type = typename __promote<_A1, _A2>::type;
  return __builtin_islessequal((type)__x, (type)__y);
}



template <class _A1, class _A2, __enable_if_t<is_arithmetic<_A1>::value && is_arithmetic<_A2>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool islessgreater(_A1 __x, _A2 __y) noexcept {
  using type = typename __promote<_A1, _A2>::type;
  return __builtin_islessgreater((type)__x, (type)__y);
}



template <class _A1, class _A2, __enable_if_t<is_arithmetic<_A1>::value && is_arithmetic<_A2>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool isunordered(_A1 __x, _A2 __y) noexcept {
  using type = typename __promote<_A1, _A2>::type;
  return __builtin_isunordered((type)__x, (type)__y);
}

}

}}
# 376 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\math.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__math/trigonometric_functions.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__math/trigonometric_functions.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

namespace __math {



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float cos(float __x) noexcept { return __builtin_cosf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double cos(double __x) noexcept {
  return __builtin_cos(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double cos(long double __x) noexcept { return __builtin_cosl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double cos(_A1 __x) noexcept {
  return __builtin_cos((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float sin(float __x) noexcept { return __builtin_sinf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double sin(double __x) noexcept {
  return __builtin_sin(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double sin(long double __x) noexcept { return __builtin_sinl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double sin(_A1 __x) noexcept {
  return __builtin_sin((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float tan(float __x) noexcept { return __builtin_tanf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double tan(double __x) noexcept {
  return __builtin_tan(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double tan(long double __x) noexcept { return __builtin_tanl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double tan(_A1 __x) noexcept {
  return __builtin_tan((double)__x);
}

}

}}
# 377 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\math.h" 2 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\stdlib.h" 1 3
# 381 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\math.h" 2 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

namespace __math {




template <class = int>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) int fpclassify(float __x) noexcept {
  return __builtin_fpclassify((7), (3), (5), (4), (0), __x);
}

template <class = int>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) int fpclassify(double __x) noexcept {
  return __builtin_fpclassify((7), (3), (5), (4), (0), __x);
}

template <class = int>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) int fpclassify(long double __x) noexcept {
  return __builtin_fpclassify((7), (3), (5), (4), (0), __x);
}

template <class _A1, std::__enable_if_t<std::is_integral<_A1>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) int fpclassify(_A1 __x) noexcept {
  return __x == 0 ? (0) : (5);
}

}

}}

using std::__math::fpclassify;
using std::__math::signbit;



using std::__math::isfinite;
using std::__math::isgreater;
using std::__math::isgreaterequal;
using std::__math::isinf;
using std::__math::isless;
using std::__math::islessequal;
using std::__math::islessgreater;
using std::__math::isnan;
using std::__math::isnormal;
using std::__math::isunordered;
# 444 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\math.h" 3
using std::__math::acos;
using std::__math::acosh;
using std::__math::asin;
using std::__math::asinh;
using std::__math::atan;
using std::__math::atan2;
using std::__math::atanh;
using std::__math::cbrt;
using std::__math::ceil;
using std::__math::copysign;
using std::__math::cos;
using std::__math::cosh;
using std::__math::erf;
using std::__math::erfc;
using std::__math::exp;
using std::__math::exp2;
using std::__math::expm1;
using std::__math::fabs;
using std::__math::fdim;
using std::__math::floor;
using std::__math::fma;
using std::__math::fmax;
using std::__math::fmin;
using std::__math::fmod;
using std::__math::frexp;
using std::__math::hypot;
using std::__math::ilogb;
using std::__math::ldexp;
using std::__math::lgamma;
using std::__math::llrint;
using std::__math::llround;
using std::__math::log;
using std::__math::log10;
using std::__math::log1p;
using std::__math::log2;
using std::__math::logb;
using std::__math::lrint;
using std::__math::lround;
using std::__math::modf;
using std::__math::nearbyint;
using std::__math::nextafter;
using std::__math::nexttoward;
using std::__math::pow;
using std::__math::remainder;
using std::__math::remquo;
using std::__math::rint;
using std::__math::round;
using std::__math::scalbln;
using std::__math::scalbn;
using std::__math::signbit;
using std::__math::sin;
using std::__math::sinh;
using std::__math::sqrt;
using std::__math::tan;
using std::__math::tanh;
using std::__math::tgamma;
using std::__math::trunc;

}
# 321 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cmath" 2 3
# 332 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cmath" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 336 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cmath" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

using ::signbit __attribute__((__using_if_exists__));
using ::fpclassify __attribute__((__using_if_exists__));
using ::isfinite __attribute__((__using_if_exists__));
using ::isinf __attribute__((__using_if_exists__));
using ::isnan __attribute__((__using_if_exists__));
using ::isnormal __attribute__((__using_if_exists__));
using ::isgreater __attribute__((__using_if_exists__));
using ::isgreaterequal __attribute__((__using_if_exists__));
using ::isless __attribute__((__using_if_exists__));
using ::islessequal __attribute__((__using_if_exists__));
using ::islessgreater __attribute__((__using_if_exists__));
using ::isunordered __attribute__((__using_if_exists__));
using ::isunordered __attribute__((__using_if_exists__));

using ::float_t __attribute__((__using_if_exists__));
using ::double_t __attribute__((__using_if_exists__));

using ::abs __attribute__((__using_if_exists__));

using ::acos __attribute__((__using_if_exists__));
using ::acosf __attribute__((__using_if_exists__));
using ::asin __attribute__((__using_if_exists__));
using ::asinf __attribute__((__using_if_exists__));
using ::atan __attribute__((__using_if_exists__));
using ::atanf __attribute__((__using_if_exists__));
using ::atan2 __attribute__((__using_if_exists__));
using ::atan2f __attribute__((__using_if_exists__));
using ::ceil __attribute__((__using_if_exists__));
using ::ceilf __attribute__((__using_if_exists__));
using ::cos __attribute__((__using_if_exists__));
using ::cosf __attribute__((__using_if_exists__));
using ::cosh __attribute__((__using_if_exists__));
using ::coshf __attribute__((__using_if_exists__));

using ::exp __attribute__((__using_if_exists__));
using ::expf __attribute__((__using_if_exists__));

using ::fabs __attribute__((__using_if_exists__));
using ::fabsf __attribute__((__using_if_exists__));
using ::floor __attribute__((__using_if_exists__));
using ::floorf __attribute__((__using_if_exists__));

using ::fmod __attribute__((__using_if_exists__));
using ::fmodf __attribute__((__using_if_exists__));

using ::frexp __attribute__((__using_if_exists__));
using ::frexpf __attribute__((__using_if_exists__));
using ::ldexp __attribute__((__using_if_exists__));
using ::ldexpf __attribute__((__using_if_exists__));

using ::log __attribute__((__using_if_exists__));
using ::logf __attribute__((__using_if_exists__));

using ::log10 __attribute__((__using_if_exists__));
using ::log10f __attribute__((__using_if_exists__));
using ::modf __attribute__((__using_if_exists__));
using ::modff __attribute__((__using_if_exists__));

using ::pow __attribute__((__using_if_exists__));
using ::powf __attribute__((__using_if_exists__));

using ::sin __attribute__((__using_if_exists__));
using ::sinf __attribute__((__using_if_exists__));
using ::sinh __attribute__((__using_if_exists__));
using ::sinhf __attribute__((__using_if_exists__));

using ::sqrt __attribute__((__using_if_exists__));
using ::sqrtf __attribute__((__using_if_exists__));
using ::tan __attribute__((__using_if_exists__));
using ::tanf __attribute__((__using_if_exists__));

using ::tanh __attribute__((__using_if_exists__));
using ::tanhf __attribute__((__using_if_exists__));

using ::acosh __attribute__((__using_if_exists__));
using ::acoshf __attribute__((__using_if_exists__));
using ::asinh __attribute__((__using_if_exists__));
using ::asinhf __attribute__((__using_if_exists__));
using ::atanh __attribute__((__using_if_exists__));
using ::atanhf __attribute__((__using_if_exists__));
using ::cbrt __attribute__((__using_if_exists__));
using ::cbrtf __attribute__((__using_if_exists__));

using ::copysign __attribute__((__using_if_exists__));
using ::copysignf __attribute__((__using_if_exists__));

using ::erf __attribute__((__using_if_exists__));
using ::erff __attribute__((__using_if_exists__));
using ::erfc __attribute__((__using_if_exists__));
using ::erfcf __attribute__((__using_if_exists__));
using ::exp2 __attribute__((__using_if_exists__));
using ::exp2f __attribute__((__using_if_exists__));
using ::expm1 __attribute__((__using_if_exists__));
using ::expm1f __attribute__((__using_if_exists__));
using ::fdim __attribute__((__using_if_exists__));
using ::fdimf __attribute__((__using_if_exists__));
using ::fmaf __attribute__((__using_if_exists__));
using ::fma __attribute__((__using_if_exists__));
using ::fmax __attribute__((__using_if_exists__));
using ::fmaxf __attribute__((__using_if_exists__));
using ::fmin __attribute__((__using_if_exists__));
using ::fminf __attribute__((__using_if_exists__));
using ::hypot __attribute__((__using_if_exists__));
using ::hypotf __attribute__((__using_if_exists__));
using ::ilogb __attribute__((__using_if_exists__));
using ::ilogbf __attribute__((__using_if_exists__));
using ::lgamma __attribute__((__using_if_exists__));
using ::lgammaf __attribute__((__using_if_exists__));
using ::llrint __attribute__((__using_if_exists__));
using ::llrintf __attribute__((__using_if_exists__));
using ::llround __attribute__((__using_if_exists__));
using ::llroundf __attribute__((__using_if_exists__));
using ::log1p __attribute__((__using_if_exists__));
using ::log1pf __attribute__((__using_if_exists__));
using ::log2 __attribute__((__using_if_exists__));
using ::log2f __attribute__((__using_if_exists__));
using ::logb __attribute__((__using_if_exists__));
using ::logbf __attribute__((__using_if_exists__));
using ::lrint __attribute__((__using_if_exists__));
using ::lrintf __attribute__((__using_if_exists__));
using ::lround __attribute__((__using_if_exists__));
using ::lroundf __attribute__((__using_if_exists__));

using ::nan __attribute__((__using_if_exists__));
using ::nanf __attribute__((__using_if_exists__));

using ::nearbyint __attribute__((__using_if_exists__));
using ::nearbyintf __attribute__((__using_if_exists__));
using ::nextafter __attribute__((__using_if_exists__));
using ::nextafterf __attribute__((__using_if_exists__));
using ::nexttoward __attribute__((__using_if_exists__));
using ::nexttowardf __attribute__((__using_if_exists__));
using ::remainder __attribute__((__using_if_exists__));
using ::remainderf __attribute__((__using_if_exists__));
using ::remquo __attribute__((__using_if_exists__));
using ::remquof __attribute__((__using_if_exists__));
using ::rint __attribute__((__using_if_exists__));
using ::rintf __attribute__((__using_if_exists__));
using ::round __attribute__((__using_if_exists__));
using ::roundf __attribute__((__using_if_exists__));
using ::scalbln __attribute__((__using_if_exists__));
using ::scalblnf __attribute__((__using_if_exists__));
using ::scalbn __attribute__((__using_if_exists__));
using ::scalbnf __attribute__((__using_if_exists__));
using ::tgamma __attribute__((__using_if_exists__));
using ::tgammaf __attribute__((__using_if_exists__));
using ::trunc __attribute__((__using_if_exists__));
using ::truncf __attribute__((__using_if_exists__));

using ::acosl __attribute__((__using_if_exists__));
using ::asinl __attribute__((__using_if_exists__));
using ::atanl __attribute__((__using_if_exists__));
using ::atan2l __attribute__((__using_if_exists__));
using ::ceill __attribute__((__using_if_exists__));
using ::cosl __attribute__((__using_if_exists__));
using ::coshl __attribute__((__using_if_exists__));
using ::expl __attribute__((__using_if_exists__));
using ::fabsl __attribute__((__using_if_exists__));
using ::floorl __attribute__((__using_if_exists__));
using ::fmodl __attribute__((__using_if_exists__));
using ::frexpl __attribute__((__using_if_exists__));
using ::ldexpl __attribute__((__using_if_exists__));
using ::logl __attribute__((__using_if_exists__));
using ::log10l __attribute__((__using_if_exists__));
using ::modfl __attribute__((__using_if_exists__));
using ::powl __attribute__((__using_if_exists__));
using ::sinl __attribute__((__using_if_exists__));
using ::sinhl __attribute__((__using_if_exists__));
using ::sqrtl __attribute__((__using_if_exists__));
using ::tanl __attribute__((__using_if_exists__));

using ::tanhl __attribute__((__using_if_exists__));
using ::acoshl __attribute__((__using_if_exists__));
using ::asinhl __attribute__((__using_if_exists__));
using ::atanhl __attribute__((__using_if_exists__));
using ::cbrtl __attribute__((__using_if_exists__));

using ::copysignl __attribute__((__using_if_exists__));

using ::erfl __attribute__((__using_if_exists__));
using ::erfcl __attribute__((__using_if_exists__));
using ::exp2l __attribute__((__using_if_exists__));
using ::expm1l __attribute__((__using_if_exists__));
using ::fdiml __attribute__((__using_if_exists__));

using ::fmal __attribute__((__using_if_exists__));

using ::fmaxl __attribute__((__using_if_exists__));
using ::fminl __attribute__((__using_if_exists__));
using ::hypotl __attribute__((__using_if_exists__));
using ::ilogbl __attribute__((__using_if_exists__));
using ::lgammal __attribute__((__using_if_exists__));

using ::llrintl __attribute__((__using_if_exists__));
using ::llroundl __attribute__((__using_if_exists__));

using ::log1pl __attribute__((__using_if_exists__));
using ::log2l __attribute__((__using_if_exists__));
using ::logbl __attribute__((__using_if_exists__));

using ::lrintl __attribute__((__using_if_exists__));
using ::lroundl __attribute__((__using_if_exists__));


using ::nanl __attribute__((__using_if_exists__));

using ::nearbyintl __attribute__((__using_if_exists__));
using ::nextafterl __attribute__((__using_if_exists__));
using ::nexttowardl __attribute__((__using_if_exists__));
using ::remainderl __attribute__((__using_if_exists__));

using ::remquol __attribute__((__using_if_exists__));

using ::rintl __attribute__((__using_if_exists__));
using ::roundl __attribute__((__using_if_exists__));
using ::scalblnl __attribute__((__using_if_exists__));
using ::scalbnl __attribute__((__using_if_exists__));
using ::tgammal __attribute__((__using_if_exists__));
using ::truncl __attribute__((__using_if_exists__));


inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float hypot(float __x, float __y, float __z) {
  return sqrt(__x * __x + __y * __y + __z * __z);
}
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double hypot(double __x, double __y, double __z) {
  return sqrt(__x * __x + __y * __y + __z * __z);
}
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double hypot(long double __x, long double __y, long double __z) {
  return sqrt(__x * __x + __y * __y + __z * __z);
}

template <class _A1, class _A2, class _A3>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
    typename enable_if_t< is_arithmetic<_A1>::value && is_arithmetic<_A2>::value && is_arithmetic<_A3>::value,
                          __promote<_A1, _A2, _A3> >::type
    hypot(_A1 __lcpp_x, _A2 __lcpp_y, _A3 __lcpp_z) noexcept {
  typedef typename __promote<_A1, _A2, _A3>::type __result_type;
  static_assert((!(is_same<_A1, __result_type>::value && is_same<_A2, __result_type>::value &&
                   is_same<_A3, __result_type>::value)),
                "");
  return std::hypot((__result_type)__lcpp_x, (__result_type)__lcpp_y, (__result_type)__lcpp_z);
}


template <class _A1, __enable_if_t<is_floating_point<_A1>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool __constexpr_isnan(_A1 __lcpp_x) noexcept {

  return __builtin_isnan(__lcpp_x);



}

template <class _A1, __enable_if_t<!is_floating_point<_A1>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool __constexpr_isnan(_A1 __lcpp_x) noexcept {
  return std::isnan(__lcpp_x);
}

template <class _A1, __enable_if_t<is_floating_point<_A1>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool __constexpr_isinf(_A1 __lcpp_x) noexcept {

  return __builtin_isinf(__lcpp_x);



}

template <class _A1, __enable_if_t<!is_floating_point<_A1>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool __constexpr_isinf(_A1 __lcpp_x) noexcept {
  return std::isinf(__lcpp_x);
}

template <class _A1, __enable_if_t<is_floating_point<_A1>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool __constexpr_isfinite(_A1 __lcpp_x) noexcept {

  return __builtin_isfinite(__lcpp_x);



}

template <class _A1, __enable_if_t<!is_floating_point<_A1>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool __constexpr_isfinite(_A1 __lcpp_x) noexcept {
  return __builtin_isfinite(__lcpp_x);
}

constexpr inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float __constexpr_copysign(float __x, float __y) noexcept {
  return __builtin_copysignf(__x, __y);
}

constexpr inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double __constexpr_copysign(double __x, double __y) noexcept {
  return __builtin_copysign(__x, __y);
}

constexpr inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double
__constexpr_copysign(long double __x, long double __y) noexcept {
  return __builtin_copysignl(__x, __y);
}

template <class _A1,
          class _A2,
          __enable_if_t<std::is_arithmetic<_A1>::value && std::is_arithmetic<_A2>::value, int> = 0>
constexpr inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) typename __promote<_A1, _A2>::type
__constexpr_copysign(_A1 __x, _A2 __y) noexcept {
  typedef typename std::__promote<_A1, _A2>::type __result_type;
  static_assert((!(std::_IsSame<_A1, __result_type>::value && std::_IsSame<_A2, __result_type>::value)), "");
  return __builtin_copysign((__result_type)__x, (__result_type)__y);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr float __constexpr_fabs(float __x) noexcept {
  return __builtin_fabsf(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr double __constexpr_fabs(double __x) noexcept {
  return __builtin_fabs(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr long double __constexpr_fabs(long double __x) noexcept {
  return __builtin_fabsl(__x);
}

template <class _Tp, __enable_if_t<is_integral<_Tp>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr double __constexpr_fabs(_Tp __x) noexcept {
  return __builtin_fabs(static_cast<double>(__x));
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr float __constexpr_fmax(float __x, float __y) noexcept {
# 675 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cmath" 3
  return __builtin_fmaxf(__x, __y);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr double __constexpr_fmax(double __x, double __y) noexcept {
# 688 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cmath" 3
  return __builtin_fmax(__x, __y);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr long double
__constexpr_fmax(long double __x, long double __y) noexcept {
# 702 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cmath" 3
  return __builtin_fmaxl(__x, __y);
}

template <class _Tp, class _Up, __enable_if_t<is_arithmetic<_Tp>::value && is_arithmetic<_Up>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr typename __promote<_Tp, _Up>::type
__constexpr_fmax(_Tp __x, _Up __y) noexcept {
  using __result_type = typename __promote<_Tp, _Up>::type;
  return std::__constexpr_fmax(static_cast<__result_type>(__x), static_cast<__result_type>(__y));
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Tp __constexpr_logb(_Tp __x) {

  if (__libcpp_is_constant_evaluated()) {
    if (__x == _Tp(0)) {

      return -numeric_limits<_Tp>::infinity();
    }

    if (std::__constexpr_isinf(__x))
      return numeric_limits<_Tp>::infinity();

    if (std::__constexpr_isnan(__x))
      return numeric_limits<_Tp>::quiet_NaN();

    __x = std::__constexpr_fabs(__x);
    unsigned long long __exp = 0;
    while (__x >= numeric_limits<_Tp>::radix) {
      __x /= numeric_limits<_Tp>::radix;
      __exp += 1;
    }
    return _Tp(__exp);
  }

  return __builtin_logb(__x);
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp __constexpr_scalbn(_Tp __x, int __exp) {

  if (__libcpp_is_constant_evaluated()) {
    if (__x == _Tp(0))
      return __x;

    if (std::__constexpr_isinf(__x))
      return __x;

    if (__exp == _Tp(0))
      return __x;

    if (std::__constexpr_isnan(__x))
      return numeric_limits<_Tp>::quiet_NaN();

    _Tp __mult(1);
    if (__exp > 0) {
      __mult = numeric_limits<_Tp>::radix;
      --__exp;
    } else {
      ++__exp;
      __exp = -__exp;
      __mult /= numeric_limits<_Tp>::radix;
    }

    while (__exp > 0) {
      if (!(__exp & 1)) {
        __mult *= __mult;
        __exp >>= 1;
      } else {
        __x *= __mult;
        --__exp;
      }
    }
    return __x;
  }

  return __builtin_scalbn(__x, __exp);
}
# 819 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cmath" 3
}}
# 21 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__compare/strong_order.h" 2 3
# 26 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__compare/strong_order.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 30 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__compare/strong_order.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 134 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__compare/strong_order.h" 3
}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__compare/weak_order.h" 2 3
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__compare/weak_order.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 99 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__compare/weak_order.h" 3
}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__compare/partial_order.h" 2 3
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__compare/partial_order.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 73 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__compare/partial_order.h" 3
}}
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__compare/compare_partial_order_fallback.h" 2 3
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__compare/compare_partial_order_fallback.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 74 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__compare/compare_partial_order_fallback.h" 3
}}
# 146 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\compare" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__compare/compare_strong_order_fallback.h" 1 3
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__compare/compare_strong_order_fallback.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 71 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__compare/compare_strong_order_fallback.h" 3
}}
# 147 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\compare" 2 3


# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__compare/compare_weak_order_fallback.h" 1 3
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__compare/compare_weak_order_fallback.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 71 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__compare/compare_weak_order_fallback.h" 3
}}
# 150 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\compare" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__compare/is_eq.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__compare/is_eq.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 32 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__compare/is_eq.h" 3
}}
# 151 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\compare" 2 3
# 162 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\compare" 3
# 250 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string_view" 2 3
# 253 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string_view" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 257 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string_view" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



template <class _Traits>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr inline size_t
__char_traits_length_checked(const typename _Traits::char_type* __s) noexcept {

  return ((void)0),

         _Traits::length(__s);
}

template <class _CharT, class _Traits>
class basic_string_view {
public:

  using traits_type = _Traits;
  using value_type = _CharT;
  using pointer = _CharT*;
  using const_pointer = const _CharT*;
  using reference = _CharT&;
  using const_reference = const _CharT&;



  using const_iterator = const_pointer;

  using iterator = const_iterator;
  using const_reverse_iterator = std::reverse_iterator<const_iterator>;
  using reverse_iterator = const_reverse_iterator;
  using size_type = size_t;
  using difference_type = ptrdiff_t;
  static constexpr const size_type npos = -1;

  static_assert((!is_array<value_type>::value), "Character type of basic_string_view must not be an array");
  static_assert((is_standard_layout<value_type>::value), "Character type of basic_string_view must be standard-layout");
  static_assert((is_trivial<value_type>::value), "Character type of basic_string_view must be trivial");
  static_assert((is_same<_CharT, typename traits_type::char_type>::value),
                "traits_type::char_type must be the same type as CharT");


  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string_view() noexcept : __data_(nullptr), __size_(0) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string_view(const basic_string_view&) noexcept = default;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string_view& operator=(const basic_string_view&) noexcept = default;

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string_view(const _CharT* __s, size_type __len) noexcept
      : __data_(__s),
        __size_(__len) {



    ((void)0);


    ((void)0);


  }
# 340 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string_view" 3
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string_view(const _CharT* __s)
      : __data_(__s), __size_(std::__char_traits_length_checked<_Traits>(__s)) {}






  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_iterator begin() const noexcept { return cbegin(); }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_iterator end() const noexcept { return cend(); }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_iterator cbegin() const noexcept {



    return __data_;

  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_iterator cend() const noexcept {



    return __data_ + __size_;

  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_reverse_iterator rbegin() const noexcept {
    return const_reverse_iterator(cend());
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_reverse_iterator rend() const noexcept {
    return const_reverse_iterator(cbegin());
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_reverse_iterator crbegin() const noexcept {
    return const_reverse_iterator(cend());
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_reverse_iterator crend() const noexcept {
    return const_reverse_iterator(cbegin());
  }


  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type size() const noexcept { return __size_; }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type length() const noexcept { return __size_; }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type max_size() const noexcept {
    return numeric_limits<size_type>::max() / sizeof(value_type);
  }

  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool empty() const noexcept {
    return __size_ == 0;
  }


  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_reference operator[](size_type __pos) const noexcept {
    return ((void)0), __data_[__pos];
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_reference at(size_type __pos) const {
    return __pos >= size() ? (__throw_out_of_range("string_view::at"), __data_[0]) : __data_[__pos];
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_reference front() const noexcept {
    return ((void)0), __data_[0];
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_reference back() const noexcept {
    return ((void)0), __data_[__size_ - 1];
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_pointer data() const noexcept { return __data_; }


  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void remove_prefix(size_type __n) noexcept {
    ((void)0);
    __data_ += __n;
    __size_ -= __n;
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void remove_suffix(size_type __n) noexcept {
    ((void)0);
    __size_ -= __n;
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void swap(basic_string_view& __other) noexcept {
    const value_type* __p = __data_;
    __data_ = __other.__data_;
    __other.__data_ = __p;

    size_type __sz = __size_;
    __size_ = __other.__size_;
    __other.__size_ = __sz;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type
  copy(_CharT* __s, size_type __n, size_type __pos = 0) const {
    if (__pos > size())
      __throw_out_of_range("string_view::copy");
    size_type __rlen = std::min(__n, size() - __pos);
    _Traits::copy(__s, data() + __pos, __rlen);
    return __rlen;
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string_view substr(size_type __pos = 0, size_type __n = npos) const {
    return __pos > size() ? (__throw_out_of_range("string_view::substr"), basic_string_view())
                          : basic_string_view(data() + __pos, std::min(__n, size() - __pos));
  }

  constexpr int compare(basic_string_view __sv) const noexcept {
    size_type __rlen = std::min(size(), __sv.size());
    int __retval = _Traits::compare(data(), __sv.data(), __rlen);
    if (__retval == 0)
      __retval = size() == __sv.size() ? 0 : (size() < __sv.size() ? -1 : 1);
    return __retval;
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) int
  compare(size_type __pos1, size_type __n1, basic_string_view __sv) const {
    return substr(__pos1, __n1).compare(__sv);
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) int
  compare(size_type __pos1, size_type __n1, basic_string_view __sv, size_type __pos2, size_type __n2) const {
    return substr(__pos1, __n1).compare(__sv.substr(__pos2, __n2));
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) int compare(const _CharT* __s) const noexcept {
    return compare(basic_string_view(__s));
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) int
  compare(size_type __pos1, size_type __n1, const _CharT* __s) const {
    return substr(__pos1, __n1).compare(basic_string_view(__s));
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) int
  compare(size_type __pos1, size_type __n1, const _CharT* __s, size_type __n2) const {
    return substr(__pos1, __n1).compare(basic_string_view(__s, __n2));
  }


  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type
  find(basic_string_view __s, size_type __pos = 0) const noexcept {
    ((void)0);
    return std::__str_find<value_type, size_type, traits_type, npos>(data(), size(), __s.data(), __pos, __s.size());
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type find(_CharT __c, size_type __pos = 0) const noexcept {
    return std::__str_find<value_type, size_type, traits_type, npos>(data(), size(), __c, __pos);
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type
  find(const _CharT* __s, size_type __pos, size_type __n) const noexcept {
    ((void)0);
    return std::__str_find<value_type, size_type, traits_type, npos>(data(), size(), __s, __pos, __n);
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type
  find(const _CharT* __s, size_type __pos = 0) const noexcept {
    ((void)0);
    return std::__str_find<value_type, size_type, traits_type, npos>(
        data(), size(), __s, __pos, traits_type::length(__s));
  }


  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type
  rfind(basic_string_view __s, size_type __pos = npos) const noexcept {
    ((void)0);
    return std::__str_rfind<value_type, size_type, traits_type, npos>(data(), size(), __s.data(), __pos, __s.size());
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type
  rfind(_CharT __c, size_type __pos = npos) const noexcept {
    return std::__str_rfind<value_type, size_type, traits_type, npos>(data(), size(), __c, __pos);
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type
  rfind(const _CharT* __s, size_type __pos, size_type __n) const noexcept {
    ((void)0);
    return std::__str_rfind<value_type, size_type, traits_type, npos>(data(), size(), __s, __pos, __n);
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type
  rfind(const _CharT* __s, size_type __pos = npos) const noexcept {
    ((void)0);
    return std::__str_rfind<value_type, size_type, traits_type, npos>(
        data(), size(), __s, __pos, traits_type::length(__s));
  }


  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type
  find_first_of(basic_string_view __s, size_type __pos = 0) const noexcept {
    ((void)0);
    return std::__str_find_first_of<value_type, size_type, traits_type, npos>(
        data(), size(), __s.data(), __pos, __s.size());
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type
  find_first_of(_CharT __c, size_type __pos = 0) const noexcept {
    return find(__c, __pos);
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type
  find_first_of(const _CharT* __s, size_type __pos, size_type __n) const noexcept {
    ((void)0);
    return std::__str_find_first_of<value_type, size_type, traits_type, npos>(data(), size(), __s, __pos, __n);
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type
  find_first_of(const _CharT* __s, size_type __pos = 0) const noexcept {
    ((void)0);
    return std::__str_find_first_of<value_type, size_type, traits_type, npos>(
        data(), size(), __s, __pos, traits_type::length(__s));
  }


  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type
  find_last_of(basic_string_view __s, size_type __pos = npos) const noexcept {
    ((void)0);
    return std::__str_find_last_of<value_type, size_type, traits_type, npos>(
        data(), size(), __s.data(), __pos, __s.size());
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type
  find_last_of(_CharT __c, size_type __pos = npos) const noexcept {
    return rfind(__c, __pos);
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type
  find_last_of(const _CharT* __s, size_type __pos, size_type __n) const noexcept {
    ((void)0);
    return std::__str_find_last_of<value_type, size_type, traits_type, npos>(data(), size(), __s, __pos, __n);
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type
  find_last_of(const _CharT* __s, size_type __pos = npos) const noexcept {
    ((void)0);
    return std::__str_find_last_of<value_type, size_type, traits_type, npos>(
        data(), size(), __s, __pos, traits_type::length(__s));
  }


  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type
  find_first_not_of(basic_string_view __s, size_type __pos = 0) const noexcept {
    ((void)0);

    return std::__str_find_first_not_of<value_type, size_type, traits_type, npos>(
        data(), size(), __s.data(), __pos, __s.size());
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type
  find_first_not_of(_CharT __c, size_type __pos = 0) const noexcept {
    return std::__str_find_first_not_of<value_type, size_type, traits_type, npos>(data(), size(), __c, __pos);
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type
  find_first_not_of(const _CharT* __s, size_type __pos, size_type __n) const noexcept {
    ((void)0);
    return std::__str_find_first_not_of<value_type, size_type, traits_type, npos>(data(), size(), __s, __pos, __n);
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type
  find_first_not_of(const _CharT* __s, size_type __pos = 0) const noexcept {
    ((void)0);
    return std::__str_find_first_not_of<value_type, size_type, traits_type, npos>(
        data(), size(), __s, __pos, traits_type::length(__s));
  }


  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type
  find_last_not_of(basic_string_view __s, size_type __pos = npos) const noexcept {
    ((void)0);

    return std::__str_find_last_not_of<value_type, size_type, traits_type, npos>(
        data(), size(), __s.data(), __pos, __s.size());
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type
  find_last_not_of(_CharT __c, size_type __pos = npos) const noexcept {
    return std::__str_find_last_not_of<value_type, size_type, traits_type, npos>(data(), size(), __c, __pos);
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type
  find_last_not_of(const _CharT* __s, size_type __pos, size_type __n) const noexcept {
    ((void)0);
    return std::__str_find_last_not_of<value_type, size_type, traits_type, npos>(data(), size(), __s, __pos, __n);
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type
  find_last_not_of(const _CharT* __s, size_type __pos = npos) const noexcept {
    ((void)0);
    return std::__str_find_last_not_of<value_type, size_type, traits_type, npos>(
        data(), size(), __s, __pos, traits_type::length(__s));
  }
# 673 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string_view" 3
private:
  const value_type* __data_;
  size_type __size_;
};
template <class... _Tag> [[maybe_unused]] basic_string_view(typename _Tag::__allow_ctad...)->basic_string_view<_Tag...>;
# 728 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string_view" 3
template <class _CharT, class _Traits>
constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
operator==(basic_string_view<_CharT, _Traits> __lhs, basic_string_view<_CharT, _Traits> __rhs) noexcept {
  if (__lhs.size() != __rhs.size())
    return false;
  return __lhs.compare(__rhs) == 0;
}



template <class _CharT, class _Traits, int = 1>
constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
operator==(basic_string_view<_CharT, _Traits> __lhs,
           __type_identity_t<basic_string_view<_CharT, _Traits> > __rhs) noexcept {
  if (__lhs.size() != __rhs.size())
    return false;
  return __lhs.compare(__rhs) == 0;
}

template <class _CharT, class _Traits, int = 2>
constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
operator==(__type_identity_t<basic_string_view<_CharT, _Traits> > __lhs,
           basic_string_view<_CharT, _Traits> __rhs) noexcept {
  if (__lhs.size() != __rhs.size())
    return false;
  return __lhs.compare(__rhs) == 0;
}


template <class _CharT, class _Traits>
constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
operator!=(basic_string_view<_CharT, _Traits> __lhs, basic_string_view<_CharT, _Traits> __rhs) noexcept {
  if (__lhs.size() != __rhs.size())
    return true;
  return __lhs.compare(__rhs) != 0;
}

template <class _CharT, class _Traits, int = 1>
constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
operator!=(basic_string_view<_CharT, _Traits> __lhs,
           __type_identity_t<basic_string_view<_CharT, _Traits> > __rhs) noexcept {
  if (__lhs.size() != __rhs.size())
    return true;
  return __lhs.compare(__rhs) != 0;
}

template <class _CharT, class _Traits, int = 2>
constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
operator!=(__type_identity_t<basic_string_view<_CharT, _Traits> > __lhs,
           basic_string_view<_CharT, _Traits> __rhs) noexcept {
  if (__lhs.size() != __rhs.size())
    return true;
  return __lhs.compare(__rhs) != 0;
}


template <class _CharT, class _Traits>
constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
operator<(basic_string_view<_CharT, _Traits> __lhs, basic_string_view<_CharT, _Traits> __rhs) noexcept {
  return __lhs.compare(__rhs) < 0;
}

template <class _CharT, class _Traits, int = 1>
constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
operator<(basic_string_view<_CharT, _Traits> __lhs,
          __type_identity_t<basic_string_view<_CharT, _Traits> > __rhs) noexcept {
  return __lhs.compare(__rhs) < 0;
}

template <class _CharT, class _Traits, int = 2>
constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
operator<(__type_identity_t<basic_string_view<_CharT, _Traits> > __lhs,
          basic_string_view<_CharT, _Traits> __rhs) noexcept {
  return __lhs.compare(__rhs) < 0;
}


template <class _CharT, class _Traits>
constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
operator>(basic_string_view<_CharT, _Traits> __lhs, basic_string_view<_CharT, _Traits> __rhs) noexcept {
  return __lhs.compare(__rhs) > 0;
}

template <class _CharT, class _Traits, int = 1>
constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
operator>(basic_string_view<_CharT, _Traits> __lhs,
          __type_identity_t<basic_string_view<_CharT, _Traits> > __rhs) noexcept {
  return __lhs.compare(__rhs) > 0;
}

template <class _CharT, class _Traits, int = 2>
constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
operator>(__type_identity_t<basic_string_view<_CharT, _Traits> > __lhs,
          basic_string_view<_CharT, _Traits> __rhs) noexcept {
  return __lhs.compare(__rhs) > 0;
}


template <class _CharT, class _Traits>
constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
operator<=(basic_string_view<_CharT, _Traits> __lhs, basic_string_view<_CharT, _Traits> __rhs) noexcept {
  return __lhs.compare(__rhs) <= 0;
}

template <class _CharT, class _Traits, int = 1>
constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
operator<=(basic_string_view<_CharT, _Traits> __lhs,
           __type_identity_t<basic_string_view<_CharT, _Traits> > __rhs) noexcept {
  return __lhs.compare(__rhs) <= 0;
}

template <class _CharT, class _Traits, int = 2>
constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
operator<=(__type_identity_t<basic_string_view<_CharT, _Traits> > __lhs,
           basic_string_view<_CharT, _Traits> __rhs) noexcept {
  return __lhs.compare(__rhs) <= 0;
}


template <class _CharT, class _Traits>
constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
operator>=(basic_string_view<_CharT, _Traits> __lhs, basic_string_view<_CharT, _Traits> __rhs) noexcept {
  return __lhs.compare(__rhs) >= 0;
}

template <class _CharT, class _Traits, int = 1>
constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
operator>=(basic_string_view<_CharT, _Traits> __lhs,
           __type_identity_t<basic_string_view<_CharT, _Traits> > __rhs) noexcept {
  return __lhs.compare(__rhs) >= 0;
}

template <class _CharT, class _Traits, int = 2>
constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
operator>=(__type_identity_t<basic_string_view<_CharT, _Traits> > __lhs,
           basic_string_view<_CharT, _Traits> __rhs) noexcept {
  return __lhs.compare(__rhs) >= 0;
}



template <class _CharT, class _Traits>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_ostream<_CharT, _Traits>&
operator<<(basic_ostream<_CharT, _Traits>& __os, basic_string_view<_CharT, _Traits> __str);


template <class _CharT>
struct __string_view_hash : public __unary_function<basic_string_view<_CharT, char_traits<_CharT> >, size_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_t operator()(const basic_string_view<_CharT, char_traits<_CharT> > __val) const noexcept {
    return std::__do_string_hash(__val.data(), __val.data() + __val.size());
  }
};

template <>
struct hash<basic_string_view<char, char_traits<char> > > : __string_view_hash<char> {};






template <>
struct hash<basic_string_view<char16_t, char_traits<char16_t> > > : __string_view_hash<char16_t> {};

template <>
struct hash<basic_string_view<char32_t, char_traits<char32_t> > > : __string_view_hash<char32_t> {};


template <>
struct hash<basic_string_view<wchar_t, char_traits<wchar_t> > > : __string_view_hash<wchar_t> {};



inline namespace literals {
inline namespace string_view_literals {
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr basic_string_view<char>
operator""sv(const char* __str, size_t __len) noexcept {
  return basic_string_view<char>(__str, __len);
}


inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr basic_string_view<wchar_t>
operator""sv(const wchar_t* __str, size_t __len) noexcept {
  return basic_string_view<wchar_t>(__str, __len);
}
# 922 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string_view" 3
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr basic_string_view<char16_t>
operator""sv(const char16_t* __str, size_t __len) noexcept {
  return basic_string_view<char16_t>(__str, __len);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr basic_string_view<char32_t>
operator""sv(const char32_t* __str, size_t __len) noexcept {
  return basic_string_view<char32_t>(__str, __len);
}
}
}

}}




# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 1 3
# 1787 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/adjacent_find.h" 1 3
# 21 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/adjacent_find.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 25 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/adjacent_find.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Iter, class _Sent, class _BinaryPredicate>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Iter
__adjacent_find(_Iter __first, _Sent __last, _BinaryPredicate&& __pred) {
  if (__first == __last)
    return __first;
  _Iter __i = __first;
  while (++__i != __last) {
    if (__pred(*__first, *__i))
      return __first;
    __first = __i;
  }
  return __i;
}

template <class _ForwardIterator, class _BinaryPredicate>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _ForwardIterator
adjacent_find(_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate __pred) {
  return std::__adjacent_find(std::move(__first), std::move(__last), __pred);
}

template <class _ForwardIterator>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _ForwardIterator
adjacent_find(_ForwardIterator __first, _ForwardIterator __last) {
  return std::adjacent_find(std::move(__first), std::move(__last), __equal_to());
}

}}
# 1788 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/all_of.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/all_of.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _InputIterator, class _Predicate>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
all_of(_InputIterator __first, _InputIterator __last, _Predicate __pred) {
  for (; __first != __last; ++__first)
    if (!__pred(*__first))
      return false;
  return true;
}

}}
# 1789 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/any_of.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/any_of.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _InputIterator, class _Predicate>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
any_of(_InputIterator __first, _InputIterator __last, _Predicate __pred) {
  for (; __first != __last; ++__first)
    if (__pred(*__first))
      return true;
  return false;
}

}}
# 1790 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/binary_search.h" 1 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/binary_search.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/lower_bound.h" 1 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/lower_bound.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/half_positive.h" 1 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/half_positive.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



template <typename _Integral, __enable_if_t<is_integral<_Integral>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Integral __half_positive(_Integral __value) {
  return static_cast<_Integral>(static_cast<__make_unsigned_t<_Integral> >(__value) / 2);
}

template <typename _Tp, __enable_if_t<!is_integral<_Tp>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Tp __half_positive(_Tp __value) {
  return __value / 2;
}

}}
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/lower_bound.h" 2 3
# 26 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/lower_bound.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _AlgPolicy, class _Iter, class _Sent, class _Type, class _Proj, class _Comp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Iter
__lower_bound(_Iter __first, _Sent __last, const _Type& __value, _Comp& __comp, _Proj& __proj) {
  auto __len = _IterOps<_AlgPolicy>::distance(__first, __last);

  while (__len != 0) {
    auto __l2 = std::__half_positive(__len);
    _Iter __m = __first;
    _IterOps<_AlgPolicy>::advance(__m, __l2);
    if (std::__invoke(__comp, std::__invoke(__proj, *__m), __value)) {
      __first = ++__m;
      __len -= __l2 + 1;
    } else {
      __len = __l2;
    }
  }
  return __first;
}

template <class _ForwardIterator, class _Tp, class _Compare>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _ForwardIterator
lower_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value, _Compare __comp) {
  static_assert(__is_callable<_Compare, decltype(*__first), const _Tp&>::value, "The comparator has to be callable");
  auto __proj = std::__identity();
  return std::__lower_bound<_ClassicAlgPolicy>(__first, __last, __value, __comp, __proj);
}

template <class _ForwardIterator, class _Tp>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _ForwardIterator
lower_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value) {
  return std::lower_bound(__first, __last, __value, __less<>());
}

}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/binary_search.h" 2 3
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/binary_search.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _ForwardIterator, class _Tp, class _Compare>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
binary_search(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value, _Compare __comp) {
  __first = std::lower_bound<_ForwardIterator, _Tp, __comp_ref_type<_Compare> >(__first, __last, __value, __comp);
  return __first != __last && !__comp(__value, *__first);
}

template <class _ForwardIterator, class _Tp>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
binary_search(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value) {
  return std::binary_search(__first, __last, __value, __less<>());
}

}}
# 1791 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/clamp.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/clamp.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {


template <class _Tp, class _Compare>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const _Tp&
clamp([[_Clang::__lifetimebound__]] const _Tp& __v,
      [[_Clang::__lifetimebound__]] const _Tp& __lo,
      [[_Clang::__lifetimebound__]] const _Tp& __hi,
      _Compare __comp) {
  ((void)0);
  return __comp(__v, __lo) ? __lo : __comp(__hi, __v) ? __hi : __v;
}

template <class _Tp>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const _Tp&
clamp([[_Clang::__lifetimebound__]] const _Tp& __v,
      [[_Clang::__lifetimebound__]] const _Tp& __lo,
      [[_Clang::__lifetimebound__]] const _Tp& __hi) {
  return std::clamp(__v, __lo, __hi, __less<>());
}


}}
# 1792 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/copy_backward.h" 1 3
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/copy_backward.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 28 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/copy_backward.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _AlgPolicy, class _InIter, class _Sent, class _OutIter>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) pair<_InIter, _OutIter>
__copy_backward(_InIter __first, _Sent __last, _OutIter __result);

template <class _AlgPolicy>
struct __copy_backward_loop {
  template <class _InIter, class _Sent, class _OutIter>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pair<_InIter, _OutIter>
  operator()(_InIter __first, _Sent __last, _OutIter __result) const {
    auto __last_iter = _IterOps<_AlgPolicy>::next(__first, __last);
    auto __original_last_iter = __last_iter;

    while (__first != __last_iter) {
      *--__result = *--__last_iter;
    }

    return std::make_pair(std::move(__original_last_iter), std::move(__result));
  }

  template <class _InIter, class _OutIter, __enable_if_t<__is_segmented_iterator<_InIter>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pair<_InIter, _OutIter>
  operator()(_InIter __first, _InIter __last, _OutIter __result) const {
    using _Traits = __segmented_iterator_traits<_InIter>;
    auto __sfirst = _Traits::__segment(__first);
    auto __slast = _Traits::__segment(__last);
    if (__sfirst == __slast) {
      auto __iters =
          std::__copy_backward<_AlgPolicy>(_Traits::__local(__first), _Traits::__local(__last), std::move(__result));
      return std::make_pair(__last, __iters.second);
    }

    __result =
        std::__copy_backward<_AlgPolicy>(_Traits::__begin(__slast), _Traits::__local(__last), std::move(__result))
            .second;
    --__slast;
    while (__sfirst != __slast) {
      __result =
          std::__copy_backward<_AlgPolicy>(_Traits::__begin(__slast), _Traits::__end(__slast), std::move(__result))
              .second;
      --__slast;
    }
    __result = std::__copy_backward<_AlgPolicy>(_Traits::__local(__first), _Traits::__end(__slast), std::move(__result))
                   .second;
    return std::make_pair(__last, std::move(__result));
  }

  template <class _InIter,
            class _OutIter,
            __enable_if_t<__has_random_access_iterator_category<_InIter>::value &&
                              !__is_segmented_iterator<_InIter>::value && __is_segmented_iterator<_OutIter>::value,
                          int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pair<_InIter, _OutIter>
  operator()(_InIter __first, _InIter __last, _OutIter __result) const {
    using _Traits = __segmented_iterator_traits<_OutIter>;
    auto __orig_last = __last;
    auto __segment_iterator = _Traits::__segment(__result);


    if (__first == __last)
      return std::make_pair(__first, __result);

    auto __local_last = _Traits::__local(__result);
    while (true) {
      using _DiffT = typename common_type<__iter_diff_t<_InIter>, __iter_diff_t<_OutIter> >::type;

      auto __local_first = _Traits::__begin(__segment_iterator);
      auto __size = std::min<_DiffT>(__local_last - __local_first, __last - __first);
      auto __iter = std::__copy_backward<_AlgPolicy>(__last - __size, __last, __local_last).second;
      __last -= __size;

      if (__first == __last)
        return std::make_pair(std::move(__orig_last), _Traits::__compose(__segment_iterator, std::move(__iter)));
      --__segment_iterator;
      __local_last = _Traits::__end(__segment_iterator);
    }
  }
};

struct __copy_backward_trivial {

  template <class _In, class _Out, __enable_if_t<__can_lower_copy_assignment_to_memmove<_In, _Out>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pair<_In*, _Out*>
  operator()(_In* __first, _In* __last, _Out* __result) const {
    return std::__copy_backward_trivial_impl(__first, __last, __result);
  }
};

template <class _AlgPolicy, class _BidirectionalIterator1, class _Sentinel, class _BidirectionalIterator2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) pair<_BidirectionalIterator1, _BidirectionalIterator2>
__copy_backward(_BidirectionalIterator1 __first, _Sentinel __last, _BidirectionalIterator2 __result) {
  return std::__dispatch_copy_or_move<_AlgPolicy, __copy_backward_loop<_AlgPolicy>, __copy_backward_trivial>(
      std::move(__first), std::move(__last), std::move(__result));
}

template <class _BidirectionalIterator1, class _BidirectionalIterator2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _BidirectionalIterator2
copy_backward(_BidirectionalIterator1 __first, _BidirectionalIterator1 __last, _BidirectionalIterator2 __result) {
  static_assert(std::is_copy_constructible<_BidirectionalIterator1>::value &&
                    std::is_copy_constructible<_BidirectionalIterator1>::value,
                "Iterators must be copy constructible.");

  return std::__copy_backward<_ClassicAlgPolicy>(std::move(__first), std::move(__last), std::move(__result)).second;
}

}}
# 1796 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/copy_if.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/copy_if.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _InputIterator, class _OutputIterator, class _Predicate>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _OutputIterator
copy_if(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _Predicate __pred) {
  for (; __first != __last; ++__first) {
    if (__pred(*__first)) {
      *__result = *__first;
      ++__result;
    }
  }
  return __result;
}

}}
# 1797 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/count.h" 1 3
# 25 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/count.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 29 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/count.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {


template <class _AlgPolicy, class _Iter, class _Sent, class _Tp, class _Proj>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) typename _IterOps<_AlgPolicy>::template __difference_type<_Iter>
__count(_Iter __first, _Sent __last, const _Tp& __value, _Proj& __proj) {
  typename _IterOps<_AlgPolicy>::template __difference_type<_Iter> __r(0);
  for (; __first != __last; ++__first)
    if (std::__invoke(__proj, *__first) == __value)
      ++__r;
  return __r;
}


template <bool _ToCount, class _Cp, bool _IsConst>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) typename __bit_iterator<_Cp, _IsConst>::difference_type
__count_bool(__bit_iterator<_Cp, _IsConst> __first, typename _Cp::size_type __n) {
  using _It = __bit_iterator<_Cp, _IsConst>;
  using __storage_type = typename _It::__storage_type;
  using difference_type = typename _It::difference_type;

  const int __bits_per_word = _It::__bits_per_word;
  difference_type __r = 0;

  if (__first.__ctz_ != 0) {
    __storage_type __clz_f = static_cast<__storage_type>(__bits_per_word - __first.__ctz_);
    __storage_type __dn = std::min(__clz_f, __n);
    __storage_type __m = (~__storage_type(0) << __first.__ctz_) & (~__storage_type(0) >> (__clz_f - __dn));
    __r = std::__libcpp_popcount(std::__invert_if<!_ToCount>(*__first.__seg_) & __m);
    __n -= __dn;
    ++__first.__seg_;
  }

  for (; __n >= __bits_per_word; ++__first.__seg_, __n -= __bits_per_word)
    __r += std::__libcpp_popcount(std::__invert_if<!_ToCount>(*__first.__seg_));

  if (__n > 0) {
    __storage_type __m = ~__storage_type(0) >> (__bits_per_word - __n);
    __r += std::__libcpp_popcount(std::__invert_if<!_ToCount>(*__first.__seg_) & __m);
  }
  return __r;
}

template <class, class _Cp, bool _IsConst, class _Tp, class _Proj, __enable_if_t<__is_identity<_Proj>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __iter_diff_t<__bit_iterator<_Cp, _IsConst> >
__count(__bit_iterator<_Cp, _IsConst> __first, __bit_iterator<_Cp, _IsConst> __last, const _Tp& __value, _Proj&) {
  if (__value)
    return std::__count_bool<true>(__first, static_cast<typename _Cp::size_type>(__last - __first));
  return std::__count_bool<false>(__first, static_cast<typename _Cp::size_type>(__last - __first));
}

template <class _InputIterator, class _Tp>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __iter_diff_t<_InputIterator>
count(_InputIterator __first, _InputIterator __last, const _Tp& __value) {
  __identity __proj;
  return std::__count<_ClassicAlgPolicy>(__first, __last, __value, __proj);
}

}}
# 1799 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/count_if.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/count_if.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _InputIterator, class _Predicate>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
    typename iterator_traits<_InputIterator>::difference_type
    count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred) {
  typename iterator_traits<_InputIterator>::difference_type __r(0);
  for (; __first != __last; ++__first)
    if (__pred(*__first))
      ++__r;
  return __r;
}

}}
# 1800 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/equal_range.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/equal_range.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/upper_bound.h" 1 3
# 26 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/upper_bound.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 30 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/upper_bound.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _AlgPolicy, class _Compare, class _Iter, class _Sent, class _Tp, class _Proj>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Iter
__upper_bound(_Iter __first, _Sent __last, const _Tp& __value, _Compare&& __comp, _Proj&& __proj) {
  auto __len = _IterOps<_AlgPolicy>::distance(__first, __last);
  while (__len != 0) {
    auto __half_len = std::__half_positive(__len);
    auto __mid = _IterOps<_AlgPolicy>::next(__first, __half_len);
    if (std::__invoke(__comp, __value, std::__invoke(__proj, *__mid)))
      __len = __half_len;
    else {
      __first = ++__mid;
      __len -= __half_len + 1;
    }
  }
  return __first;
}

template <class _ForwardIterator, class _Tp, class _Compare>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _ForwardIterator
upper_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value, _Compare __comp) {
  static_assert(is_copy_constructible<_ForwardIterator>::value, "Iterator has to be copy constructible");
  return std::__upper_bound<_ClassicAlgPolicy>(
      std::move(__first), std::move(__last), __value, std::move(__comp), std::__identity());
}

template <class _ForwardIterator, class _Tp>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _ForwardIterator
upper_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value) {
  return std::upper_bound(std::move(__first), std::move(__last), __value, __less<>());
}

}}
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/equal_range.h" 2 3
# 32 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/equal_range.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 36 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/equal_range.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _AlgPolicy, class _Compare, class _Iter, class _Sent, class _Tp, class _Proj>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) pair<_Iter, _Iter>
__equal_range(_Iter __first, _Sent __last, const _Tp& __value, _Compare&& __comp, _Proj&& __proj) {
  auto __len = _IterOps<_AlgPolicy>::distance(__first, __last);
  _Iter __end = _IterOps<_AlgPolicy>::next(__first, __last);
  while (__len != 0) {
    auto __half_len = std::__half_positive(__len);
    _Iter __mid = _IterOps<_AlgPolicy>::next(__first, __half_len);
    if (std::__invoke(__comp, std::__invoke(__proj, *__mid), __value)) {
      __first = ++__mid;
      __len -= __half_len + 1;
    } else if (std::__invoke(__comp, __value, std::__invoke(__proj, *__mid))) {
      __end = __mid;
      __len = __half_len;
    } else {
      _Iter __mp1 = __mid;
      return pair<_Iter, _Iter>(std::__lower_bound<_AlgPolicy>(__first, __mid, __value, __comp, __proj),
                                std::__upper_bound<_AlgPolicy>(++__mp1, __end, __value, __comp, __proj));
    }
  }
  return pair<_Iter, _Iter>(__first, __first);
}

template <class _ForwardIterator, class _Tp, class _Compare>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) pair<_ForwardIterator, _ForwardIterator>
equal_range(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value, _Compare __comp) {
  static_assert(__is_callable<_Compare, decltype(*__first), const _Tp&>::value, "The comparator has to be callable");
  static_assert(is_copy_constructible<_ForwardIterator>::value, "Iterator has to be copy constructible");
  return std::__equal_range<_ClassicAlgPolicy>(
      std::move(__first),
      std::move(__last),
      __value,
      static_cast<__comp_ref_type<_Compare> >(__comp),
      std::__identity());
}

template <class _ForwardIterator, class _Tp>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) pair<_ForwardIterator, _ForwardIterator>
equal_range(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value) {
  return std::equal_range(std::move(__first), std::move(__last), __value, __less<>());
}

}}
# 1802 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/fill.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/fill.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



template <class _ForwardIterator, class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
__fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value, forward_iterator_tag) {
  for (; __first != __last; ++__first)
    *__first = __value;
}

template <class _RandomAccessIterator, class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
__fill(_RandomAccessIterator __first, _RandomAccessIterator __last, const _Tp& __value, random_access_iterator_tag) {
  std::fill_n(__first, __last - __first, __value);
}

template <class _ForwardIterator, class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value) {
  std::__fill(__first, __last, __value, typename iterator_traits<_ForwardIterator>::iterator_category());
}

}}
# 1803 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3





# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/find_if_not.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/find_if_not.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _InputIterator, class _Predicate>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _InputIterator
find_if_not(_InputIterator __first, _InputIterator __last, _Predicate __pred) {
  for (; __first != __last; ++__first)
    if (!__pred(*__first))
      break;
  return __first;
}

}}
# 1809 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/fold.h" 1 3
# 33 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/fold.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 37 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/fold.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 126 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/fold.h" 3
}}
# 1810 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/for_each.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/for_each.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/movable_box.h" 1 3
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/movable_box.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\optional" 1 3
# 225 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\optional" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/in_place.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/in_place.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



struct __attribute__((__visibility__("default"))) in_place_t {
  explicit in_place_t() = default;
};
inline constexpr in_place_t in_place{};

template <class _Tp>
struct in_place_type_t {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit in_place_type_t() = default;
};
template <class _Tp>
inline constexpr in_place_type_t<_Tp> in_place_type{};

template <size_t _Idx>
struct in_place_index_t {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit in_place_index_t() = default;
};
template <size_t _Idx>
inline constexpr in_place_index_t<_Idx> in_place_index{};

template <class _Tp>
struct __is_inplace_type_imp : false_type {};
template <class _Tp>
struct __is_inplace_type_imp<in_place_type_t<_Tp>> : true_type {};

template <class _Tp>
using __is_inplace_type = __is_inplace_type_imp<__remove_cvref_t<_Tp>>;

template <class _Tp>
struct __is_inplace_index_imp : false_type {};
template <size_t _Idx>
struct __is_inplace_index_imp<in_place_index_t<_Idx>> : true_type {};

template <class _Tp>
using __is_inplace_index = __is_inplace_index_imp<__remove_cvref_t<_Tp>>;



}}
# 226 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\optional" 2 3
# 240 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\optional" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 244 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\optional" 2 3

namespace std
{

class __attribute__((__visibility__("default"))) bad_optional_access : public exception {
public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bad_optional_access() noexcept = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bad_optional_access(const bad_optional_access&) noexcept = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bad_optional_access& operator=(const bad_optional_access&) noexcept = default;

  ~bad_optional_access() noexcept override;
  const char* what() const noexcept override;
};

}



namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

[[noreturn]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
__throw_bad_optional_access() {



  ::std::__libcpp_verbose_abort("bad_optional_access was thrown in -fno-exceptions mode");

}

struct nullopt_t {
  struct __secret_tag {
    explicit __secret_tag() = default;
  };
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr explicit nullopt_t(__secret_tag, __secret_tag) noexcept {}
};

inline constexpr nullopt_t nullopt{nullopt_t::__secret_tag{}, nullopt_t::__secret_tag{}};

struct __optional_construct_from_invoke_tag {};

template <class _Tp, bool = is_trivially_destructible<_Tp>::value>
struct __optional_destruct_base;

template <class _Tp>
struct __optional_destruct_base<_Tp, false> {
  typedef _Tp value_type;
  static_assert(is_object_v<value_type>, "instantiation of optional with a non-object type is undefined behavior");
  union {
    char __null_state_;
    value_type __val_;
  };
  bool __engaged_;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) ~__optional_destruct_base() {
    if (__engaged_)
      __val_.~value_type();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr __optional_destruct_base() noexcept : __null_state_(), __engaged_(false) {}

  template <class... _Args>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr explicit __optional_destruct_base(in_place_t, _Args&&... __args)
      : __val_(std::forward<_Args>(__args)...), __engaged_(true) {}
# 315 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\optional" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void reset() noexcept {
    if (__engaged_) {
      __val_.~value_type();
      __engaged_ = false;
    }
  }
};

template <class _Tp>
struct __optional_destruct_base<_Tp, true> {
  typedef _Tp value_type;
  static_assert(is_object_v<value_type>, "instantiation of optional with a non-object type is undefined behavior");
  union {
    char __null_state_;
    value_type __val_;
  };
  bool __engaged_;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr __optional_destruct_base() noexcept : __null_state_(), __engaged_(false) {}

  template <class... _Args>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr explicit __optional_destruct_base(in_place_t, _Args&&... __args)
      : __val_(std::forward<_Args>(__args)...), __engaged_(true) {}
# 346 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\optional" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void reset() noexcept {
    if (__engaged_) {
      __engaged_ = false;
    }
  }
};

template <class _Tp, bool = is_reference<_Tp>::value>
struct __optional_storage_base : __optional_destruct_base<_Tp> {
  using __base = __optional_destruct_base<_Tp>;
  using value_type = _Tp;
  using __base::__base;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool has_value() const noexcept { return this->__engaged_; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr value_type& __get() & noexcept { return this->__val_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const value_type& __get() const& noexcept { return this->__val_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr value_type&& __get() && noexcept { return std::move(this->__val_); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const value_type&& __get() const&& noexcept { return std::move(this->__val_); }

  template <class... _Args>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __construct(_Args&&... __args) {
    ((void)0);
    std::__construct_at(std::addressof(this->__val_), std::forward<_Args>(__args)...);
    this->__engaged_ = true;
  }

  template <class _That>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __construct_from(_That&& __opt) {
    if (__opt.has_value())
      __construct(std::forward<_That>(__opt).__get());
  }

  template <class _That>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __assign_from(_That&& __opt) {
    if (this->__engaged_ == __opt.has_value()) {
      if (this->__engaged_)
        this->__val_ = std::forward<_That>(__opt).__get();
    } else {
      if (this->__engaged_)
        this->reset();
      else
        __construct(std::forward<_That>(__opt).__get());
    }
  }
};




template <class _Tp>
struct __optional_storage_base<_Tp, true> {
  using value_type = _Tp;
  using __raw_type = remove_reference_t<_Tp>;
  __raw_type* __value_;

  template <class _Up>
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool __can_bind_reference() {
    using _RawUp = __libcpp_remove_reference_t<_Up>;
    using _UpPtr = _RawUp*;
    using _RawTp = __libcpp_remove_reference_t<_Tp>;
    using _TpPtr = _RawTp*;
    using _CheckLValueArg =
        integral_constant<bool,
                          (is_lvalue_reference<_Up>::value && is_convertible<_UpPtr, _TpPtr>::value) ||
                              is_same<_RawUp, reference_wrapper<_RawTp>>::value ||
                              is_same<_RawUp, reference_wrapper<__remove_const_t<_RawTp>>>::value >;
    return (is_lvalue_reference<_Tp>::value && _CheckLValueArg::value) ||
           (is_rvalue_reference<_Tp>::value && !is_lvalue_reference<_Up>::value &&
            is_convertible<_UpPtr, _TpPtr>::value);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr __optional_storage_base() noexcept : __value_(nullptr) {}

  template <class _UArg>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr explicit __optional_storage_base(in_place_t, _UArg&& __uarg)
      : __value_(std::addressof(__uarg)) {
    static_assert(__can_bind_reference<_UArg>(),
                  "Attempted to construct a reference element in tuple from a "
                  "possible temporary");
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void reset() noexcept { __value_ = nullptr; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool has_value() const noexcept { return __value_ != nullptr; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr value_type& __get() const& noexcept { return *__value_; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr value_type&& __get() const&& noexcept { return std::forward<value_type>(*__value_); }

  template <class _UArg>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __construct(_UArg&& __val) {
    ((void)0);
    static_assert(__can_bind_reference<_UArg>(),
                  "Attempted to construct a reference element in tuple from a "
                  "possible temporary");
    __value_ = std::addressof(__val);
  }

  template <class _That>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __construct_from(_That&& __opt) {
    if (__opt.has_value())
      __construct(std::forward<_That>(__opt).__get());
  }

  template <class _That>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __assign_from(_That&& __opt) {
    if (has_value() == __opt.has_value()) {
      if (has_value())
        *__value_ = std::forward<_That>(__opt).__get();
    } else {
      if (has_value())
        reset();
      else
        __construct(std::forward<_That>(__opt).__get());
    }
  }
};

template <class _Tp, bool = is_trivially_copy_constructible<_Tp>::value>
struct __optional_copy_base : __optional_storage_base<_Tp> {
  using __optional_storage_base<_Tp>::__optional_storage_base;
};

template <class _Tp>
struct __optional_copy_base<_Tp, false> : __optional_storage_base<_Tp> {
  using __optional_storage_base<_Tp>::__optional_storage_base;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __optional_copy_base() = default;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __optional_copy_base(const __optional_copy_base& __opt) {
    this->__construct_from(__opt);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __optional_copy_base(__optional_copy_base&&) = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __optional_copy_base& operator=(const __optional_copy_base&) = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __optional_copy_base& operator=(__optional_copy_base&&) = default;
};

template <class _Tp, bool = is_trivially_move_constructible<_Tp>::value>
struct __optional_move_base : __optional_copy_base<_Tp> {
  using __optional_copy_base<_Tp>::__optional_copy_base;
};

template <class _Tp>
struct __optional_move_base<_Tp, false> : __optional_copy_base<_Tp> {
  using value_type = _Tp;
  using __optional_copy_base<_Tp>::__optional_copy_base;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __optional_move_base() = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __optional_move_base(const __optional_move_base&) = default;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
  __optional_move_base(__optional_move_base&& __opt) noexcept(is_nothrow_move_constructible_v<value_type>) {
    this->__construct_from(std::move(__opt));
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __optional_move_base& operator=(const __optional_move_base&) = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __optional_move_base& operator=(__optional_move_base&&) = default;
};

template <class _Tp,
          bool = is_trivially_destructible<_Tp>::value && is_trivially_copy_constructible<_Tp>::value &&
                 is_trivially_copy_assignable<_Tp>::value>
struct __optional_copy_assign_base : __optional_move_base<_Tp> {
  using __optional_move_base<_Tp>::__optional_move_base;
};

template <class _Tp>
struct __optional_copy_assign_base<_Tp, false> : __optional_move_base<_Tp> {
  using __optional_move_base<_Tp>::__optional_move_base;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __optional_copy_assign_base() = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __optional_copy_assign_base(const __optional_copy_assign_base&) = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __optional_copy_assign_base(__optional_copy_assign_base&&) = default;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __optional_copy_assign_base&
  operator=(const __optional_copy_assign_base& __opt) {
    this->__assign_from(__opt);
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __optional_copy_assign_base& operator=(__optional_copy_assign_base&&) = default;
};

template <class _Tp,
          bool = is_trivially_destructible<_Tp>::value && is_trivially_move_constructible<_Tp>::value &&
                 is_trivially_move_assignable<_Tp>::value>
struct __optional_move_assign_base : __optional_copy_assign_base<_Tp> {
  using __optional_copy_assign_base<_Tp>::__optional_copy_assign_base;
};

template <class _Tp>
struct __optional_move_assign_base<_Tp, false> : __optional_copy_assign_base<_Tp> {
  using value_type = _Tp;
  using __optional_copy_assign_base<_Tp>::__optional_copy_assign_base;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __optional_move_assign_base() = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __optional_move_assign_base(const __optional_move_assign_base& __opt) = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __optional_move_assign_base(__optional_move_assign_base&&) = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __optional_move_assign_base& operator=(const __optional_move_assign_base&) = default;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __optional_move_assign_base&
  operator=(__optional_move_assign_base&& __opt) noexcept(
      is_nothrow_move_assignable_v<value_type> && is_nothrow_move_constructible_v<value_type>) {
    this->__assign_from(std::move(__opt));
    return *this;
  }
};

template <class _Tp>
using __optional_sfinae_ctor_base_t =
    __sfinae_ctor_base< is_copy_constructible<_Tp>::value, is_move_constructible<_Tp>::value >;

template <class _Tp>
using __optional_sfinae_assign_base_t =
    __sfinae_assign_base< (is_copy_constructible<_Tp>::value && is_copy_assignable<_Tp>::value),
                          (is_move_constructible<_Tp>::value && is_move_assignable<_Tp>::value) >;

template <class _Tp>
class optional;
# 575 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\optional" 3
template <class _Tp>
struct __is_std_optional : false_type {};
template <class _Tp>
struct __is_std_optional<optional<_Tp>> : true_type {};

template <class _Tp>
class optional
    : private __optional_move_assign_base<_Tp>,
      private __optional_sfinae_ctor_base_t<_Tp>,
      private __optional_sfinae_assign_base_t<_Tp> {
  using __base = __optional_move_assign_base<_Tp>;

public:
  using value_type = _Tp;

private:

  static_assert(!is_same_v<__remove_cvref_t<value_type>, in_place_t>,
                "instantiation of optional with in_place_t is ill-formed");
  static_assert(!is_same_v<__remove_cvref_t<value_type>, nullopt_t>,
                "instantiation of optional with nullopt_t is ill-formed");
  static_assert(!is_reference_v<value_type>, "instantiation of optional with a reference type is ill-formed");
  static_assert(is_destructible_v<value_type>, "instantiation of optional with a non-destructible type is ill-formed");
  static_assert(!is_array_v<value_type>, "instantiation of optional with an array type is ill-formed");


  struct _CheckOptionalArgsConstructor {
    template <class _Up>
    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr bool __enable_implicit() {
      return is_constructible_v<_Tp, _Up&&> && is_convertible_v<_Up&&, _Tp>;
    }

    template <class _Up>
    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr bool __enable_explicit() {
      return is_constructible_v<_Tp, _Up&&> && !is_convertible_v<_Up&&, _Tp>;
    }
  };
  template <class _Up>
  using _CheckOptionalArgsCtor =
      _If< _IsNotSame<__remove_cvref_t<_Up>, in_place_t>::value && _IsNotSame<__remove_cvref_t<_Up>, optional>::value &&
               (!is_same_v<remove_cv_t<_Tp>, bool> || !__is_std_optional<__remove_cvref_t<_Up>>::value),
           _CheckOptionalArgsConstructor,
           __check_tuple_constructor_fail >;
  template <class _QualUp>
  struct _CheckOptionalLikeConstructor {
    template <class _Up, class _Opt = optional<_Up>>
    using __check_constructible_from_opt =
        _Or< is_constructible<_Tp, _Opt&>,
             is_constructible<_Tp, _Opt const&>,
             is_constructible<_Tp, _Opt&&>,
             is_constructible<_Tp, _Opt const&&>,
             is_convertible<_Opt&, _Tp>,
             is_convertible<_Opt const&, _Tp>,
             is_convertible<_Opt&&, _Tp>,
             is_convertible<_Opt const&&, _Tp> >;
    template <class _Up, class _Opt = optional<_Up>>
    using __check_assignable_from_opt =
        _Or< is_assignable<_Tp&, _Opt&>,
             is_assignable<_Tp&, _Opt const&>,
             is_assignable<_Tp&, _Opt&&>,
             is_assignable<_Tp&, _Opt const&&> >;
    template <class _Up, class _QUp = _QualUp>
    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr bool __enable_implicit() {
      return is_convertible<_QUp, _Tp>::value &&
             (is_same_v<remove_cv_t<_Tp>, bool> || !__check_constructible_from_opt<_Up>::value);
    }
    template <class _Up, class _QUp = _QualUp>
    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr bool __enable_explicit() {
      return !is_convertible<_QUp, _Tp>::value &&
             (is_same_v<remove_cv_t<_Tp>, bool> || !__check_constructible_from_opt<_Up>::value);
    }
    template <class _Up, class _QUp = _QualUp>
    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr bool __enable_assign() {


      return !__check_constructible_from_opt<_Up>::value && !__check_assignable_from_opt<_Up>::value;
    }
  };

  template <class _Up, class _QualUp>
  using _CheckOptionalLikeCtor =
      _If< _And< _IsNotSame<_Up, _Tp>, is_constructible<_Tp, _QualUp> >::value,
           _CheckOptionalLikeConstructor<_QualUp>,
           __check_tuple_constructor_fail >;
  template <class _Up, class _QualUp>
  using _CheckOptionalLikeAssign =
      _If< _And< _IsNotSame<_Up, _Tp>, is_constructible<_Tp, _QualUp>, is_assignable<_Tp&, _QualUp> >::value,
           _CheckOptionalLikeConstructor<_QualUp>,
           __check_tuple_constructor_fail >;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr optional() noexcept {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr optional(const optional&) = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr optional(optional&&) = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr optional(nullopt_t) noexcept {}

  template <
      class _InPlaceT,
      class... _Args,
      class = enable_if_t< _And< _IsSame<_InPlaceT, in_place_t>, is_constructible<value_type, _Args...> >::value > >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr explicit optional(_InPlaceT, _Args&&... __args)
      : __base(in_place, std::forward<_Args>(__args)...) {}

  template <class _Up,
            class... _Args,
            class = enable_if_t< is_constructible_v<value_type, initializer_list<_Up>&, _Args...>> >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr explicit optional(in_place_t, initializer_list<_Up> __il, _Args&&... __args)
      : __base(in_place, __il, std::forward<_Args>(__args)...) {}

  template <class _Up = value_type,
            enable_if_t< _CheckOptionalArgsCtor<_Up>::template __enable_implicit<_Up>(), int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr optional(_Up&& __v) : __base(in_place, std::forward<_Up>(__v)) {}

  template <class _Up, enable_if_t< _CheckOptionalArgsCtor<_Up>::template __enable_explicit<_Up>(), int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr explicit optional(_Up&& __v) : __base(in_place, std::forward<_Up>(__v)) {}


  template <class _Up,
            enable_if_t< _CheckOptionalLikeCtor<_Up, _Up const&>::template __enable_implicit<_Up>(), int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) optional(const optional<_Up>& __v) {
    this->__construct_from(__v);
  }
  template <class _Up,
            enable_if_t< _CheckOptionalLikeCtor<_Up, _Up const&>::template __enable_explicit<_Up>(), int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit optional(const optional<_Up>& __v) {
    this->__construct_from(__v);
  }


  template <class _Up, enable_if_t< _CheckOptionalLikeCtor<_Up, _Up&&>::template __enable_implicit<_Up>(), int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) optional(optional<_Up>&& __v) {
    this->__construct_from(std::move(__v));
  }
  template <class _Up, enable_if_t< _CheckOptionalLikeCtor<_Up, _Up&&>::template __enable_explicit<_Up>(), int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit optional(optional<_Up>&& __v) {
    this->__construct_from(std::move(__v));
  }







  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) optional& operator=(nullopt_t) noexcept {
    reset();
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr optional& operator=(const optional&) = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr optional& operator=(optional&&) = default;


  template <
      class _Up = value_type,
      class = enable_if_t< _And< _IsNotSame<__remove_cvref_t<_Up>, optional>,
                                 _Or< _IsNotSame<__remove_cvref_t<_Up>, value_type>, _Not<is_scalar<value_type>> >,
                                 is_constructible<value_type, _Up>,
                                 is_assignable<value_type&, _Up> >::value> >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) optional& operator=(_Up&& __v) {
    if (this->has_value())
      this->__get() = std::forward<_Up>(__v);
    else
      this->__construct(std::forward<_Up>(__v));
    return *this;
  }


  template <class _Up,
            enable_if_t< _CheckOptionalLikeAssign<_Up, _Up const&>::template __enable_assign<_Up>(), int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) optional& operator=(const optional<_Up>& __v) {
    this->__assign_from(__v);
    return *this;
  }


  template <class _Up, enable_if_t< _CheckOptionalLikeCtor<_Up, _Up&&>::template __enable_assign<_Up>(), int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) optional& operator=(optional<_Up>&& __v) {
    this->__assign_from(std::move(__v));
    return *this;
  }

  template <class... _Args, class = enable_if_t< is_constructible_v<value_type, _Args...> > >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp& emplace(_Args&&... __args) {
    reset();
    this->__construct(std::forward<_Args>(__args)...);
    return this->__get();
  }

  template <class _Up,
            class... _Args,
            class = enable_if_t< is_constructible_v<value_type, initializer_list<_Up>&, _Args...> > >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp& emplace(initializer_list<_Up> __il, _Args&&... __args) {
    reset();
    this->__construct(__il, std::forward<_Args>(__args)...);
    return this->__get();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
  swap(optional& __opt) noexcept(is_nothrow_move_constructible_v<value_type> && is_nothrow_swappable_v<value_type>) {
    if (this->has_value() == __opt.has_value()) {
      using std::swap;
      if (this->has_value())
        swap(this->__get(), __opt.__get());
    } else {
      if (this->has_value()) {
        __opt.__construct(std::move(this->__get()));
        reset();
      } else {
        this->__construct(std::move(__opt.__get()));
        __opt.reset();
      }
    }
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr add_pointer_t<value_type const> operator->() const {
    ((void)0);
    return std::addressof(this->__get());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr add_pointer_t<value_type> operator->() {
    ((void)0);
    return std::addressof(this->__get());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const value_type& operator*() const& noexcept {
    ((void)0);
    return this->__get();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr value_type& operator*() & noexcept {
    ((void)0);
    return this->__get();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr value_type&& operator*() && noexcept {
    ((void)0);
    return std::move(this->__get());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const value_type&& operator*() const&& noexcept {
    ((void)0);
    return std::move(this->__get());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr explicit operator bool() const noexcept { return has_value(); }

  using __base::__get;
  using __base::has_value;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr value_type const& value() const& {
    if (!this->has_value())
      __throw_bad_optional_access();
    return this->__get();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr value_type& value() & {
    if (!this->has_value())
      __throw_bad_optional_access();
    return this->__get();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr value_type&& value() && {
    if (!this->has_value())
      __throw_bad_optional_access();
    return std::move(this->__get());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr value_type const&& value() const&& {
    if (!this->has_value())
      __throw_bad_optional_access();
    return std::move(this->__get());
  }

  template <class _Up>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr value_type value_or(_Up&& __v) const& {
    static_assert(is_copy_constructible_v<value_type>, "optional<T>::value_or: T must be copy constructible");
    static_assert(is_convertible_v<_Up, value_type>, "optional<T>::value_or: U must be convertible to T");
    return this->has_value() ? this->__get() : static_cast<value_type>(std::forward<_Up>(__v));
  }

  template <class _Up>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr value_type value_or(_Up&& __v) && {
    static_assert(is_move_constructible_v<value_type>, "optional<T>::value_or: T must be move constructible");
    static_assert(is_convertible_v<_Up, value_type>, "optional<T>::value_or: U must be convertible to T");
    return this->has_value() ? std::move(this->__get()) : static_cast<value_type>(std::forward<_Up>(__v));
  }
# 975 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\optional" 3
  using __base::reset;
};


template <class _Tp>
optional(_Tp) -> optional<_Tp>;



template <class _Tp, class _Up>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr enable_if_t<
    is_convertible_v<decltype(std::declval<const _Tp&>() == std::declval<const _Up&>()), bool>,
    bool >
operator==(const optional<_Tp>& __x, const optional<_Up>& __y) {
  if (static_cast<bool>(__x) != static_cast<bool>(__y))
    return false;
  if (!static_cast<bool>(__x))
    return true;
  return *__x == *__y;
}

template <class _Tp, class _Up>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr enable_if_t<
    is_convertible_v<decltype(std::declval<const _Tp&>() != std::declval<const _Up&>()), bool>,
    bool >
operator!=(const optional<_Tp>& __x, const optional<_Up>& __y) {
  if (static_cast<bool>(__x) != static_cast<bool>(__y))
    return true;
  if (!static_cast<bool>(__x))
    return false;
  return *__x != *__y;
}

template <class _Tp, class _Up>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr enable_if_t<
    is_convertible_v<decltype(std::declval<const _Tp&>() < std::declval<const _Up&>()), bool>,
    bool >
operator<(const optional<_Tp>& __x, const optional<_Up>& __y) {
  if (!static_cast<bool>(__y))
    return false;
  if (!static_cast<bool>(__x))
    return true;
  return *__x < *__y;
}

template <class _Tp, class _Up>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr enable_if_t<
    is_convertible_v<decltype(std::declval<const _Tp&>() > std::declval<const _Up&>()), bool>,
    bool >
operator>(const optional<_Tp>& __x, const optional<_Up>& __y) {
  if (!static_cast<bool>(__x))
    return false;
  if (!static_cast<bool>(__y))
    return true;
  return *__x > *__y;
}

template <class _Tp, class _Up>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr enable_if_t<
    is_convertible_v<decltype(std::declval<const _Tp&>() <= std::declval<const _Up&>()), bool>,
    bool >
operator<=(const optional<_Tp>& __x, const optional<_Up>& __y) {
  if (!static_cast<bool>(__x))
    return true;
  if (!static_cast<bool>(__y))
    return false;
  return *__x <= *__y;
}

template <class _Tp, class _Up>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr enable_if_t<
    is_convertible_v<decltype(std::declval<const _Tp&>() >= std::declval<const _Up&>()), bool>,
    bool >
operator>=(const optional<_Tp>& __x, const optional<_Up>& __y) {
  if (!static_cast<bool>(__y))
    return true;
  if (!static_cast<bool>(__x))
    return false;
  return *__x >= *__y;
}
# 1069 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\optional" 3
template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool operator==(const optional<_Tp>& __x, nullopt_t) noexcept {
  return !static_cast<bool>(__x);
}



template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool operator==(nullopt_t, const optional<_Tp>& __x) noexcept {
  return !static_cast<bool>(__x);
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool operator!=(const optional<_Tp>& __x, nullopt_t) noexcept {
  return static_cast<bool>(__x);
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool operator!=(nullopt_t, const optional<_Tp>& __x) noexcept {
  return static_cast<bool>(__x);
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool operator<(const optional<_Tp>&, nullopt_t) noexcept {
  return false;
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool operator<(nullopt_t, const optional<_Tp>& __x) noexcept {
  return static_cast<bool>(__x);
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool operator<=(const optional<_Tp>& __x, nullopt_t) noexcept {
  return !static_cast<bool>(__x);
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool operator<=(nullopt_t, const optional<_Tp>&) noexcept {
  return true;
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool operator>(const optional<_Tp>& __x, nullopt_t) noexcept {
  return static_cast<bool>(__x);
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool operator>(nullopt_t, const optional<_Tp>&) noexcept {
  return false;
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool operator>=(const optional<_Tp>&, nullopt_t) noexcept {
  return true;
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool operator>=(nullopt_t, const optional<_Tp>& __x) noexcept {
  return !static_cast<bool>(__x);
}
# 1141 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\optional" 3
template <class _Tp, class _Up>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr enable_if_t<
    is_convertible_v<decltype(std::declval<const _Tp&>() == std::declval<const _Up&>()), bool>,
    bool >
operator==(const optional<_Tp>& __x, const _Up& __v) {
  return static_cast<bool>(__x) ? *__x == __v : false;
}

template <class _Tp, class _Up>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr enable_if_t<
    is_convertible_v<decltype(std::declval<const _Tp&>() == std::declval<const _Up&>()), bool>,
    bool >
operator==(const _Tp& __v, const optional<_Up>& __x) {
  return static_cast<bool>(__x) ? __v == *__x : false;
}

template <class _Tp, class _Up>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr enable_if_t<
    is_convertible_v<decltype(std::declval<const _Tp&>() != std::declval<const _Up&>()), bool>,
    bool >
operator!=(const optional<_Tp>& __x, const _Up& __v) {
  return static_cast<bool>(__x) ? *__x != __v : true;
}

template <class _Tp, class _Up>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr enable_if_t<
    is_convertible_v<decltype(std::declval<const _Tp&>() != std::declval<const _Up&>()), bool>,
    bool >
operator!=(const _Tp& __v, const optional<_Up>& __x) {
  return static_cast<bool>(__x) ? __v != *__x : true;
}

template <class _Tp, class _Up>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr enable_if_t<
    is_convertible_v<decltype(std::declval<const _Tp&>() < std::declval<const _Up&>()), bool>,
    bool >
operator<(const optional<_Tp>& __x, const _Up& __v) {
  return static_cast<bool>(__x) ? *__x < __v : true;
}

template <class _Tp, class _Up>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr enable_if_t<
    is_convertible_v<decltype(std::declval<const _Tp&>() < std::declval<const _Up&>()), bool>,
    bool >
operator<(const _Tp& __v, const optional<_Up>& __x) {
  return static_cast<bool>(__x) ? __v < *__x : false;
}

template <class _Tp, class _Up>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr enable_if_t<
    is_convertible_v<decltype(std::declval<const _Tp&>() <= std::declval<const _Up&>()), bool>,
    bool >
operator<=(const optional<_Tp>& __x, const _Up& __v) {
  return static_cast<bool>(__x) ? *__x <= __v : true;
}

template <class _Tp, class _Up>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr enable_if_t<
    is_convertible_v<decltype(std::declval<const _Tp&>() <= std::declval<const _Up&>()), bool>,
    bool >
operator<=(const _Tp& __v, const optional<_Up>& __x) {
  return static_cast<bool>(__x) ? __v <= *__x : false;
}

template <class _Tp, class _Up>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr enable_if_t<
    is_convertible_v<decltype(std::declval<const _Tp&>() > std::declval<const _Up&>()), bool>,
    bool >
operator>(const optional<_Tp>& __x, const _Up& __v) {
  return static_cast<bool>(__x) ? *__x > __v : false;
}

template <class _Tp, class _Up>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr enable_if_t<
    is_convertible_v<decltype(std::declval<const _Tp&>() > std::declval<const _Up&>()), bool>,
    bool >
operator>(const _Tp& __v, const optional<_Up>& __x) {
  return static_cast<bool>(__x) ? __v > *__x : true;
}

template <class _Tp, class _Up>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr enable_if_t<
    is_convertible_v<decltype(std::declval<const _Tp&>() >= std::declval<const _Up&>()), bool>,
    bool >
operator>=(const optional<_Tp>& __x, const _Up& __v) {
  return static_cast<bool>(__x) ? *__x >= __v : false;
}

template <class _Tp, class _Up>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr enable_if_t<
    is_convertible_v<decltype(std::declval<const _Tp&>() >= std::declval<const _Up&>()), bool>,
    bool >
operator>=(const _Tp& __v, const optional<_Up>& __x) {
  return static_cast<bool>(__x) ? __v >= *__x : true;
}
# 1248 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\optional" 3
template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
    enable_if_t< is_move_constructible_v<_Tp> && is_swappable_v<_Tp>, void >
    swap(optional<_Tp>& __x, optional<_Tp>& __y) noexcept(noexcept(__x.swap(__y))) {
  __x.swap(__y);
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr optional<decay_t<_Tp>> make_optional(_Tp&& __v) {
  return optional<decay_t<_Tp>>(std::forward<_Tp>(__v));
}

template <class _Tp, class... _Args>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr optional<_Tp> make_optional(_Args&&... __args) {
  return optional<_Tp>(in_place, std::forward<_Args>(__args)...);
}

template <class _Tp, class _Up, class... _Args>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr optional<_Tp> make_optional(initializer_list<_Up> __il, _Args&&... __args) {
  return optional<_Tp>(in_place, __il, std::forward<_Args>(__args)...);
}

template <class _Tp>
struct hash< __enable_hash_helper<optional<_Tp>, remove_const_t<_Tp>> > {

  __attribute__((__deprecated__)) typedef optional<_Tp> argument_type;
  __attribute__((__deprecated__)) typedef size_t result_type;


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_t operator()(const optional<_Tp>& __opt) const {
    return static_cast<bool>(__opt) ? hash<remove_const_t<_Tp>>()(*__opt) : 0;
  }
};

}}






# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\atomic" 1 3
# 592 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\atomic" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__atomic/aliases.h" 1 3
# 12 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__atomic/aliases.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__atomic/atomic.h" 1 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__atomic/atomic.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__atomic/atomic_base.h" 1 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__atomic/atomic_base.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__atomic/atomic_sync.h" 1 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__atomic/atomic_sync.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__atomic/contention_t.h" 1 3
# 12 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__atomic/contention_t.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__atomic/cxx_atomic_impl.h" 1 3
# 12 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__atomic/cxx_atomic_impl.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__atomic/is_always_lock_free.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__atomic/is_always_lock_free.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
struct __libcpp_is_always_lock_free {

  static const bool __value = __atomic_always_lock_free(sizeof(_Tp), nullptr);
};

}}
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__atomic/cxx_atomic_impl.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__atomic/memory_order.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__atomic/memory_order.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {




enum __legacy_memory_order { __mo_relaxed, __mo_consume, __mo_acquire, __mo_release, __mo_acq_rel, __mo_seq_cst };

using __memory_order_underlying_t = underlying_type<__legacy_memory_order>::type;
# 52 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__atomic/memory_order.h" 3
enum memory_order {
  memory_order_relaxed = __mo_relaxed,
  memory_order_consume = __mo_consume,
  memory_order_acquire = __mo_acquire,
  memory_order_release = __mo_release,
  memory_order_acq_rel = __mo_acq_rel,
  memory_order_seq_cst = __mo_seq_cst,
};



}}
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__atomic/cxx_atomic_impl.h" 2 3
# 25 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__atomic/cxx_atomic_impl.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 296 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__atomic/cxx_atomic_impl.h" 3
template <typename _Tp>
struct __cxx_atomic_base_impl {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))

  __cxx_atomic_base_impl() noexcept = default;




  constexpr explicit __cxx_atomic_base_impl(_Tp __value) noexcept : __a_value(__value) {}
  __extension__ _Atomic(_Tp) __a_value;
};



__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline void __cxx_atomic_thread_fence(memory_order __order) noexcept {
  __c11_atomic_thread_fence(static_cast<__memory_order_underlying_t>(__order));
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline void __cxx_atomic_signal_fence(memory_order __order) noexcept {
  __c11_atomic_signal_fence(static_cast<__memory_order_underlying_t>(__order));
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __cxx_atomic_init(__cxx_atomic_base_impl<_Tp> volatile* __a, _Tp __val) noexcept {
  __c11_atomic_init(std::addressof(__a->__a_value), __val);
}
template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __cxx_atomic_init(__cxx_atomic_base_impl<_Tp>* __a, _Tp __val) noexcept {
  __c11_atomic_init(std::addressof(__a->__a_value), __val);
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
__cxx_atomic_store(__cxx_atomic_base_impl<_Tp> volatile* __a, _Tp __val, memory_order __order) noexcept {
  __c11_atomic_store(std::addressof(__a->__a_value), __val, static_cast<__memory_order_underlying_t>(__order));
}
template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
__cxx_atomic_store(__cxx_atomic_base_impl<_Tp>* __a, _Tp __val, memory_order __order) noexcept {
  __c11_atomic_store(std::addressof(__a->__a_value), __val, static_cast<__memory_order_underlying_t>(__order));
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp
__cxx_atomic_load(__cxx_atomic_base_impl<_Tp> const volatile* __a, memory_order __order) noexcept {
  using __ptr_type = __remove_const_t<decltype(__a->__a_value)>*;
  return __c11_atomic_load(
      const_cast<__ptr_type>(std::addressof(__a->__a_value)), static_cast<__memory_order_underlying_t>(__order));
}
template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp __cxx_atomic_load(__cxx_atomic_base_impl<_Tp> const* __a, memory_order __order) noexcept {
  using __ptr_type = __remove_const_t<decltype(__a->__a_value)>*;
  return __c11_atomic_load(
      const_cast<__ptr_type>(std::addressof(__a->__a_value)), static_cast<__memory_order_underlying_t>(__order));
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
__cxx_atomic_load_inplace(__cxx_atomic_base_impl<_Tp> const volatile* __a, _Tp* __dst, memory_order __order) noexcept {
  using __ptr_type = __remove_const_t<decltype(__a->__a_value)>*;
  *__dst = __c11_atomic_load(
      const_cast<__ptr_type>(std::addressof(__a->__a_value)), static_cast<__memory_order_underlying_t>(__order));
}
template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
__cxx_atomic_load_inplace(__cxx_atomic_base_impl<_Tp> const* __a, _Tp* __dst, memory_order __order) noexcept {
  using __ptr_type = __remove_const_t<decltype(__a->__a_value)>*;
  *__dst = __c11_atomic_load(
      const_cast<__ptr_type>(std::addressof(__a->__a_value)), static_cast<__memory_order_underlying_t>(__order));
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp
__cxx_atomic_exchange(__cxx_atomic_base_impl<_Tp> volatile* __a, _Tp __value, memory_order __order) noexcept {
  return __c11_atomic_exchange(
      std::addressof(__a->__a_value), __value, static_cast<__memory_order_underlying_t>(__order));
}
template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp
__cxx_atomic_exchange(__cxx_atomic_base_impl<_Tp>* __a, _Tp __value, memory_order __order) noexcept {
  return __c11_atomic_exchange(
      std::addressof(__a->__a_value), __value, static_cast<__memory_order_underlying_t>(__order));
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline constexpr memory_order __to_failure_order(memory_order __order) {

  return __order == memory_order_release
           ? memory_order_relaxed
           : (__order == memory_order_acq_rel ? memory_order_acquire : __order);
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool __cxx_atomic_compare_exchange_strong(
    __cxx_atomic_base_impl<_Tp> volatile* __a,
    _Tp* __expected,
    _Tp __value,
    memory_order __success,
    memory_order __failure) noexcept {
  return __c11_atomic_compare_exchange_strong(
      std::addressof(__a->__a_value),
      __expected,
      __value,
      static_cast<__memory_order_underlying_t>(__success),
      static_cast<__memory_order_underlying_t>(__to_failure_order(__failure)));
}
template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool __cxx_atomic_compare_exchange_strong(
    __cxx_atomic_base_impl<_Tp>* __a, _Tp* __expected, _Tp __value, memory_order __success, memory_order __failure)
    noexcept {
  return __c11_atomic_compare_exchange_strong(
      std::addressof(__a->__a_value),
      __expected,
      __value,
      static_cast<__memory_order_underlying_t>(__success),
      static_cast<__memory_order_underlying_t>(__to_failure_order(__failure)));
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool __cxx_atomic_compare_exchange_weak(
    __cxx_atomic_base_impl<_Tp> volatile* __a,
    _Tp* __expected,
    _Tp __value,
    memory_order __success,
    memory_order __failure) noexcept {
  return __c11_atomic_compare_exchange_weak(
      std::addressof(__a->__a_value),
      __expected,
      __value,
      static_cast<__memory_order_underlying_t>(__success),
      static_cast<__memory_order_underlying_t>(__to_failure_order(__failure)));
}
template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool __cxx_atomic_compare_exchange_weak(
    __cxx_atomic_base_impl<_Tp>* __a, _Tp* __expected, _Tp __value, memory_order __success, memory_order __failure)
    noexcept {
  return __c11_atomic_compare_exchange_weak(
      std::addressof(__a->__a_value),
      __expected,
      __value,
      static_cast<__memory_order_underlying_t>(__success),
      static_cast<__memory_order_underlying_t>(__to_failure_order(__failure)));
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp
__cxx_atomic_fetch_add(__cxx_atomic_base_impl<_Tp> volatile* __a, _Tp __delta, memory_order __order) noexcept {
  return __c11_atomic_fetch_add(
      std::addressof(__a->__a_value), __delta, static_cast<__memory_order_underlying_t>(__order));
}
template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp
__cxx_atomic_fetch_add(__cxx_atomic_base_impl<_Tp>* __a, _Tp __delta, memory_order __order) noexcept {
  return __c11_atomic_fetch_add(
      std::addressof(__a->__a_value), __delta, static_cast<__memory_order_underlying_t>(__order));
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp*
__cxx_atomic_fetch_add(__cxx_atomic_base_impl<_Tp*> volatile* __a, ptrdiff_t __delta, memory_order __order) noexcept {
  return __c11_atomic_fetch_add(
      std::addressof(__a->__a_value), __delta, static_cast<__memory_order_underlying_t>(__order));
}
template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp*
__cxx_atomic_fetch_add(__cxx_atomic_base_impl<_Tp*>* __a, ptrdiff_t __delta, memory_order __order) noexcept {
  return __c11_atomic_fetch_add(
      std::addressof(__a->__a_value), __delta, static_cast<__memory_order_underlying_t>(__order));
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp
__cxx_atomic_fetch_sub(__cxx_atomic_base_impl<_Tp> volatile* __a, _Tp __delta, memory_order __order) noexcept {
  return __c11_atomic_fetch_sub(
      std::addressof(__a->__a_value), __delta, static_cast<__memory_order_underlying_t>(__order));
}
template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp
__cxx_atomic_fetch_sub(__cxx_atomic_base_impl<_Tp>* __a, _Tp __delta, memory_order __order) noexcept {
  return __c11_atomic_fetch_sub(
      std::addressof(__a->__a_value), __delta, static_cast<__memory_order_underlying_t>(__order));
}
template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp*
__cxx_atomic_fetch_sub(__cxx_atomic_base_impl<_Tp*> volatile* __a, ptrdiff_t __delta, memory_order __order) noexcept {
  return __c11_atomic_fetch_sub(
      std::addressof(__a->__a_value), __delta, static_cast<__memory_order_underlying_t>(__order));
}
template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp*
__cxx_atomic_fetch_sub(__cxx_atomic_base_impl<_Tp*>* __a, ptrdiff_t __delta, memory_order __order) noexcept {
  return __c11_atomic_fetch_sub(
      std::addressof(__a->__a_value), __delta, static_cast<__memory_order_underlying_t>(__order));
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp
__cxx_atomic_fetch_and(__cxx_atomic_base_impl<_Tp> volatile* __a, _Tp __pattern, memory_order __order) noexcept {
  return __c11_atomic_fetch_and(
      std::addressof(__a->__a_value), __pattern, static_cast<__memory_order_underlying_t>(__order));
}
template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp
__cxx_atomic_fetch_and(__cxx_atomic_base_impl<_Tp>* __a, _Tp __pattern, memory_order __order) noexcept {
  return __c11_atomic_fetch_and(
      std::addressof(__a->__a_value), __pattern, static_cast<__memory_order_underlying_t>(__order));
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp
__cxx_atomic_fetch_or(__cxx_atomic_base_impl<_Tp> volatile* __a, _Tp __pattern, memory_order __order) noexcept {
  return __c11_atomic_fetch_or(
      std::addressof(__a->__a_value), __pattern, static_cast<__memory_order_underlying_t>(__order));
}
template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp
__cxx_atomic_fetch_or(__cxx_atomic_base_impl<_Tp>* __a, _Tp __pattern, memory_order __order) noexcept {
  return __c11_atomic_fetch_or(
      std::addressof(__a->__a_value), __pattern, static_cast<__memory_order_underlying_t>(__order));
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp
__cxx_atomic_fetch_xor(__cxx_atomic_base_impl<_Tp> volatile* __a, _Tp __pattern, memory_order __order) noexcept {
  return __c11_atomic_fetch_xor(
      std::addressof(__a->__a_value), __pattern, static_cast<__memory_order_underlying_t>(__order));
}
template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp
__cxx_atomic_fetch_xor(__cxx_atomic_base_impl<_Tp>* __a, _Tp __pattern, memory_order __order) noexcept {
  return __c11_atomic_fetch_xor(
      std::addressof(__a->__a_value), __pattern, static_cast<__memory_order_underlying_t>(__order));
}
# 813 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__atomic/cxx_atomic_impl.h" 3
template <typename _Tp, typename _Base = __cxx_atomic_base_impl<_Tp> >

struct __cxx_atomic_impl : public _Base {
  static_assert(is_trivially_copyable<_Tp>::value, "std::atomic<T> requires that 'T' be a trivially copyable type");

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __cxx_atomic_impl() noexcept = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr explicit __cxx_atomic_impl(_Tp __value) noexcept : _Base(__value) {}
};

}}
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__atomic/contention_t.h" 2 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__atomic/contention_t.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {




using __cxx_contention_t = int64_t;


using __cxx_atomic_contention_t = __cxx_atomic_impl<__cxx_contention_t>;

}}
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__atomic/atomic_sync.h" 2 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__chrono/duration.h" 1 3
# 21 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__chrono/duration.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\ratio" 1 3
# 87 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\ratio" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\climits" 1 3
# 43 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\climits" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\limits.h" 1 3
# 44 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\climits" 2 3
# 47 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\climits" 3
# 88 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\ratio" 2 3
# 93 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\ratio" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 97 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\ratio" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



template <intmax_t _Xp, intmax_t _Yp>
struct __static_gcd {
  static const intmax_t value = __static_gcd<_Yp, _Xp % _Yp>::value;
};

template <intmax_t _Xp>
struct __static_gcd<_Xp, 0> {
  static const intmax_t value = _Xp;
};

template <>
struct __static_gcd<0, 0> {
  static const intmax_t value = 1;
};



template <intmax_t _Xp, intmax_t _Yp>
struct __static_lcm {
  static const intmax_t value = _Xp / __static_gcd<_Xp, _Yp>::value * _Yp;
};

template <intmax_t _Xp>
struct __static_abs {
  static const intmax_t value = _Xp < 0 ? -_Xp : _Xp;
};

template <intmax_t _Xp>
struct __static_sign {
  static const intmax_t value = _Xp == 0 ? 0 : (_Xp < 0 ? -1 : 1);
};

template <intmax_t _Xp, intmax_t _Yp, intmax_t = __static_sign<_Yp>::value>
class __ll_add;

template <intmax_t _Xp, intmax_t _Yp>
class __ll_add<_Xp, _Yp, 1> {
  static const intmax_t min = (1LL << (sizeof(intmax_t) * 8 - 1)) + 1;
  static const intmax_t max = -min;

  static_assert(_Xp <= max - _Yp, "overflow in __ll_add");

public:
  static const intmax_t value = _Xp + _Yp;
};

template <intmax_t _Xp, intmax_t _Yp>
class __ll_add<_Xp, _Yp, 0> {
public:
  static const intmax_t value = _Xp;
};

template <intmax_t _Xp, intmax_t _Yp>
class __ll_add<_Xp, _Yp, -1> {
  static const intmax_t min = (1LL << (sizeof(intmax_t) * 8 - 1)) + 1;
  static const intmax_t max = -min;

  static_assert(min - _Yp <= _Xp, "overflow in __ll_add");

public:
  static const intmax_t value = _Xp + _Yp;
};

template <intmax_t _Xp, intmax_t _Yp, intmax_t = __static_sign<_Yp>::value>
class __ll_sub;

template <intmax_t _Xp, intmax_t _Yp>
class __ll_sub<_Xp, _Yp, 1> {
  static const intmax_t min = (1LL << (sizeof(intmax_t) * 8 - 1)) + 1;
  static const intmax_t max = -min;

  static_assert(min + _Yp <= _Xp, "overflow in __ll_sub");

public:
  static const intmax_t value = _Xp - _Yp;
};

template <intmax_t _Xp, intmax_t _Yp>
class __ll_sub<_Xp, _Yp, 0> {
public:
  static const intmax_t value = _Xp;
};

template <intmax_t _Xp, intmax_t _Yp>
class __ll_sub<_Xp, _Yp, -1> {
  static const intmax_t min = (1LL << (sizeof(intmax_t) * 8 - 1)) + 1;
  static const intmax_t max = -min;

  static_assert(_Xp <= max + _Yp, "overflow in __ll_sub");

public:
  static const intmax_t value = _Xp - _Yp;
};

template <intmax_t _Xp, intmax_t _Yp>
class __ll_mul {
  static const intmax_t nan = (1LL << (sizeof(intmax_t) * 8 - 1));
  static const intmax_t min = nan + 1;
  static const intmax_t max = -min;
  static const intmax_t __a_x = __static_abs<_Xp>::value;
  static const intmax_t __a_y = __static_abs<_Yp>::value;

  static_assert(_Xp != nan && _Yp != nan && __a_x <= max / __a_y, "overflow in __ll_mul");

public:
  static const intmax_t value = _Xp * _Yp;
};

template <intmax_t _Yp>
class __ll_mul<0, _Yp> {
public:
  static const intmax_t value = 0;
};

template <intmax_t _Xp>
class __ll_mul<_Xp, 0> {
public:
  static const intmax_t value = 0;
};

template <>
class __ll_mul<0, 0> {
public:
  static const intmax_t value = 0;
};


template <intmax_t _Xp, intmax_t _Yp>
class __ll_div {
  static const intmax_t nan = (1LL << (sizeof(intmax_t) * 8 - 1));
  static const intmax_t min = nan + 1;
  static const intmax_t max = -min;

  static_assert(_Xp != nan && _Yp != nan && _Yp != 0, "overflow in __ll_div");

public:
  static const intmax_t value = _Xp / _Yp;
};

template <intmax_t _Num, intmax_t _Den = 1>
class ratio {
  static_assert(__static_abs<_Num>::value >= 0, "ratio numerator is out of range");
  static_assert(_Den != 0, "ratio divide by 0");
  static_assert(__static_abs<_Den>::value > 0, "ratio denominator is out of range");
  static constexpr const intmax_t __na = __static_abs<_Num>::value;
  static constexpr const intmax_t __da = __static_abs<_Den>::value;
  static constexpr const intmax_t __s = __static_sign<_Num>::value * __static_sign<_Den>::value;
  static constexpr const intmax_t __gcd = __static_gcd<__na, __da>::value;

public:
  static constexpr const intmax_t num = __s * __na / __gcd;
  static constexpr const intmax_t den = __da / __gcd;

  typedef ratio<num, den> type;
};

template <intmax_t _Num, intmax_t _Den>
constexpr const intmax_t ratio<_Num, _Den>::num;

template <intmax_t _Num, intmax_t _Den>
constexpr const intmax_t ratio<_Num, _Den>::den;

template <class _Tp>
struct __is_ratio : false_type {};
template <intmax_t _Num, intmax_t _Den>
struct __is_ratio<ratio<_Num, _Den> > : true_type {};

typedef ratio<1LL, 1000000000000000000LL> atto;
typedef ratio<1LL, 1000000000000000LL> femto;
typedef ratio<1LL, 1000000000000LL> pico;
typedef ratio<1LL, 1000000000LL> nano;
typedef ratio<1LL, 1000000LL> micro;
typedef ratio<1LL, 1000LL> milli;
typedef ratio<1LL, 100LL> centi;
typedef ratio<1LL, 10LL> deci;
typedef ratio< 10LL, 1LL> deca;
typedef ratio< 100LL, 1LL> hecto;
typedef ratio< 1000LL, 1LL> kilo;
typedef ratio< 1000000LL, 1LL> mega;
typedef ratio< 1000000000LL, 1LL> giga;
typedef ratio< 1000000000000LL, 1LL> tera;
typedef ratio< 1000000000000000LL, 1LL> peta;
typedef ratio<1000000000000000000LL, 1LL> exa;

template <class _R1, class _R2>
struct __ratio_multiply {
private:
  static const intmax_t __gcd_n1_d2 = __static_gcd<_R1::num, _R2::den>::value;
  static const intmax_t __gcd_d1_n2 = __static_gcd<_R1::den, _R2::num>::value;

public:
  typedef typename ratio< __ll_mul<_R1::num / __gcd_n1_d2, _R2::num / __gcd_d1_n2>::value,
                          __ll_mul<_R2::den / __gcd_n1_d2, _R1::den / __gcd_d1_n2>::value >::type type;
};



template <class _R1, class _R2>
using ratio_multiply = typename __ratio_multiply<_R1, _R2>::type;
# 309 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\ratio" 3
template <class _R1, class _R2>
struct __ratio_divide {
private:
  static const intmax_t __gcd_n1_n2 = __static_gcd<_R1::num, _R2::num>::value;
  static const intmax_t __gcd_d1_d2 = __static_gcd<_R1::den, _R2::den>::value;

public:
  typedef typename ratio< __ll_mul<_R1::num / __gcd_n1_n2, _R2::den / __gcd_d1_d2>::value,
                          __ll_mul<_R2::num / __gcd_n1_n2, _R1::den / __gcd_d1_d2>::value >::type type;
};



template <class _R1, class _R2>
using ratio_divide = typename __ratio_divide<_R1, _R2>::type;
# 332 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\ratio" 3
template <class _R1, class _R2>
struct __ratio_add {
private:
  static const intmax_t __gcd_n1_n2 = __static_gcd<_R1::num, _R2::num>::value;
  static const intmax_t __gcd_d1_d2 = __static_gcd<_R1::den, _R2::den>::value;

public:
  typedef typename ratio_multiply<
      ratio<__gcd_n1_n2, _R1::den / __gcd_d1_d2>,
      ratio< __ll_add< __ll_mul<_R1::num / __gcd_n1_n2, _R2::den / __gcd_d1_d2>::value,
                       __ll_mul<_R2::num / __gcd_n1_n2, _R1::den / __gcd_d1_d2>::value >::value,
             _R2::den > >::type type;
};



template <class _R1, class _R2>
using ratio_add = typename __ratio_add<_R1, _R2>::type;
# 358 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\ratio" 3
template <class _R1, class _R2>
struct __ratio_subtract {
private:
  static const intmax_t __gcd_n1_n2 = __static_gcd<_R1::num, _R2::num>::value;
  static const intmax_t __gcd_d1_d2 = __static_gcd<_R1::den, _R2::den>::value;

public:
  typedef typename ratio_multiply<
      ratio<__gcd_n1_n2, _R1::den / __gcd_d1_d2>,
      ratio< __ll_sub< __ll_mul<_R1::num / __gcd_n1_n2, _R2::den / __gcd_d1_d2>::value,
                       __ll_mul<_R2::num / __gcd_n1_n2, _R1::den / __gcd_d1_d2>::value >::value,
             _R2::den > >::type type;
};



template <class _R1, class _R2>
using ratio_subtract = typename __ratio_subtract<_R1, _R2>::type;
# 386 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\ratio" 3
template <class _R1, class _R2>
struct ratio_equal : _BoolConstant<(_R1::num == _R2::num && _R1::den == _R2::den)> {};

template <class _R1, class _R2>
struct ratio_not_equal : _BoolConstant<!ratio_equal<_R1, _R2>::value> {};



template <class _R1,
          class _R2,
          bool _Odd = false,
          intmax_t _Q1 = _R1::num / _R1::den,
          intmax_t _M1 = _R1::num % _R1::den,
          intmax_t _Q2 = _R2::num / _R2::den,
          intmax_t _M2 = _R2::num % _R2::den>
struct __ratio_less1 {
  static const bool value = _Odd ? _Q2 < _Q1 : _Q1 < _Q2;
};

template <class _R1, class _R2, bool _Odd, intmax_t _Qp>
struct __ratio_less1<_R1, _R2, _Odd, _Qp, 0, _Qp, 0> {
  static const bool value = false;
};

template <class _R1, class _R2, bool _Odd, intmax_t _Qp, intmax_t _M2>
struct __ratio_less1<_R1, _R2, _Odd, _Qp, 0, _Qp, _M2> {
  static const bool value = !_Odd;
};

template <class _R1, class _R2, bool _Odd, intmax_t _Qp, intmax_t _M1>
struct __ratio_less1<_R1, _R2, _Odd, _Qp, _M1, _Qp, 0> {
  static const bool value = _Odd;
};

template <class _R1, class _R2, bool _Odd, intmax_t _Qp, intmax_t _M1, intmax_t _M2>
struct __ratio_less1<_R1, _R2, _Odd, _Qp, _M1, _Qp, _M2> {
  static const bool value = __ratio_less1<ratio<_R1::den, _M1>, ratio<_R2::den, _M2>, !_Odd>::value;
};

template <class _R1,
          class _R2,
          intmax_t _S1 = __static_sign<_R1::num>::value,
          intmax_t _S2 = __static_sign<_R2::num>::value>
struct __ratio_less {
  static const bool value = _S1 < _S2;
};

template <class _R1, class _R2>
struct __ratio_less<_R1, _R2, 1LL, 1LL> {
  static const bool value = __ratio_less1<_R1, _R2>::value;
};

template <class _R1, class _R2>
struct __ratio_less<_R1, _R2, -1LL, -1LL> {
  static const bool value = __ratio_less1<ratio<-_R2::num, _R2::den>, ratio<-_R1::num, _R1::den> >::value;
};

template <class _R1, class _R2>
struct ratio_less : _BoolConstant<__ratio_less<_R1, _R2>::value> {};

template <class _R1, class _R2>
struct ratio_less_equal : _BoolConstant<!ratio_less<_R2, _R1>::value> {};

template <class _R1, class _R2>
struct ratio_greater : _BoolConstant<ratio_less<_R2, _R1>::value> {};

template <class _R1, class _R2>
struct ratio_greater_equal : _BoolConstant<!ratio_less<_R1, _R2>::value> {};

template <class _R1, class _R2>
struct __ratio_gcd {
  typedef ratio<__static_gcd<_R1::num, _R2::num>::value, __static_lcm<_R1::den, _R2::den>::value> type;
};


template <class _R1, class _R2>
inline constexpr bool ratio_equal_v = ratio_equal<_R1, _R2>::value;

template <class _R1, class _R2>
inline constexpr bool ratio_not_equal_v = ratio_not_equal<_R1, _R2>::value;

template <class _R1, class _R2>
inline constexpr bool ratio_less_v = ratio_less<_R1, _R2>::value;

template <class _R1, class _R2>
inline constexpr bool ratio_less_equal_v = ratio_less_equal<_R1, _R2>::value;

template <class _R1, class _R2>
inline constexpr bool ratio_greater_v = ratio_greater<_R1, _R2>::value;

template <class _R1, class _R2>
inline constexpr bool ratio_greater_equal_v = ratio_greater_equal<_R1, _R2>::value;


}}
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__chrono/duration.h" 2 3
# 25 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__chrono/duration.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 29 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__chrono/duration.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

namespace chrono {

template <class _Rep, class _Period = ratio<1> >
class duration;

template <class _Tp>
struct __is_duration : false_type {};

template <class _Rep, class _Period>
struct __is_duration<duration<_Rep, _Period> > : true_type {};

template <class _Rep, class _Period>
struct __is_duration<const duration<_Rep, _Period> > : true_type {};

template <class _Rep, class _Period>
struct __is_duration<volatile duration<_Rep, _Period> > : true_type {};

template <class _Rep, class _Period>
struct __is_duration<const volatile duration<_Rep, _Period> > : true_type {};

}

template <class _Rep1, class _Period1, class _Rep2, class _Period2>
struct common_type<chrono::duration<_Rep1, _Period1>, chrono::duration<_Rep2, _Period2> > {
  typedef chrono::duration<typename common_type<_Rep1, _Rep2>::type, typename __ratio_gcd<_Period1, _Period2>::type>
      type;
};

namespace chrono {



template <class _FromDuration,
          class _ToDuration,
          class _Period = typename ratio_divide<typename _FromDuration::period, typename _ToDuration::period>::type,
          bool = _Period::num == 1,
          bool = _Period::den == 1>
struct __duration_cast;

template <class _FromDuration, class _ToDuration, class _Period>
struct __duration_cast<_FromDuration, _ToDuration, _Period, true, true> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _ToDuration operator()(const _FromDuration& __fd) const {
    return _ToDuration(static_cast<typename _ToDuration::rep>(__fd.count()));
  }
};

template <class _FromDuration, class _ToDuration, class _Period>
struct __duration_cast<_FromDuration, _ToDuration, _Period, true, false> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _ToDuration operator()(const _FromDuration& __fd) const {
    typedef typename common_type<typename _ToDuration::rep, typename _FromDuration::rep, intmax_t>::type _Ct;
    return _ToDuration(
        static_cast<typename _ToDuration::rep>(static_cast<_Ct>(__fd.count()) / static_cast<_Ct>(_Period::den)));
  }
};

template <class _FromDuration, class _ToDuration, class _Period>
struct __duration_cast<_FromDuration, _ToDuration, _Period, false, true> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _ToDuration operator()(const _FromDuration& __fd) const {
    typedef typename common_type<typename _ToDuration::rep, typename _FromDuration::rep, intmax_t>::type _Ct;
    return _ToDuration(
        static_cast<typename _ToDuration::rep>(static_cast<_Ct>(__fd.count()) * static_cast<_Ct>(_Period::num)));
  }
};

template <class _FromDuration, class _ToDuration, class _Period>
struct __duration_cast<_FromDuration, _ToDuration, _Period, false, false> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _ToDuration operator()(const _FromDuration& __fd) const {
    typedef typename common_type<typename _ToDuration::rep, typename _FromDuration::rep, intmax_t>::type _Ct;
    return _ToDuration(static_cast<typename _ToDuration::rep>(
        static_cast<_Ct>(__fd.count()) * static_cast<_Ct>(_Period::num) / static_cast<_Ct>(_Period::den)));
  }
};

template <class _ToDuration, class _Rep, class _Period, __enable_if_t<__is_duration<_ToDuration>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _ToDuration duration_cast(const duration<_Rep, _Period>& __fd) {
  return __duration_cast<duration<_Rep, _Period>, _ToDuration>()(__fd);
}

template <class _Rep>
struct treat_as_floating_point : is_floating_point<_Rep> {};


template <class _Rep>
inline constexpr bool treat_as_floating_point_v = treat_as_floating_point<_Rep>::value;


template <class _Rep>
struct duration_values {
public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr _Rep zero() noexcept { return _Rep(0); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr _Rep max() noexcept { return numeric_limits<_Rep>::max(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr _Rep min() noexcept { return numeric_limits<_Rep>::lowest(); }
};


template <class _ToDuration, class _Rep, class _Period, enable_if_t<__is_duration<_ToDuration>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _ToDuration floor(const duration<_Rep, _Period>& __d) {
  _ToDuration __t = chrono::duration_cast<_ToDuration>(__d);
  if (__t > __d)
    __t = __t - _ToDuration{1};
  return __t;
}

template <class _ToDuration, class _Rep, class _Period, enable_if_t<__is_duration<_ToDuration>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _ToDuration ceil(const duration<_Rep, _Period>& __d) {
  _ToDuration __t = chrono::duration_cast<_ToDuration>(__d);
  if (__t < __d)
    __t = __t + _ToDuration{1};
  return __t;
}

template <class _ToDuration, class _Rep, class _Period, enable_if_t<__is_duration<_ToDuration>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _ToDuration round(const duration<_Rep, _Period>& __d) {
  _ToDuration __lower = chrono::floor<_ToDuration>(__d);
  _ToDuration __upper = __lower + _ToDuration{1};
  auto __lower_diff = __d - __lower;
  auto __upper_diff = __upper - __d;
  if (__lower_diff < __upper_diff)
    return __lower;
  if (__lower_diff > __upper_diff)
    return __upper;
  return __lower.count() & 1 ? __upper : __lower;
}




template <class _Rep, class _Period>
class duration {
  static_assert(!__is_duration<_Rep>::value, "A duration representation can not be a duration");
  static_assert(__is_ratio<_Period>::value, "Second template parameter of duration must be a std::ratio");
  static_assert(_Period::num > 0, "duration period must be positive");

  template <class _R1, class _R2>
  struct __no_overflow {
  private:
    static const intmax_t __gcd_n1_n2 = __static_gcd<_R1::num, _R2::num>::value;
    static const intmax_t __gcd_d1_d2 = __static_gcd<_R1::den, _R2::den>::value;
    static const intmax_t __n1 = _R1::num / __gcd_n1_n2;
    static const intmax_t __d1 = _R1::den / __gcd_d1_d2;
    static const intmax_t __n2 = _R2::num / __gcd_n1_n2;
    static const intmax_t __d2 = _R2::den / __gcd_d1_d2;
    static const intmax_t max = -((intmax_t(1) << (sizeof(intmax_t) * 8 - 1)) + 1);

    template <intmax_t _Xp, intmax_t _Yp, bool __overflow>
    struct __mul
    {
      static const intmax_t value = _Xp * _Yp;
    };

    template <intmax_t _Xp, intmax_t _Yp>
    struct __mul<_Xp, _Yp, true> {
      static const intmax_t value = 1;
    };

  public:
    static const bool value = (__n1 <= max / __d2) && (__n2 <= max / __d1);
    typedef ratio<__mul<__n1, __d2, !value>::value, __mul<__n2, __d1, !value>::value> type;
  };

public:
  typedef _Rep rep;
  typedef typename _Period::type period;

private:
  rep __rep_;

public:

  constexpr duration() = default;




  template <class _Rep2,
            __enable_if_t<is_convertible<const _Rep2&, rep>::value &&
                              (treat_as_floating_point<rep>::value || !treat_as_floating_point<_Rep2>::value),
                          int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr explicit duration(const _Rep2& __r) : __rep_(__r) {}


  template <class _Rep2,
            class _Period2,
            __enable_if_t<__no_overflow<_Period2, period>::value && (treat_as_floating_point<rep>::value ||
                                                                     (__no_overflow<_Period2, period>::type::den == 1 &&
                                                                      !treat_as_floating_point<_Rep2>::value)),
                          int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr duration(const duration<_Rep2, _Period2>& __d)
      : __rep_(chrono::duration_cast<duration>(__d).count()) {}



  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr rep count() const { return __rep_; }



  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr typename common_type<duration>::type operator+() const {
    return typename common_type<duration>::type(*this);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr typename common_type<duration>::type operator-() const {
    return typename common_type<duration>::type(-__rep_);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr duration& operator++() {
    ++__rep_;
    return *this;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr duration operator++(int) { return duration(__rep_++); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr duration& operator--() {
    --__rep_;
    return *this;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr duration operator--(int) { return duration(__rep_--); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr duration& operator+=(const duration& __d) {
    __rep_ += __d.count();
    return *this;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr duration& operator-=(const duration& __d) {
    __rep_ -= __d.count();
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr duration& operator*=(const rep& __rhs) {
    __rep_ *= __rhs;
    return *this;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr duration& operator/=(const rep& __rhs) {
    __rep_ /= __rhs;
    return *this;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr duration& operator%=(const rep& __rhs) {
    __rep_ %= __rhs;
    return *this;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr duration& operator%=(const duration& __rhs) {
    __rep_ %= __rhs.count();
    return *this;
  }



  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr duration zero() noexcept {
    return duration(duration_values<rep>::zero());
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr duration min() noexcept {
    return duration(duration_values<rep>::min());
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr duration max() noexcept {
    return duration(duration_values<rep>::max());
  }
};

typedef duration<long long, nano> nanoseconds;
typedef duration<long long, micro> microseconds;
typedef duration<long long, milli> milliseconds;
typedef duration<long long > seconds;
typedef duration< long, ratio< 60> > minutes;
typedef duration< long, ratio<3600> > hours;
# 298 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__chrono/duration.h" 3
template <class _LhsDuration, class _RhsDuration>
struct __duration_eq {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool operator()(const _LhsDuration& __lhs, const _RhsDuration& __rhs) const {
    typedef typename common_type<_LhsDuration, _RhsDuration>::type _Ct;
    return _Ct(__lhs).count() == _Ct(__rhs).count();
  }
};

template <class _LhsDuration>
struct __duration_eq<_LhsDuration, _LhsDuration> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool operator()(const _LhsDuration& __lhs, const _LhsDuration& __rhs) const {
    return __lhs.count() == __rhs.count();
  }
};

template <class _Rep1, class _Period1, class _Rep2, class _Period2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool
operator==(const duration<_Rep1, _Period1>& __lhs, const duration<_Rep2, _Period2>& __rhs) {
  return __duration_eq<duration<_Rep1, _Period1>, duration<_Rep2, _Period2> >()(__lhs, __rhs);
}





template <class _Rep1, class _Period1, class _Rep2, class _Period2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool
operator!=(const duration<_Rep1, _Period1>& __lhs, const duration<_Rep2, _Period2>& __rhs) {
  return !(__lhs == __rhs);
}





template <class _LhsDuration, class _RhsDuration>
struct __duration_lt {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool operator()(const _LhsDuration& __lhs, const _RhsDuration& __rhs) const {
    typedef typename common_type<_LhsDuration, _RhsDuration>::type _Ct;
    return _Ct(__lhs).count() < _Ct(__rhs).count();
  }
};

template <class _LhsDuration>
struct __duration_lt<_LhsDuration, _LhsDuration> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool operator()(const _LhsDuration& __lhs, const _LhsDuration& __rhs) const {
    return __lhs.count() < __rhs.count();
  }
};

template <class _Rep1, class _Period1, class _Rep2, class _Period2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool
operator<(const duration<_Rep1, _Period1>& __lhs, const duration<_Rep2, _Period2>& __rhs) {
  return __duration_lt<duration<_Rep1, _Period1>, duration<_Rep2, _Period2> >()(__lhs, __rhs);
}



template <class _Rep1, class _Period1, class _Rep2, class _Period2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool
operator>(const duration<_Rep1, _Period1>& __lhs, const duration<_Rep2, _Period2>& __rhs) {
  return __rhs < __lhs;
}



template <class _Rep1, class _Period1, class _Rep2, class _Period2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool
operator<=(const duration<_Rep1, _Period1>& __lhs, const duration<_Rep2, _Period2>& __rhs) {
  return !(__rhs < __lhs);
}



template <class _Rep1, class _Period1, class _Rep2, class _Period2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool
operator>=(const duration<_Rep1, _Period1>& __lhs, const duration<_Rep2, _Period2>& __rhs) {
  return !(__lhs < __rhs);
}
# 392 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__chrono/duration.h" 3
template <class _Rep1, class _Period1, class _Rep2, class _Period2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr
    typename common_type<duration<_Rep1, _Period1>, duration<_Rep2, _Period2> >::type
    operator+(const duration<_Rep1, _Period1>& __lhs, const duration<_Rep2, _Period2>& __rhs) {
  typedef typename common_type<duration<_Rep1, _Period1>, duration<_Rep2, _Period2> >::type _Cd;
  return _Cd(_Cd(__lhs).count() + _Cd(__rhs).count());
}



template <class _Rep1, class _Period1, class _Rep2, class _Period2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr
    typename common_type<duration<_Rep1, _Period1>, duration<_Rep2, _Period2> >::type
    operator-(const duration<_Rep1, _Period1>& __lhs, const duration<_Rep2, _Period2>& __rhs) {
  typedef typename common_type<duration<_Rep1, _Period1>, duration<_Rep2, _Period2> >::type _Cd;
  return _Cd(_Cd(__lhs).count() - _Cd(__rhs).count());
}



template <class _Rep1,
          class _Period,
          class _Rep2,
          __enable_if_t<is_convertible<_Rep2, typename common_type<_Rep1, _Rep2>::type>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr duration<typename common_type<_Rep1, _Rep2>::type, _Period>
operator*(const duration<_Rep1, _Period>& __d, const _Rep2& __s) {
  typedef typename common_type<_Rep1, _Rep2>::type _Cr;
  typedef duration<_Cr, _Period> _Cd;
  return _Cd(_Cd(__d).count() * static_cast<_Cr>(__s));
}

template <class _Rep1,
          class _Period,
          class _Rep2,
          __enable_if_t<is_convertible<_Rep1, typename common_type<_Rep1, _Rep2>::type>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr duration<typename common_type<_Rep1, _Rep2>::type, _Period>
operator*(const _Rep1& __s, const duration<_Rep2, _Period>& __d) {
  return __d * __s;
}



template <class _Rep1,
          class _Period,
          class _Rep2,
          __enable_if_t<!__is_duration<_Rep2>::value &&
                            is_convertible<_Rep2, typename common_type<_Rep1, _Rep2>::type>::value,
                        int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr duration<typename common_type<_Rep1, _Rep2>::type, _Period>
operator/(const duration<_Rep1, _Period>& __d, const _Rep2& __s) {
  typedef typename common_type<_Rep1, _Rep2>::type _Cr;
  typedef duration<_Cr, _Period> _Cd;
  return _Cd(_Cd(__d).count() / static_cast<_Cr>(__s));
}

template <class _Rep1, class _Period1, class _Rep2, class _Period2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr typename common_type<_Rep1, _Rep2>::type
operator/(const duration<_Rep1, _Period1>& __lhs, const duration<_Rep2, _Period2>& __rhs) {
  typedef typename common_type<duration<_Rep1, _Period1>, duration<_Rep2, _Period2> >::type _Ct;
  return _Ct(__lhs).count() / _Ct(__rhs).count();
}



template <class _Rep1,
          class _Period,
          class _Rep2,
          __enable_if_t<!__is_duration<_Rep2>::value &&
                            is_convertible<_Rep2, typename common_type<_Rep1, _Rep2>::type>::value,
                        int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr duration<typename common_type<_Rep1, _Rep2>::type, _Period>
operator%(const duration<_Rep1, _Period>& __d, const _Rep2& __s) {
  typedef typename common_type<_Rep1, _Rep2>::type _Cr;
  typedef duration<_Cr, _Period> _Cd;
  return _Cd(_Cd(__d).count() % static_cast<_Cr>(__s));
}

template <class _Rep1, class _Period1, class _Rep2, class _Period2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr
    typename common_type<duration<_Rep1, _Period1>, duration<_Rep2, _Period2> >::type
    operator%(const duration<_Rep1, _Period1>& __lhs, const duration<_Rep2, _Period2>& __rhs) {
  typedef typename common_type<_Rep1, _Rep2>::type _Cr;
  typedef typename common_type<duration<_Rep1, _Period1>, duration<_Rep2, _Period2> >::type _Cd;
  return _Cd(static_cast<_Cr>(_Cd(__lhs).count()) % static_cast<_Cr>(_Cd(__rhs).count()));
}

}



inline namespace literals {
inline namespace chrono_literals {

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr chrono::hours operator""h(unsigned long long __h) {
  return chrono::hours(static_cast<chrono::hours::rep>(__h));
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr chrono::duration<long double, ratio<3600, 1>> operator""h(long double __h) {
  return chrono::duration<long double, ratio<3600, 1>>(__h);
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr chrono::minutes operator""min(unsigned long long __m) {
  return chrono::minutes(static_cast<chrono::minutes::rep>(__m));
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr chrono::duration<long double, ratio<60, 1>> operator""min(long double __m) {
  return chrono::duration<long double, ratio<60, 1>>(__m);
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr chrono::seconds operator""s(unsigned long long __s) {
  return chrono::seconds(static_cast<chrono::seconds::rep>(__s));
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr chrono::duration<long double> operator""s(long double __s) {
  return chrono::duration<long double>(__s);
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr chrono::milliseconds operator""ms(unsigned long long __ms) {
  return chrono::milliseconds(static_cast<chrono::milliseconds::rep>(__ms));
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr chrono::duration<long double, milli> operator""ms(long double __ms) {
  return chrono::duration<long double, milli>(__ms);
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr chrono::microseconds operator""us(unsigned long long __us) {
  return chrono::microseconds(static_cast<chrono::microseconds::rep>(__us));
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr chrono::duration<long double, micro> operator""us(long double __us) {
  return chrono::duration<long double, micro>(__us);
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr chrono::nanoseconds operator""ns(unsigned long long __ns) {
  return chrono::nanoseconds(static_cast<chrono::nanoseconds::rep>(__ns));
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr chrono::duration<long double, nano> operator""ns(long double __ns) {
  return chrono::duration<long double, nano>(__ns);
}

}
}

namespace chrono {
using namespace literals::chrono_literals;
}



}}
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__atomic/atomic_sync.h" 2 3


# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__thread/poll_with_backoff.h" 1 3
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__thread/poll_with_backoff.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__chrono/high_resolution_clock.h" 1 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__chrono/high_resolution_clock.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__chrono/steady_clock.h" 1 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__chrono/steady_clock.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__chrono/time_point.h" 1 3
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__chrono/time_point.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 28 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__chrono/time_point.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

namespace chrono {

template <class _Clock, class _Duration = typename _Clock::duration>
class time_point {
  static_assert(__is_duration<_Duration>::value,
                "Second template parameter of time_point must be a std::chrono::duration");

public:
  typedef _Clock clock;
  typedef _Duration duration;
  typedef typename duration::rep rep;
  typedef typename duration::period period;

private:
  duration __d_;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr time_point() : __d_(duration::zero()) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr explicit time_point(const duration& __d) : __d_(__d) {}


  template <class _Duration2, __enable_if_t<is_convertible<_Duration2, duration>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr time_point(const time_point<clock, _Duration2>& __t)
      : __d_(__t.time_since_epoch()) {}



  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr duration time_since_epoch() const { return __d_; }



  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr time_point& operator+=(const duration& __d) {
    __d_ += __d;
    return *this;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr time_point& operator-=(const duration& __d) {
    __d_ -= __d;
    return *this;
  }



  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr time_point min() noexcept { return time_point(duration::min()); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr time_point max() noexcept { return time_point(duration::max()); }
};

}

template <class _Clock, class _Duration1, class _Duration2>
struct
    common_type<chrono::time_point<_Clock, _Duration1>, chrono::time_point<_Clock, _Duration2> > {
  typedef chrono::time_point<_Clock, typename common_type<_Duration1, _Duration2>::type> type;
};

namespace chrono {

template <class _ToDuration, class _Clock, class _Duration>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr time_point<_Clock, _ToDuration>
time_point_cast(const time_point<_Clock, _Duration>& __t) {
  return time_point<_Clock, _ToDuration>(chrono::duration_cast<_ToDuration>(__t.time_since_epoch()));
}


template <class _ToDuration, class _Clock, class _Duration, enable_if_t<__is_duration<_ToDuration>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr time_point<_Clock, _ToDuration>
floor(const time_point<_Clock, _Duration>& __t) {
  return time_point<_Clock, _ToDuration>{chrono::floor<_ToDuration>(__t.time_since_epoch())};
}

template <class _ToDuration, class _Clock, class _Duration, enable_if_t<__is_duration<_ToDuration>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr time_point<_Clock, _ToDuration>
ceil(const time_point<_Clock, _Duration>& __t) {
  return time_point<_Clock, _ToDuration>{chrono::ceil<_ToDuration>(__t.time_since_epoch())};
}

template <class _ToDuration, class _Clock, class _Duration, enable_if_t<__is_duration<_ToDuration>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr time_point<_Clock, _ToDuration>
round(const time_point<_Clock, _Duration>& __t) {
  return time_point<_Clock, _ToDuration>{chrono::round<_ToDuration>(__t.time_since_epoch())};
}

template <class _Rep, class _Period, enable_if_t<numeric_limits<_Rep>::is_signed, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr duration<_Rep, _Period> abs(duration<_Rep, _Period> __d) {
  return __d >= __d.zero() ? +__d : -__d;
}




template <class _Clock, class _Duration1, class _Duration2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool
operator==(const time_point<_Clock, _Duration1>& __lhs, const time_point<_Clock, _Duration2>& __rhs) {
  return __lhs.time_since_epoch() == __rhs.time_since_epoch();
}





template <class _Clock, class _Duration1, class _Duration2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool
operator!=(const time_point<_Clock, _Duration1>& __lhs, const time_point<_Clock, _Duration2>& __rhs) {
  return !(__lhs == __rhs);
}





template <class _Clock, class _Duration1, class _Duration2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool
operator<(const time_point<_Clock, _Duration1>& __lhs, const time_point<_Clock, _Duration2>& __rhs) {
  return __lhs.time_since_epoch() < __rhs.time_since_epoch();
}



template <class _Clock, class _Duration1, class _Duration2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool
operator>(const time_point<_Clock, _Duration1>& __lhs, const time_point<_Clock, _Duration2>& __rhs) {
  return __rhs < __lhs;
}



template <class _Clock, class _Duration1, class _Duration2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool
operator<=(const time_point<_Clock, _Duration1>& __lhs, const time_point<_Clock, _Duration2>& __rhs) {
  return !(__rhs < __lhs);
}



template <class _Clock, class _Duration1, class _Duration2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool
operator>=(const time_point<_Clock, _Duration1>& __lhs, const time_point<_Clock, _Duration2>& __rhs) {
  return !(__lhs < __rhs);
}
# 182 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__chrono/time_point.h" 3
template <class _Clock, class _Duration1, class _Rep2, class _Period2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr
    time_point<_Clock, typename common_type<_Duration1, duration<_Rep2, _Period2> >::type>
    operator+(const time_point<_Clock, _Duration1>& __lhs, const duration<_Rep2, _Period2>& __rhs) {
  typedef time_point<_Clock, typename common_type<_Duration1, duration<_Rep2, _Period2> >::type> _Tr;
  return _Tr(__lhs.time_since_epoch() + __rhs);
}



template <class _Rep1, class _Period1, class _Clock, class _Duration2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr
    time_point<_Clock, typename common_type<duration<_Rep1, _Period1>, _Duration2>::type>
    operator+(const duration<_Rep1, _Period1>& __lhs, const time_point<_Clock, _Duration2>& __rhs) {
  return __rhs + __lhs;
}



template <class _Clock, class _Duration1, class _Rep2, class _Period2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr
    time_point<_Clock, typename common_type<_Duration1, duration<_Rep2, _Period2> >::type>
    operator-(const time_point<_Clock, _Duration1>& __lhs, const duration<_Rep2, _Period2>& __rhs) {
  typedef time_point<_Clock, typename common_type<_Duration1, duration<_Rep2, _Period2> >::type> _Ret;
  return _Ret(__lhs.time_since_epoch() - __rhs);
}



template <class _Clock, class _Duration1, class _Duration2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr typename common_type<_Duration1, _Duration2>::type
operator-(const time_point<_Clock, _Duration1>& __lhs, const time_point<_Clock, _Duration2>& __rhs) {
  return __lhs.time_since_epoch() - __rhs.time_since_epoch();
}

}

}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__chrono/steady_clock.h" 2 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__chrono/steady_clock.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

namespace chrono {
# 38 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__chrono/steady_clock.h" 3
}

}}
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__chrono/high_resolution_clock.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__chrono/system_clock.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__chrono/system_clock.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\ctime" 1 3
# 53 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\ctime" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\time.h" 1 3
# 39 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\time.h" 3
      namespace std {

          extern "C" {
# 51 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\time.h" 3
    typedef unsigned int size_t;
# 82 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\time.h" 3
typedef unsigned int clock_t;
typedef unsigned int time_t;






struct tm {
    int tm_sec;

    int tm_min;
    int tm_hour;
    int tm_mday;
    int tm_mon;
    int tm_year;
    int tm_wday;
    int tm_yday;
    int tm_isdst;
    union {
        struct {
            int __extra_1, __extra_2;
        };
        struct {
            long __extra_1_long, __extra_2_long;
        };
        struct {
            char *__extra_1_cptr, *__extra_2_cptr;
        };
        struct {
            void *__extra_1_vptr, *__extra_2_vptr;
        };
    };
};
# 127 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\time.h" 3
extern __attribute__((__nothrow__)) clock_t clock(void);







extern __attribute__((__nothrow__)) double difftime(time_t , time_t );




extern __attribute__((__nothrow__)) time_t mktime(struct tm * ) __attribute__((__nonnull__(1)));
# 156 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\time.h" 3
extern __attribute__((__nothrow__)) time_t time(time_t * );
# 166 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\time.h" 3
extern __attribute__((__nothrow__)) char *asctime(const struct tm * ) __attribute__((__nonnull__(1)));
extern __attribute__((__nothrow__)) char *_asctime_r(const struct tm * ,
                                char * __restrict ) __attribute__((__nonnull__(1,2)));
# 178 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\time.h" 3
extern __attribute__((__nothrow__)) char *ctime(const time_t * ) __attribute__((__nonnull__(1)));






extern __attribute__((__nothrow__)) struct tm *gmtime(const time_t * ) __attribute__((__nonnull__(1)));





extern __attribute__((__nothrow__)) struct tm *localtime(const time_t * ) __attribute__((__nonnull__(1)));
extern __attribute__((__nothrow__)) struct tm *_localtime_r(const time_t * __restrict ,
                                       struct tm * __restrict ) __attribute__((__nonnull__(1,2)));
# 203 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\time.h" 3
extern __attribute__((__nothrow__)) size_t strftime(char * __restrict , size_t ,
                       const char * __restrict ,
                       const struct tm * __restrict ) __attribute__((__nonnull__(1,3,4)));
# 253 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\time.h" 3
         }
      }
# 264 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\time.h" 3
      using ::std::clock_t;
      using ::std::time_t;
      using ::std::tm;
      using ::std::tm;
      using ::std::clock;
      using ::std::difftime;
      using ::std::mktime;
      using ::std::time;
      using ::std::asctime;
      using ::std::_asctime_r;



      using ::std::ctime;
      using ::std::gmtime;
      using ::std::localtime;
      using ::std::_localtime_r;



      using ::std::strftime;
      using ::std::size_t;
# 54 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\ctime" 2 3
# 61 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\ctime" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

using ::clock_t __attribute__((__using_if_exists__));
using ::size_t __attribute__((__using_if_exists__));
using ::time_t __attribute__((__using_if_exists__));
using ::tm __attribute__((__using_if_exists__));

using ::timespec __attribute__((__using_if_exists__));

using ::clock __attribute__((__using_if_exists__));
using ::difftime __attribute__((__using_if_exists__));
using ::mktime __attribute__((__using_if_exists__));
using ::time __attribute__((__using_if_exists__));
using ::asctime __attribute__((__using_if_exists__));
using ::ctime __attribute__((__using_if_exists__));
using ::gmtime __attribute__((__using_if_exists__));
using ::localtime __attribute__((__using_if_exists__));
using ::strftime __attribute__((__using_if_exists__));

using ::timespec_get __attribute__((__using_if_exists__));


}}
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__chrono/system_clock.h" 2 3
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__chrono/system_clock.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

namespace chrono {

class __attribute__((__visibility__("default"))) system_clock {
public:
  typedef microseconds duration;
  typedef duration::rep rep;
  typedef duration::period period;
  typedef chrono::time_point<system_clock> time_point;
  static constexpr const bool is_steady = false;

  static time_point now() noexcept;
  static time_t to_time_t(const time_point& __t) noexcept;
  static time_point from_time_t(time_t __t) noexcept;
};
# 48 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__chrono/system_clock.h" 3
}

}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__chrono/high_resolution_clock.h" 2 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__chrono/high_resolution_clock.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

namespace chrono {




typedef system_clock high_resolution_clock;


}

}}
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__thread/poll_with_backoff.h" 2 3
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__thread/poll_with_backoff.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

static constexpr const int __libcpp_polling_count = 64;
# 37 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__thread/poll_with_backoff.h" 3
template <class _Poll, class _Backoff>
                          __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool __libcpp_thread_poll_with_backoff(
    _Poll&& __poll, _Backoff&& __backoff, chrono::nanoseconds __max_elapsed = chrono::nanoseconds::zero()) {
  auto const __start = chrono::high_resolution_clock::now();
  for (int __count = 0;;) {
    if (__poll())
      return true;
    if (__count < __libcpp_polling_count) {
      __count += 1;
      continue;
    }
    chrono::nanoseconds const __elapsed = chrono::high_resolution_clock::now() - __start;
    if (__max_elapsed != chrono::nanoseconds::zero() && __max_elapsed < __elapsed)
      return false;
    if (__backoff(__elapsed))
      return false;
  }
}







struct __spinning_backoff_policy {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool operator()(chrono::nanoseconds const&) const { return false; }
};

}}
# 21 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__atomic/atomic_sync.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__thread/support.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__thread/support.h" 3
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__atomic/atomic_sync.h" 2 3
# 27 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__atomic/atomic_sync.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 96 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__atomic/atomic_sync.h" 3
template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __cxx_atomic_notify_all(__cxx_atomic_impl<_Tp> const volatile*) {}
template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __cxx_atomic_notify_one(__cxx_atomic_impl<_Tp> const volatile*) {}
template <class _Atp, class _Fn>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool __cxx_atomic_wait(_Atp*, _Fn&& __test_fn) {
  return std::__libcpp_thread_poll_with_backoff(__test_fn, __spinning_backoff_policy());
}





template <typename _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool __cxx_nonatomic_compare_equal(_Tp const& __lhs, _Tp const& __rhs) {
  return std::memcmp(std::addressof(__lhs), std::addressof(__rhs), sizeof(_Tp)) == 0;
}

template <class _Atp, class _Tp>
struct __cxx_atomic_wait_test_fn_impl {
  _Atp* __a;
  _Tp __val;
  memory_order __order;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator()() const {
    return !std::__cxx_nonatomic_compare_equal(std::__cxx_atomic_load(__a, __order), __val);
  }
};

template <class _Atp, class _Tp>
                          __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
__cxx_atomic_wait(_Atp* __a, _Tp const __val, memory_order __order) {
  __cxx_atomic_wait_test_fn_impl<_Atp, _Tp> __test_fn = {__a, __val, __order};
  return std::__cxx_atomic_wait(__a, __test_fn);
}

}}
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__atomic/atomic_base.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__atomic/check_memory_order.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__atomic/check_memory_order.h" 3
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__atomic/atomic_base.h" 2 3
# 28 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__atomic/atomic_base.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp, bool = is_integral<_Tp>::value && !is_same<_Tp, bool>::value>
struct __atomic_base
{
  mutable __cxx_atomic_impl<_Tp> __a_;


  static constexpr bool is_always_lock_free = __libcpp_is_always_lock_free<__cxx_atomic_impl<_Tp> >::__value;


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool is_lock_free() const volatile noexcept {
    return __c11_atomic_is_lock_free(sizeof(__cxx_atomic_impl<_Tp>));
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool is_lock_free() const noexcept {
    return static_cast<__atomic_base const volatile*>(this)->is_lock_free();
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void store(_Tp __d, memory_order __m = memory_order_seq_cst) volatile noexcept
      __attribute__((__diagnose_if__(__m == memory_order_consume || __m == memory_order_acquire || __m == memory_order_acq_rel, "memory order argument to atomic operation is invalid", "warning"))) {
    std::__cxx_atomic_store(std::addressof(__a_), __d, __m);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void store(_Tp __d, memory_order __m = memory_order_seq_cst) noexcept
      __attribute__((__diagnose_if__(__m == memory_order_consume || __m == memory_order_acquire || __m == memory_order_acq_rel, "memory order argument to atomic operation is invalid", "warning"))) {
    std::__cxx_atomic_store(std::addressof(__a_), __d, __m);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp load(memory_order __m = memory_order_seq_cst) const volatile noexcept
      __attribute__((__diagnose_if__(__m == memory_order_release || __m == memory_order_acq_rel, "memory order argument to atomic operation is invalid", "warning"))) {
    return std::__cxx_atomic_load(std::addressof(__a_), __m);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp load(memory_order __m = memory_order_seq_cst) const noexcept
      __attribute__((__diagnose_if__(__m == memory_order_release || __m == memory_order_acq_rel, "memory order argument to atomic operation is invalid", "warning"))) {
    return std::__cxx_atomic_load(std::addressof(__a_), __m);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) operator _Tp() const volatile noexcept { return load(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) operator _Tp() const noexcept { return load(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp exchange(_Tp __d, memory_order __m = memory_order_seq_cst) volatile noexcept {
    return std::__cxx_atomic_exchange(std::addressof(__a_), __d, __m);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp exchange(_Tp __d, memory_order __m = memory_order_seq_cst) noexcept {
    return std::__cxx_atomic_exchange(std::addressof(__a_), __d, __m);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
  compare_exchange_weak(_Tp& __e, _Tp __d, memory_order __s, memory_order __f) volatile noexcept
      __attribute__((__diagnose_if__(__f == memory_order_release || __f == memory_order_acq_rel, "memory order argument to atomic operation is invalid", "warning"))) {
    return std::__cxx_atomic_compare_exchange_weak(std::addressof(__a_), std::addressof(__e), __d, __s, __f);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool compare_exchange_weak(_Tp& __e, _Tp __d, memory_order __s, memory_order __f) noexcept
      __attribute__((__diagnose_if__(__f == memory_order_release || __f == memory_order_acq_rel, "memory order argument to atomic operation is invalid", "warning"))) {
    return std::__cxx_atomic_compare_exchange_weak(std::addressof(__a_), std::addressof(__e), __d, __s, __f);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
  compare_exchange_strong(_Tp& __e, _Tp __d, memory_order __s, memory_order __f) volatile noexcept
      __attribute__((__diagnose_if__(__f == memory_order_release || __f == memory_order_acq_rel, "memory order argument to atomic operation is invalid", "warning"))) {
    return std::__cxx_atomic_compare_exchange_strong(std::addressof(__a_), std::addressof(__e), __d, __s, __f);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool compare_exchange_strong(_Tp& __e, _Tp __d, memory_order __s, memory_order __f) noexcept
      __attribute__((__diagnose_if__(__f == memory_order_release || __f == memory_order_acq_rel, "memory order argument to atomic operation is invalid", "warning"))) {
    return std::__cxx_atomic_compare_exchange_strong(std::addressof(__a_), std::addressof(__e), __d, __s, __f);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
  compare_exchange_weak(_Tp& __e, _Tp __d, memory_order __m = memory_order_seq_cst) volatile noexcept {
    return std::__cxx_atomic_compare_exchange_weak(std::addressof(__a_), std::addressof(__e), __d, __m, __m);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
  compare_exchange_weak(_Tp& __e, _Tp __d, memory_order __m = memory_order_seq_cst) noexcept {
    return std::__cxx_atomic_compare_exchange_weak(std::addressof(__a_), std::addressof(__e), __d, __m, __m);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
  compare_exchange_strong(_Tp& __e, _Tp __d, memory_order __m = memory_order_seq_cst) volatile noexcept {
    return std::__cxx_atomic_compare_exchange_strong(std::addressof(__a_), std::addressof(__e), __d, __m, __m);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
  compare_exchange_strong(_Tp& __e, _Tp __d, memory_order __m = memory_order_seq_cst) noexcept {
    return std::__cxx_atomic_compare_exchange_strong(std::addressof(__a_), std::addressof(__e), __d, __m, __m);
  }



                            __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void wait(_Tp __v, memory_order __m = memory_order_seq_cst) const
      volatile noexcept {
    std::__cxx_atomic_wait(std::addressof(__a_), __v, __m);
  }
                            __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
  wait(_Tp __v, memory_order __m = memory_order_seq_cst) const noexcept {
    std::__cxx_atomic_wait(std::addressof(__a_), __v, __m);
  }
                            __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void notify_one() volatile noexcept {
    std::__cxx_atomic_notify_one(std::addressof(__a_));
  }
                            __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void notify_one() noexcept {
    std::__cxx_atomic_notify_one(std::addressof(__a_));
  }
                            __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void notify_all() volatile noexcept {
    std::__cxx_atomic_notify_all(std::addressof(__a_));
  }
                            __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void notify_all() noexcept {
    std::__cxx_atomic_notify_all(std::addressof(__a_));
  }






  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __atomic_base() noexcept = default;


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr __atomic_base(_Tp __d) noexcept : __a_(__d) {}

  __atomic_base(const __atomic_base&) = delete;
};


template <class _Tp, bool __b>
constexpr bool __atomic_base<_Tp, __b>::is_always_lock_free;




template <class _Tp>
struct __atomic_base<_Tp, true> : public __atomic_base<_Tp, false> {
  using __base = __atomic_base<_Tp, false>;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __atomic_base() noexcept = default;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr __atomic_base(_Tp __d) noexcept : __base(__d) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp fetch_add(_Tp __op, memory_order __m = memory_order_seq_cst) volatile noexcept {
    return std::__cxx_atomic_fetch_add(std::addressof(this->__a_), __op, __m);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp fetch_add(_Tp __op, memory_order __m = memory_order_seq_cst) noexcept {
    return std::__cxx_atomic_fetch_add(std::addressof(this->__a_), __op, __m);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp fetch_sub(_Tp __op, memory_order __m = memory_order_seq_cst) volatile noexcept {
    return std::__cxx_atomic_fetch_sub(std::addressof(this->__a_), __op, __m);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp fetch_sub(_Tp __op, memory_order __m = memory_order_seq_cst) noexcept {
    return std::__cxx_atomic_fetch_sub(std::addressof(this->__a_), __op, __m);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp fetch_and(_Tp __op, memory_order __m = memory_order_seq_cst) volatile noexcept {
    return std::__cxx_atomic_fetch_and(std::addressof(this->__a_), __op, __m);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp fetch_and(_Tp __op, memory_order __m = memory_order_seq_cst) noexcept {
    return std::__cxx_atomic_fetch_and(std::addressof(this->__a_), __op, __m);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp fetch_or(_Tp __op, memory_order __m = memory_order_seq_cst) volatile noexcept {
    return std::__cxx_atomic_fetch_or(std::addressof(this->__a_), __op, __m);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp fetch_or(_Tp __op, memory_order __m = memory_order_seq_cst) noexcept {
    return std::__cxx_atomic_fetch_or(std::addressof(this->__a_), __op, __m);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp fetch_xor(_Tp __op, memory_order __m = memory_order_seq_cst) volatile noexcept {
    return std::__cxx_atomic_fetch_xor(std::addressof(this->__a_), __op, __m);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp fetch_xor(_Tp __op, memory_order __m = memory_order_seq_cst) noexcept {
    return std::__cxx_atomic_fetch_xor(std::addressof(this->__a_), __op, __m);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp operator++(int) volatile noexcept { return fetch_add(_Tp(1)); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp operator++(int) noexcept { return fetch_add(_Tp(1)); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp operator--(int) volatile noexcept { return fetch_sub(_Tp(1)); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp operator--(int) noexcept { return fetch_sub(_Tp(1)); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp operator++() volatile noexcept { return fetch_add(_Tp(1)) + _Tp(1); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp operator++() noexcept { return fetch_add(_Tp(1)) + _Tp(1); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp operator--() volatile noexcept { return fetch_sub(_Tp(1)) - _Tp(1); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp operator--() noexcept { return fetch_sub(_Tp(1)) - _Tp(1); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp operator+=(_Tp __op) volatile noexcept { return fetch_add(__op) + __op; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp operator+=(_Tp __op) noexcept { return fetch_add(__op) + __op; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp operator-=(_Tp __op) volatile noexcept { return fetch_sub(__op) - __op; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp operator-=(_Tp __op) noexcept { return fetch_sub(__op) - __op; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp operator&=(_Tp __op) volatile noexcept { return fetch_and(__op) & __op; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp operator&=(_Tp __op) noexcept { return fetch_and(__op) & __op; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp operator|=(_Tp __op) volatile noexcept { return fetch_or(__op) | __op; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp operator|=(_Tp __op) noexcept { return fetch_or(__op) | __op; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp operator^=(_Tp __op) volatile noexcept { return fetch_xor(__op) ^ __op; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp operator^=(_Tp __op) noexcept { return fetch_xor(__op) ^ __op; }
};

}}
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__atomic/atomic.h" 2 3




# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__functional/operations.h" 1 3
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__functional/operations.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {




template <class _Tp = void>



struct plus : __binary_function<_Tp, _Tp, _Tp> {
  typedef _Tp __result_type;
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp operator()(const _Tp& __x, const _Tp& __y) const {
    return __x + __y;
  }
};
template <class... _Tag> [[maybe_unused]] plus(typename _Tag::__allow_ctad...)->plus<_Tag...>;



template <class _Tp>
struct __desugars_to<__plus_tag, plus<_Tp>, _Tp, _Tp> : true_type {};

template <class _Tp, class _Up>
struct __desugars_to<__plus_tag, plus<void>, _Tp, _Up> : true_type {};


template <>
struct plus<void> {
  template <class _T1, class _T2>
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) auto operator()(_T1&& __t, _T2&& __u) const
      noexcept(noexcept(std::forward<_T1>(__t) + std::forward<_T2>(__u)))
          -> decltype(std::forward<_T1>(__t) + std::forward<_T2>(__u)) {
    return std::forward<_T1>(__t) + std::forward<_T2>(__u);
  }
  typedef void is_transparent;
};



template <class _Tp = void>



struct minus : __binary_function<_Tp, _Tp, _Tp> {
  typedef _Tp __result_type;
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp operator()(const _Tp& __x, const _Tp& __y) const {
    return __x - __y;
  }
};
template <class... _Tag> [[maybe_unused]] minus(typename _Tag::__allow_ctad...)->minus<_Tag...>;


template <>
struct minus<void> {
  template <class _T1, class _T2>
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) auto operator()(_T1&& __t, _T2&& __u) const
      noexcept(noexcept(std::forward<_T1>(__t) - std::forward<_T2>(__u)))
          -> decltype(std::forward<_T1>(__t) - std::forward<_T2>(__u)) {
    return std::forward<_T1>(__t) - std::forward<_T2>(__u);
  }
  typedef void is_transparent;
};



template <class _Tp = void>



struct multiplies : __binary_function<_Tp, _Tp, _Tp> {
  typedef _Tp __result_type;
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp operator()(const _Tp& __x, const _Tp& __y) const {
    return __x * __y;
  }
};
template <class... _Tag> [[maybe_unused]] multiplies(typename _Tag::__allow_ctad...)->multiplies<_Tag...>;


template <>
struct multiplies<void> {
  template <class _T1, class _T2>
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) auto operator()(_T1&& __t, _T2&& __u) const
      noexcept(noexcept(std::forward<_T1>(__t) * std::forward<_T2>(__u)))
          -> decltype(std::forward<_T1>(__t) * std::forward<_T2>(__u)) {
    return std::forward<_T1>(__t) * std::forward<_T2>(__u);
  }
  typedef void is_transparent;
};



template <class _Tp = void>



struct divides : __binary_function<_Tp, _Tp, _Tp> {
  typedef _Tp __result_type;
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp operator()(const _Tp& __x, const _Tp& __y) const {
    return __x / __y;
  }
};
template <class... _Tag> [[maybe_unused]] divides(typename _Tag::__allow_ctad...)->divides<_Tag...>;


template <>
struct divides<void> {
  template <class _T1, class _T2>
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) auto operator()(_T1&& __t, _T2&& __u) const
      noexcept(noexcept(std::forward<_T1>(__t) / std::forward<_T2>(__u)))
          -> decltype(std::forward<_T1>(__t) / std::forward<_T2>(__u)) {
    return std::forward<_T1>(__t) / std::forward<_T2>(__u);
  }
  typedef void is_transparent;
};



template <class _Tp = void>



struct modulus : __binary_function<_Tp, _Tp, _Tp> {
  typedef _Tp __result_type;
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp operator()(const _Tp& __x, const _Tp& __y) const {
    return __x % __y;
  }
};
template <class... _Tag> [[maybe_unused]] modulus(typename _Tag::__allow_ctad...)->modulus<_Tag...>;


template <>
struct modulus<void> {
  template <class _T1, class _T2>
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) auto operator()(_T1&& __t, _T2&& __u) const
      noexcept(noexcept(std::forward<_T1>(__t) % std::forward<_T2>(__u)))
          -> decltype(std::forward<_T1>(__t) % std::forward<_T2>(__u)) {
    return std::forward<_T1>(__t) % std::forward<_T2>(__u);
  }
  typedef void is_transparent;
};



template <class _Tp = void>



struct negate : __unary_function<_Tp, _Tp> {
  typedef _Tp __result_type;
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp operator()(const _Tp& __x) const { return -__x; }
};
template <class... _Tag> [[maybe_unused]] negate(typename _Tag::__allow_ctad...)->negate<_Tag...>;


template <>
struct negate<void> {
  template <class _Tp>
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) auto operator()(_Tp&& __x) const
      noexcept(noexcept(-std::forward<_Tp>(__x))) -> decltype(-std::forward<_Tp>(__x)) {
    return -std::forward<_Tp>(__x);
  }
  typedef void is_transparent;
};





template <class _Tp = void>



struct bit_and : __binary_function<_Tp, _Tp, _Tp> {
  typedef _Tp __result_type;
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp operator()(const _Tp& __x, const _Tp& __y) const {
    return __x & __y;
  }
};
template <class... _Tag> [[maybe_unused]] bit_and(typename _Tag::__allow_ctad...)->bit_and<_Tag...>;


template <>
struct bit_and<void> {
  template <class _T1, class _T2>
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) auto operator()(_T1&& __t, _T2&& __u) const
      noexcept(noexcept(std::forward<_T1>(__t) & std::forward<_T2>(__u)))
          -> decltype(std::forward<_T1>(__t) & std::forward<_T2>(__u)) {
    return std::forward<_T1>(__t) & std::forward<_T2>(__u);
  }
  typedef void is_transparent;
};



template <class _Tp = void>
struct bit_not : __unary_function<_Tp, _Tp> {
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp operator()(const _Tp& __x) const { return ~__x; }
};
template <class... _Tag> [[maybe_unused]] bit_not(typename _Tag::__allow_ctad...)->bit_not<_Tag...>;

template <>
struct bit_not<void> {
  template <class _Tp>
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) auto operator()(_Tp&& __x) const
      noexcept(noexcept(~std::forward<_Tp>(__x))) -> decltype(~std::forward<_Tp>(__x)) {
    return ~std::forward<_Tp>(__x);
  }
  typedef void is_transparent;
};



template <class _Tp = void>



struct bit_or : __binary_function<_Tp, _Tp, _Tp> {
  typedef _Tp __result_type;
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp operator()(const _Tp& __x, const _Tp& __y) const {
    return __x | __y;
  }
};
template <class... _Tag> [[maybe_unused]] bit_or(typename _Tag::__allow_ctad...)->bit_or<_Tag...>;


template <>
struct bit_or<void> {
  template <class _T1, class _T2>
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) auto operator()(_T1&& __t, _T2&& __u) const
      noexcept(noexcept(std::forward<_T1>(__t) | std::forward<_T2>(__u)))
          -> decltype(std::forward<_T1>(__t) | std::forward<_T2>(__u)) {
    return std::forward<_T1>(__t) | std::forward<_T2>(__u);
  }
  typedef void is_transparent;
};



template <class _Tp = void>



struct bit_xor : __binary_function<_Tp, _Tp, _Tp> {
  typedef _Tp __result_type;
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp operator()(const _Tp& __x, const _Tp& __y) const {
    return __x ^ __y;
  }
};
template <class... _Tag> [[maybe_unused]] bit_xor(typename _Tag::__allow_ctad...)->bit_xor<_Tag...>;


template <>
struct bit_xor<void> {
  template <class _T1, class _T2>
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) auto operator()(_T1&& __t, _T2&& __u) const
      noexcept(noexcept(std::forward<_T1>(__t) ^ std::forward<_T2>(__u)))
          -> decltype(std::forward<_T1>(__t) ^ std::forward<_T2>(__u)) {
    return std::forward<_T1>(__t) ^ std::forward<_T2>(__u);
  }
  typedef void is_transparent;
};





template <class _Tp = void>



struct equal_to : __binary_function<_Tp, _Tp, bool> {
  typedef bool __result_type;
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator()(const _Tp& __x, const _Tp& __y) const {
    return __x == __y;
  }
};
template <class... _Tag> [[maybe_unused]] equal_to(typename _Tag::__allow_ctad...)->equal_to<_Tag...>;


template <>
struct equal_to<void> {
  template <class _T1, class _T2>
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) auto operator()(_T1&& __t, _T2&& __u) const
      noexcept(noexcept(std::forward<_T1>(__t) == std::forward<_T2>(__u)))
          -> decltype(std::forward<_T1>(__t) == std::forward<_T2>(__u)) {
    return std::forward<_T1>(__t) == std::forward<_T2>(__u);
  }
  typedef void is_transparent;
};




template <class _Tp>
struct __desugars_to<__equal_tag, equal_to<_Tp>, _Tp, _Tp> : true_type {};


template <class _Tp, class _Up>
struct __desugars_to<__equal_tag, equal_to<void>, _Tp, _Up> : true_type {};


template <class _Tp = void>



struct not_equal_to : __binary_function<_Tp, _Tp, bool> {
  typedef bool __result_type;
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator()(const _Tp& __x, const _Tp& __y) const {
    return __x != __y;
  }
};
template <class... _Tag> [[maybe_unused]] not_equal_to(typename _Tag::__allow_ctad...)->not_equal_to<_Tag...>;


template <>
struct not_equal_to<void> {
  template <class _T1, class _T2>
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) auto operator()(_T1&& __t, _T2&& __u) const
      noexcept(noexcept(std::forward<_T1>(__t) != std::forward<_T2>(__u)))
          -> decltype(std::forward<_T1>(__t) != std::forward<_T2>(__u)) {
    return std::forward<_T1>(__t) != std::forward<_T2>(__u);
  }
  typedef void is_transparent;
};



template <class _Tp = void>



struct less : __binary_function<_Tp, _Tp, bool> {
  typedef bool __result_type;
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator()(const _Tp& __x, const _Tp& __y) const {
    return __x < __y;
  }
};
template <class... _Tag> [[maybe_unused]] less(typename _Tag::__allow_ctad...)->less<_Tag...>;


template <>
struct less<void> {
  template <class _T1, class _T2>
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) auto operator()(_T1&& __t, _T2&& __u) const
      noexcept(noexcept(std::forward<_T1>(__t) < std::forward<_T2>(__u)))
          -> decltype(std::forward<_T1>(__t) < std::forward<_T2>(__u)) {
    return std::forward<_T1>(__t) < std::forward<_T2>(__u);
  }
  typedef void is_transparent;
};



template <class _Tp = void>



struct less_equal : __binary_function<_Tp, _Tp, bool> {
  typedef bool __result_type;
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator()(const _Tp& __x, const _Tp& __y) const {
    return __x <= __y;
  }
};
template <class... _Tag> [[maybe_unused]] less_equal(typename _Tag::__allow_ctad...)->less_equal<_Tag...>;


template <>
struct less_equal<void> {
  template <class _T1, class _T2>
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) auto operator()(_T1&& __t, _T2&& __u) const
      noexcept(noexcept(std::forward<_T1>(__t) <= std::forward<_T2>(__u)))
          -> decltype(std::forward<_T1>(__t) <= std::forward<_T2>(__u)) {
    return std::forward<_T1>(__t) <= std::forward<_T2>(__u);
  }
  typedef void is_transparent;
};



template <class _Tp = void>



struct greater_equal : __binary_function<_Tp, _Tp, bool> {
  typedef bool __result_type;
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator()(const _Tp& __x, const _Tp& __y) const {
    return __x >= __y;
  }
};
template <class... _Tag> [[maybe_unused]] greater_equal(typename _Tag::__allow_ctad...)->greater_equal<_Tag...>;


template <>
struct greater_equal<void> {
  template <class _T1, class _T2>
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) auto operator()(_T1&& __t, _T2&& __u) const
      noexcept(noexcept(std::forward<_T1>(__t) >= std::forward<_T2>(__u)))
          -> decltype(std::forward<_T1>(__t) >= std::forward<_T2>(__u)) {
    return std::forward<_T1>(__t) >= std::forward<_T2>(__u);
  }
  typedef void is_transparent;
};



template <class _Tp = void>



struct greater : __binary_function<_Tp, _Tp, bool> {
  typedef bool __result_type;
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator()(const _Tp& __x, const _Tp& __y) const {
    return __x > __y;
  }
};
template <class... _Tag> [[maybe_unused]] greater(typename _Tag::__allow_ctad...)->greater<_Tag...>;


template <>
struct greater<void> {
  template <class _T1, class _T2>
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) auto operator()(_T1&& __t, _T2&& __u) const
      noexcept(noexcept(std::forward<_T1>(__t) > std::forward<_T2>(__u)))
          -> decltype(std::forward<_T1>(__t) > std::forward<_T2>(__u)) {
    return std::forward<_T1>(__t) > std::forward<_T2>(__u);
  }
  typedef void is_transparent;
};





template <class _Tp = void>



struct logical_and : __binary_function<_Tp, _Tp, bool> {
  typedef bool __result_type;
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator()(const _Tp& __x, const _Tp& __y) const {
    return __x && __y;
  }
};
template <class... _Tag> [[maybe_unused]] logical_and(typename _Tag::__allow_ctad...)->logical_and<_Tag...>;


template <>
struct logical_and<void> {
  template <class _T1, class _T2>
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) auto operator()(_T1&& __t, _T2&& __u) const
      noexcept(noexcept(std::forward<_T1>(__t) && std::forward<_T2>(__u)))
          -> decltype(std::forward<_T1>(__t) && std::forward<_T2>(__u)) {
    return std::forward<_T1>(__t) && std::forward<_T2>(__u);
  }
  typedef void is_transparent;
};



template <class _Tp = void>



struct logical_not : __unary_function<_Tp, bool> {
  typedef bool __result_type;
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator()(const _Tp& __x) const { return !__x; }
};
template <class... _Tag> [[maybe_unused]] logical_not(typename _Tag::__allow_ctad...)->logical_not<_Tag...>;


template <>
struct logical_not<void> {
  template <class _Tp>
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) auto operator()(_Tp&& __x) const
      noexcept(noexcept(!std::forward<_Tp>(__x))) -> decltype(!std::forward<_Tp>(__x)) {
    return !std::forward<_Tp>(__x);
  }
  typedef void is_transparent;
};



template <class _Tp = void>



struct logical_or : __binary_function<_Tp, _Tp, bool> {
  typedef bool __result_type;
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator()(const _Tp& __x, const _Tp& __y) const {
    return __x || __y;
  }
};
template <class... _Tag> [[maybe_unused]] logical_or(typename _Tag::__allow_ctad...)->logical_or<_Tag...>;


template <>
struct logical_or<void> {
  template <class _T1, class _T2>
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) auto operator()(_T1&& __t, _T2&& __u) const
      noexcept(noexcept(std::forward<_T1>(__t) || std::forward<_T2>(__u)))
          -> decltype(std::forward<_T1>(__t) || std::forward<_T2>(__u)) {
    return std::forward<_T1>(__t) || std::forward<_T2>(__u);
  }
  typedef void is_transparent;
};


}}
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__atomic/atomic.h" 2 3
# 32 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__atomic/atomic.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
struct atomic : public __atomic_base<_Tp> {
  using __base = __atomic_base<_Tp>;
  using value_type = _Tp;
  using difference_type = value_type;




  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) atomic() noexcept = default;


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr atomic(_Tp __d) noexcept : __base(__d) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp operator=(_Tp __d) volatile noexcept {
    __base::store(__d);
    return __d;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp operator=(_Tp __d) noexcept {
    __base::store(__d);
    return __d;
  }

  atomic& operator=(const atomic&) = delete;
  atomic& operator=(const atomic&) volatile = delete;
};



template <class _Tp>
struct atomic<_Tp*> : public __atomic_base<_Tp*> {
  using __base = __atomic_base<_Tp*>;
  using value_type = _Tp*;
  using difference_type = ptrdiff_t;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) atomic() noexcept = default;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr atomic(_Tp* __d) noexcept : __base(__d) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp* operator=(_Tp* __d) volatile noexcept {
    __base::store(__d);
    return __d;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp* operator=(_Tp* __d) noexcept {
    __base::store(__d);
    return __d;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp* fetch_add(ptrdiff_t __op, memory_order __m = memory_order_seq_cst) volatile noexcept {

    static_assert(!is_function<__remove_pointer_t<_Tp> >::value, "Pointer to function isn't allowed");
    return std::__cxx_atomic_fetch_add(std::addressof(this->__a_), __op, __m);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp* fetch_add(ptrdiff_t __op, memory_order __m = memory_order_seq_cst) noexcept {

    static_assert(!is_function<__remove_pointer_t<_Tp> >::value, "Pointer to function isn't allowed");
    return std::__cxx_atomic_fetch_add(std::addressof(this->__a_), __op, __m);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp* fetch_sub(ptrdiff_t __op, memory_order __m = memory_order_seq_cst) volatile noexcept {

    static_assert(!is_function<__remove_pointer_t<_Tp> >::value, "Pointer to function isn't allowed");
    return std::__cxx_atomic_fetch_sub(std::addressof(this->__a_), __op, __m);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp* fetch_sub(ptrdiff_t __op, memory_order __m = memory_order_seq_cst) noexcept {

    static_assert(!is_function<__remove_pointer_t<_Tp> >::value, "Pointer to function isn't allowed");
    return std::__cxx_atomic_fetch_sub(std::addressof(this->__a_), __op, __m);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp* operator++(int) volatile noexcept { return fetch_add(1); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp* operator++(int) noexcept { return fetch_add(1); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp* operator--(int) volatile noexcept { return fetch_sub(1); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp* operator--(int) noexcept { return fetch_sub(1); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp* operator++() volatile noexcept { return fetch_add(1) + 1; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp* operator++() noexcept { return fetch_add(1) + 1; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp* operator--() volatile noexcept { return fetch_sub(1) - 1; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp* operator--() noexcept { return fetch_sub(1) - 1; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp* operator+=(ptrdiff_t __op) volatile noexcept { return fetch_add(__op) + __op; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp* operator+=(ptrdiff_t __op) noexcept { return fetch_add(__op) + __op; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp* operator-=(ptrdiff_t __op) volatile noexcept { return fetch_sub(__op) - __op; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp* operator-=(ptrdiff_t __op) noexcept { return fetch_sub(__op) - __op; }

  atomic& operator=(const atomic&) = delete;
  atomic& operator=(const atomic&) volatile = delete;
};
# 257 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__atomic/atomic.h" 3
template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool atomic_is_lock_free(const volatile atomic<_Tp>* __o) noexcept {
  return __o->is_lock_free();
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool atomic_is_lock_free(const atomic<_Tp>* __o) noexcept {
  return __o->is_lock_free();
}



template <class _Tp>
                            __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
atomic_init(volatile atomic<_Tp>* __o, typename atomic<_Tp>::value_type __d) noexcept {
  std::__cxx_atomic_init(std::addressof(__o->__a_), __d);
}

template <class _Tp>
                            __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
atomic_init(atomic<_Tp>* __o, typename atomic<_Tp>::value_type __d) noexcept {
  std::__cxx_atomic_init(std::addressof(__o->__a_), __d);
}



template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void atomic_store(volatile atomic<_Tp>* __o, typename atomic<_Tp>::value_type __d) noexcept {
  __o->store(__d);
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void atomic_store(atomic<_Tp>* __o, typename atomic<_Tp>::value_type __d) noexcept {
  __o->store(__d);
}



template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
atomic_store_explicit(volatile atomic<_Tp>* __o, typename atomic<_Tp>::value_type __d, memory_order __m) noexcept
    __attribute__((__diagnose_if__(__m == memory_order_consume || __m == memory_order_acquire || __m == memory_order_acq_rel, "memory order argument to atomic operation is invalid", "warning"))) {
  __o->store(__d, __m);
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
atomic_store_explicit(atomic<_Tp>* __o, typename atomic<_Tp>::value_type __d, memory_order __m) noexcept
    __attribute__((__diagnose_if__(__m == memory_order_consume || __m == memory_order_acquire || __m == memory_order_acq_rel, "memory order argument to atomic operation is invalid", "warning"))) {
  __o->store(__d, __m);
}



template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp atomic_load(const volatile atomic<_Tp>* __o) noexcept {
  return __o->load();
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp atomic_load(const atomic<_Tp>* __o) noexcept {
  return __o->load();
}



template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp atomic_load_explicit(const volatile atomic<_Tp>* __o, memory_order __m) noexcept
    __attribute__((__diagnose_if__(__m == memory_order_release || __m == memory_order_acq_rel, "memory order argument to atomic operation is invalid", "warning"))) {
  return __o->load(__m);
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp atomic_load_explicit(const atomic<_Tp>* __o, memory_order __m) noexcept
    __attribute__((__diagnose_if__(__m == memory_order_release || __m == memory_order_acq_rel, "memory order argument to atomic operation is invalid", "warning"))) {
  return __o->load(__m);
}



template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp atomic_exchange(volatile atomic<_Tp>* __o, typename atomic<_Tp>::value_type __d) noexcept {
  return __o->exchange(__d);
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp atomic_exchange(atomic<_Tp>* __o, typename atomic<_Tp>::value_type __d) noexcept {
  return __o->exchange(__d);
}



template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp
atomic_exchange_explicit(volatile atomic<_Tp>* __o, typename atomic<_Tp>::value_type __d, memory_order __m) noexcept {
  return __o->exchange(__d, __m);
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp
atomic_exchange_explicit(atomic<_Tp>* __o, typename atomic<_Tp>::value_type __d, memory_order __m) noexcept {
  return __o->exchange(__d, __m);
}



template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool atomic_compare_exchange_weak(
    volatile atomic<_Tp>* __o, typename atomic<_Tp>::value_type* __e, typename atomic<_Tp>::value_type __d) noexcept {
  return __o->compare_exchange_weak(*__e, __d);
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool atomic_compare_exchange_weak(
    atomic<_Tp>* __o, typename atomic<_Tp>::value_type* __e, typename atomic<_Tp>::value_type __d) noexcept {
  return __o->compare_exchange_weak(*__e, __d);
}



template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool atomic_compare_exchange_strong(
    volatile atomic<_Tp>* __o, typename atomic<_Tp>::value_type* __e, typename atomic<_Tp>::value_type __d) noexcept {
  return __o->compare_exchange_strong(*__e, __d);
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool atomic_compare_exchange_strong(
    atomic<_Tp>* __o, typename atomic<_Tp>::value_type* __e, typename atomic<_Tp>::value_type __d) noexcept {
  return __o->compare_exchange_strong(*__e, __d);
}



template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool atomic_compare_exchange_weak_explicit(
    volatile atomic<_Tp>* __o,
    typename atomic<_Tp>::value_type* __e,
    typename atomic<_Tp>::value_type __d,
    memory_order __s,
    memory_order __f) noexcept __attribute__((__diagnose_if__(__f == memory_order_release || __f == memory_order_acq_rel, "memory order argument to atomic operation is invalid", "warning"))) {
  return __o->compare_exchange_weak(*__e, __d, __s, __f);
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool atomic_compare_exchange_weak_explicit(
    atomic<_Tp>* __o,
    typename atomic<_Tp>::value_type* __e,
    typename atomic<_Tp>::value_type __d,
    memory_order __s,
    memory_order __f) noexcept __attribute__((__diagnose_if__(__f == memory_order_release || __f == memory_order_acq_rel, "memory order argument to atomic operation is invalid", "warning"))) {
  return __o->compare_exchange_weak(*__e, __d, __s, __f);
}



template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool atomic_compare_exchange_strong_explicit(
    volatile atomic<_Tp>* __o,
    typename atomic<_Tp>::value_type* __e,
    typename atomic<_Tp>::value_type __d,
    memory_order __s,
    memory_order __f) noexcept __attribute__((__diagnose_if__(__f == memory_order_release || __f == memory_order_acq_rel, "memory order argument to atomic operation is invalid", "warning"))) {
  return __o->compare_exchange_strong(*__e, __d, __s, __f);
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool atomic_compare_exchange_strong_explicit(
    atomic<_Tp>* __o,
    typename atomic<_Tp>::value_type* __e,
    typename atomic<_Tp>::value_type __d,
    memory_order __s,
    memory_order __f) noexcept __attribute__((__diagnose_if__(__f == memory_order_release || __f == memory_order_acq_rel, "memory order argument to atomic operation is invalid", "warning"))) {
  return __o->compare_exchange_strong(*__e, __d, __s, __f);
}






template <class _Tp>
                          __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
atomic_wait(const volatile atomic<_Tp>* __o, typename atomic<_Tp>::value_type __v) noexcept {
  return __o->wait(__v);
}

template <class _Tp>
                          __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
atomic_wait(const atomic<_Tp>* __o, typename atomic<_Tp>::value_type __v) noexcept {
  return __o->wait(__v);
}



template <class _Tp>
                          __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
atomic_wait_explicit(const volatile atomic<_Tp>* __o, typename atomic<_Tp>::value_type __v, memory_order __m) noexcept
    __attribute__((__diagnose_if__(__m == memory_order_release || __m == memory_order_acq_rel, "memory order argument to atomic operation is invalid", "warning"))) {
  return __o->wait(__v, __m);
}

template <class _Tp>
                          __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
atomic_wait_explicit(const atomic<_Tp>* __o, typename atomic<_Tp>::value_type __v, memory_order __m) noexcept
    __attribute__((__diagnose_if__(__m == memory_order_release || __m == memory_order_acq_rel, "memory order argument to atomic operation is invalid", "warning"))) {
  return __o->wait(__v, __m);
}



template <class _Tp>
                          __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void atomic_notify_one(volatile atomic<_Tp>* __o) noexcept {
  __o->notify_one();
}
template <class _Tp>
                          __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void atomic_notify_one(atomic<_Tp>* __o) noexcept {
  __o->notify_one();
}



template <class _Tp>
                          __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void atomic_notify_all(volatile atomic<_Tp>* __o) noexcept {
  __o->notify_all();
}
template <class _Tp>
                          __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void atomic_notify_all(atomic<_Tp>* __o) noexcept {
  __o->notify_all();
}





template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp
atomic_fetch_add(volatile atomic<_Tp>* __o, typename atomic<_Tp>::difference_type __op) noexcept {
  return __o->fetch_add(__op);
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp atomic_fetch_add(atomic<_Tp>* __o, typename atomic<_Tp>::difference_type __op) noexcept {
  return __o->fetch_add(__op);
}



template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp atomic_fetch_add_explicit(
    volatile atomic<_Tp>* __o, typename atomic<_Tp>::difference_type __op, memory_order __m) noexcept {
  return __o->fetch_add(__op, __m);
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp
atomic_fetch_add_explicit(atomic<_Tp>* __o, typename atomic<_Tp>::difference_type __op, memory_order __m) noexcept {
  return __o->fetch_add(__op, __m);
}



template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp
atomic_fetch_sub(volatile atomic<_Tp>* __o, typename atomic<_Tp>::difference_type __op) noexcept {
  return __o->fetch_sub(__op);
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp atomic_fetch_sub(atomic<_Tp>* __o, typename atomic<_Tp>::difference_type __op) noexcept {
  return __o->fetch_sub(__op);
}



template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp atomic_fetch_sub_explicit(
    volatile atomic<_Tp>* __o, typename atomic<_Tp>::difference_type __op, memory_order __m) noexcept {
  return __o->fetch_sub(__op, __m);
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp
atomic_fetch_sub_explicit(atomic<_Tp>* __o, typename atomic<_Tp>::difference_type __op, memory_order __m) noexcept {
  return __o->fetch_sub(__op, __m);
}



template <class _Tp, __enable_if_t<is_integral<_Tp>::value && !is_same<_Tp, bool>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp atomic_fetch_and(volatile atomic<_Tp>* __o, typename atomic<_Tp>::value_type __op) noexcept {
  return __o->fetch_and(__op);
}

template <class _Tp, __enable_if_t<is_integral<_Tp>::value && !is_same<_Tp, bool>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp atomic_fetch_and(atomic<_Tp>* __o, typename atomic<_Tp>::value_type __op) noexcept {
  return __o->fetch_and(__op);
}



template <class _Tp, __enable_if_t<is_integral<_Tp>::value && !is_same<_Tp, bool>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp atomic_fetch_and_explicit(
    volatile atomic<_Tp>* __o, typename atomic<_Tp>::value_type __op, memory_order __m) noexcept {
  return __o->fetch_and(__op, __m);
}

template <class _Tp, __enable_if_t<is_integral<_Tp>::value && !is_same<_Tp, bool>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp
atomic_fetch_and_explicit(atomic<_Tp>* __o, typename atomic<_Tp>::value_type __op, memory_order __m) noexcept {
  return __o->fetch_and(__op, __m);
}



template <class _Tp, __enable_if_t<is_integral<_Tp>::value && !is_same<_Tp, bool>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp atomic_fetch_or(volatile atomic<_Tp>* __o, typename atomic<_Tp>::value_type __op) noexcept {
  return __o->fetch_or(__op);
}

template <class _Tp, __enable_if_t<is_integral<_Tp>::value && !is_same<_Tp, bool>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp atomic_fetch_or(atomic<_Tp>* __o, typename atomic<_Tp>::value_type __op) noexcept {
  return __o->fetch_or(__op);
}



template <class _Tp, __enable_if_t<is_integral<_Tp>::value && !is_same<_Tp, bool>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp
atomic_fetch_or_explicit(volatile atomic<_Tp>* __o, typename atomic<_Tp>::value_type __op, memory_order __m) noexcept {
  return __o->fetch_or(__op, __m);
}

template <class _Tp, __enable_if_t<is_integral<_Tp>::value && !is_same<_Tp, bool>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp
atomic_fetch_or_explicit(atomic<_Tp>* __o, typename atomic<_Tp>::value_type __op, memory_order __m) noexcept {
  return __o->fetch_or(__op, __m);
}



template <class _Tp, __enable_if_t<is_integral<_Tp>::value && !is_same<_Tp, bool>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp atomic_fetch_xor(volatile atomic<_Tp>* __o, typename atomic<_Tp>::value_type __op) noexcept {
  return __o->fetch_xor(__op);
}

template <class _Tp, __enable_if_t<is_integral<_Tp>::value && !is_same<_Tp, bool>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp atomic_fetch_xor(atomic<_Tp>* __o, typename atomic<_Tp>::value_type __op) noexcept {
  return __o->fetch_xor(__op);
}



template <class _Tp, __enable_if_t<is_integral<_Tp>::value && !is_same<_Tp, bool>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp atomic_fetch_xor_explicit(
    volatile atomic<_Tp>* __o, typename atomic<_Tp>::value_type __op, memory_order __m) noexcept {
  return __o->fetch_xor(__op, __m);
}

template <class _Tp, __enable_if_t<is_integral<_Tp>::value && !is_same<_Tp, bool>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp
atomic_fetch_xor_explicit(atomic<_Tp>* __o, typename atomic<_Tp>::value_type __op, memory_order __m) noexcept {
  return __o->fetch_xor(__op, __m);
}

}}
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__atomic/aliases.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__atomic/atomic_lock_free.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__atomic/atomic_lock_free.h" 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__atomic/aliases.h" 2 3
# 25 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__atomic/aliases.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

using atomic_bool = atomic<bool>;
using atomic_char = atomic<char>;
using atomic_schar = atomic<signed char>;
using atomic_uchar = atomic<unsigned char>;
using atomic_short = atomic<short>;
using atomic_ushort = atomic<unsigned short>;
using atomic_int = atomic<int>;
using atomic_uint = atomic<unsigned int>;
using atomic_long = atomic<long>;
using atomic_ulong = atomic<unsigned long>;
using atomic_llong = atomic<long long>;
using atomic_ullong = atomic<unsigned long long>;



using atomic_char16_t = atomic<char16_t>;
using atomic_char32_t = atomic<char32_t>;

using atomic_wchar_t = atomic<wchar_t>;


using atomic_int_least8_t = atomic<int_least8_t>;
using atomic_uint_least8_t = atomic<uint_least8_t>;
using atomic_int_least16_t = atomic<int_least16_t>;
using atomic_uint_least16_t = atomic<uint_least16_t>;
using atomic_int_least32_t = atomic<int_least32_t>;
using atomic_uint_least32_t = atomic<uint_least32_t>;
using atomic_int_least64_t = atomic<int_least64_t>;
using atomic_uint_least64_t = atomic<uint_least64_t>;

using atomic_int_fast8_t = atomic<int_fast8_t>;
using atomic_uint_fast8_t = atomic<uint_fast8_t>;
using atomic_int_fast16_t = atomic<int_fast16_t>;
using atomic_uint_fast16_t = atomic<uint_fast16_t>;
using atomic_int_fast32_t = atomic<int_fast32_t>;
using atomic_uint_fast32_t = atomic<uint_fast32_t>;
using atomic_int_fast64_t = atomic<int_fast64_t>;
using atomic_uint_fast64_t = atomic<uint_fast64_t>;

using atomic_int8_t = atomic< int8_t>;
using atomic_uint8_t = atomic<uint8_t>;
using atomic_int16_t = atomic< int16_t>;
using atomic_uint16_t = atomic<uint16_t>;
using atomic_int32_t = atomic< int32_t>;
using atomic_uint32_t = atomic<uint32_t>;
using atomic_int64_t = atomic< int64_t>;
using atomic_uint64_t = atomic<uint64_t>;

using atomic_intptr_t = atomic<intptr_t>;
using atomic_uintptr_t = atomic<uintptr_t>;
using atomic_size_t = atomic<size_t>;
using atomic_ptrdiff_t = atomic<ptrdiff_t>;
using atomic_intmax_t = atomic<intmax_t>;
using atomic_uintmax_t = atomic<uintmax_t>;
# 109 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__atomic/aliases.h" 3
}}
# 593 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\atomic" 2 3


# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__atomic/atomic_flag.h" 1 3
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__atomic/atomic_flag.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

struct atomic_flag {
  __cxx_atomic_impl<bool> __a_;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool test(memory_order __m = memory_order_seq_cst) const volatile noexcept {
    return bool(true) == __cxx_atomic_load(&__a_, __m);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool test(memory_order __m = memory_order_seq_cst) const noexcept {
    return bool(true) == __cxx_atomic_load(&__a_, __m);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool test_and_set(memory_order __m = memory_order_seq_cst) volatile noexcept {
    return __cxx_atomic_exchange(&__a_, bool(true), __m);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool test_and_set(memory_order __m = memory_order_seq_cst) noexcept {
    return __cxx_atomic_exchange(&__a_, bool(true), __m);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void clear(memory_order __m = memory_order_seq_cst) volatile noexcept {
    __cxx_atomic_store(&__a_, bool(false), __m);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void clear(memory_order __m = memory_order_seq_cst) noexcept {
    __cxx_atomic_store(&__a_, bool(false), __m);
  }



                            __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void wait(bool __v, memory_order __m = memory_order_seq_cst) const
      volatile noexcept {
    __cxx_atomic_wait(&__a_, bool(__v), __m);
  }
                            __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
  wait(bool __v, memory_order __m = memory_order_seq_cst) const noexcept {
    __cxx_atomic_wait(&__a_, bool(__v), __m);
  }
                            __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void notify_one() volatile noexcept {
    __cxx_atomic_notify_one(&__a_);
  }
                            __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void notify_one() noexcept { __cxx_atomic_notify_one(&__a_); }
                            __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void notify_all() volatile noexcept {
    __cxx_atomic_notify_all(&__a_);
  }
                            __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void notify_all() noexcept { __cxx_atomic_notify_all(&__a_); }





  atomic_flag() noexcept = default;


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr atomic_flag(bool __b) noexcept : __a_(__b) {}

  atomic_flag(const atomic_flag&) = delete;
  atomic_flag& operator=(const atomic_flag&) = delete;
  atomic_flag& operator=(const atomic_flag&) volatile = delete;
};

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool atomic_flag_test(const volatile atomic_flag* __o) noexcept { return __o->test(); }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool atomic_flag_test(const atomic_flag* __o) noexcept { return __o->test(); }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
atomic_flag_test_explicit(const volatile atomic_flag* __o, memory_order __m) noexcept {
  return __o->test(__m);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool atomic_flag_test_explicit(const atomic_flag* __o, memory_order __m) noexcept {
  return __o->test(__m);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool atomic_flag_test_and_set(volatile atomic_flag* __o) noexcept {
  return __o->test_and_set();
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool atomic_flag_test_and_set(atomic_flag* __o) noexcept { return __o->test_and_set(); }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
atomic_flag_test_and_set_explicit(volatile atomic_flag* __o, memory_order __m) noexcept {
  return __o->test_and_set(__m);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool atomic_flag_test_and_set_explicit(atomic_flag* __o, memory_order __m) noexcept {
  return __o->test_and_set(__m);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void atomic_flag_clear(volatile atomic_flag* __o) noexcept { __o->clear(); }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void atomic_flag_clear(atomic_flag* __o) noexcept { __o->clear(); }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void atomic_flag_clear_explicit(volatile atomic_flag* __o, memory_order __m) noexcept {
  __o->clear(__m);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void atomic_flag_clear_explicit(atomic_flag* __o, memory_order __m) noexcept {
  __o->clear(__m);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
atomic_flag_wait(const volatile atomic_flag* __o, bool __v) noexcept {
  __o->wait(__v);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
atomic_flag_wait(const atomic_flag* __o, bool __v) noexcept {
  __o->wait(__v);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
atomic_flag_wait_explicit(const volatile atomic_flag* __o, bool __v, memory_order __m) noexcept {
  __o->wait(__v, __m);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
atomic_flag_wait_explicit(const atomic_flag* __o, bool __v, memory_order __m) noexcept {
  __o->wait(__v, __m);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
atomic_flag_notify_one(volatile atomic_flag* __o) noexcept {
  __o->notify_one();
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void atomic_flag_notify_one(atomic_flag* __o) noexcept {
  __o->notify_one();
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
atomic_flag_notify_all(volatile atomic_flag* __o) noexcept {
  __o->notify_all();
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void atomic_flag_notify_all(atomic_flag* __o) noexcept {
  __o->notify_all();
}



}}
# 596 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\atomic" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__atomic/atomic_init.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__atomic/atomic_init.h" 3
# 597 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\atomic" 2 3





# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__atomic/fence.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__atomic/fence.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void atomic_thread_fence(memory_order __m) noexcept { __cxx_atomic_thread_fence(__m); }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void atomic_signal_fence(memory_order __m) noexcept { __cxx_atomic_signal_fence(__m); }

}}
# 603 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\atomic" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__atomic/kill_dependency.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__atomic/kill_dependency.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp kill_dependency(_Tp __y) noexcept {
  return __y;
}

}}
# 605 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\atomic" 2 3
# 611 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\atomic" 3
# 1290 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\optional" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\concepts" 1 3
# 138 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\concepts" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/common_with.h" 1 3
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/common_with.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 50 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__concepts/common_with.h" 3
}}
# 139 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\concepts" 2 3
# 164 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\concepts" 3
# 1292 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\optional" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\iterator" 1 3
# 681 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\iterator" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/back_insert_iterator.h" 1 3
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/back_insert_iterator.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 26 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/back_insert_iterator.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

#pragma GCC diagnostic push
# 29 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/back_insert_iterator.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 29 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/back_insert_iterator.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template <class _Container>
class back_insert_iterator

    : public iterator<output_iterator_tag, void, void, void, void>

{
#pragma GCC diagnostic pop

protected:
  _Container* container;

public:
  typedef output_iterator_tag iterator_category;
  typedef void value_type;



  typedef void difference_type;

  typedef void pointer;
  typedef void reference;
  typedef _Container container_type;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit back_insert_iterator(_Container& __x)
      : container(std::addressof(__x)) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) back_insert_iterator&
  operator=(const typename _Container::value_type& __value) {
    container->push_back(__value);
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) back_insert_iterator&
  operator=(typename _Container::value_type&& __value) {
    container->push_back(std::move(__value));
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) back_insert_iterator& operator*() { return *this; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) back_insert_iterator& operator++() { return *this; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) back_insert_iterator operator++(int) { return *this; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Container* __get_container() const { return container; }
};
template <class... _Tag> [[maybe_unused]] back_insert_iterator(typename _Tag::__allow_ctad...)->back_insert_iterator<_Tag...>;

template <class _Container>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) back_insert_iterator<_Container>
back_inserter(_Container& __x) {
  return back_insert_iterator<_Container>(__x);
}

}}
# 682 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\iterator" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/common_iterator.h" 1 3
# 31 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/common_iterator.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\variant" 1 3
# 244 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\variant" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/forward_like.h" 1 3
# 21 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/forward_like.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 44 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/forward_like.h" 3
}}
# 245 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\variant" 2 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__variant/monostate.h" 1 3
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__variant/monostate.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



struct monostate {};

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline constexpr bool operator==(monostate, monostate) noexcept { return true; }
# 38 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__variant/monostate.h" 3
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline constexpr bool operator!=(monostate, monostate) noexcept { return false; }

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline constexpr bool operator<(monostate, monostate) noexcept { return false; }

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline constexpr bool operator>(monostate, monostate) noexcept { return false; }

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline constexpr bool operator<=(monostate, monostate) noexcept { return true; }

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline constexpr bool operator>=(monostate, monostate) noexcept { return true; }



template <>
struct hash<monostate> {
  using argument_type = monostate;
  using result_type = size_t;

  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) result_type operator()(const argument_type&) const noexcept {
    return 66740831;
  }
};



}}
# 249 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\variant" 2 3




# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\tuple" 1 3
# 216 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\tuple" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/allocator_arg_t.h" 1 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/allocator_arg_t.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/uses_allocator.h" 1 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/uses_allocator.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
struct __has_allocator_type {
private:
  template <class _Up>
  static false_type __test(...);
  template <class _Up>
  static true_type __test(typename _Up::allocator_type* = 0);

public:
  static const bool value = decltype(__test<_Tp>(0))::value;
};

template <class _Tp, class _Alloc, bool = __has_allocator_type<_Tp>::value>
struct __uses_allocator : public integral_constant<bool, is_convertible<_Alloc, typename _Tp::allocator_type>::value> {
};

template <class _Tp, class _Alloc>
struct __uses_allocator<_Tp, _Alloc, false> : public false_type {};

template <class _Tp, class _Alloc>
struct uses_allocator : public __uses_allocator<_Tp, _Alloc> {};


template <class _Tp, class _Alloc>
inline constexpr bool uses_allocator_v = uses_allocator<_Tp, _Alloc>::value;


}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/allocator_arg_t.h" 2 3
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/allocator_arg_t.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

struct allocator_arg_t {
  explicit allocator_arg_t() = default;
};


inline constexpr allocator_arg_t allocator_arg = allocator_arg_t();
# 40 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/allocator_arg_t.h" 3
template <class _Tp, class _Alloc, class... _Args>
struct __uses_alloc_ctor_imp {
  typedef __attribute__((__nodebug__)) __remove_cvref_t<_Alloc> _RawAlloc;
  static const bool __ua = uses_allocator<_Tp, _RawAlloc>::value;
  static const bool __ic = is_constructible<_Tp, allocator_arg_t, _Alloc, _Args...>::value;
  static const int value = __ua ? 2 - __ic : 0;
};

template <class _Tp, class _Alloc, class... _Args>
struct __uses_alloc_ctor : integral_constant<int, __uses_alloc_ctor_imp<_Tp, _Alloc, _Args...>::value> {};

template <class _Tp, class _Allocator, class... _Args>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
__user_alloc_construct_impl(integral_constant<int, 0>, _Tp* __storage, const _Allocator&, _Args&&... __args) {
  new (__storage) _Tp(std::forward<_Args>(__args)...);
}


template <class _Tp, class _Allocator, class... _Args>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
__user_alloc_construct_impl(integral_constant<int, 1>, _Tp* __storage, const _Allocator& __a, _Args&&... __args) {
  new (__storage) _Tp(allocator_arg, __a, std::forward<_Args>(__args)...);
}


template <class _Tp, class _Allocator, class... _Args>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
__user_alloc_construct_impl(integral_constant<int, 2>, _Tp* __storage, const _Allocator& __a, _Args&&... __args) {
  new (__storage) _Tp(std::forward<_Args>(__args)..., __a);
}



}}
# 217 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\tuple" 2 3
# 276 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\tuple" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 280 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\tuple" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {





template <size_t _Ip, class _Hp, bool = is_empty<_Hp>::value && !__libcpp_is_final<_Hp>::value >
class __tuple_leaf;

template <size_t _Ip, class _Hp, bool _Ep>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr void
swap(__tuple_leaf<_Ip, _Hp, _Ep>& __x, __tuple_leaf<_Ip, _Hp, _Ep>& __y)
    noexcept(__is_nothrow_swappable<_Hp>::value) {
  swap(__x.get(), __y.get());
}

template <size_t _Ip, class _Hp, bool _Ep>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr void
swap(const __tuple_leaf<_Ip, _Hp, _Ep>& __x, const __tuple_leaf<_Ip, _Hp, _Ep>& __y)
    noexcept(__is_nothrow_swappable<const _Hp>::value) {
  swap(__x.get(), __y.get());
}

template <size_t _Ip, class _Hp, bool>
class __tuple_leaf {
  _Hp __value_;

  template <class _Tp>
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool __can_bind_reference() {

    return !__reference_binds_to_temporary(_Hp, _Tp);



  }

  constexpr __tuple_leaf& operator=(const __tuple_leaf&);

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr __tuple_leaf() noexcept(is_nothrow_default_constructible<_Hp>::value) : __value_() {
    static_assert(!is_reference<_Hp>::value, "Attempted to default construct a reference element in a tuple");
  }

  template <class _Alloc>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr __tuple_leaf(integral_constant<int, 0>, const _Alloc&) : __value_() {
    static_assert(!is_reference<_Hp>::value, "Attempted to default construct a reference element in a tuple");
  }

  template <class _Alloc>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr __tuple_leaf(integral_constant<int, 1>, const _Alloc& __a)
      : __value_(allocator_arg_t(), __a) {
    static_assert(!is_reference<_Hp>::value, "Attempted to default construct a reference element in a tuple");
  }

  template <class _Alloc>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr __tuple_leaf(integral_constant<int, 2>, const _Alloc& __a) : __value_(__a) {
    static_assert(!is_reference<_Hp>::value, "Attempted to default construct a reference element in a tuple");
  }

  template <class _Tp,
            class = __enable_if_t<
                _And< _IsNotSame<__remove_cvref_t<_Tp>, __tuple_leaf>, is_constructible<_Hp, _Tp> >::value > >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr explicit __tuple_leaf(_Tp&& __t)
      noexcept(is_nothrow_constructible<_Hp, _Tp>::value)
      : __value_(std::forward<_Tp>(__t)) {
    static_assert(__can_bind_reference<_Tp&&>(),
                  "Attempted construction of reference element binds to a temporary whose lifetime has ended");
  }

  template <class _Tp, class _Alloc>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr explicit __tuple_leaf(
      integral_constant<int, 0>, const _Alloc&, _Tp&& __t)
      : __value_(std::forward<_Tp>(__t)) {
    static_assert(__can_bind_reference<_Tp&&>(),
                  "Attempted construction of reference element binds to a temporary whose lifetime has ended");
  }

  template <class _Tp, class _Alloc>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr explicit __tuple_leaf(
      integral_constant<int, 1>, const _Alloc& __a, _Tp&& __t)
      : __value_(allocator_arg_t(), __a, std::forward<_Tp>(__t)) {
    static_assert(!is_reference<_Hp>::value, "Attempted to uses-allocator construct a reference element in a tuple");
  }

  template <class _Tp, class _Alloc>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr explicit __tuple_leaf(
      integral_constant<int, 2>, const _Alloc& __a, _Tp&& __t)
      : __value_(std::forward<_Tp>(__t), __a) {
    static_assert(!is_reference<_Hp>::value, "Attempted to uses-allocator construct a reference element in a tuple");
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __tuple_leaf(const __tuple_leaf& __t) = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __tuple_leaf(__tuple_leaf&& __t) = default;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr int swap(__tuple_leaf& __t)
      noexcept(__is_nothrow_swappable<__tuple_leaf>::value) {
    std::swap(*this, __t);
    return 0;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr int swap(const __tuple_leaf& __t) const
      noexcept(__is_nothrow_swappable<const __tuple_leaf>::value) {
    std::swap(*this, __t);
    return 0;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Hp& get() noexcept { return __value_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const _Hp& get() const noexcept { return __value_; }
};

template <size_t _Ip, class _Hp>
class __tuple_leaf<_Ip, _Hp, true> : private _Hp {
  constexpr __tuple_leaf& operator=(const __tuple_leaf&);

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr __tuple_leaf() noexcept(is_nothrow_default_constructible<_Hp>::value) {}

  template <class _Alloc>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr __tuple_leaf(integral_constant<int, 0>, const _Alloc&) {}

  template <class _Alloc>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr __tuple_leaf(integral_constant<int, 1>, const _Alloc& __a)
      : _Hp(allocator_arg_t(), __a) {}

  template <class _Alloc>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr __tuple_leaf(integral_constant<int, 2>, const _Alloc& __a) : _Hp(__a) {}

  template <class _Tp,
            class = __enable_if_t<
                _And< _IsNotSame<__remove_cvref_t<_Tp>, __tuple_leaf>, is_constructible<_Hp, _Tp> >::value > >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr explicit __tuple_leaf(_Tp&& __t)
      noexcept(is_nothrow_constructible<_Hp, _Tp>::value)
      : _Hp(std::forward<_Tp>(__t)) {}

  template <class _Tp, class _Alloc>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr explicit __tuple_leaf(integral_constant<int, 0>, const _Alloc&, _Tp&& __t)
      : _Hp(std::forward<_Tp>(__t)) {}

  template <class _Tp, class _Alloc>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr explicit __tuple_leaf(integral_constant<int, 1>, const _Alloc& __a, _Tp&& __t)
      : _Hp(allocator_arg_t(), __a, std::forward<_Tp>(__t)) {}

  template <class _Tp, class _Alloc>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr explicit __tuple_leaf(integral_constant<int, 2>, const _Alloc& __a, _Tp&& __t)
      : _Hp(std::forward<_Tp>(__t), __a) {}

  __tuple_leaf(__tuple_leaf const&) = default;
  __tuple_leaf(__tuple_leaf&&) = default;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr int swap(__tuple_leaf& __t)
      noexcept(__is_nothrow_swappable<__tuple_leaf>::value) {
    std::swap(*this, __t);
    return 0;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr int swap(const __tuple_leaf& __rhs) const
      noexcept(__is_nothrow_swappable<const __tuple_leaf>::value) {
    std::swap(*this, __rhs);
    return 0;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Hp& get() noexcept { return static_cast<_Hp&>(*this); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const _Hp& get() const noexcept {
    return static_cast<const _Hp&>(*this);
  }
};

template <class... _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr void __swallow(_Tp&&...) noexcept {}

template <class _Tp>
struct __all_default_constructible;

template <class... _Tp>
struct __all_default_constructible<__tuple_types<_Tp...>> : __all<is_default_constructible<_Tp>::value...> {};



template <class _Indx, class... _Tp>
struct __tuple_impl;

template <size_t... _Indx, class... _Tp>
struct __tuple_impl<__tuple_indices<_Indx...>, _Tp...>
    : public __tuple_leaf<_Indx, _Tp>... {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr __tuple_impl()
      noexcept(__all<is_nothrow_default_constructible<_Tp>::value...>::value) {}

  template <size_t... _Uf, class... _Tf, size_t... _Ul, class... _Tl, class... _Up>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr explicit __tuple_impl(
      __tuple_indices<_Uf...>, __tuple_types<_Tf...>, __tuple_indices<_Ul...>, __tuple_types<_Tl...>, _Up&&... __u)
      noexcept(__all<is_nothrow_constructible<_Tf, _Up>::value...>::value&& __all<is_nothrow_default_constructible<_Tl>::value...>::value)

      : __tuple_leaf<_Uf, _Tf>(std::forward<_Up>(__u))..., __tuple_leaf<_Ul, _Tl>()... {}

  template <class _Alloc, size_t... _Uf, class... _Tf, size_t... _Ul, class... _Tl, class... _Up>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr explicit __tuple_impl(
      allocator_arg_t,
      const _Alloc& __a,
      __tuple_indices<_Uf...>,
      __tuple_types<_Tf...>,
      __tuple_indices<_Ul...>,
      __tuple_types<_Tl...>,
      _Up&&... __u)
      : __tuple_leaf<_Uf, _Tf>(__uses_alloc_ctor<_Tf, _Alloc, _Up>(), __a, std::forward<_Up>(__u))...,
        __tuple_leaf<_Ul, _Tl>(__uses_alloc_ctor<_Tl, _Alloc>(), __a)... {}

  template <class _Tuple, class = __enable_if_t<__tuple_constructible<_Tuple, tuple<_Tp...> >::value> >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr __tuple_impl(_Tuple&& __t) noexcept((__all<is_nothrow_constructible< _Tp, typename tuple_element<_Indx, typename __make_tuple_types<_Tuple>::type>::type>::value...>::value))



      : __tuple_leaf<_Indx, _Tp>(
            std::forward<typename tuple_element<_Indx, typename __make_tuple_types<_Tuple>::type>::type>(
                std::get<_Indx>(__t)))... {}

  template <class _Alloc, class _Tuple, class = __enable_if_t<__tuple_constructible<_Tuple, tuple<_Tp...> >::value> >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr __tuple_impl(allocator_arg_t, const _Alloc& __a, _Tuple&& __t)
      : __tuple_leaf<_Indx, _Tp>(
            __uses_alloc_ctor<_Tp,
                              _Alloc,
                              typename tuple_element<_Indx, typename __make_tuple_types<_Tuple>::type>::type>(),
            __a,
            std::forward<typename tuple_element<_Indx, typename __make_tuple_types<_Tuple>::type>::type>(
                std::get<_Indx>(__t)))... {}

  __tuple_impl(const __tuple_impl&) = default;
  __tuple_impl(__tuple_impl&&) = default;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr void swap(__tuple_impl& __t)
      noexcept(__all<__is_nothrow_swappable<_Tp>::value...>::value) {
    std::__swallow(__tuple_leaf<_Indx, _Tp>::swap(static_cast<__tuple_leaf<_Indx, _Tp>&>(__t))...);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr void swap(const __tuple_impl& __t) const
      noexcept(__all<__is_nothrow_swappable<const _Tp>::value...>::value) {
    std::__swallow(__tuple_leaf<_Indx, _Tp>::swap(static_cast<const __tuple_leaf<_Indx, _Tp>&>(__t))...);
  }
};

template <class _Dest, class _Source, size_t... _Np>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr void
__memberwise_copy_assign(_Dest& __dest, _Source const& __source, __tuple_indices<_Np...>) {
  std::__swallow(((std::get<_Np>(__dest) = std::get<_Np>(__source)), void(), 0)...);
}

template <class _Dest, class _Source, class... _Up, size_t... _Np>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr void
__memberwise_forward_assign(_Dest& __dest, _Source&& __source, __tuple_types<_Up...>, __tuple_indices<_Np...>) {
  std::__swallow(((std::get<_Np>(__dest) = std::forward<_Up>(std::get<_Np>(__source))), void(), 0)...);
}

template <class... _Tp>
class tuple {
  typedef __tuple_impl<typename __make_tuple_indices<sizeof...(_Tp)>::type, _Tp...> _BaseT;

  _BaseT __base_;

  template <size_t _Jp, class... _Up>
  friend constexpr typename tuple_element<_Jp, tuple<_Up...> >::type& get(tuple<_Up...>&) noexcept;
  template <size_t _Jp, class... _Up>
  friend constexpr const typename tuple_element<_Jp, tuple<_Up...> >::type&
  get(const tuple<_Up...>&) noexcept;
  template <size_t _Jp, class... _Up>
  friend constexpr typename tuple_element<_Jp, tuple<_Up...> >::type&&
  get(tuple<_Up...>&&) noexcept;
  template <size_t _Jp, class... _Up>
  friend constexpr const typename tuple_element<_Jp, tuple<_Up...> >::type&&
  get(const tuple<_Up...>&&) noexcept;

public:


#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++20-extensions"



  template <template <class...> class _IsImpDefault = __is_implicitly_default_constructible,
            template <class...> class _IsDefault = is_default_constructible,
            __enable_if_t< _And< _IsDefault<_Tp>... >::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr explicit(_Not<_Lazy<_And, _IsImpDefault<_Tp>...> >::value) tuple()
      noexcept(_And<is_nothrow_default_constructible<_Tp>...>::value) {}

  template <class _Alloc,
            template <class...> class _IsImpDefault = __is_implicitly_default_constructible,
            template <class...> class _IsDefault = is_default_constructible,
            __enable_if_t< _And< _IsDefault<_Tp>... >::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit(_Not<_Lazy<_And, _IsImpDefault<_Tp>...> >::value)
      tuple(allocator_arg_t, _Alloc const& __a)
      : __base_(allocator_arg_t(),
                __a,
                __tuple_indices<>(),
                __tuple_types<>(),
                typename __make_tuple_indices<sizeof...(_Tp), 0>::type(),
                __tuple_types<_Tp...>()) {}


  template <template <class...> class _And = _And,
            __enable_if_t< _And< _BoolConstant<sizeof...(_Tp) >= 1>, is_copy_constructible<_Tp>... >::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr explicit(
      _Not<_Lazy<_And, is_convertible<const _Tp&, _Tp>...> >::value) tuple(const _Tp&... __t)
      noexcept(_And<is_nothrow_copy_constructible<_Tp>...>::value)
      : __base_(typename __make_tuple_indices<sizeof...(_Tp)>::type(),
                typename __make_tuple_types<tuple, sizeof...(_Tp)>::type(),
                typename __make_tuple_indices<0>::type(),
                typename __make_tuple_types<tuple, 0>::type(),
                __t...) {}

  template <class _Alloc,
            template <class...> class _And = _And,
            __enable_if_t< _And< _BoolConstant<sizeof...(_Tp) >= 1>, is_copy_constructible<_Tp>... >::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit(
      _Not<_Lazy<_And, is_convertible<const _Tp&, _Tp>...> >::value)
      tuple(allocator_arg_t, const _Alloc& __a, const _Tp&... __t)
      : __base_(allocator_arg_t(),
                __a,
                typename __make_tuple_indices<sizeof...(_Tp)>::type(),
                typename __make_tuple_types<tuple, sizeof...(_Tp)>::type(),
                typename __make_tuple_indices<0>::type(),
                typename __make_tuple_types<tuple, 0>::type(),
                __t...) {}


  template <class... _Up>
  struct _IsThisTuple : false_type {};
  template <class _Up>
  struct _IsThisTuple<_Up> : is_same<__remove_cvref_t<_Up>, tuple> {};

  template <class... _Up>
  struct _EnableUTypesCtor
      : _And< _BoolConstant<sizeof...(_Tp) >= 1>,
              _Not<_IsThisTuple<_Up...> >,
              is_constructible<_Tp, _Up>... > {};

  template <class... _Up,
            __enable_if_t< _And< _BoolConstant<sizeof...(_Up) == sizeof...(_Tp)>, _EnableUTypesCtor<_Up...> >::value,
                           int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr explicit(_Not<_Lazy<_And, is_convertible<_Up, _Tp>...> >::value)
      tuple(_Up&&... __u) noexcept(_And<is_nothrow_constructible<_Tp, _Up>...>::value)
      : __base_(typename __make_tuple_indices<sizeof...(_Up)>::type(),
                typename __make_tuple_types<tuple, sizeof...(_Up)>::type(),
                typename __make_tuple_indices<sizeof...(_Tp), sizeof...(_Up)>::type(),
                typename __make_tuple_types<tuple, sizeof...(_Tp), sizeof...(_Up)>::type(),
                std::forward<_Up>(__u)...) {}

  template <class _Alloc,
            class... _Up,
            __enable_if_t< _And< _BoolConstant<sizeof...(_Up) == sizeof...(_Tp)>, _EnableUTypesCtor<_Up...> >::value,
                           int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit(_Not<_Lazy<_And, is_convertible<_Up, _Tp>...> >::value)
      tuple(allocator_arg_t, const _Alloc& __a, _Up&&... __u)
      : __base_(allocator_arg_t(),
                __a,
                typename __make_tuple_indices<sizeof...(_Up)>::type(),
                typename __make_tuple_types<tuple, sizeof...(_Up)>::type(),
                typename __make_tuple_indices<sizeof...(_Tp), sizeof...(_Up)>::type(),
                typename __make_tuple_types<tuple, sizeof...(_Tp), sizeof...(_Up)>::type(),
                std::forward<_Up>(__u)...) {}


  tuple(const tuple&) = default;
  tuple(tuple&&) = default;

  template <class _Alloc,
            template <class...> class _And = _And,
            __enable_if_t< _And<is_copy_constructible<_Tp>...>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) tuple(allocator_arg_t, const _Alloc& __alloc, const tuple& __t)
      : __base_(allocator_arg_t(), __alloc, __t) {}

  template <class _Alloc,
            template <class...> class _And = _And,
            __enable_if_t< _And<is_move_constructible<_Tp>...>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) tuple(allocator_arg_t, const _Alloc& __alloc, tuple&& __t)
      : __base_(allocator_arg_t(), __alloc, std::move(__t)) {}



  template <class _OtherTuple, class _DecayedOtherTuple = __remove_cvref_t<_OtherTuple>, class = void>
  struct _EnableCtorFromUTypesTuple : false_type {};

  template <class _OtherTuple, class... _Up>
  struct _EnableCtorFromUTypesTuple<
      _OtherTuple,
      tuple<_Up...>,

      __enable_if_t<sizeof...(_Up) == sizeof...(_Tp)>>
      : _And<



            _Not<is_same<_OtherTuple, const tuple&> >,
            _Not<is_same<_OtherTuple, tuple&&> >,
            is_constructible<_Tp, __copy_cvref_t<_OtherTuple, _Up> >...,
            _Lazy<_Or,
                  _BoolConstant<sizeof...(_Tp) != 1>,


                  _Lazy<_And,
                        _Not<is_same<_Tp, _Up> >...,
                        _Not<is_convertible<_OtherTuple, _Tp> >...,
                        _Not<is_constructible<_Tp, _OtherTuple> >... > > > {};

  template <class... _Up, __enable_if_t< _And< _EnableCtorFromUTypesTuple<const tuple<_Up...>&> >::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr explicit(
      _Not<_Lazy<_And, is_convertible<const _Up&, _Tp>...> >::value) tuple(const tuple<_Up...>& __t)
      noexcept(_And<is_nothrow_constructible<_Tp, const _Up&>...>::value)
      : __base_(__t) {}

  template <class... _Up,
            class _Alloc,
            __enable_if_t< _And< _EnableCtorFromUTypesTuple<const tuple<_Up...>&> >::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit(
      _Not<_Lazy<_And, is_convertible<const _Up&, _Tp>...> >::value)
      tuple(allocator_arg_t, const _Alloc& __a, const tuple<_Up...>& __t)
      : __base_(allocator_arg_t(), __a, __t) {}
# 711 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\tuple" 3
  template <class... _Up, __enable_if_t< _And< _EnableCtorFromUTypesTuple<tuple<_Up...>&&> >::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr explicit(_Not<_Lazy<_And, is_convertible<_Up, _Tp>...> >::value)
      tuple(tuple<_Up...>&& __t) noexcept(_And<is_nothrow_constructible<_Tp, _Up>...>::value)
      : __base_(std::move(__t)) {}

  template <class _Alloc,
            class... _Up,
            __enable_if_t< _And< _EnableCtorFromUTypesTuple<tuple<_Up...>&&> >::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit(_Not<_Lazy<_And, is_convertible<_Up, _Tp>...> >::value)
      tuple(allocator_arg_t, const _Alloc& __a, tuple<_Up...>&& __t)
      : __base_(allocator_arg_t(), __a, std::move(__t)) {}
# 741 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\tuple" 3
  template <template <class...> class _Pred,
            class _Pair,
            class _DecayedPair = __remove_cvref_t<_Pair>,
            class _Tuple = tuple>
  struct _CtorPredicateFromPair : false_type {};

  template <template <class...> class _Pred, class _Pair, class _Up1, class _Up2, class _Tp1, class _Tp2>
  struct _CtorPredicateFromPair<_Pred, _Pair, pair<_Up1, _Up2>, tuple<_Tp1, _Tp2> >
      : _And< _Pred<_Tp1, __copy_cvref_t<_Pair, _Up1> >, _Pred<_Tp2, __copy_cvref_t<_Pair, _Up2> > > {};

  template <class _Pair>
  struct _EnableCtorFromPair : _CtorPredicateFromPair<is_constructible, _Pair> {};

  template <class _Pair>
  struct _NothrowConstructibleFromPair : _CtorPredicateFromPair<is_nothrow_constructible, _Pair> {};

  template <class _Pair, class _DecayedPair = __remove_cvref_t<_Pair>, class _Tuple = tuple>
  struct _BothImplicitlyConvertible : false_type {};

  template <class _Pair, class _Up1, class _Up2, class _Tp1, class _Tp2>
  struct _BothImplicitlyConvertible<_Pair, pair<_Up1, _Up2>, tuple<_Tp1, _Tp2> >
      : _And< is_convertible<__copy_cvref_t<_Pair, _Up1>, _Tp1>, is_convertible<__copy_cvref_t<_Pair, _Up2>, _Tp2> > {};

  template <class _Up1,
            class _Up2,
            template <class...> class _And = _And,
            __enable_if_t< _And< _EnableCtorFromPair<const pair<_Up1, _Up2>&> >::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr explicit(
      _Not<_BothImplicitlyConvertible<const pair<_Up1, _Up2>&> >::value) tuple(const pair<_Up1, _Up2>& __p)
      noexcept(_NothrowConstructibleFromPair<const pair<_Up1, _Up2>&>::value)
      : __base_(__p) {}

  template <class _Alloc,
            class _Up1,
            class _Up2,
            template <class...> class _And = _And,
            __enable_if_t< _And< _EnableCtorFromPair<const pair<_Up1, _Up2>&> >::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit(
      _Not<_BothImplicitlyConvertible<const pair<_Up1, _Up2>&> >::value)
      tuple(allocator_arg_t, const _Alloc& __a, const pair<_Up1, _Up2>& __p)
      : __base_(allocator_arg_t(), __a, __p) {}
# 802 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\tuple" 3
  template <class _Up1,
            class _Up2,
            template <class...> class _And = _And,
            __enable_if_t< _And< _EnableCtorFromPair<pair<_Up1, _Up2>&&> >::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr explicit(
      _Not<_BothImplicitlyConvertible<pair<_Up1, _Up2>&&> >::value) tuple(pair<_Up1, _Up2>&& __p)
      noexcept(_NothrowConstructibleFromPair<pair<_Up1, _Up2>&&>::value)
      : __base_(std::move(__p)) {}

  template <class _Alloc,
            class _Up1,
            class _Up2,
            template <class...> class _And = _And,
            __enable_if_t< _And< _EnableCtorFromPair<pair<_Up1, _Up2>&&> >::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit(
      _Not<_BothImplicitlyConvertible<pair<_Up1, _Up2>&&> >::value)
      tuple(allocator_arg_t, const _Alloc& __a, pair<_Up1, _Up2>&& __p)
      : __base_(allocator_arg_t(), __a, std::move(__p)) {}
# 838 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\tuple" 3
#pragma clang diagnostic pop


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) tuple&
  operator=(_If<_And<is_copy_assignable<_Tp>...>::value, tuple, __nat> const& __tuple)
      noexcept(_And<is_nothrow_copy_assignable<_Tp>...>::value) {
    std::__memberwise_copy_assign(*this, __tuple, typename __make_tuple_indices<sizeof...(_Tp)>::type());
    return *this;
  }
# 865 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\tuple" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) tuple&
  operator=(_If<_And<is_move_assignable<_Tp>...>::value, tuple, __nat>&& __tuple)
      noexcept(_And<is_nothrow_move_assignable<_Tp>...>::value) {
    std::__memberwise_forward_assign(
        *this, std::move(__tuple), __tuple_types<_Tp...>(), typename __make_tuple_indices<sizeof...(_Tp)>::type());
    return *this;
  }

  template <
      class... _Up,
      __enable_if_t< _And< _BoolConstant<sizeof...(_Tp) == sizeof...(_Up)>, is_assignable<_Tp&, _Up const&>... >::value,
                     int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) tuple& operator=(tuple<_Up...> const& __tuple)
      noexcept(_And<is_nothrow_assignable<_Tp&, _Up const&>...>::value) {
    std::__memberwise_copy_assign(*this, __tuple, typename __make_tuple_indices<sizeof...(_Tp)>::type());
    return *this;
  }

  template <class... _Up,
            __enable_if_t< _And< _BoolConstant<sizeof...(_Tp) == sizeof...(_Up)>, is_assignable<_Tp&, _Up>... >::value,
                           int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) tuple& operator=(tuple<_Up...>&& __tuple)
      noexcept(_And<is_nothrow_assignable<_Tp&, _Up>...>::value) {
    std::__memberwise_forward_assign(
        *this, std::move(__tuple), __tuple_types<_Up...>(), typename __make_tuple_indices<sizeof...(_Tp)>::type());
    return *this;
  }
# 912 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\tuple" 3
  template <template <class...> class _Pred,
            bool _Const,
            class _Pair,
            class _DecayedPair = __remove_cvref_t<_Pair>,
            class _Tuple = tuple>
  struct _AssignPredicateFromPair : false_type {};

  template <template <class...> class _Pred, bool _Const, class _Pair, class _Up1, class _Up2, class _Tp1, class _Tp2>
  struct _AssignPredicateFromPair<_Pred, _Const, _Pair, pair<_Up1, _Up2>, tuple<_Tp1, _Tp2> >
      : _And<_Pred<__maybe_const<_Const, _Tp1>&, __copy_cvref_t<_Pair, _Up1> >,
             _Pred<__maybe_const<_Const, _Tp2>&, __copy_cvref_t<_Pair, _Up2> > > {};

  template <bool _Const, class _Pair>
  struct _EnableAssignFromPair : _AssignPredicateFromPair<is_assignable, _Const, _Pair> {};

  template <bool _Const, class _Pair>
  struct _NothrowAssignFromPair : _AssignPredicateFromPair<is_nothrow_assignable, _Const, _Pair> {};
# 948 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\tuple" 3
  template <class _Up1,
            class _Up2,
            __enable_if_t< _EnableAssignFromPair<false, pair<_Up1, _Up2> const&>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) tuple& operator=(pair<_Up1, _Up2> const& __pair)
      noexcept(_NothrowAssignFromPair<false, pair<_Up1, _Up2> const&>::value) {
    std::get<0>(*this) = __pair.first;
    std::get<1>(*this) = __pair.second;
    return *this;
  }

  template <class _Up1, class _Up2, __enable_if_t< _EnableAssignFromPair<false, pair<_Up1, _Up2>&&>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) tuple& operator=(pair<_Up1, _Up2>&& __pair)
      noexcept(_NothrowAssignFromPair<false, pair<_Up1, _Up2>&&>::value) {
    std::get<0>(*this) = std::forward<_Up1>(__pair.first);
    std::get<1>(*this) = std::forward<_Up2>(__pair.second);
    return *this;
  }


  template <
      class _Up,
      size_t _Np,
      class = __enable_if_t< _And< _BoolConstant<_Np == sizeof...(_Tp)>, is_assignable<_Tp&, _Up const&>... >::value > >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) tuple& operator=(array<_Up, _Np> const& __array)
      noexcept(_And<is_nothrow_assignable<_Tp&, _Up const&>...>::value) {
    std::__memberwise_copy_assign(*this, __array, typename __make_tuple_indices<sizeof...(_Tp)>::type());
    return *this;
  }


  template <class _Up,
            size_t _Np,
            class = void,
            class = __enable_if_t< _And< _BoolConstant<_Np == sizeof...(_Tp)>, is_assignable<_Tp&, _Up>... >::value > >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) tuple& operator=(array<_Up, _Np>&& __array)
      noexcept(_And<is_nothrow_assignable<_Tp&, _Up>...>::value) {
    std::__memberwise_forward_assign(
        *this,
        std::move(__array),
        __tuple_types<_If<true, _Up, _Tp>...>(),
        typename __make_tuple_indices<sizeof...(_Tp)>::type());
    return *this;
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void swap(tuple& __t)
      noexcept(__all<__is_nothrow_swappable<_Tp>::value...>::value) {
    __base_.swap(__t.__base_);
  }







};

template <>
class tuple<> {
public:
  constexpr tuple() noexcept = default;
  template <class _Alloc>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) tuple(allocator_arg_t, const _Alloc&) noexcept {}
  template <class _Alloc>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) tuple(allocator_arg_t, const _Alloc&, const tuple&) noexcept {}
  template <class _Up>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) tuple(array<_Up, 0>) noexcept {}
  template <class _Alloc, class _Up>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) tuple(allocator_arg_t, const _Alloc&, array<_Up, 0>) noexcept {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void swap(tuple&) noexcept {}



};
# 1039 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\tuple" 3
template <class... _Tp>
tuple(_Tp...) -> tuple<_Tp...>;
template <class _Tp1, class _Tp2>
tuple(pair<_Tp1, _Tp2>) -> tuple<_Tp1, _Tp2>;
template <class _Alloc, class... _Tp>
tuple(allocator_arg_t, _Alloc, _Tp...) -> tuple<_Tp...>;
template <class _Alloc, class _Tp1, class _Tp2>
tuple(allocator_arg_t, _Alloc, pair<_Tp1, _Tp2>) -> tuple<_Tp1, _Tp2>;
template <class _Alloc, class... _Tp>
tuple(allocator_arg_t, _Alloc, tuple<_Tp...>) -> tuple<_Tp...>;


template <class... _Tp, __enable_if_t<__all<__is_swappable<_Tp>::value...>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void swap(tuple<_Tp...>& __t, tuple<_Tp...>& __u)
    noexcept(__all<__is_nothrow_swappable<_Tp>::value...>::value) {
  __t.swap(__u);
}
# 1068 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\tuple" 3
template <size_t _Ip, class... _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr typename tuple_element<_Ip, tuple<_Tp...> >::type&
get(tuple<_Tp...>& __t) noexcept {
  typedef __attribute__((__nodebug__)) typename tuple_element<_Ip, tuple<_Tp...> >::type type;
  return static_cast<__tuple_leaf<_Ip, type>&>(__t.__base_).get();
}

template <size_t _Ip, class... _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const typename tuple_element<_Ip, tuple<_Tp...> >::type&
get(const tuple<_Tp...>& __t) noexcept {
  typedef __attribute__((__nodebug__)) typename tuple_element<_Ip, tuple<_Tp...> >::type type;
  return static_cast<const __tuple_leaf<_Ip, type>&>(__t.__base_).get();
}

template <size_t _Ip, class... _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr typename tuple_element<_Ip, tuple<_Tp...> >::type&&
get(tuple<_Tp...>&& __t) noexcept {
  typedef __attribute__((__nodebug__)) typename tuple_element<_Ip, tuple<_Tp...> >::type type;
  return static_cast<type&&>(static_cast<__tuple_leaf<_Ip, type>&&>(__t.__base_).get());
}

template <size_t _Ip, class... _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const typename tuple_element<_Ip, tuple<_Tp...> >::type&&
get(const tuple<_Tp...>&& __t) noexcept {
  typedef __attribute__((__nodebug__)) typename tuple_element<_Ip, tuple<_Tp...> >::type type;
  return static_cast<const type&&>(static_cast<const __tuple_leaf<_Ip, type>&&>(__t.__base_).get());
}



namespace __find_detail {

static constexpr size_t __not_found = static_cast<size_t>(-1);
static constexpr size_t __ambiguous = __not_found - 1;

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr size_t __find_idx_return(size_t __curr_i, size_t __res, bool __matches) {
  return !__matches ? __res : (__res == __not_found ? __curr_i : __ambiguous);
}

template <size_t _Nx>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr size_t __find_idx(size_t __i, const bool (&__matches)[_Nx]) {
  return __i == _Nx
           ? __not_found
           : __find_detail::__find_idx_return(__i, __find_detail::__find_idx(__i + 1, __matches), __matches[__i]);
}

template <class _T1, class... _Args>
struct __find_exactly_one_checked {
  static constexpr bool __matches[sizeof...(_Args)] = {is_same<_T1, _Args>::value...};
  static constexpr size_t value = __find_detail::__find_idx(0, __matches);
  static_assert(value != __not_found, "type not found in type list");
  static_assert(value != __ambiguous, "type occurs more than once in type list");
};

template <class _T1>
struct __find_exactly_one_checked<_T1> {
  static_assert(!is_same<_T1, _T1>::value, "type not in empty type list");
};

}

template <typename _T1, typename... _Args>
struct __find_exactly_one_t : public __find_detail::__find_exactly_one_checked<_T1, _Args...> {};

template <class _T1, class... _Args>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _T1& get(tuple<_Args...>& __tup) noexcept {
  return std::get<__find_exactly_one_t<_T1, _Args...>::value>(__tup);
}

template <class _T1, class... _Args>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _T1 const& get(tuple<_Args...> const& __tup) noexcept {
  return std::get<__find_exactly_one_t<_T1, _Args...>::value>(__tup);
}

template <class _T1, class... _Args>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _T1&& get(tuple<_Args...>&& __tup) noexcept {
  return std::get<__find_exactly_one_t<_T1, _Args...>::value>(std::move(__tup));
}

template <class _T1, class... _Args>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _T1 const&& get(tuple<_Args...> const&& __tup) noexcept {
  return std::get<__find_exactly_one_t<_T1, _Args...>::value>(std::move(__tup));
}





template <class... _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr tuple<_Tp&...> tie(_Tp&... __t) noexcept {
  return tuple<_Tp&...>(__t...);
}

template <class _Up>
struct __ignore_t {
  template <class _Tp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const __ignore_t& operator=(_Tp&&) const {
    return *this;
  }
};


inline constexpr __ignore_t<unsigned char> ignore = __ignore_t<unsigned char>();






template <class... _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr tuple<typename __unwrap_ref_decay<_Tp>::type...>
make_tuple(_Tp&&... __t) {
  return tuple<typename __unwrap_ref_decay<_Tp>::type...>(std::forward<_Tp>(__t)...);
}

template <class... _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr tuple<_Tp&&...> forward_as_tuple(_Tp&&... __t) noexcept {
  return tuple<_Tp&&...>(std::forward<_Tp>(__t)...);
}

template <size_t _Ip>
struct __tuple_equal {
  template <class _Tp, class _Up>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool operator()(const _Tp& __x, const _Up& __y) {
    return __tuple_equal<_Ip - 1>()(__x, __y) && std::get<_Ip - 1>(__x) == std::get<_Ip - 1>(__y);
  }
};

template <>
struct __tuple_equal<0> {
  template <class _Tp, class _Up>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool operator()(const _Tp&, const _Up&) {
    return true;
  }
};

template <class... _Tp, class... _Up>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool
operator==(const tuple<_Tp...>& __x, const tuple<_Up...>& __y) {
  static_assert(sizeof...(_Tp) == sizeof...(_Up), "Can't compare tuples of different sizes");
  return __tuple_equal<sizeof...(_Tp)>()(__x, __y);
}
# 1233 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\tuple" 3
template <class... _Tp, class... _Up>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool
operator!=(const tuple<_Tp...>& __x, const tuple<_Up...>& __y) {
  return !(__x == __y);
}

template <size_t _Ip>
struct __tuple_less {
  template <class _Tp, class _Up>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool operator()(const _Tp& __x, const _Up& __y) {
    const size_t __idx = tuple_size<_Tp>::value - _Ip;
    if (std::get<__idx>(__x) < std::get<__idx>(__y))
      return true;
    if (std::get<__idx>(__y) < std::get<__idx>(__x))
      return false;
    return __tuple_less<_Ip - 1>()(__x, __y);
  }
};

template <>
struct __tuple_less<0> {
  template <class _Tp, class _Up>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool operator()(const _Tp&, const _Up&) {
    return false;
  }
};

template <class... _Tp, class... _Up>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool
operator<(const tuple<_Tp...>& __x, const tuple<_Up...>& __y) {
  static_assert(sizeof...(_Tp) == sizeof...(_Up), "Can't compare tuples of different sizes");
  return __tuple_less<sizeof...(_Tp)>()(__x, __y);
}

template <class... _Tp, class... _Up>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool
operator>(const tuple<_Tp...>& __x, const tuple<_Up...>& __y) {
  return __y < __x;
}

template <class... _Tp, class... _Up>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool
operator>=(const tuple<_Tp...>& __x, const tuple<_Up...>& __y) {
  return !(__x < __y);
}

template <class... _Tp, class... _Up>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool
operator<=(const tuple<_Tp...>& __x, const tuple<_Up...>& __y) {
  return !(__y < __x);
}





template <class _Tp, class _Up>
struct __tuple_cat_type;

template <class... _Ttypes, class... _Utypes>
struct __tuple_cat_type<tuple<_Ttypes...>, __tuple_types<_Utypes...> > {
  typedef __attribute__((__nodebug__)) tuple<_Ttypes..., _Utypes...> type;
};

template <class _ResultTuple, bool _Is_Tuple0TupleLike, class... _Tuples>
struct __tuple_cat_return_1 {};

template <class... _Types, class _Tuple0>
struct __tuple_cat_return_1<tuple<_Types...>, true, _Tuple0> {
  using type __attribute__((__nodebug__)) =
      typename __tuple_cat_type< tuple<_Types...>,
                                 typename __make_tuple_types<__remove_cvref_t<_Tuple0> >::type >::type;
};

template <class... _Types, class _Tuple0, class _Tuple1, class... _Tuples>
struct __tuple_cat_return_1<tuple<_Types...>, true, _Tuple0, _Tuple1, _Tuples...>
    : public __tuple_cat_return_1<
          typename __tuple_cat_type< tuple<_Types...>,
                                     typename __make_tuple_types<__remove_cvref_t<_Tuple0> >::type >::type,
          __tuple_like_ext<__libcpp_remove_reference_t<_Tuple1> >::value,
          _Tuple1,
          _Tuples...> {};

template <class... _Tuples>
struct __tuple_cat_return;

template <class _Tuple0, class... _Tuples>
struct __tuple_cat_return<_Tuple0, _Tuples...>
    : public __tuple_cat_return_1<tuple<>,
                                  __tuple_like_ext<__libcpp_remove_reference_t<_Tuple0> >::value,
                                  _Tuple0,
                                  _Tuples...> {};

template <>
struct __tuple_cat_return<> {
  typedef __attribute__((__nodebug__)) tuple<> type;
};

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr tuple<> tuple_cat() { return tuple<>(); }

template <class _Rp, class _Indices, class _Tuple0, class... _Tuples>
struct __tuple_cat_return_ref_imp;

template <class... _Types, size_t... _I0, class _Tuple0>
struct __tuple_cat_return_ref_imp<tuple<_Types...>, __tuple_indices<_I0...>, _Tuple0> {
  typedef __attribute__((__nodebug__)) __libcpp_remove_reference_t<_Tuple0> _T0;
  typedef tuple<_Types..., __apply_cv_t<_Tuple0, typename tuple_element<_I0, _T0>::type>&&...> type;
};

template <class... _Types, size_t... _I0, class _Tuple0, class _Tuple1, class... _Tuples>
struct __tuple_cat_return_ref_imp<tuple<_Types...>, __tuple_indices<_I0...>, _Tuple0, _Tuple1, _Tuples...>
    : public __tuple_cat_return_ref_imp<
          tuple<_Types...,
                __apply_cv_t<_Tuple0, typename tuple_element<_I0, __libcpp_remove_reference_t<_Tuple0>>::type>&&...>,
          typename __make_tuple_indices<tuple_size<__libcpp_remove_reference_t<_Tuple1> >::value>::type,
          _Tuple1,
          _Tuples...> {};

template <class _Tuple0, class... _Tuples>
struct __tuple_cat_return_ref
    : public __tuple_cat_return_ref_imp<
          tuple<>,
          typename __make_tuple_indices< tuple_size<__libcpp_remove_reference_t<_Tuple0> >::value >::type,
          _Tuple0,
          _Tuples...> {};

template <class _Types, class _I0, class _J0>
struct __tuple_cat;

template <class... _Types, size_t... _I0, size_t... _J0>
struct __tuple_cat<tuple<_Types...>, __tuple_indices<_I0...>, __tuple_indices<_J0...> > {
  template <class _Tuple0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr
      typename __tuple_cat_return_ref<tuple<_Types...>&&, _Tuple0&&>::type
      operator()(tuple<_Types...> __t, _Tuple0&& __t0) {
    (void)__t;
    return std::forward_as_tuple(
        std::forward<_Types>(std::get<_I0>(__t))..., std::get<_J0>(std::forward<_Tuple0>(__t0))...);
  }

  template <class _Tuple0, class _Tuple1, class... _Tuples>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr
      typename __tuple_cat_return_ref<tuple<_Types...>&&, _Tuple0&&, _Tuple1&&, _Tuples&&...>::type
      operator()(tuple<_Types...> __t, _Tuple0&& __t0, _Tuple1&& __t1, _Tuples&&... __tpls) {
    (void)__t;
    typedef __attribute__((__nodebug__)) __libcpp_remove_reference_t<_Tuple0> _T0;
    typedef __attribute__((__nodebug__)) __libcpp_remove_reference_t<_Tuple1> _T1;
    return __tuple_cat<tuple<_Types..., __apply_cv_t<_Tuple0, typename tuple_element<_J0, _T0>::type>&&...>,
                       typename __make_tuple_indices<sizeof...(_Types) + tuple_size<_T0>::value>::type,
                       typename __make_tuple_indices<tuple_size<_T1>::value>::type>()(
        std::forward_as_tuple(
            std::forward<_Types>(std::get<_I0>(__t))..., std::get<_J0>(std::forward<_Tuple0>(__t0))...),
        std::forward<_Tuple1>(__t1),
        std::forward<_Tuples>(__tpls)...);
  }
};

template <class _Tuple0, class... _Tuples>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr typename __tuple_cat_return<_Tuple0, _Tuples...>::type
tuple_cat(_Tuple0&& __t0, _Tuples&&... __tpls) {
  typedef __attribute__((__nodebug__)) __libcpp_remove_reference_t<_Tuple0> _T0;
  return __tuple_cat<tuple<>, __tuple_indices<>, typename __make_tuple_indices<tuple_size<_T0>::value>::type>()(
      tuple<>(), std::forward<_Tuple0>(__t0), std::forward<_Tuples>(__tpls)...);
}

template <class... _Tp, class _Alloc>
struct uses_allocator<tuple<_Tp...>, _Alloc> : true_type {};

template <class _T1, class _T2>
template <class... _Args1, class... _Args2, size_t... _I1, size_t... _I2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) pair<_T1, _T2>::pair(
    piecewise_construct_t,
    tuple<_Args1...>& __first_args,
    tuple<_Args2...>& __second_args,
    __tuple_indices<_I1...>,
    __tuple_indices<_I2...>)
    : first(std::forward<_Args1>(std::get<_I1>(__first_args))...),
      second(std::forward<_Args2>(std::get<_I2>(__second_args))...) {}


template <class _Tp>
inline constexpr size_t tuple_size_v = tuple_size<_Tp>::value;






template <class _Fn, class _Tuple, size_t... _Id>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr decltype(auto)
__apply_tuple_impl(_Fn&& __f, _Tuple&& __t, __tuple_indices<_Id...>)
    noexcept(noexcept(std::__invoke(std::forward<_Fn>(__f), std::get<_Id>(std::forward<_Tuple>(__t))...))) { return std::__invoke(std::forward<_Fn>(__f), std::get<_Id>(std::forward<_Tuple>(__t))...); }

template <class _Fn, class _Tuple>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr decltype(auto) apply(_Fn&& __f, _Tuple&& __t)
    noexcept(noexcept(std::__apply_tuple_impl( std::forward<_Fn>(__f), std::forward<_Tuple>(__t), typename __make_tuple_indices<tuple_size_v<remove_reference_t<_Tuple>>>::type{}))) { return std::__apply_tuple_impl( std::forward<_Fn>(__f), std::forward<_Tuple>(__t), typename __make_tuple_indices<tuple_size_v<remove_reference_t<_Tuple>>>::type{}); }




template <class _Tp, class _Tuple, size_t... _Idx>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Tp __make_from_tuple_impl(_Tuple&& __t, __tuple_indices<_Idx...>)
    noexcept(noexcept(_Tp(std::get<_Idx>(std::forward<_Tuple>(__t))...))) { return _Tp(std::get<_Idx>(std::forward<_Tuple>(__t))...); }

template <class _Tp, class _Tuple>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Tp make_from_tuple(_Tuple&& __t)
    noexcept(noexcept(std::__make_from_tuple_impl<_Tp>( std::forward<_Tuple>(__t), typename __make_tuple_indices<tuple_size_v<remove_reference_t<_Tuple>>>::type{}))) { return std::__make_from_tuple_impl<_Tp>( std::forward<_Tuple>(__t), typename __make_tuple_indices<tuple_size_v<remove_reference_t<_Tuple>>>::type{}); }
# 1448 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\tuple" 3
}}
# 1460 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\tuple" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\utility" 1 3
# 251 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\utility" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/as_const.h" 1 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/as_const.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {


template <class _Tp>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr add_const_t<_Tp>& as_const(_Tp& __t) noexcept {
  return __t;
}

template <class _Tp>
void as_const(const _Tp&&) = delete;


}}
# 252 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\utility" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/as_lvalue.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/as_lvalue.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 21 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/as_lvalue.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Tp& __as_lvalue([[_Clang::__lifetimebound__]] _Tp&& __t) {
  return static_cast<_Tp&>(__t);
}



}}
# 253 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\utility" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/cmp.h" 1 3
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/cmp.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/cmp.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 77 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/cmp.h" 3
}}
# 255 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\utility" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/exception_guard.h" 1 3
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/exception_guard.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/exception_guard.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 64 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/exception_guard.h" 3
template <class _Rollback>
struct __exception_guard_exceptions {
  __exception_guard_exceptions() = delete;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit __exception_guard_exceptions(_Rollback __rollback)
      : __rollback_(std::move(__rollback)), __completed_(false) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
  __exception_guard_exceptions(__exception_guard_exceptions&& __other)
      noexcept(is_nothrow_move_constructible<_Rollback>::value)
      : __rollback_(std::move(__other.__rollback_)), __completed_(__other.__completed_) {
    __other.__completed_ = true;
  }

  __exception_guard_exceptions(__exception_guard_exceptions const&) = delete;
  __exception_guard_exceptions& operator=(__exception_guard_exceptions const&) = delete;
  __exception_guard_exceptions& operator=(__exception_guard_exceptions&&) = delete;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __complete() noexcept { __completed_ = true; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) ~__exception_guard_exceptions() {
    if (!__completed_)
      __rollback_();
  }

private:
  _Rollback __rollback_;
  bool __completed_;
};

template <class... _Tag> [[maybe_unused]] __exception_guard_exceptions(typename _Tag::__allow_ctad...)->__exception_guard_exceptions<_Tag...>;

template <class _Rollback>
struct __exception_guard_noexceptions {
  __exception_guard_noexceptions() = delete;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
      __attribute__((__nodebug__)) explicit __exception_guard_noexceptions(_Rollback) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__nodebug__))
  __exception_guard_noexceptions(__exception_guard_noexceptions&& __other)
      noexcept(is_nothrow_move_constructible<_Rollback>::value)
      : __completed_(__other.__completed_) {
    __other.__completed_ = true;
  }

  __exception_guard_noexceptions(__exception_guard_noexceptions const&) = delete;
  __exception_guard_noexceptions& operator=(__exception_guard_noexceptions const&) = delete;
  __exception_guard_noexceptions& operator=(__exception_guard_noexceptions&&) = delete;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__nodebug__)) void __complete() noexcept {
    __completed_ = true;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__nodebug__)) ~__exception_guard_noexceptions() {
    ((void)0);
  }

private:
  bool __completed_ = false;
};

template <class... _Tag> [[maybe_unused]] __exception_guard_noexceptions(typename _Tag::__allow_ctad...)->__exception_guard_noexceptions<_Tag...>;


template <class _Rollback>
using __exception_guard = __exception_guard_noexceptions<_Rollback>;





template <class _Rollback>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr __exception_guard<_Rollback> __make_exception_guard(_Rollback __rollback) {
  return __exception_guard<_Rollback>(std::move(__rollback));
}

}}
# 257 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\utility" 2 3
# 266 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\utility" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/rel_ops.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/rel_ops.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

namespace rel_ops {

template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator!=(const _Tp& __x, const _Tp& __y) {
  return !(__x == __y);
}

template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator>(const _Tp& __x, const _Tp& __y) {
  return __y < __x;
}

template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator<=(const _Tp& __x, const _Tp& __y) {
  return !(__y < __x);
}

template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator>=(const _Tp& __x, const _Tp& __y) {
  return !(__x < __y);
}

}

}}
# 267 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\utility" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/to_underlying.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/to_underlying.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {


template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr typename underlying_type<_Tp>::type __to_underlying(_Tp __val) noexcept {
  return static_cast<typename underlying_type<_Tp>::type>(__val);
}
# 36 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/to_underlying.h" 3
}}
# 269 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\utility" 2 3
# 284 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\utility" 3
# 1461 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\tuple" 2 3
# 254 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\variant" 2 3
# 263 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\variant" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 267 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\variant" 2 3

namespace std {

class __attribute__((__visibility__("default"))) bad_variant_access : public exception {
public:
  const char* what() const noexcept override;
};

}

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {





template <class _Tp, size_t _Size>
struct __farray {
  static_assert(_Size > 0, "N-dimensional array should never be empty in std::visit");
  _Tp __buf_[_Size] = {};

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const _Tp& operator[](size_t __n) const noexcept { return __buf_[__n]; }
};

[[noreturn]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
__throw_bad_variant_access() {



  ::std::__libcpp_verbose_abort("bad_variant_access was thrown in -fno-exceptions mode");

}

template <class... _Types>
class variant;

template <class _Tp>
struct variant_size;

template <class _Tp>
inline constexpr size_t variant_size_v = variant_size<_Tp>::value;

template <class _Tp>
struct variant_size<const _Tp> : variant_size<_Tp> {};

template <class _Tp>
struct variant_size<volatile _Tp> : variant_size<_Tp> {};

template <class _Tp>
struct variant_size<const volatile _Tp> : variant_size<_Tp> {};

template <class... _Types>
struct variant_size<variant<_Types...>> : integral_constant<size_t, sizeof...(_Types)> {};

template <size_t _Ip, class _Tp>
struct variant_alternative;

template <size_t _Ip, class _Tp>
using variant_alternative_t = typename variant_alternative<_Ip, _Tp>::type;

template <size_t _Ip, class _Tp>
struct variant_alternative<_Ip, const _Tp> : add_const<variant_alternative_t<_Ip, _Tp>> {};

template <size_t _Ip, class _Tp>
struct variant_alternative<_Ip, volatile _Tp> : add_volatile<variant_alternative_t<_Ip, _Tp>> {};

template <size_t _Ip, class _Tp>
struct variant_alternative<_Ip, const volatile _Tp> : add_cv<variant_alternative_t<_Ip, _Tp>> {};

template <size_t _Ip, class... _Types>
struct variant_alternative<_Ip, variant<_Types...>> {
  static_assert(_Ip < sizeof...(_Types), "Index out of bounds in std::variant_alternative<>");
  using type = __type_pack_element<_Ip, _Types...>;
};

inline constexpr size_t variant_npos = static_cast<size_t>(-1);

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr int __choose_index_type(unsigned int __num_elem) {
  if (__num_elem < numeric_limits<unsigned char>::max())
    return 0;
  if (__num_elem < numeric_limits<unsigned short>::max())
    return 1;
  return 2;
}

template <size_t _NumAlts>
using __variant_index_t =



    std::tuple_element_t< __choose_index_type(_NumAlts), std::tuple<unsigned char, unsigned short, unsigned int> >;


template <class _IndexType>
constexpr _IndexType __variant_npos = static_cast<_IndexType>(-1);

template <class... _Types>
class variant;

template <class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr variant<_Types...>& __as_variant(variant<_Types...>& __vs) noexcept {
  return __vs;
}

template <class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const variant<_Types...>& __as_variant(const variant<_Types...>& __vs) noexcept {
  return __vs;
}

template <class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr variant<_Types...>&& __as_variant(variant<_Types...>&& __vs) noexcept {
  return std::move(__vs);
}

template <class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const variant<_Types...>&& __as_variant(const variant<_Types...>&& __vs) noexcept {
  return std::move(__vs);
}

namespace __find_detail {

template <class _Tp, class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr size_t __find_index() {
  constexpr bool __matches[] = {is_same_v<_Tp, _Types>...};
  size_t __result = __not_found;
  for (size_t __i = 0; __i < sizeof...(_Types); ++__i) {
    if (__matches[__i]) {
      if (__result != __not_found) {
        return __ambiguous;
      }
      __result = __i;
    }
  }
  return __result;
}

template <size_t _Index>
struct __find_unambiguous_index_sfinae_impl : integral_constant<size_t, _Index> {};

template <>
struct __find_unambiguous_index_sfinae_impl<__not_found> {};

template <>
struct __find_unambiguous_index_sfinae_impl<__ambiguous> {};

template <class _Tp, class... _Types>
struct __find_unambiguous_index_sfinae : __find_unambiguous_index_sfinae_impl<__find_index<_Tp, _Types...>()> {};

}

namespace __variant_detail {

struct __valueless_t {};

enum class _Trait { _TriviallyAvailable, _Available, _Unavailable };

template <typename _Tp, template <typename> class _IsTriviallyAvailable, template <typename> class _IsAvailable>
constexpr _Trait __trait =
    _IsTriviallyAvailable<_Tp>::value ? _Trait::_TriviallyAvailable
    : _IsAvailable<_Tp>::value
        ? _Trait::_Available
        : _Trait::_Unavailable;

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Trait __common_trait(initializer_list<_Trait> __traits) {
  _Trait __result = _Trait::_TriviallyAvailable;
  for (_Trait __t : __traits) {
    if (static_cast<int>(__t) > static_cast<int>(__result)) {
      __result = __t;
    }
  }
  return __result;
}

template <typename... _Types>
struct __traits {
  static constexpr _Trait __copy_constructible_trait =
      __variant_detail::__common_trait({__trait<_Types, is_trivially_copy_constructible, is_copy_constructible>...});

  static constexpr _Trait __move_constructible_trait =
      __variant_detail::__common_trait({__trait<_Types, is_trivially_move_constructible, is_move_constructible>...});

  static constexpr _Trait __copy_assignable_trait = __variant_detail::__common_trait(
      {__copy_constructible_trait, __trait<_Types, is_trivially_copy_assignable, is_copy_assignable>...});

  static constexpr _Trait __move_assignable_trait = __variant_detail::__common_trait(
      {__move_constructible_trait, __trait<_Types, is_trivially_move_assignable, is_move_assignable>...});

  static constexpr _Trait __destructible_trait =
      __variant_detail::__common_trait({__trait<_Types, is_trivially_destructible, is_destructible>...});
};

namespace __access {

struct __union {
  template <class _Vp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr auto&& __get_alt(_Vp&& __v, in_place_index_t<0>) {
    return std::forward<_Vp>(__v).__head;
  }

  template <class _Vp, size_t _Ip>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr auto&& __get_alt(_Vp&& __v, in_place_index_t<_Ip>) {
    return __get_alt(std::forward<_Vp>(__v).__tail, in_place_index<_Ip - 1>);
  }
};

struct __base {
  template <size_t _Ip, class _Vp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr auto&& __get_alt(_Vp&& __v) {
    return __union::__get_alt(std::forward<_Vp>(__v).__data, in_place_index<_Ip>);
  }
};

struct __variant {
  template <size_t _Ip, class _Vp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr auto&& __get_alt(_Vp&& __v) {
    return __base::__get_alt<_Ip>(std::forward<_Vp>(__v).__impl_);
  }
};

}

namespace __visitation {

struct __base {
  template <class _Visitor, class... _Vs>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr decltype(auto)
  __visit_alt_at(size_t __index, _Visitor&& __visitor, _Vs&&... __vs) {
    constexpr auto __fdiagonal = __make_fdiagonal<_Visitor&&, decltype(std::forward<_Vs>(__vs).__as_base())...>();
    return __fdiagonal[__index](std::forward<_Visitor>(__visitor), std::forward<_Vs>(__vs).__as_base()...);
  }

  template <class _Visitor, class... _Vs>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr decltype(auto) __visit_alt(_Visitor&& __visitor, _Vs&&... __vs) {
    constexpr auto __fmatrix = __make_fmatrix<_Visitor&&, decltype(std::forward<_Vs>(__vs).__as_base())...>();
    return __at(__fmatrix, __vs.index()...)(std::forward<_Visitor>(__visitor), std::forward<_Vs>(__vs).__as_base()...);
  }

private:
  template <class _Tp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr const _Tp& __at(const _Tp& __elem) {
    return __elem;
  }

  template <class _Tp, size_t _Np, typename... _Indices>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr auto&&
  __at(const __farray<_Tp, _Np>& __elems, size_t __index, _Indices... __indices) {
    return __at(__elems[__index], __indices...);
  }

  template <class _Fp, class... _Fs>
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr void __std_visit_visitor_return_type_check() {
    static_assert(
        __all<is_same_v<_Fp, _Fs>...>::value, "`std::visit` requires the visitor to have a single return type.");
  }

  template <class... _Fs>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr auto __make_farray(_Fs&&... __fs) {
    __std_visit_visitor_return_type_check<__remove_cvref_t<_Fs>...>();
    using __result = __farray<common_type_t<__remove_cvref_t<_Fs>...>, sizeof...(_Fs)>;
    return __result{{std::forward<_Fs>(__fs)...}};
  }

  template <size_t... _Is>
  struct __dispatcher {
    template <class _Fp, class... _Vs>
    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr decltype(auto) __dispatch(_Fp __f, _Vs... __vs) {
      return std::__invoke(static_cast<_Fp>(__f), __access::__base::__get_alt<_Is>(static_cast<_Vs>(__vs))...);
    }
  };

  template <class _Fp, class... _Vs, size_t... _Is>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr auto __make_dispatch(index_sequence<_Is...>) {
    return __dispatcher<_Is...>::template __dispatch<_Fp, _Vs...>;
  }

  template <size_t _Ip, class _Fp, class... _Vs>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr auto __make_fdiagonal_impl() {
    return __make_dispatch<_Fp, _Vs...>(index_sequence<((void)__type_identity<_Vs>{}, _Ip)...>{});
  }

  template <class _Fp, class... _Vs, size_t... _Is>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr auto __make_fdiagonal_impl(index_sequence<_Is...>) {
    return __base::__make_farray(__make_fdiagonal_impl<_Is, _Fp, _Vs...>()...);
  }

  template <class _Fp, class _Vp, class... _Vs>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr auto __make_fdiagonal() {
    constexpr size_t __np = __remove_cvref_t<_Vp>::__size();
    static_assert(__all<(__np == __remove_cvref_t<_Vs>::__size())...>::value);
    return __make_fdiagonal_impl<_Fp, _Vp, _Vs...>(make_index_sequence<__np>{});
  }

  template <class _Fp, class... _Vs, size_t... _Is>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr auto __make_fmatrix_impl(index_sequence<_Is...> __is) {
    return __make_dispatch<_Fp, _Vs...>(__is);
  }

  template <class _Fp, class... _Vs, size_t... _Is, size_t... _Js, class... _Ls>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr auto
  __make_fmatrix_impl(index_sequence<_Is...>, index_sequence<_Js...>, _Ls... __ls) {
    return __base::__make_farray(__make_fmatrix_impl<_Fp, _Vs...>(index_sequence<_Is..., _Js>{}, __ls...)...);
  }

  template <class _Fp, class... _Vs>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr auto __make_fmatrix() {
    return __make_fmatrix_impl<_Fp, _Vs...>(
        index_sequence<>{}, make_index_sequence<__remove_cvref_t<_Vs>::__size()>{}...);
  }
};

struct __variant {
  template <class _Visitor, class... _Vs>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr decltype(auto)
  __visit_alt_at(size_t __index, _Visitor&& __visitor, _Vs&&... __vs) {
    return __base::__visit_alt_at(__index, std::forward<_Visitor>(__visitor), std::forward<_Vs>(__vs).__impl_...);
  }

  template <class _Visitor, class... _Vs>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr decltype(auto) __visit_alt(_Visitor&& __visitor, _Vs&&... __vs) {
    return __base::__visit_alt(
        std::forward<_Visitor>(__visitor), std::__as_variant(std::forward<_Vs>(__vs)).__impl_...);
  }

  template <class _Visitor, class... _Vs>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr decltype(auto)
  __visit_value_at(size_t __index, _Visitor&& __visitor, _Vs&&... __vs) {
    return __visit_alt_at(__index, __make_value_visitor(std::forward<_Visitor>(__visitor)), std::forward<_Vs>(__vs)...);
  }

  template <class _Visitor, class... _Vs>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr decltype(auto) __visit_value(_Visitor&& __visitor, _Vs&&... __vs) {
    return __visit_alt(__make_value_visitor(std::forward<_Visitor>(__visitor)), std::forward<_Vs>(__vs)...);
  }
# 608 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\variant" 3
private:
  template <class _Visitor, class... _Values>
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr void __std_visit_exhaustive_visitor_check() {
    static_assert(is_invocable_v<_Visitor, _Values...>, "`std::visit` requires the visitor to be exhaustive.");
  }

  template <class _Visitor>
  struct __value_visitor {
    template <class... _Alts>
    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr decltype(auto) operator()(_Alts&&... __alts) const {
      __std_visit_exhaustive_visitor_check< _Visitor, decltype((std::forward<_Alts>(__alts).__value))...>();
      return std::__invoke(std::forward<_Visitor>(__visitor), std::forward<_Alts>(__alts).__value...);
    }
    _Visitor&& __visitor;
  };
# 641 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\variant" 3
  template <class _Visitor>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr auto __make_value_visitor(_Visitor&& __visitor) {
    return __value_visitor<_Visitor>{std::forward<_Visitor>(__visitor)};
  }







};

}

template <size_t _Index, class _Tp>
struct __alt {
  using __value_type = _Tp;

  template <class... _Args>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit constexpr __alt(in_place_t, _Args&&... __args)
      : __value(std::forward<_Args>(__args)...) {}

  __value_type __value;
};

template <_Trait _DestructibleTrait, size_t _Index, class... _Types>
union __union;

template <_Trait _DestructibleTrait, size_t _Index>
union __union<_DestructibleTrait, _Index> {};
# 704 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\variant" 3
template <size_t _Index, class _Tp, class... _Types> union __union<_Trait::_TriviallyAvailable, _Index, _Tp, _Types...> { public: __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit constexpr __union(__valueless_t) noexcept : __dummy{} {} template <class... _Args> __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit constexpr __union(in_place_index_t<0>, _Args&&... __args) : __head(in_place, std::forward<_Args>(__args)...) {} template <size_t _Ip, class... _Args> __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit constexpr __union(in_place_index_t<_Ip>, _Args&&... __args) : __tail(in_place_index<_Ip - 1>, std::forward<_Args>(__args)...) {} __union(const __union&) = default; __union(__union&&) = default; ~__union() = default; __union& operator=(const __union&) = default; __union& operator=(__union&&) = default; private: char __dummy; __alt<_Index, _Tp> __head; __union<_Trait::_TriviallyAvailable, _Index + 1, _Types...> __tail; friend struct __access::__union; };
template <size_t _Index, class _Tp, class... _Types> union __union<_Trait::_Available, _Index, _Tp, _Types...> { public: __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit constexpr __union(__valueless_t) noexcept : __dummy{} {} template <class... _Args> __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit constexpr __union(in_place_index_t<0>, _Args&&... __args) : __head(in_place, std::forward<_Args>(__args)...) {} template <size_t _Ip, class... _Args> __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit constexpr __union(in_place_index_t<_Ip>, _Args&&... __args) : __tail(in_place_index<_Ip - 1>, std::forward<_Args>(__args)...) {} __union(const __union&) = default; __union(__union&&) = default; ~__union(){} __union& operator=(const __union&) = default; __union& operator=(__union&&) = default; private: char __dummy; __alt<_Index, _Tp> __head; __union<_Trait::_Available, _Index + 1, _Types...> __tail; friend struct __access::__union; };
template <size_t _Index, class _Tp, class... _Types> union __union<_Trait::_Unavailable, _Index, _Tp, _Types...> { public: __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit constexpr __union(__valueless_t) noexcept : __dummy{} {} template <class... _Args> __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit constexpr __union(in_place_index_t<0>, _Args&&... __args) : __head(in_place, std::forward<_Args>(__args)...) {} template <size_t _Ip, class... _Args> __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit constexpr __union(in_place_index_t<_Ip>, _Args&&... __args) : __tail(in_place_index<_Ip - 1>, std::forward<_Args>(__args)...) {} __union(const __union&) = default; __union(__union&&) = default; ~__union() = delete; __union& operator=(const __union&) = default; __union& operator=(__union&&) = default; private: char __dummy; __alt<_Index, _Tp> __head; __union<_Trait::_Unavailable, _Index + 1, _Types...> __tail; friend struct __access::__union; };



template <_Trait _DestructibleTrait, class... _Types>
class __base {
public:
  using __index_t = __variant_index_t<sizeof...(_Types)>;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit constexpr __base(__valueless_t __tag) noexcept
      : __data(__tag), __index(__variant_npos<__index_t>) {}

  template <size_t _Ip, class... _Args>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit constexpr __base(in_place_index_t<_Ip>, _Args&&... __args)
      : __data(in_place_index<_Ip>, std::forward<_Args>(__args)...), __index(_Ip) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool valueless_by_exception() const noexcept { return index() == variant_npos; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr size_t index() const noexcept {
    return __index == __variant_npos<__index_t> ? variant_npos : __index;
  }

protected:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr auto&& __as_base() & { return *this; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr auto&& __as_base() && { return std::move(*this); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr auto&& __as_base() const& { return *this; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr auto&& __as_base() const&& { return std::move(*this); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr size_t __size() { return sizeof...(_Types); }

  __union<_DestructibleTrait, 0, _Types...> __data;
  __index_t __index;

  friend struct __access::__base;
  friend struct __visitation::__base;
};

template <class _Traits, _Trait = _Traits::__destructible_trait>
class __dtor;
# 769 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\variant" 3
template <class... _Types> class __dtor<__traits<_Types...>, _Trait::_TriviallyAvailable> : public __base<_Trait::_TriviallyAvailable, _Types...> { using __base_type = __base<_Trait::_TriviallyAvailable, _Types...>; using __index_t = typename __base_type::__index_t; public: using __base_type::__base_type; using __base_type::operator=; __dtor(const __dtor&) = default; __dtor(__dtor&&) = default; ~__dtor() = default; __dtor& operator=(const __dtor&) = default; __dtor& operator=(__dtor&&) = default; protected: inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __destroy() noexcept { this->__index = __variant_npos<__index_t>; } };



template <class... _Types> class __dtor<__traits<_Types...>, _Trait::_Available> : public __base<_Trait::_Available, _Types...> { using __base_type = __base<_Trait::_Available, _Types...>; using __index_t = typename __base_type::__index_t; public: using __base_type::__base_type; using __base_type::operator=; __dtor(const __dtor&) = default; __dtor(__dtor&&) = default; ~__dtor() { __destroy(); } __dtor& operator=(const __dtor&) = default; __dtor& operator=(__dtor&&) = default; protected: inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __destroy() noexcept { if (!this->valueless_by_exception()) { __visitation::__base::__visit_alt( [](auto& __alt) noexcept { using __alt_type = __remove_cvref_t<decltype(__alt)>; __alt.~__alt_type(); }, *this); } this->__index = __variant_npos<__index_t>; } };
# 788 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\variant" 3
template <class... _Types> class __dtor<__traits<_Types...>, _Trait::_Unavailable> : public __base<_Trait::_Unavailable, _Types...> { using __base_type = __base<_Trait::_Unavailable, _Types...>; using __index_t = typename __base_type::__index_t; public: using __base_type::__base_type; using __base_type::operator=; __dtor(const __dtor&) = default; __dtor(__dtor&&) = default; ~__dtor() = delete; __dtor& operator=(const __dtor&) = default; __dtor& operator=(__dtor&&) = default; protected: inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __destroy() noexcept = delete; };



template <class _Traits>
class __ctor : public __dtor<_Traits> {
  using __base_type = __dtor<_Traits>;

public:
  using __base_type::__base_type;
  using __base_type::operator=;

protected:
  template <size_t _Ip, class _Tp, class... _Args>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static _Tp& __construct_alt(__alt<_Ip, _Tp>& __a, _Args&&... __args) {
    ::new ((void*)std::addressof(__a)) __alt<_Ip, _Tp>(in_place, std::forward<_Args>(__args)...);
    return __a.__value;
  }

  template <class _Rhs>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static void __generic_construct(__ctor& __lhs, _Rhs&& __rhs) {
    __lhs.__destroy();
    if (!__rhs.valueless_by_exception()) {
      auto __rhs_index = __rhs.index();
      __visitation::__base::__visit_alt_at(
          __rhs_index,
          [](auto& __lhs_alt, auto&& __rhs_alt) {
            __construct_alt(__lhs_alt, std::forward<decltype(__rhs_alt)>(__rhs_alt).__value);
          },
          __lhs,
          std::forward<_Rhs>(__rhs));
      __lhs.__index = __rhs_index;
    }
  }
};

template <class _Traits, _Trait = _Traits::__move_constructible_trait>
class __move_constructor;
# 843 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\variant" 3
template <class... _Types> class __move_constructor<__traits<_Types...>, _Trait::_TriviallyAvailable> : public __ctor<__traits<_Types...>> { using __base_type = __ctor<__traits<_Types...>>; public: using __base_type::__base_type; using __base_type::operator=; __move_constructor(const __move_constructor&) = default; __move_constructor(__move_constructor&& __that) = default; ~__move_constructor() = default; __move_constructor& operator=(const __move_constructor&) = default; __move_constructor& operator=(__move_constructor&&) = default; };


template <class... _Types> class __move_constructor<__traits<_Types...>, _Trait::_Available> : public __ctor<__traits<_Types...>> { using __base_type = __ctor<__traits<_Types...>>; public: using __base_type::__base_type; using __base_type::operator=; __move_constructor(const __move_constructor&) = default; __move_constructor(__move_constructor&& __that) noexcept(__all<is_nothrow_move_constructible_v<_Types>...>::value) : __move_constructor(__valueless_t{}) { this->__generic_construct(*this, std::move(__that)); } ~__move_constructor() = default; __move_constructor& operator=(const __move_constructor&) = default; __move_constructor& operator=(__move_constructor&&) = default; };




template <class... _Types> class __move_constructor<__traits<_Types...>, _Trait::_Unavailable> : public __ctor<__traits<_Types...>> { using __base_type = __ctor<__traits<_Types...>>; public: using __base_type::__base_type; using __base_type::operator=; __move_constructor(const __move_constructor&) = default; __move_constructor(__move_constructor&&) = delete; ~__move_constructor() = default; __move_constructor& operator=(const __move_constructor&) = default; __move_constructor& operator=(__move_constructor&&) = default; };



template <class _Traits, _Trait = _Traits::__copy_constructible_trait>
class __copy_constructor;
# 874 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\variant" 3
template <class... _Types> class __copy_constructor<__traits<_Types...>, _Trait::_TriviallyAvailable> : public __move_constructor<__traits<_Types...>> { using __base_type = __move_constructor<__traits<_Types...>>; public: using __base_type::__base_type; using __base_type::operator=; __copy_constructor(const __copy_constructor& __that) = default; __copy_constructor(__copy_constructor&&) = default; ~__copy_constructor() = default; __copy_constructor& operator=(const __copy_constructor&) = default; __copy_constructor& operator=(__copy_constructor&&) = default; };


template <class... _Types> class __copy_constructor<__traits<_Types...>, _Trait::_Available> : public __move_constructor<__traits<_Types...>> { using __base_type = __move_constructor<__traits<_Types...>>; public: using __base_type::__base_type; using __base_type::operator=; __copy_constructor(const __copy_constructor& __that) : __copy_constructor(__valueless_t{}) { this->__generic_construct(*this, __that); } __copy_constructor(__copy_constructor&&) = default; ~__copy_constructor() = default; __copy_constructor& operator=(const __copy_constructor&) = default; __copy_constructor& operator=(__copy_constructor&&) = default; };



template <class... _Types> class __copy_constructor<__traits<_Types...>, _Trait::_Unavailable> : public __move_constructor<__traits<_Types...>> { using __base_type = __move_constructor<__traits<_Types...>>; public: using __base_type::__base_type; using __base_type::operator=; __copy_constructor(const __copy_constructor&) = delete; __copy_constructor(__copy_constructor&&) = default; ~__copy_constructor() = default; __copy_constructor& operator=(const __copy_constructor&) = default; __copy_constructor& operator=(__copy_constructor&&) = default; };



template <class _Traits>
class __assignment : public __copy_constructor<_Traits> {
  using __base_type = __copy_constructor<_Traits>;

public:
  using __base_type::__base_type;
  using __base_type::operator=;

  template <size_t _Ip, class... _Args>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) auto& __emplace(_Args&&... __args) {
    this->__destroy();
    auto& __res = this->__construct_alt(__access::__base::__get_alt<_Ip>(*this), std::forward<_Args>(__args)...);
    this->__index = _Ip;
    return __res;
  }

protected:
  template <size_t _Ip, class _Tp, class _Arg>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __assign_alt(__alt<_Ip, _Tp>& __a, _Arg&& __arg) {
    if (this->index() == _Ip) {
      __a.__value = std::forward<_Arg>(__arg);
    } else {
      struct {
        __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void operator()(true_type) const { __this->__emplace<_Ip>(std::forward<_Arg>(__arg)); }
        __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void operator()(false_type) const {
          __this->__emplace<_Ip>(_Tp(std::forward<_Arg>(__arg)));
        }
        __assignment* __this;
        _Arg&& __arg;
      } __impl{this, std::forward<_Arg>(__arg)};
      __impl(bool_constant < is_nothrow_constructible_v<_Tp, _Arg> || !is_nothrow_move_constructible_v < _Tp >> {});
    }
  }

  template <class _That>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __generic_assign(_That&& __that) {
    if (this->valueless_by_exception() && __that.valueless_by_exception()) {

    } else if (__that.valueless_by_exception()) {
      this->__destroy();
    } else {
      __visitation::__base::__visit_alt_at(
          __that.index(),
          [this](auto& __this_alt, auto&& __that_alt) {
            this->__assign_alt(__this_alt, std::forward<decltype(__that_alt)>(__that_alt).__value);
          },
          *this,
          std::forward<_That>(__that));
    }
  }
};

template <class _Traits, _Trait = _Traits::__move_assignable_trait>
class __move_assignment;
# 957 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\variant" 3
template <class... _Types> class __move_assignment<__traits<_Types...>, _Trait::_TriviallyAvailable> : public __assignment<__traits<_Types...>> { using __base_type = __assignment<__traits<_Types...>>; public: using __base_type::__base_type; using __base_type::operator=; __move_assignment(const __move_assignment&) = default; __move_assignment(__move_assignment&&) = default; ~__move_assignment() = default; __move_assignment& operator=(const __move_assignment&) = default; __move_assignment& operator=(__move_assignment&& __that) = default; };


template <class... _Types> class __move_assignment<__traits<_Types...>, _Trait::_Available> : public __assignment<__traits<_Types...>> { using __base_type = __assignment<__traits<_Types...>>; public: using __base_type::__base_type; using __base_type::operator=; __move_assignment(const __move_assignment&) = default; __move_assignment(__move_assignment&&) = default; ~__move_assignment() = default; __move_assignment& operator=(const __move_assignment&) = default; __move_assignment& operator=(__move_assignment&& __that) noexcept( __all<(is_nothrow_move_constructible_v<_Types> && is_nothrow_move_assignable_v<_Types>)...>::value) { this->__generic_assign(std::move(__that)); return *this; } };
# 969 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\variant" 3
template <class... _Types> class __move_assignment<__traits<_Types...>, _Trait::_Unavailable> : public __assignment<__traits<_Types...>> { using __base_type = __assignment<__traits<_Types...>>; public: using __base_type::__base_type; using __base_type::operator=; __move_assignment(const __move_assignment&) = default; __move_assignment(__move_assignment&&) = default; ~__move_assignment() = default; __move_assignment& operator=(const __move_assignment&) = default; __move_assignment& operator=(__move_assignment&&) = delete; };



template <class _Traits, _Trait = _Traits::__copy_assignable_trait>
class __copy_assignment;
# 992 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\variant" 3
template <class... _Types> class __copy_assignment<__traits<_Types...>, _Trait::_TriviallyAvailable> : public __move_assignment<__traits<_Types...>> { using __base_type = __move_assignment<__traits<_Types...>>; public: using __base_type::__base_type; using __base_type::operator=; __copy_assignment(const __copy_assignment&) = default; __copy_assignment(__copy_assignment&&) = default; ~__copy_assignment() = default; __copy_assignment& operator=(const __copy_assignment& __that) = default; __copy_assignment& operator=(__copy_assignment&&) = default; };


template <class... _Types> class __copy_assignment<__traits<_Types...>, _Trait::_Available> : public __move_assignment<__traits<_Types...>> { using __base_type = __move_assignment<__traits<_Types...>>; public: using __base_type::__base_type; using __base_type::operator=; __copy_assignment(const __copy_assignment&) = default; __copy_assignment(__copy_assignment&&) = default; ~__copy_assignment() = default; __copy_assignment& operator=(const __copy_assignment& __that) { this->__generic_assign(__that); return *this; } __copy_assignment& operator=(__copy_assignment&&) = default; };





template <class... _Types> class __copy_assignment<__traits<_Types...>, _Trait::_Unavailable> : public __move_assignment<__traits<_Types...>> { using __base_type = __move_assignment<__traits<_Types...>>; public: using __base_type::__base_type; using __base_type::operator=; __copy_assignment(const __copy_assignment&) = default; __copy_assignment(__copy_assignment&&) = default; ~__copy_assignment() = default; __copy_assignment& operator=(const __copy_assignment&) = delete; __copy_assignment& operator=(__copy_assignment&&) = default; };



template <class... _Types>
class __impl : public __copy_assignment<__traits<_Types...>> {
  using __base_type = __copy_assignment<__traits<_Types...>>;

public:
  using __base_type::__base_type;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __impl(__impl const&) = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __impl(__impl&&) = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __impl& operator=(__impl const&) = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __impl& operator=(__impl&&) = default;

  template <size_t _Ip, class _Arg>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __assign(_Arg&& __arg) {
    this->__assign_alt(__access::__base::__get_alt<_Ip>(*this), std::forward<_Arg>(__arg));
  }

  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __swap(__impl& __that) {
    if (this->valueless_by_exception() && __that.valueless_by_exception()) {

    } else if (this->index() == __that.index()) {
      __visitation::__base::__visit_alt_at(
          this->index(),
          [](auto& __this_alt, auto& __that_alt) {
            using std::swap;
            swap(__this_alt.__value, __that_alt.__value);
          },
          *this,
          __that);
    } else {
      __impl* __lhs = this;
      __impl* __rhs = std::addressof(__that);
      if (__lhs->__move_nothrow() && !__rhs->__move_nothrow()) {
        std::swap(__lhs, __rhs);
      }
      __impl __tmp(std::move(*__rhs));
# 1059 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\variant" 3
      this->__generic_construct(*__rhs, std::move(*__lhs));

      this->__generic_construct(*__lhs, std::move(__tmp));
    }
  }

private:
  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool __move_nothrow() const {
    constexpr bool __results[] = {is_nothrow_move_constructible_v<_Types>...};
    return this->valueless_by_exception() || __results[this->index()];
  }
};

struct __no_narrowing_check {
  template <class _Dest, class _Source>
  using _Apply = __type_identity<_Dest>;
};

struct __narrowing_check {
  template <class _Dest>
  static auto __test_impl(_Dest (&&)[1]) -> __type_identity<_Dest>;
  template <class _Dest, class _Source>
  using _Apply __attribute__((__nodebug__)) = decltype(__test_impl<_Dest>({std::declval<_Source>()}));
};

template <class _Dest, class _Source>
using __check_for_narrowing __attribute__((__nodebug__)) = typename _If<



        is_arithmetic<_Dest>::value,
    __narrowing_check,
    __no_narrowing_check >::template _Apply<_Dest, _Source>;

template <class _Tp, size_t _Idx>
struct __overload {
  template <class _Up>
  auto operator()(_Tp, _Up&&) const -> __check_for_narrowing<_Tp, _Up>;
};
# 1117 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\variant" 3
template <class... _Bases>
struct __all_overloads : _Bases... {
  void operator()() const;
  using _Bases::operator()...;
};

template <class _IdxSeq>
struct __make_overloads_imp;

template <size_t... _Idx>
struct __make_overloads_imp<__tuple_indices<_Idx...> > {
  template <class... _Types>
  using _Apply __attribute__((__nodebug__)) = __all_overloads<__overload<_Types, _Idx>...>;
};

template <class... _Types>
using _MakeOverloads __attribute__((__nodebug__)) =
    typename __make_overloads_imp< __make_indices_imp<sizeof...(_Types), 0> >::template _Apply<_Types...>;

template <class _Tp, class... _Types>
using __best_match_t = typename invoke_result_t<_MakeOverloads<_Types...>, _Tp, _Tp>::type;

}

template <class _Visitor, class... _Vs, typename = void_t<decltype(std::__as_variant(std::declval<_Vs>()))...>>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr decltype(auto)
visit(_Visitor&& __visitor, _Vs&&... __vs);
# 1154 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\variant" 3
template <class... _Types>
class variant
    : private __sfinae_ctor_base< __all<is_copy_constructible_v<_Types>...>::value,
                                  __all<is_move_constructible_v<_Types>...>::value>,
      private __sfinae_assign_base<
          __all<(is_copy_constructible_v<_Types> && is_copy_assignable_v<_Types>)...>::value,
          __all<(is_move_constructible_v<_Types> && is_move_assignable_v<_Types>)...>::value> {
  static_assert(0 < sizeof...(_Types), "variant must consist of at least one alternative.");

  static_assert(__all<!is_array_v<_Types>...>::value, "variant can not have an array type as an alternative.");

  static_assert(__all<!is_reference_v<_Types>...>::value, "variant can not have a reference type as an alternative.");

  static_assert(__all<!is_void_v<_Types>...>::value, "variant can not have a void type as an alternative.");

  using __first_type = variant_alternative_t<0, variant>;

public:
  template <bool _Dummy = true,
            enable_if_t<__dependent_type<is_default_constructible<__first_type>, _Dummy>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr variant() noexcept(is_nothrow_default_constructible_v<__first_type>)
      : __impl_(in_place_index<0>) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr variant(const variant&) = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr variant(variant&&) = default;

  template < class _Arg,
             enable_if_t<!is_same_v<__remove_cvref_t<_Arg>, variant>, int> = 0,
             enable_if_t<!__is_inplace_type<__remove_cvref_t<_Arg>>::value, int> = 0,
             enable_if_t<!__is_inplace_index<__remove_cvref_t<_Arg>>::value, int> = 0,
             class _Tp = __variant_detail::__best_match_t<_Arg, _Types...>,
             size_t _Ip = __find_detail::__find_unambiguous_index_sfinae<_Tp, _Types...>::value,
             enable_if_t<is_constructible_v<_Tp, _Arg>, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr variant(_Arg&& __arg) noexcept(is_nothrow_constructible_v<_Tp, _Arg>)
      : __impl_(in_place_index<_Ip>, std::forward<_Arg>(__arg)) {}

  template <size_t _Ip,
            class... _Args,
            class = enable_if_t<(_Ip < sizeof...(_Types)), int>,
            class _Tp = variant_alternative_t<_Ip, variant<_Types...>>,
            enable_if_t<is_constructible_v<_Tp, _Args...>, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit constexpr variant(in_place_index_t<_Ip>, _Args&&... __args) noexcept(
      is_nothrow_constructible_v<_Tp, _Args...>)
      : __impl_(in_place_index<_Ip>, std::forward<_Args>(__args)...) {}

  template < size_t _Ip,
             class _Up,
             class... _Args,
             enable_if_t<(_Ip < sizeof...(_Types)), int> = 0,
             class _Tp = variant_alternative_t<_Ip, variant<_Types...>>,
             enable_if_t<is_constructible_v<_Tp, initializer_list<_Up>&, _Args...>, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit constexpr variant(
      in_place_index_t<_Ip>,
      initializer_list<_Up> __il,
      _Args&&... __args) noexcept(is_nothrow_constructible_v<_Tp, initializer_list<_Up>&, _Args...>)
      : __impl_(in_place_index<_Ip>, __il, std::forward<_Args>(__args)...) {}

  template < class _Tp,
             class... _Args,
             size_t _Ip = __find_detail::__find_unambiguous_index_sfinae<_Tp, _Types...>::value,
             enable_if_t<is_constructible_v<_Tp, _Args...>, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit constexpr variant(in_place_type_t<_Tp>, _Args&&... __args) noexcept(
      is_nothrow_constructible_v<_Tp, _Args...>)
      : __impl_(in_place_index<_Ip>, std::forward<_Args>(__args)...) {}

  template < class _Tp,
             class _Up,
             class... _Args,
             size_t _Ip = __find_detail::__find_unambiguous_index_sfinae<_Tp, _Types...>::value,
             enable_if_t<is_constructible_v<_Tp, initializer_list<_Up>&, _Args...>, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit constexpr variant(
      in_place_type_t<_Tp>,
      initializer_list<_Up> __il,
      _Args&&... __args) noexcept(is_nothrow_constructible_v<_Tp, initializer_list< _Up>&, _Args...>)
      : __impl_(in_place_index<_Ip>, __il, std::forward<_Args>(__args)...) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) ~variant() = default;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr variant& operator=(const variant&) = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr variant& operator=(variant&&) = default;

  template < class _Arg,
             enable_if_t<!is_same_v<__remove_cvref_t<_Arg>, variant>, int> = 0,
             class _Tp = __variant_detail::__best_match_t<_Arg, _Types...>,
             size_t _Ip = __find_detail::__find_unambiguous_index_sfinae<_Tp, _Types...>::value,
             enable_if_t<is_assignable_v<_Tp&, _Arg> && is_constructible_v<_Tp, _Arg>, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) variant&
  operator=(_Arg&& __arg) noexcept(is_nothrow_assignable_v<_Tp&, _Arg> && is_nothrow_constructible_v<_Tp, _Arg>) {
    __impl_.template __assign<_Ip>(std::forward<_Arg>(__arg));
    return *this;
  }

  template < size_t _Ip,
             class... _Args,
             enable_if_t<(_Ip < sizeof...(_Types)), int> = 0,
             class _Tp = variant_alternative_t<_Ip, variant<_Types...>>,
             enable_if_t<is_constructible_v<_Tp, _Args...>, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp& emplace(_Args&&... __args) {
    return __impl_.template __emplace<_Ip>(std::forward<_Args>(__args)...);
  }

  template < size_t _Ip,
             class _Up,
             class... _Args,
             enable_if_t<(_Ip < sizeof...(_Types)), int> = 0,
             class _Tp = variant_alternative_t<_Ip, variant<_Types...>>,
             enable_if_t<is_constructible_v<_Tp, initializer_list<_Up>&, _Args...>, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp& emplace(initializer_list<_Up> __il, _Args&&... __args) {
    return __impl_.template __emplace<_Ip>(__il, std::forward<_Args>(__args)...);
  }

  template < class _Tp,
             class... _Args,
             size_t _Ip = __find_detail::__find_unambiguous_index_sfinae<_Tp, _Types...>::value,
             enable_if_t<is_constructible_v<_Tp, _Args...>, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp& emplace(_Args&&... __args) {
    return __impl_.template __emplace<_Ip>(std::forward<_Args>(__args)...);
  }

  template < class _Tp,
             class _Up,
             class... _Args,
             size_t _Ip = __find_detail::__find_unambiguous_index_sfinae<_Tp, _Types...>::value,
             enable_if_t<is_constructible_v<_Tp, initializer_list<_Up>&, _Args...>, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp& emplace(initializer_list<_Up> __il, _Args&&... __args) {
    return __impl_.template __emplace<_Ip>(__il, std::forward<_Args>(__args)...);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool valueless_by_exception() const noexcept {
    return __impl_.valueless_by_exception();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr size_t index() const noexcept { return __impl_.index(); }

  template < bool _Dummy = true,
             enable_if_t< __all<(__dependent_type<is_move_constructible<_Types>, _Dummy>::value &&
                                 __dependent_type<is_swappable<_Types>, _Dummy>::value)...>::value,
                          int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void swap(variant& __that) noexcept(
      __all<(is_nothrow_move_constructible_v<_Types> && is_nothrow_swappable_v<_Types>)...>::value) {
    __impl_.__swap(__that.__impl_);
  }
# 1318 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\variant" 3
private:
  __variant_detail::__impl<_Types...> __impl_;

  friend struct __variant_detail::__access::__variant;
  friend struct __variant_detail::__visitation::__variant;
};

template <size_t _Ip, class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool __holds_alternative(const variant<_Types...>& __v) noexcept {
  return __v.index() == _Ip;
}

template <class _Tp, class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool holds_alternative(const variant<_Types...>& __v) noexcept {
  return std::__holds_alternative<__find_exactly_one_t<_Tp, _Types...>::value>(__v);
}

template <size_t _Ip, class _Vp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr auto&& __generic_get(_Vp&& __v) {
  using __variant_detail::__access::__variant;
  if (!std::__holds_alternative<_Ip>(__v)) {
    __throw_bad_variant_access();
  }
  return __variant::__get_alt<_Ip>(std::forward<_Vp>(__v)).__value;
}

template <size_t _Ip, class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
                                                  constexpr variant_alternative_t<_Ip, variant<_Types...>>&
    get(variant<_Types...>& __v) {
  static_assert(_Ip < sizeof...(_Types));
  static_assert(!is_void_v<variant_alternative_t<_Ip, variant<_Types...>>>);
  return std::__generic_get<_Ip>(__v);
}

template <size_t _Ip, class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
                                                  constexpr variant_alternative_t<_Ip, variant<_Types...>>&&
    get(variant<_Types...>&& __v) {
  static_assert(_Ip < sizeof...(_Types));
  static_assert(!is_void_v<variant_alternative_t<_Ip, variant<_Types...>>>);
  return std::__generic_get<_Ip>(std::move(__v));
}

template <size_t _Ip, class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
                                                  constexpr const variant_alternative_t<_Ip, variant<_Types...>>&
    get(const variant<_Types...>& __v) {
  static_assert(_Ip < sizeof...(_Types));
  static_assert(!is_void_v<variant_alternative_t<_Ip, variant<_Types...>>>);
  return std::__generic_get<_Ip>(__v);
}

template <size_t _Ip, class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
                                                  constexpr const variant_alternative_t<_Ip, variant<_Types...>>&&
    get(const variant<_Types...>&& __v) {
  static_assert(_Ip < sizeof...(_Types));
  static_assert(!is_void_v<variant_alternative_t<_Ip, variant<_Types...>>>);
  return std::__generic_get<_Ip>(std::move(__v));
}

template <class _Tp, class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Tp& get(variant<_Types...>& __v) {
  static_assert(!is_void_v<_Tp>);
  return std::get<__find_exactly_one_t<_Tp, _Types...>::value>(__v);
}

template <class _Tp, class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Tp&& get(variant<_Types...>&& __v) {
  static_assert(!is_void_v<_Tp>);
  return std::get<__find_exactly_one_t<_Tp, _Types...>::value>(std::move(__v));
}

template <class _Tp, class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const _Tp&
get(const variant<_Types...>& __v) {
  static_assert(!is_void_v<_Tp>);
  return std::get<__find_exactly_one_t<_Tp, _Types...>::value>(__v);
}

template <class _Tp, class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const _Tp&&
get(const variant<_Types...>&& __v) {
  static_assert(!is_void_v<_Tp>);
  return std::get<__find_exactly_one_t<_Tp, _Types...>::value>(std::move(__v));
}

template <size_t _Ip, class _Vp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr auto* __generic_get_if(_Vp* __v) noexcept {
  using __variant_detail::__access::__variant;
  return __v && std::__holds_alternative<_Ip>(*__v) ? std::addressof(__variant::__get_alt<_Ip>(*__v).__value) : nullptr;
}

template <size_t _Ip, class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr add_pointer_t<variant_alternative_t<_Ip, variant<_Types...>>>
get_if(variant<_Types...>* __v) noexcept {
  static_assert(_Ip < sizeof...(_Types));
  static_assert(!is_void_v<variant_alternative_t<_Ip, variant<_Types...>>>);
  return std::__generic_get_if<_Ip>(__v);
}

template <size_t _Ip, class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr add_pointer_t<const variant_alternative_t<_Ip, variant<_Types...>>>
get_if(const variant<_Types...>* __v) noexcept {
  static_assert(_Ip < sizeof...(_Types));
  static_assert(!is_void_v<variant_alternative_t<_Ip, variant<_Types...>>>);
  return std::__generic_get_if<_Ip>(__v);
}

template <class _Tp, class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr add_pointer_t<_Tp> get_if(variant<_Types...>* __v) noexcept {
  static_assert(!is_void_v<_Tp>);
  return std::get_if<__find_exactly_one_t<_Tp, _Types...>::value>(__v);
}

template <class _Tp, class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr add_pointer_t<const _Tp> get_if(const variant<_Types...>* __v) noexcept {
  static_assert(!is_void_v<_Tp>);
  return std::get_if<__find_exactly_one_t<_Tp, _Types...>::value>(__v);
}

template <class _Operator>
struct __convert_to_bool {
  template <class _T1, class _T2>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool operator()(_T1&& __t1, _T2&& __t2) const {
    static_assert(is_convertible<decltype(_Operator{}(std::forward<_T1>(__t1), std::forward<_T2>(__t2))), bool>::value,
                  "the relational operator does not return a type which is implicitly convertible to bool");
    return _Operator{}(std::forward<_T1>(__t1), std::forward<_T2>(__t2));
  }
};

template <class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool operator==(const variant<_Types...>& __lhs, const variant<_Types...>& __rhs) {
  using __variant_detail::__visitation::__variant;
  if (__lhs.index() != __rhs.index())
    return false;
  if (__lhs.valueless_by_exception())
    return true;
  return __variant::__visit_value_at(__lhs.index(), __convert_to_bool<equal_to<>>{}, __lhs, __rhs);
}
# 1482 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\variant" 3
template <class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool operator!=(const variant<_Types...>& __lhs, const variant<_Types...>& __rhs) {
  using __variant_detail::__visitation::__variant;
  if (__lhs.index() != __rhs.index())
    return true;
  if (__lhs.valueless_by_exception())
    return false;
  return __variant::__visit_value_at(__lhs.index(), __convert_to_bool<not_equal_to<>>{}, __lhs, __rhs);
}

template <class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool operator<(const variant<_Types...>& __lhs, const variant<_Types...>& __rhs) {
  using __variant_detail::__visitation::__variant;
  if (__rhs.valueless_by_exception())
    return false;
  if (__lhs.valueless_by_exception())
    return true;
  if (__lhs.index() < __rhs.index())
    return true;
  if (__lhs.index() > __rhs.index())
    return false;
  return __variant::__visit_value_at(__lhs.index(), __convert_to_bool<less<>>{}, __lhs, __rhs);
}

template <class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool operator>(const variant<_Types...>& __lhs, const variant<_Types...>& __rhs) {
  using __variant_detail::__visitation::__variant;
  if (__lhs.valueless_by_exception())
    return false;
  if (__rhs.valueless_by_exception())
    return true;
  if (__lhs.index() > __rhs.index())
    return true;
  if (__lhs.index() < __rhs.index())
    return false;
  return __variant::__visit_value_at(__lhs.index(), __convert_to_bool<greater<>>{}, __lhs, __rhs);
}

template <class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool operator<=(const variant<_Types...>& __lhs, const variant<_Types...>& __rhs) {
  using __variant_detail::__visitation::__variant;
  if (__lhs.valueless_by_exception())
    return true;
  if (__rhs.valueless_by_exception())
    return false;
  if (__lhs.index() < __rhs.index())
    return true;
  if (__lhs.index() > __rhs.index())
    return false;
  return __variant::__visit_value_at(__lhs.index(), __convert_to_bool<less_equal<>>{}, __lhs, __rhs);
}

template <class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool operator>=(const variant<_Types...>& __lhs, const variant<_Types...>& __rhs) {
  using __variant_detail::__visitation::__variant;
  if (__rhs.valueless_by_exception())
    return true;
  if (__lhs.valueless_by_exception())
    return false;
  if (__lhs.index() > __rhs.index())
    return true;
  if (__lhs.index() < __rhs.index())
    return false;
  return __variant::__visit_value_at(__lhs.index(), __convert_to_bool<greater_equal<>>{}, __lhs, __rhs);
}

template <class... _Vs>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr void __throw_if_valueless(_Vs&&... __vs) {
  const bool __valueless = (... || std::__as_variant(__vs).valueless_by_exception());
  if (__valueless) {
    __throw_bad_variant_access();
  }
}

template < class _Visitor, class... _Vs, typename>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr decltype(auto)
visit(_Visitor&& __visitor, _Vs&&... __vs) {
  using __variant_detail::__visitation::__variant;
  std::__throw_if_valueless(std::forward<_Vs>(__vs)...);
  return __variant::__visit_value(std::forward<_Visitor>(__visitor), std::forward<_Vs>(__vs)...);
}
# 1574 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\variant" 3
template <class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) auto
swap(variant<_Types...>& __lhs, variant<_Types...>& __rhs) noexcept(noexcept(__lhs.swap(__rhs)))
    -> decltype(__lhs.swap(__rhs)) {
  return __lhs.swap(__rhs);
}

template <class... _Types>
struct hash< __enable_hash_helper<variant<_Types...>, remove_const_t<_Types>...>> {
  using argument_type = variant<_Types...>;
  using result_type = size_t;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) result_type operator()(const argument_type& __v) const {
    using __variant_detail::__visitation::__variant;
    size_t __res =
        __v.valueless_by_exception()
            ? 299792458
            : __variant::__visit_alt(
                  [](const auto& __alt) {
                    using __alt_type = __remove_cvref_t<decltype(__alt)>;
                    using __value_type = remove_const_t< typename __alt_type::__value_type>;
                    return hash<__value_type>{}(__alt.__value);
                  },
                  __v);
    return std::__hash_combine(__res, hash<size_t>{}(__v.index()));
  }
};




template <size_t _Ip, class _Vp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr auto&& __unchecked_get(_Vp&& __v) noexcept {
  using __variant_detail::__access::__variant;
  return __variant::__get_alt<_Ip>(std::forward<_Vp>(__v)).__value;
}

template <class _Tp, class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr auto&& __unchecked_get(const variant<_Types...>& __v) noexcept {
  return std::__unchecked_get<__find_exactly_one_t<_Tp, _Types...>::value>(__v);
}

template <class _Tp, class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr auto&& __unchecked_get(variant<_Types...>& __v) noexcept {
  return std::__unchecked_get<__find_exactly_one_t<_Tp, _Types...>::value>(__v);
}



}}
# 32 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/common_iterator.h" 2 3
# 35 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/common_iterator.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 39 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/common_iterator.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 295 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/common_iterator.h" 3
}}
# 684 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\iterator" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/counted_iterator.h" 1 3
# 21 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/counted_iterator.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/default_sentinel.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/default_sentinel.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 28 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/default_sentinel.h" 3
}}
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/counted_iterator.h" 2 3
# 35 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/counted_iterator.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 39 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/counted_iterator.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 285 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/counted_iterator.h" 3
}}
# 686 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\iterator" 2 3




# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/erase_if_container.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/erase_if_container.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 21 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/erase_if_container.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Container, class _Predicate>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) typename _Container::size_type __libcpp_erase_if_container(_Container& __c, _Predicate& __pred) {
  typename _Container::size_type __old_size = __c.size();

  const typename _Container::iterator __last = __c.end();
  for (typename _Container::iterator __iter = __c.begin(); __iter != __last;) {
    if (__pred(*__iter))
      __iter = __c.erase(__iter);
    else
      ++__iter;
  }

  return __old_size - __c.size();
}

}}
# 691 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\iterator" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/front_insert_iterator.h" 1 3
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/front_insert_iterator.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 26 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/front_insert_iterator.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

#pragma GCC diagnostic push
# 29 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/front_insert_iterator.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 29 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/front_insert_iterator.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template <class _Container>
class front_insert_iterator

    : public iterator<output_iterator_tag, void, void, void, void>

{
#pragma GCC diagnostic pop

protected:
  _Container* container;

public:
  typedef output_iterator_tag iterator_category;
  typedef void value_type;



  typedef void difference_type;

  typedef void pointer;
  typedef void reference;
  typedef _Container container_type;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit front_insert_iterator(_Container& __x)
      : container(std::addressof(__x)) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) front_insert_iterator&
  operator=(const typename _Container::value_type& __value) {
    container->push_front(__value);
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) front_insert_iterator&
  operator=(typename _Container::value_type&& __value) {
    container->push_front(std::move(__value));
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) front_insert_iterator& operator*() { return *this; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) front_insert_iterator& operator++() { return *this; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) front_insert_iterator operator++(int) { return *this; }
};
template <class... _Tag> [[maybe_unused]] front_insert_iterator(typename _Tag::__allow_ctad...)->front_insert_iterator<_Tag...>;

template <class _Container>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) front_insert_iterator<_Container>
front_inserter(_Container& __x) {
  return front_insert_iterator<_Container>(__x);
}

}}
# 692 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\iterator" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/indirectly_comparable.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/indirectly_comparable.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/projected.h" 1 3
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/projected.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 51 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/projected.h" 3
}}
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/indirectly_comparable.h" 2 3
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/indirectly_comparable.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 31 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/indirectly_comparable.h" 3
}}
# 694 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\iterator" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/insert_iterator.h" 1 3
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/insert_iterator.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 27 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/insert_iterator.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {





template <class _Container>
using __insert_iterator_iter_t = typename _Container::iterator;


#pragma GCC diagnostic push
# 38 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/insert_iterator.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 38 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/insert_iterator.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template <class _Container>
class insert_iterator

    : public iterator<output_iterator_tag, void, void, void, void>

{
#pragma GCC diagnostic pop

protected:
  _Container* container;
  __insert_iterator_iter_t<_Container> iter;

public:
  typedef output_iterator_tag iterator_category;
  typedef void value_type;



  typedef void difference_type;

  typedef void pointer;
  typedef void reference;
  typedef _Container container_type;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
  insert_iterator(_Container& __x, __insert_iterator_iter_t<_Container> __i)
      : container(std::addressof(__x)), iter(__i) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) insert_iterator&
  operator=(const typename _Container::value_type& __value) {
    iter = container->insert(iter, __value);
    ++iter;
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) insert_iterator&
  operator=(typename _Container::value_type&& __value) {
    iter = container->insert(iter, std::move(__value));
    ++iter;
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) insert_iterator& operator*() { return *this; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) insert_iterator& operator++() { return *this; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) insert_iterator& operator++(int) { return *this; }
};

template <class _Container>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) insert_iterator<_Container>
inserter(_Container& __x, __insert_iterator_iter_t<_Container> __i) {
  return insert_iterator<_Container>(__x, __i);
}

}}
# 695 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\iterator" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/istream_iterator.h" 1 3
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/istream_iterator.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

#pragma GCC diagnostic push
# 28 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/istream_iterator.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 28 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/istream_iterator.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template <class _Tp, class _CharT = char, class _Traits = char_traits<_CharT>, class _Distance = ptrdiff_t>
class istream_iterator

    : public iterator<input_iterator_tag, _Tp, _Distance, const _Tp*, const _Tp&>

{
#pragma GCC diagnostic pop

public:
  typedef input_iterator_tag iterator_category;
  typedef _Tp value_type;
  typedef _Distance difference_type;
  typedef const _Tp* pointer;
  typedef const _Tp& reference;
  typedef _CharT char_type;
  typedef _Traits traits_type;
  typedef basic_istream<_CharT, _Traits> istream_type;

private:
  istream_type* __in_stream_;
  _Tp __value_;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr istream_iterator() : __in_stream_(nullptr), __value_() {}



  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) istream_iterator(istream_type& __s) : __in_stream_(std::addressof(__s)) {
    if (!(*__in_stream_ >> __value_))
      __in_stream_ = nullptr;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const _Tp& operator*() const { return __value_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const _Tp* operator->() const { return std::addressof((operator*())); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) istream_iterator& operator++() {
    if (!(*__in_stream_ >> __value_))
      __in_stream_ = nullptr;
    return *this;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) istream_iterator operator++(int) {
    istream_iterator __t(*this);
    ++(*this);
    return __t;
  }

  template <class _Up, class _CharU, class _TraitsU, class _DistanceU>
  friend __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator==(const istream_iterator<_Up, _CharU, _TraitsU, _DistanceU>& __x,
                                               const istream_iterator<_Up, _CharU, _TraitsU, _DistanceU>& __y);






};

template <class _Tp, class _CharT, class _Traits, class _Distance>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator==(const istream_iterator<_Tp, _CharT, _Traits, _Distance>& __x,
                                             const istream_iterator<_Tp, _CharT, _Traits, _Distance>& __y) {
  return __x.__in_stream_ == __y.__in_stream_;
}


template <class _Tp, class _CharT, class _Traits, class _Distance>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator!=(const istream_iterator<_Tp, _CharT, _Traits, _Distance>& __x,
                                             const istream_iterator<_Tp, _CharT, _Traits, _Distance>& __y) {
  return !(__x == __y);
}


}}
# 696 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\iterator" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/istreambuf_iterator.h" 1 3
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/istreambuf_iterator.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

#pragma GCC diagnostic push
# 26 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/istreambuf_iterator.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 26 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/istreambuf_iterator.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template <class _CharT, class _Traits>
class istreambuf_iterator

    : public iterator<input_iterator_tag, _CharT, typename _Traits::off_type, _CharT*, _CharT>

{
#pragma GCC diagnostic pop

public:
  typedef input_iterator_tag iterator_category;
  typedef _CharT value_type;
  typedef typename _Traits::off_type difference_type;
  typedef _CharT* pointer;
  typedef _CharT reference;
  typedef _CharT char_type;
  typedef _Traits traits_type;
  typedef typename _Traits::int_type int_type;
  typedef basic_streambuf<_CharT, _Traits> streambuf_type;
  typedef basic_istream<_CharT, _Traits> istream_type;

private:
  mutable streambuf_type* __sbuf_;

  class __proxy {
    char_type __keep_;
    streambuf_type* __sbuf_;
    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit __proxy(char_type __c, streambuf_type* __s) : __keep_(__c), __sbuf_(__s) {}
    friend class istreambuf_iterator;

  public:
    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) char_type operator*() const { return __keep_; }
  };

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool __test_for_eof() const {
    if (__sbuf_ && traits_type::eq_int_type(__sbuf_->sgetc(), traits_type::eof()))
      __sbuf_ = nullptr;
    return __sbuf_ == nullptr;
  }

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr istreambuf_iterator() noexcept : __sbuf_(nullptr) {}



  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) istreambuf_iterator(istream_type& __s) noexcept : __sbuf_(__s.rdbuf()) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) istreambuf_iterator(streambuf_type* __s) noexcept : __sbuf_(__s) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) istreambuf_iterator(const __proxy& __p) noexcept : __sbuf_(__p.__sbuf_) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) char_type operator*() const { return static_cast<char_type>(__sbuf_->sgetc()); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) istreambuf_iterator& operator++() {
    __sbuf_->sbumpc();
    return *this;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __proxy operator++(int) { return __proxy(__sbuf_->sbumpc(), __sbuf_); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool equal(const istreambuf_iterator& __b) const {
    return __test_for_eof() == __b.__test_for_eof();
  }






};

template <class _CharT, class _Traits>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
operator==(const istreambuf_iterator<_CharT, _Traits>& __a, const istreambuf_iterator<_CharT, _Traits>& __b) {
  return __a.equal(__b);
}


template <class _CharT, class _Traits>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
operator!=(const istreambuf_iterator<_CharT, _Traits>& __a, const istreambuf_iterator<_CharT, _Traits>& __b) {
  return !__a.equal(__b);
}


}}
# 697 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\iterator" 2 3




# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/mergeable.h" 1 3
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/mergeable.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__functional/ranges_operations.h" 1 3
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__functional/ranges_operations.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 105 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__functional/ranges_operations.h" 3
}}
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/mergeable.h" 2 3
# 21 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/mergeable.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 40 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/mergeable.h" 3
}}
# 702 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\iterator" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/move_iterator.h" 1 3
# 25 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/move_iterator.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/move_sentinel.h" 1 3
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/move_sentinel.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/move_sentinel.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 57 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/move_sentinel.h" 3
}}
# 26 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/move_iterator.h" 2 3
# 40 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/move_iterator.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 44 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/move_iterator.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 66 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/move_iterator.h" 3
template <class _Iter>
class move_iterator



{
# 88 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/move_iterator.h" 3
public:
# 98 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/move_iterator.h" 3
  typedef _Iter iterator_type;
  typedef _If< __has_random_access_iterator_category<_Iter>::value,
               random_access_iterator_tag,
               typename iterator_traits<_Iter>::iterator_category >
      iterator_category;
  typedef typename iterator_traits<iterator_type>::value_type value_type;
  typedef typename iterator_traits<iterator_type>::difference_type difference_type;
  typedef iterator_type pointer;

  typedef typename iterator_traits<iterator_type>::reference __reference;
  typedef typename conditional< is_reference<__reference>::value,
                                __libcpp_remove_reference_t<__reference>&&,
                                __reference >::type reference;


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr explicit move_iterator(_Iter __i) : __current_(std::move(__i)) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr move_iterator& operator++() {
    ++__current_;
    return *this;
  }

                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pointer operator->() const {
    return __current_;
  }
# 158 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/move_iterator.h" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr move_iterator() : __current_() {}

  template <class _Up,
            class = __enable_if_t< !is_same<_Up, _Iter>::value && is_convertible<const _Up&, _Iter>::value > >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr move_iterator(const move_iterator<_Up>& __u)
      : __current_(__u.base()) {}

  template <class _Up,
            class = __enable_if_t< !is_same<_Up, _Iter>::value && is_convertible<const _Up&, _Iter>::value &&
                                   is_assignable<_Iter&, const _Up&>::value > >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr move_iterator& operator=(const move_iterator<_Up>& __u) {
    __current_ = __u.base();
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Iter base() const { return __current_; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr reference operator*() const {
    return static_cast<reference>(*__current_);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr reference operator[](difference_type __n) const {
    return static_cast<reference>(__current_[__n]);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr move_iterator operator++(int) {
    move_iterator __tmp(*this);
    ++__current_;
    return __tmp;
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr move_iterator& operator--() {
    --__current_;
    return *this;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr move_iterator operator--(int) {
    move_iterator __tmp(*this);
    --__current_;
    return __tmp;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr move_iterator operator+(difference_type __n) const {
    return move_iterator(__current_ + __n);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr move_iterator& operator+=(difference_type __n) {
    __current_ += __n;
    return *this;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr move_iterator operator-(difference_type __n) const {
    return move_iterator(__current_ - __n);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr move_iterator& operator-=(difference_type __n) {
    __current_ -= __n;
    return *this;
  }
# 246 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/move_iterator.h" 3
private:
  template <class _It2>
  friend class move_iterator;

  _Iter __current_;
};
template <class... _Tag> [[maybe_unused]] move_iterator(typename _Tag::__allow_ctad...)->move_iterator<_Tag...>;

template <class _Iter1, class _Iter2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool
operator==(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y) {
  return __x.base() == __y.base();
}


template <class _Iter1, class _Iter2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool
operator!=(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y) {
  return __x.base() != __y.base();
}


template <class _Iter1, class _Iter2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool
operator<(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y) {
  return __x.base() < __y.base();
}

template <class _Iter1, class _Iter2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool
operator>(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y) {
  return __x.base() > __y.base();
}

template <class _Iter1, class _Iter2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool
operator<=(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y) {
  return __x.base() <= __y.base();
}

template <class _Iter1, class _Iter2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool
operator>=(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y) {
  return __x.base() >= __y.base();
}
# 302 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/move_iterator.h" 3
template <class _Iter1, class _Iter2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr auto
operator-(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y) -> decltype(__x.base() - __y.base()) {
  return __x.base() - __y.base();
}
# 326 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/move_iterator.h" 3
template <class _Iter>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr move_iterator<_Iter>
operator+(typename move_iterator<_Iter>::difference_type __n, const move_iterator<_Iter>& __x) {
  return move_iterator<_Iter>(__x.base() + __n);
}


template <class _Iter>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr move_iterator<_Iter> make_move_iterator(_Iter __i) {
  return move_iterator<_Iter>(std::move(__i));
}

}}
# 703 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\iterator" 2 3


# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/ostream_iterator.h" 1 3
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/ostream_iterator.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

#pragma GCC diagnostic push
# 27 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/ostream_iterator.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 27 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/ostream_iterator.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template <class _Tp, class _CharT = char, class _Traits = char_traits<_CharT> >
class ostream_iterator

    : public iterator<output_iterator_tag, void, void, void, void>

{
#pragma GCC diagnostic pop

public:
  typedef output_iterator_tag iterator_category;
  typedef void value_type;



  typedef void difference_type;

  typedef void pointer;
  typedef void reference;
  typedef _CharT char_type;
  typedef _Traits traits_type;
  typedef basic_ostream<_CharT, _Traits> ostream_type;

private:
  ostream_type* __out_stream_;
  const char_type* __delim_;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) ostream_iterator(ostream_type& __s) noexcept
      : __out_stream_(std::addressof(__s)),
        __delim_(nullptr) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) ostream_iterator(ostream_type& __s, const _CharT* __delimiter) noexcept
      : __out_stream_(std::addressof(__s)),
        __delim_(__delimiter) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) ostream_iterator& operator=(const _Tp& __value) {
    *__out_stream_ << __value;
    if (__delim_)
      *__out_stream_ << __delim_;
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) ostream_iterator& operator*() { return *this; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) ostream_iterator& operator++() { return *this; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) ostream_iterator& operator++(int) { return *this; }
};

}}
# 706 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\iterator" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/ostreambuf_iterator.h" 1 3
# 21 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/ostreambuf_iterator.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

#pragma GCC diagnostic push
# 25 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/ostreambuf_iterator.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 25 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/ostreambuf_iterator.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template <class _CharT, class _Traits>
class ostreambuf_iterator

    : public iterator<output_iterator_tag, void, void, void, void>

{
#pragma GCC diagnostic pop

public:
  typedef output_iterator_tag iterator_category;
  typedef void value_type;



  typedef void difference_type;

  typedef void pointer;
  typedef void reference;
  typedef _CharT char_type;
  typedef _Traits traits_type;
  typedef basic_streambuf<_CharT, _Traits> streambuf_type;
  typedef basic_ostream<_CharT, _Traits> ostream_type;

private:
  streambuf_type* __sbuf_;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) ostreambuf_iterator(ostream_type& __s) noexcept : __sbuf_(__s.rdbuf()) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) ostreambuf_iterator(streambuf_type* __s) noexcept : __sbuf_(__s) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) ostreambuf_iterator& operator=(_CharT __c) {
    if (__sbuf_ && traits_type::eq_int_type(__sbuf_->sputc(__c), traits_type::eof()))
      __sbuf_ = nullptr;
    return *this;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) ostreambuf_iterator& operator*() { return *this; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) ostreambuf_iterator& operator++() { return *this; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) ostreambuf_iterator& operator++(int) { return *this; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool failed() const noexcept { return __sbuf_ == nullptr; }

  template <class _Ch, class _Tr>
  friend __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) ostreambuf_iterator<_Ch, _Tr> __pad_and_output(
      ostreambuf_iterator<_Ch, _Tr> __s, const _Ch* __ob, const _Ch* __op, const _Ch* __oe, ios_base& __iob, _Ch __fl);
};

}}
# 707 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\iterator" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/permutable.h" 1 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/permutable.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 32 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/permutable.h" 3
}}
# 708 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\iterator" 2 3






# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/sortable.h" 1 3
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/sortable.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 33 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/sortable.h" 3
}}
# 715 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\iterator" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/unreachable_sentinel.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/unreachable_sentinel.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 35 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/unreachable_sentinel.h" 3
}}
# 716 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\iterator" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/wrap_iter.h" 1 3
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/wrap_iter.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Iter>
class __wrap_iter {
public:
  typedef _Iter iterator_type;
  typedef typename iterator_traits<iterator_type>::value_type value_type;
  typedef typename iterator_traits<iterator_type>::difference_type difference_type;
  typedef typename iterator_traits<iterator_type>::pointer pointer;
  typedef typename iterator_traits<iterator_type>::reference reference;
  typedef typename iterator_traits<iterator_type>::iterator_category iterator_category;




private:
  iterator_type __i_;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr __wrap_iter() noexcept : __i_() {}
  template <class _Up, __enable_if_t<is_convertible<_Up, iterator_type>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr __wrap_iter(const __wrap_iter<_Up>& __u) noexcept
      : __i_(__u.base()) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr reference operator*() const noexcept { return *__i_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pointer operator->() const noexcept {
    return std::__to_address(__i_);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr __wrap_iter& operator++() noexcept {
    ++__i_;
    return *this;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr __wrap_iter operator++(int) noexcept {
    __wrap_iter __tmp(*this);
    ++(*this);
    return __tmp;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr __wrap_iter& operator--() noexcept {
    --__i_;
    return *this;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr __wrap_iter operator--(int) noexcept {
    __wrap_iter __tmp(*this);
    --(*this);
    return __tmp;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr __wrap_iter operator+(difference_type __n) const noexcept {
    __wrap_iter __w(*this);
    __w += __n;
    return __w;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr __wrap_iter& operator+=(difference_type __n) noexcept {
    __i_ += __n;
    return *this;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr __wrap_iter operator-(difference_type __n) const noexcept {
    return *this + (-__n);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr __wrap_iter& operator-=(difference_type __n) noexcept {
    *this += -__n;
    return *this;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr reference operator[](difference_type __n) const noexcept {
    return __i_[__n];
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr iterator_type base() const noexcept { return __i_; }

private:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr explicit __wrap_iter(iterator_type __x) noexcept : __i_(__x) {}

  template <class _Up>
  friend class __wrap_iter;
  template <class _CharT, class _Traits, class _Alloc>
  friend class basic_string;
  template <class _Tp, class _Alloc>
  friend class vector;
  template <class _Tp, size_t>
  friend class span;
};

template <class _Iter1>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool
operator==(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter1>& __y) noexcept {
  return __x.base() == __y.base();
}

template <class _Iter1, class _Iter2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool
operator==(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) noexcept {
  return __x.base() == __y.base();
}

template <class _Iter1>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool
operator<(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter1>& __y) noexcept {
  return __x.base() < __y.base();
}

template <class _Iter1, class _Iter2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool
operator<(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) noexcept {
  return __x.base() < __y.base();
}

template <class _Iter1>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool
operator!=(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter1>& __y) noexcept {
  return !(__x == __y);
}

template <class _Iter1, class _Iter2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool
operator!=(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) noexcept {
  return !(__x == __y);
}

template <class _Iter1>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool
operator>(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter1>& __y) noexcept {
  return __y < __x;
}

template <class _Iter1, class _Iter2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool
operator>(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) noexcept {
  return __y < __x;
}

template <class _Iter1>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool
operator>=(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter1>& __y) noexcept {
  return !(__x < __y);
}

template <class _Iter1, class _Iter2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool
operator>=(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) noexcept {
  return !(__x < __y);
}

template <class _Iter1>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool
operator<=(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter1>& __y) noexcept {
  return !(__y < __x);
}

template <class _Iter1, class _Iter2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool
operator<=(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) noexcept {
  return !(__y < __x);
}

template <class _Iter1, class _Iter2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr

    auto
    operator-(const __wrap_iter<_Iter1>& __x,
              const __wrap_iter<_Iter2>& __y) noexcept->decltype(__x.base() - __y.base())




{
  return __x.base() - __y.base();
}

template <class _Iter1>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr __wrap_iter<_Iter1>
operator+(typename __wrap_iter<_Iter1>::difference_type __n, __wrap_iter<_Iter1> __x) noexcept {
  __x += __n;
  return __x;
}


template <class _It>
struct __libcpp_is_contiguous_iterator<__wrap_iter<_It> > : true_type {};


template <class _It>
struct pointer_traits<__wrap_iter<_It> > {
  typedef __wrap_iter<_It> pointer;
  typedef typename pointer_traits<_It>::element_type element_type;
  typedef typename pointer_traits<_It>::difference_type difference_type;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr static element_type* to_address(pointer __w) noexcept {
    return std::__to_address(__w.base());
  }
};

}}
# 717 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\iterator" 2 3
# 729 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\iterator" 3
# 1294 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\optional" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\memory" 1 3
# 923 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\memory" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/align.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/align.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

__attribute__((__visibility__("default"))) void* align(size_t __align, size_t __sz, void*& __ptr, size_t& __space);

}}
# 924 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\memory" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/allocate_at_least.h" 1 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/allocate_at_least.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/allocator_traits.h" 1 3
# 30 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/allocator_traits.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 34 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/allocator_traits.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 44 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/allocator_traits.h" 3
template <class _Tp, class = void> struct __has_pointer : false_type {}; template <class _Tp> struct __has_pointer<_Tp, __void_t<typename _Tp::pointer > > : true_type {};
template <class _Tp,
          class _Alloc,
          class _RawAlloc = __libcpp_remove_reference_t<_Alloc>,
          bool = __has_pointer<_RawAlloc>::value>
struct __pointer {
  using type __attribute__((__nodebug__)) = typename _RawAlloc::pointer;
};
template <class _Tp, class _Alloc, class _RawAlloc>
struct __pointer<_Tp, _Alloc, _RawAlloc, false> {
  using type __attribute__((__nodebug__)) = _Tp*;
};


template <class _Tp, class = void> struct __has_const_pointer : false_type {}; template <class _Tp> struct __has_const_pointer<_Tp, __void_t<typename _Tp::const_pointer > > : true_type {};
template <class _Tp, class _Ptr, class _Alloc, bool = __has_const_pointer<_Alloc>::value>
struct __const_pointer {
  using type __attribute__((__nodebug__)) = typename _Alloc::const_pointer;
};
template <class _Tp, class _Ptr, class _Alloc>
struct __const_pointer<_Tp, _Ptr, _Alloc, false> {



  using type __attribute__((__nodebug__)) = typename pointer_traits<_Ptr>::template rebind<const _Tp>;

};


template <class _Tp, class = void> struct __has_void_pointer : false_type {}; template <class _Tp> struct __has_void_pointer<_Tp, __void_t<typename _Tp::void_pointer > > : true_type {};
template <class _Ptr, class _Alloc, bool = __has_void_pointer<_Alloc>::value>
struct __void_pointer {
  using type __attribute__((__nodebug__)) = typename _Alloc::void_pointer;
};
template <class _Ptr, class _Alloc>
struct __void_pointer<_Ptr, _Alloc, false> {



  using type __attribute__((__nodebug__)) = typename pointer_traits<_Ptr>::template rebind<void>;

};


template <class _Tp, class = void> struct __has_const_void_pointer : false_type {}; template <class _Tp> struct __has_const_void_pointer<_Tp, __void_t<typename _Tp::const_void_pointer > > : true_type {};
template <class _Ptr, class _Alloc, bool = __has_const_void_pointer<_Alloc>::value>
struct __const_void_pointer {
  using type __attribute__((__nodebug__)) = typename _Alloc::const_void_pointer;
};
template <class _Ptr, class _Alloc>
struct __const_void_pointer<_Ptr, _Alloc, false> {



  using type __attribute__((__nodebug__)) = typename pointer_traits<_Ptr>::template rebind<const void>;

};


template <class _Tp, class = void> struct __has_size_type : false_type {}; template <class _Tp> struct __has_size_type<_Tp, __void_t<typename _Tp::size_type > > : true_type {};
template <class _Alloc, class _DiffType, bool = __has_size_type<_Alloc>::value>
struct __size_type : make_unsigned<_DiffType> {};
template <class _Alloc, class _DiffType>
struct __size_type<_Alloc, _DiffType, true> {
  using type __attribute__((__nodebug__)) = typename _Alloc::size_type;
};


template <class _Tp, class = void> struct __has_alloc_traits_difference_type : false_type {}; template <class _Tp> struct __has_alloc_traits_difference_type<_Tp, __void_t<typename _Tp::difference_type > > : true_type {};
template <class _Alloc, class _Ptr, bool = __has_alloc_traits_difference_type<_Alloc>::value>
struct __alloc_traits_difference_type {
  using type __attribute__((__nodebug__)) = typename pointer_traits<_Ptr>::difference_type;
};
template <class _Alloc, class _Ptr>
struct __alloc_traits_difference_type<_Alloc, _Ptr, true> {
  using type __attribute__((__nodebug__)) = typename _Alloc::difference_type;
};


template <class _Tp, class = void> struct __has_propagate_on_container_copy_assignment : false_type {}; template <class _Tp> struct __has_propagate_on_container_copy_assignment<_Tp, __void_t<typename _Tp::propagate_on_container_copy_assignment > > : true_type {};
template <class _Alloc, bool = __has_propagate_on_container_copy_assignment<_Alloc>::value>
struct __propagate_on_container_copy_assignment : false_type {};
template <class _Alloc>
struct __propagate_on_container_copy_assignment<_Alloc, true> {
  using type __attribute__((__nodebug__)) = typename _Alloc::propagate_on_container_copy_assignment;
};


template <class _Tp, class = void> struct __has_propagate_on_container_move_assignment : false_type {}; template <class _Tp> struct __has_propagate_on_container_move_assignment<_Tp, __void_t<typename _Tp::propagate_on_container_move_assignment > > : true_type {};
template <class _Alloc, bool = __has_propagate_on_container_move_assignment<_Alloc>::value>
struct __propagate_on_container_move_assignment : false_type {};
template <class _Alloc>
struct __propagate_on_container_move_assignment<_Alloc, true> {
  using type __attribute__((__nodebug__)) = typename _Alloc::propagate_on_container_move_assignment;
};


template <class _Tp, class = void> struct __has_propagate_on_container_swap : false_type {}; template <class _Tp> struct __has_propagate_on_container_swap<_Tp, __void_t<typename _Tp::propagate_on_container_swap > > : true_type {};
template <class _Alloc, bool = __has_propagate_on_container_swap<_Alloc>::value>
struct __propagate_on_container_swap : false_type {};
template <class _Alloc>
struct __propagate_on_container_swap<_Alloc, true> {
  using type __attribute__((__nodebug__)) = typename _Alloc::propagate_on_container_swap;
};


template <class _Tp, class = void> struct __has_is_always_equal : false_type {}; template <class _Tp> struct __has_is_always_equal<_Tp, __void_t<typename _Tp::is_always_equal > > : true_type {};
template <class _Alloc, bool = __has_is_always_equal<_Alloc>::value>
struct __is_always_equal : is_empty<_Alloc> {};
template <class _Alloc>
struct __is_always_equal<_Alloc, true> {
  using type __attribute__((__nodebug__)) = typename _Alloc::is_always_equal;
};


#pragma GCC diagnostic push
# 159 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/allocator_traits.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 159 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/allocator_traits.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template <class _Tp, class _Up, class = void>
struct __has_rebind_other : false_type {};
template <class _Tp, class _Up>
struct __has_rebind_other<_Tp, _Up, __void_t<typename _Tp::template rebind<_Up>::other> > : true_type {};

template <class _Tp, class _Up, bool = __has_rebind_other<_Tp, _Up>::value>
struct __allocator_traits_rebind {
  static_assert(__has_rebind_other<_Tp, _Up>::value, "This allocator has to implement rebind");
  using type __attribute__((__nodebug__)) = typename _Tp::template rebind<_Up>::other;
};
template <template <class, class...> class _Alloc, class _Tp, class... _Args, class _Up>
struct __allocator_traits_rebind<_Alloc<_Tp, _Args...>, _Up, true> {
  using type __attribute__((__nodebug__)) = typename _Alloc<_Tp, _Args...>::template rebind<_Up>::other;
};
template <template <class, class...> class _Alloc, class _Tp, class... _Args, class _Up>
struct __allocator_traits_rebind<_Alloc<_Tp, _Args...>, _Up, false> {
  using type __attribute__((__nodebug__)) = _Alloc<_Up, _Args...>;
};
#pragma GCC diagnostic pop

template <class _Alloc, class _Tp>
using __allocator_traits_rebind_t = typename __allocator_traits_rebind<_Alloc, _Tp>::type;

#pragma GCC diagnostic push
# 183 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/allocator_traits.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 183 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/allocator_traits.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"


template <class _Alloc, class _SizeType, class _ConstVoidPtr, class = void>
struct __has_allocate_hint : false_type {};

template <class _Alloc, class _SizeType, class _ConstVoidPtr>
struct __has_allocate_hint<
    _Alloc,
    _SizeType,
    _ConstVoidPtr,
    decltype((void)std::declval<_Alloc>().allocate(std::declval<_SizeType>(), std::declval<_ConstVoidPtr>()))>
    : true_type {};


template <class, class _Alloc, class... _Args>
struct __has_construct_impl : false_type {};

template <class _Alloc, class... _Args>
struct __has_construct_impl<decltype((void)std::declval<_Alloc>().construct(std::declval<_Args>()...)),
                            _Alloc,
                            _Args...> : true_type {};

template <class _Alloc, class... _Args>
struct __has_construct : __has_construct_impl<void, _Alloc, _Args...> {};


template <class _Alloc, class _Pointer, class = void>
struct __has_destroy : false_type {};

template <class _Alloc, class _Pointer>
struct __has_destroy<_Alloc, _Pointer, decltype((void)std::declval<_Alloc>().destroy(std::declval<_Pointer>()))>
    : true_type {};


template <class _Alloc, class = void>
struct __has_max_size : false_type {};

template <class _Alloc>
struct __has_max_size<_Alloc, decltype((void)std::declval<_Alloc&>().max_size())> : true_type {};


template <class _Alloc, class = void>
struct __has_select_on_container_copy_construction : false_type {};

template <class _Alloc>
struct __has_select_on_container_copy_construction<
    _Alloc,
    decltype((void)std::declval<_Alloc>().select_on_container_copy_construction())> : true_type {};

#pragma GCC diagnostic pop
# 246 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/allocator_traits.h" 3
template <class _Alloc>
struct allocator_traits {
  using allocator_type = _Alloc;
  using value_type = typename allocator_type::value_type;
  using pointer = typename __pointer<value_type, allocator_type>::type;
  using const_pointer = typename __const_pointer<value_type, pointer, allocator_type>::type;
  using void_pointer = typename __void_pointer<pointer, allocator_type>::type;
  using const_void_pointer = typename __const_void_pointer<pointer, allocator_type>::type;
  using difference_type = typename __alloc_traits_difference_type<allocator_type, pointer>::type;
  using size_type = typename __size_type<allocator_type, difference_type>::type;
  using propagate_on_container_copy_assignment =
      typename __propagate_on_container_copy_assignment<allocator_type>::type;
  using propagate_on_container_move_assignment =
      typename __propagate_on_container_move_assignment<allocator_type>::type;
  using propagate_on_container_swap = typename __propagate_on_container_swap<allocator_type>::type;
  using is_always_equal = typename __is_always_equal<allocator_type>::type;


  template <class _Tp>
  using rebind_alloc = __allocator_traits_rebind_t<allocator_type, _Tp>;
  template <class _Tp>
  using rebind_traits = allocator_traits<rebind_alloc<_Tp> >;
# 279 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/allocator_traits.h" 3
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static pointer
  allocate(allocator_type& __a, size_type __n) {
    return __a.allocate(__n);
  }

  template <class _Ap = _Alloc, class = __enable_if_t<__has_allocate_hint<_Ap, size_type, const_void_pointer>::value> >
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static pointer
  allocate(allocator_type& __a, size_type __n, const_void_pointer __hint) {
#pragma GCC diagnostic push
# 287 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/allocator_traits.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 287 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/allocator_traits.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    return __a.allocate(__n, __hint);
#pragma GCC diagnostic pop
  }
  template <class _Ap = _Alloc,
            class = void,
            class = __enable_if_t<!__has_allocate_hint<_Ap, size_type, const_void_pointer>::value> >
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static pointer
  allocate(allocator_type& __a, size_type __n, const_void_pointer) {
    return __a.allocate(__n);
  }
# 311 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/allocator_traits.h" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static void
  deallocate(allocator_type& __a, pointer __p, size_type __n) noexcept {
    __a.deallocate(__p, __n);
  }

  template <class _Tp, class... _Args, class = __enable_if_t<__has_construct<allocator_type, _Tp*, _Args...>::value> >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static void
  construct(allocator_type& __a, _Tp* __p, _Args&&... __args) {
#pragma GCC diagnostic push
# 319 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/allocator_traits.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 319 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/allocator_traits.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    __a.construct(__p, std::forward<_Args>(__args)...);
#pragma GCC diagnostic pop
  }
  template <class _Tp,
            class... _Args,
            class = void,
            class = __enable_if_t<!__has_construct<allocator_type, _Tp*, _Args...>::value> >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static void
  construct(allocator_type&, _Tp* __p, _Args&&... __args) {
    std::__construct_at(__p, std::forward<_Args>(__args)...);
  }

  template <class _Tp, class = __enable_if_t<__has_destroy<allocator_type, _Tp*>::value> >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static void destroy(allocator_type& __a, _Tp* __p) {
#pragma GCC diagnostic push
# 334 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/allocator_traits.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 334 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/allocator_traits.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    __a.destroy(__p);
#pragma GCC diagnostic pop
  }
  template <class _Tp, class = void, class = __enable_if_t<!__has_destroy<allocator_type, _Tp*>::value> >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static void destroy(allocator_type&, _Tp* __p) {
    std::__destroy_at(__p);
  }

  template <class _Ap = _Alloc, class = __enable_if_t<__has_max_size<const _Ap>::value> >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static size_type max_size(const allocator_type& __a) noexcept {
#pragma GCC diagnostic push
# 345 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/allocator_traits.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 345 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/allocator_traits.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    return __a.max_size();
#pragma GCC diagnostic pop
  }
  template <class _Ap = _Alloc, class = void, class = __enable_if_t<!__has_max_size<const _Ap>::value> >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static size_type max_size(const allocator_type&) noexcept {
    return numeric_limits<size_type>::max() / sizeof(value_type);
  }

  template <class _Ap = _Alloc, class = __enable_if_t<__has_select_on_container_copy_construction<const _Ap>::value> >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static allocator_type
  select_on_container_copy_construction(const allocator_type& __a) {
    return __a.select_on_container_copy_construction();
  }
  template <class _Ap = _Alloc,
            class = void,
            class = __enable_if_t<!__has_select_on_container_copy_construction<const _Ap>::value> >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static allocator_type
  select_on_container_copy_construction(const allocator_type& __a) {
    return __a;
  }
};


template <class _Traits, class _Tp>
using __rebind_alloc __attribute__((__nodebug__)) = typename _Traits::template rebind_alloc<_Tp>;






template <class _Tp>
struct __is_default_allocator : false_type {};

template <class>
class allocator;

template <class _Tp>
struct __is_default_allocator<allocator<_Tp> > : true_type {};


template <class _Alloc, class = void>
struct __is_cpp17_move_insertable : is_move_constructible<typename _Alloc::value_type> {};

template <class _Alloc>
struct __is_cpp17_move_insertable<
    _Alloc,
    __enable_if_t< !__is_default_allocator<_Alloc>::value &&
                   __has_construct<_Alloc, typename _Alloc::value_type*, typename _Alloc::value_type&&>::value > >
    : true_type {};


template <class _Alloc, class = void>
struct __is_cpp17_copy_insertable
    : integral_constant<bool,
                        is_copy_constructible<typename _Alloc::value_type>::value &&
                            __is_cpp17_move_insertable<_Alloc>::value > {};

template <class _Alloc>
struct __is_cpp17_copy_insertable<
    _Alloc,
    __enable_if_t< !__is_default_allocator<_Alloc>::value &&
                   __has_construct<_Alloc, typename _Alloc::value_type*, const typename _Alloc::value_type&>::value > >
    : __is_cpp17_move_insertable<_Alloc> {};
# 425 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/allocator_traits.h" 3
}}
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/allocate_at_least.h" 2 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/allocate_at_least.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 31 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/allocate_at_least.h" 3
template <class _Pointer>
struct __allocation_result {
  _Pointer ptr;
  size_t count;
};

template <class _Alloc>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr
    __allocation_result<typename allocator_traits<_Alloc>::pointer>
    __allocate_at_least(_Alloc& __alloc, size_t __n) {
  return {__alloc.allocate(__n), __n};
}



}}
# 925 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\memory" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/allocation_guard.h" 1 3
# 21 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/allocation_guard.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 25 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/allocation_guard.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 47 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/allocation_guard.h" 3
template <class _Alloc>
struct __allocation_guard {
  using _Pointer = typename allocator_traits<_Alloc>::pointer;
  using _Size = typename allocator_traits<_Alloc>::size_type;

  template <class _AllocT>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit __allocation_guard(_AllocT __alloc, _Size __n)
      : __alloc_(std::move(__alloc)),
        __n_(__n),
        __ptr_(allocator_traits<_Alloc>::allocate(__alloc_, __n_))
  {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) ~__allocation_guard() noexcept { __destroy(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __allocation_guard(const __allocation_guard&) = delete;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __allocation_guard(__allocation_guard&& __other) noexcept
      : __alloc_(std::move(__other.__alloc_)),
        __n_(__other.__n_),
        __ptr_(__other.__ptr_) {
    __other.__ptr_ = nullptr;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __allocation_guard& operator=(const __allocation_guard& __other) = delete;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __allocation_guard& operator=(__allocation_guard&& __other) noexcept {
    if (std::addressof(__other) != this) {
      __destroy();

      __alloc_ = std::move(__other.__alloc_);
      __n_ = __other.__n_;
      __ptr_ = __other.__ptr_;
      __other.__ptr_ = nullptr;
    }

    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Pointer
  __release_ptr() noexcept {
    _Pointer __tmp = __ptr_;
    __ptr_ = nullptr;
    return __tmp;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Pointer __get() const noexcept { return __ptr_; }

private:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __destroy() noexcept {
    if (__ptr_ != nullptr) {
      allocator_traits<_Alloc>::deallocate(__alloc_, __ptr_, __n_);
    }
  }

  _Alloc __alloc_;
  _Size __n_;
  _Pointer __ptr_;
};

}}
# 926 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\memory" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/allocator.h" 1 3
# 27 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/allocator.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
class allocator;
# 43 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/allocator.h" 3
template <>
class allocator<void> {


public:
  __attribute__((__deprecated__)) typedef void* pointer;
  __attribute__((__deprecated__)) typedef const void* const_pointer;
  __attribute__((__deprecated__)) typedef void value_type;

  template <class _Up>
  struct __attribute__((__deprecated__)) rebind {
    typedef allocator<_Up> other;
  };

};

template <>
class allocator<const void> {


public:
  __attribute__((__deprecated__)) typedef const void* pointer;
  __attribute__((__deprecated__)) typedef const void* const_pointer;
  __attribute__((__deprecated__)) typedef const void value_type;

  template <class _Up>
  struct __attribute__((__deprecated__)) rebind {
    typedef allocator<_Up> other;
  };

};
# 88 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/allocator.h" 3
template <bool _Cond, class _Unique>
struct __non_trivial_if {};

template <class _Unique>
struct __non_trivial_if<true, _Unique> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr __non_trivial_if() noexcept {}
};






template <class _Tp>
class allocator : private __non_trivial_if<!is_void<_Tp>::value, allocator<_Tp> > {
  static_assert(!is_volatile<_Tp>::value, "std::allocator does not support volatile types");

public:
  typedef size_t size_type;
  typedef ptrdiff_t difference_type;
  typedef _Tp value_type;
  typedef true_type propagate_on_container_move_assignment;

                              typedef true_type is_always_equal;


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) allocator() noexcept = default;

  template <class _Up>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) allocator(const allocator<_Up>&) noexcept {}

  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp* allocate(size_t __n) {
    if (__n > allocator_traits<allocator>::max_size(*this))
      __throw_bad_array_new_length();
    if (__libcpp_is_constant_evaluated()) {
      return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    } else {
      return static_cast<_Tp*>(std::__libcpp_allocate(__n * sizeof(_Tp), alignof(_Tp)));
    }
  }







  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void deallocate(_Tp* __p, size_t __n) noexcept {
    if (__libcpp_is_constant_evaluated()) {
      ::operator delete(__p);
    } else {
      std::__libcpp_deallocate((void*)__p, __n * sizeof(_Tp), alignof(_Tp));
    }
  }



  __attribute__((__deprecated__)) typedef _Tp* pointer;
  __attribute__((__deprecated__)) typedef const _Tp* const_pointer;
  __attribute__((__deprecated__)) typedef _Tp& reference;
  __attribute__((__deprecated__)) typedef const _Tp& const_reference;

  template <class _Up>
  struct __attribute__((__deprecated__)) rebind {
    typedef allocator<_Up> other;
  };

  __attribute__((__deprecated__)) __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) pointer address(reference __x) const noexcept {
    return std::addressof(__x);
  }
  __attribute__((__deprecated__)) __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_pointer address(const_reference __x) const noexcept {
    return std::addressof(__x);
  }

  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__deprecated__)) _Tp*
  allocate(size_t __n, const void*) {
    return allocate(__n);
  }

  __attribute__((__deprecated__)) __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type max_size() const noexcept {
    return size_type(~0) / sizeof(_Tp);
  }

  template <class _Up, class... _Args>
  __attribute__((__deprecated__)) __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void construct(_Up* __p, _Args&&... __args) {
    ::new ((void*)__p) _Up(std::forward<_Args>(__args)...);
  }

  __attribute__((__deprecated__)) __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void destroy(pointer __p) { __p->~_Tp(); }

};

template <class _Tp>
class allocator<const _Tp>
    : private __non_trivial_if<!is_void<_Tp>::value, allocator<const _Tp> > {
  static_assert(!is_volatile<_Tp>::value, "std::allocator does not support volatile types");

public:
  typedef size_t size_type;
  typedef ptrdiff_t difference_type;
  typedef const _Tp value_type;
  typedef true_type propagate_on_container_move_assignment;

                              typedef true_type is_always_equal;


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) allocator() noexcept = default;

  template <class _Up>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) allocator(const allocator<_Up>&) noexcept {}

  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const _Tp* allocate(size_t __n) {
    if (__n > allocator_traits<allocator>::max_size(*this))
      __throw_bad_array_new_length();
    if (__libcpp_is_constant_evaluated()) {
      return static_cast<const _Tp*>(::operator new(__n * sizeof(_Tp)));
    } else {
      return static_cast<const _Tp*>(std::__libcpp_allocate(__n * sizeof(_Tp), alignof(_Tp)));
    }
  }







  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void deallocate(const _Tp* __p, size_t __n) {
    if (__libcpp_is_constant_evaluated()) {
      ::operator delete(const_cast<_Tp*>(__p));
    } else {
      std::__libcpp_deallocate((void*)const_cast<_Tp*>(__p), __n * sizeof(_Tp), alignof(_Tp));
    }
  }



  __attribute__((__deprecated__)) typedef const _Tp* pointer;
  __attribute__((__deprecated__)) typedef const _Tp* const_pointer;
  __attribute__((__deprecated__)) typedef const _Tp& reference;
  __attribute__((__deprecated__)) typedef const _Tp& const_reference;

  template <class _Up>
  struct __attribute__((__deprecated__)) rebind {
    typedef allocator<_Up> other;
  };

  __attribute__((__deprecated__)) __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_pointer address(const_reference __x) const noexcept {
    return std::addressof(__x);
  }

  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__deprecated__)) const _Tp*
  allocate(size_t __n, const void*) {
    return allocate(__n);
  }

  __attribute__((__deprecated__)) __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type max_size() const noexcept {
    return size_type(~0) / sizeof(_Tp);
  }

  template <class _Up, class... _Args>
  __attribute__((__deprecated__)) __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void construct(_Up* __p, _Args&&... __args) {
    ::new ((void*)__p) _Up(std::forward<_Args>(__args)...);
  }

  __attribute__((__deprecated__)) __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void destroy(pointer __p) { __p->~_Tp(); }

};

template <class _Tp, class _Up>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
operator==(const allocator<_Tp>&, const allocator<_Up>&) noexcept {
  return true;
}



template <class _Tp, class _Up>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator!=(const allocator<_Tp>&, const allocator<_Up>&) noexcept {
  return false;
}



}}
# 927 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\memory" 2 3


# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/assume_aligned.h" 1 3
# 21 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/assume_aligned.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <size_t _Np, class _Tp>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Tp* __assume_aligned(_Tp* __ptr) {
  static_assert(_Np != 0 && (_Np & (_Np - 1)) == 0, "std::assume_aligned<N>(p) requires N to be a power of two");

  if (__libcpp_is_constant_evaluated()) {
    (void)__builtin_assume_aligned(__ptr, _Np);
    return __ptr;
  } else {
    ((void)0);

    return static_cast<_Tp*>(__builtin_assume_aligned(__ptr, _Np));
  }
}
# 48 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/assume_aligned.h" 3
}}
# 930 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\memory" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/auto_ptr.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/auto_ptr.h" 3
# 931 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\memory" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/compressed_pair.h" 1 3
# 32 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/compressed_pair.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 36 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/compressed_pair.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {


struct __default_init_tag {};
struct __value_init_tag {};

template <class _Tp, int _Idx, bool _CanBeEmptyBase = is_empty<_Tp>::value && !__libcpp_is_final<_Tp>::value>
struct __compressed_pair_elem {
  using _ParamT = _Tp;
  using reference = _Tp&;
  using const_reference = const _Tp&;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr explicit __compressed_pair_elem(__default_init_tag) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr explicit __compressed_pair_elem(__value_init_tag) : __value_() {}

  template <class _Up, class = __enable_if_t<!is_same<__compressed_pair_elem, __decay_t<_Up> >::value> >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr explicit __compressed_pair_elem(_Up&& __u)
      : __value_(std::forward<_Up>(__u)) {}


  template <class... _Args, size_t... _Indices>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr explicit __compressed_pair_elem(
      piecewise_construct_t, tuple<_Args...> __args, __tuple_indices<_Indices...>)
      : __value_(std::forward<_Args>(std::get<_Indices>(__args))...) {}


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr reference __get() noexcept { return __value_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const_reference __get() const noexcept { return __value_; }

private:
  _Tp __value_;
};

template <class _Tp, int _Idx>
struct __compressed_pair_elem<_Tp, _Idx, true> : private _Tp {
  using _ParamT = _Tp;
  using reference = _Tp&;
  using const_reference = const _Tp&;
  using __value_type = _Tp;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr explicit __compressed_pair_elem() = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr explicit __compressed_pair_elem(__default_init_tag) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr explicit __compressed_pair_elem(__value_init_tag) : __value_type() {}

  template <class _Up, class = __enable_if_t<!is_same<__compressed_pair_elem, __decay_t<_Up> >::value> >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr explicit __compressed_pair_elem(_Up&& __u)
      : __value_type(std::forward<_Up>(__u)) {}


  template <class... _Args, size_t... _Indices>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr
  __compressed_pair_elem(piecewise_construct_t, tuple<_Args...> __args, __tuple_indices<_Indices...>)
      : __value_type(std::forward<_Args>(std::get<_Indices>(__args))...) {}


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr reference __get() noexcept { return *this; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const_reference __get() const noexcept { return *this; }
};

template <class _T1, class _T2>
class __compressed_pair : private __compressed_pair_elem<_T1, 0>, private __compressed_pair_elem<_T2, 1> {
public:




  static_assert(
      (!is_same<_T1, _T2>::value),
      "__compressed_pair cannot be instantiated when T1 and T2 are the same type; "
      "The current implementation is NOT ABI-compatible with the previous implementation for this configuration");

  using _Base1 __attribute__((__nodebug__)) = __compressed_pair_elem<_T1, 0>;
  using _Base2 __attribute__((__nodebug__)) = __compressed_pair_elem<_T2, 1>;

  template <bool _Dummy = true,
            class = __enable_if_t< __dependent_type<is_default_constructible<_T1>, _Dummy>::value &&
                                   __dependent_type<is_default_constructible<_T2>, _Dummy>::value > >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr explicit __compressed_pair()
      : _Base1(__value_init_tag()), _Base2(__value_init_tag()) {}

  template <class _U1, class _U2>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr explicit __compressed_pair(_U1&& __t1, _U2&& __t2)
      : _Base1(std::forward<_U1>(__t1)), _Base2(std::forward<_U2>(__t2)) {}


  template <class... _Args1, class... _Args2>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr explicit __compressed_pair(
      piecewise_construct_t __pc, tuple<_Args1...> __first_args, tuple<_Args2...> __second_args)
      : _Base1(__pc, std::move(__first_args), typename __make_tuple_indices<sizeof...(_Args1)>::type()),
        _Base2(__pc, std::move(__second_args), typename __make_tuple_indices<sizeof...(_Args2)>::type()) {}


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr typename _Base1::reference first() noexcept {
    return static_cast<_Base1&>(*this).__get();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr typename _Base1::const_reference first() const noexcept {
    return static_cast<_Base1 const&>(*this).__get();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr typename _Base2::reference second() noexcept {
    return static_cast<_Base2&>(*this).__get();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr typename _Base2::const_reference second() const noexcept {
    return static_cast<_Base2 const&>(*this).__get();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr static _Base1* __get_first_base(__compressed_pair* __pair) noexcept {
    return static_cast<_Base1*>(__pair);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr static _Base2* __get_second_base(__compressed_pair* __pair) noexcept {
    return static_cast<_Base2*>(__pair);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr void swap(__compressed_pair& __x)
      noexcept(__is_nothrow_swappable<_T1>::value&& __is_nothrow_swappable<_T2>::value) {
    using std::swap;
    swap(first(), __x.first());
    swap(second(), __x.second());
  }
};

template <class _T1, class _T2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr void
swap(__compressed_pair<_T1, _T2>& __x, __compressed_pair<_T1, _T2>& __y)
    noexcept(__is_nothrow_swappable<_T1>::value&& __is_nothrow_swappable<_T2>::value) {
  __x.swap(__y);
}

}}
# 932 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\memory" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/concepts.h" 1 3
# 26 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/concepts.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 61 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/concepts.h" 3
}}
# 933 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\memory" 2 3


# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/ranges_construct_at.h" 1 3
# 29 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/ranges_construct_at.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 33 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/ranges_construct_at.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 120 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/ranges_construct_at.h" 3
}}
# 936 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\memory" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/ranges_uninitialized_algorithms.h" 1 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/ranges_uninitialized_algorithms.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/in_out_result.h" 1 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/in_out_result.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/in_out_result.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 52 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/in_out_result.h" 3
}}
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/ranges_uninitialized_algorithms.h" 2 3








# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/uninitialized_algorithms.h" 1 3
# 32 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/uninitialized_algorithms.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_trivially_relocatable.h" 1 3
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_trivially_relocatable.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {





template <class _Tp, class = void>
struct __libcpp_is_trivially_relocatable : integral_constant<bool, __is_trivially_relocatable(_Tp)> {};





template <class _Tp>
struct __libcpp_is_trivially_relocatable<_Tp,
                                         __enable_if_t<is_same<_Tp, typename _Tp::__trivially_relocatable>::value> >
    : true_type {};

}}
# 33 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/uninitialized_algorithms.h" 2 3
# 44 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/uninitialized_algorithms.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 48 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/uninitialized_algorithms.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

struct __always_false {
  template <class... _Args>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool operator()(_Args&&...) const noexcept {
    return false;
  }
};



template <class _ValueType, class _InputIterator, class _Sentinel1, class _ForwardIterator, class _EndPredicate>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) pair<_InputIterator, _ForwardIterator> __uninitialized_copy(
    _InputIterator __ifirst, _Sentinel1 __ilast, _ForwardIterator __ofirst, _EndPredicate __stop_copying) {
  _ForwardIterator __idx = __ofirst;



    for (; __ifirst != __ilast && !__stop_copying(__idx); ++__ifirst, (void)++__idx)
      ::new (std::__voidify(*__idx)) _ValueType(*__ifirst);







  return pair<_InputIterator, _ForwardIterator>(std::move(__ifirst), std::move(__idx));
}

template <class _InputIterator, class _ForwardIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _ForwardIterator
uninitialized_copy(_InputIterator __ifirst, _InputIterator __ilast, _ForwardIterator __ofirst) {
  typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;
  auto __result = std::__uninitialized_copy<_ValueType>(
      std::move(__ifirst), std::move(__ilast), std::move(__ofirst), __always_false());
  return std::move(__result.second);
}



template <class _ValueType, class _InputIterator, class _Size, class _ForwardIterator, class _EndPredicate>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) pair<_InputIterator, _ForwardIterator>
__uninitialized_copy_n(_InputIterator __ifirst, _Size __n, _ForwardIterator __ofirst, _EndPredicate __stop_copying) {
  _ForwardIterator __idx = __ofirst;



    for (; __n > 0 && !__stop_copying(__idx); ++__ifirst, (void)++__idx, (void)--__n)
      ::new (std::__voidify(*__idx)) _ValueType(*__ifirst);







  return pair<_InputIterator, _ForwardIterator>(std::move(__ifirst), std::move(__idx));
}

template <class _InputIterator, class _Size, class _ForwardIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _ForwardIterator
uninitialized_copy_n(_InputIterator __ifirst, _Size __n, _ForwardIterator __ofirst) {
  typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;
  auto __result =
      std::__uninitialized_copy_n<_ValueType>(std::move(__ifirst), __n, std::move(__ofirst), __always_false());
  return std::move(__result.second);
}



template <class _ValueType, class _ForwardIterator, class _Sentinel, class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _ForwardIterator
__uninitialized_fill(_ForwardIterator __first, _Sentinel __last, const _Tp& __x) {
  _ForwardIterator __idx = __first;



    for (; __idx != __last; ++__idx)
      ::new (std::__voidify(*__idx)) _ValueType(__x);







  return __idx;
}

template <class _ForwardIterator, class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __x) {
  typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;
  (void)std::__uninitialized_fill<_ValueType>(__first, __last, __x);
}



template <class _ValueType, class _ForwardIterator, class _Size, class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _ForwardIterator
__uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x) {
  _ForwardIterator __idx = __first;



    for (; __n > 0; ++__idx, (void)--__n)
      ::new (std::__voidify(*__idx)) _ValueType(__x);







  return __idx;
}

template <class _ForwardIterator, class _Size, class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _ForwardIterator
uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x) {
  typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;
  return std::__uninitialized_fill_n<_ValueType>(__first, __n, __x);
}





template <class _ValueType, class _ForwardIterator, class _Sentinel>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _ForwardIterator
__uninitialized_default_construct(_ForwardIterator __first, _Sentinel __last) {
  auto __idx = __first;



    for (; __idx != __last; ++__idx)
      ::new (std::__voidify(*__idx)) _ValueType;







  return __idx;
}

template <class _ForwardIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void uninitialized_default_construct(_ForwardIterator __first, _ForwardIterator __last) {
  using _ValueType = typename iterator_traits<_ForwardIterator>::value_type;
  (void)std::__uninitialized_default_construct<_ValueType>(std::move(__first), std::move(__last));
}



template <class _ValueType, class _ForwardIterator, class _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _ForwardIterator __uninitialized_default_construct_n(_ForwardIterator __first, _Size __n) {
  auto __idx = __first;



    for (; __n > 0; ++__idx, (void)--__n)
      ::new (std::__voidify(*__idx)) _ValueType;







  return __idx;
}

template <class _ForwardIterator, class _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _ForwardIterator uninitialized_default_construct_n(_ForwardIterator __first, _Size __n) {
  using _ValueType = typename iterator_traits<_ForwardIterator>::value_type;
  return std::__uninitialized_default_construct_n<_ValueType>(std::move(__first), __n);
}



template <class _ValueType, class _ForwardIterator, class _Sentinel>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _ForwardIterator
__uninitialized_value_construct(_ForwardIterator __first, _Sentinel __last) {
  auto __idx = __first;



    for (; __idx != __last; ++__idx)
      ::new (std::__voidify(*__idx)) _ValueType();







  return __idx;
}

template <class _ForwardIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void uninitialized_value_construct(_ForwardIterator __first, _ForwardIterator __last) {
  using _ValueType = typename iterator_traits<_ForwardIterator>::value_type;
  (void)std::__uninitialized_value_construct<_ValueType>(std::move(__first), std::move(__last));
}



template <class _ValueType, class _ForwardIterator, class _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _ForwardIterator __uninitialized_value_construct_n(_ForwardIterator __first, _Size __n) {
  auto __idx = __first;



    for (; __n > 0; ++__idx, (void)--__n)
      ::new (std::__voidify(*__idx)) _ValueType();







  return __idx;
}

template <class _ForwardIterator, class _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _ForwardIterator uninitialized_value_construct_n(_ForwardIterator __first, _Size __n) {
  using _ValueType = typename iterator_traits<_ForwardIterator>::value_type;
  return std::__uninitialized_value_construct_n<_ValueType>(std::move(__first), __n);
}



template <class _ValueType,
          class _InputIterator,
          class _Sentinel1,
          class _ForwardIterator,
          class _EndPredicate,
          class _IterMove>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) pair<_InputIterator, _ForwardIterator> __uninitialized_move(
    _InputIterator __ifirst,
    _Sentinel1 __ilast,
    _ForwardIterator __ofirst,
    _EndPredicate __stop_moving,
    _IterMove __iter_move) {
  auto __idx = __ofirst;



    for (; __ifirst != __ilast && !__stop_moving(__idx); ++__idx, (void)++__ifirst) {
      ::new (std::__voidify(*__idx)) _ValueType(__iter_move(__ifirst));
    }







  return {std::move(__ifirst), std::move(__idx)};
}

template <class _InputIterator, class _ForwardIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _ForwardIterator
uninitialized_move(_InputIterator __ifirst, _InputIterator __ilast, _ForwardIterator __ofirst) {
  using _ValueType = typename iterator_traits<_ForwardIterator>::value_type;
  auto __iter_move = [](auto&& __iter) -> decltype(auto) { return std::move(*__iter); };

  auto __result = std::__uninitialized_move<_ValueType>(
      std::move(__ifirst), std::move(__ilast), std::move(__ofirst), __always_false(), __iter_move);
  return std::move(__result.second);
}



template <class _ValueType,
          class _InputIterator,
          class _Size,
          class _ForwardIterator,
          class _EndPredicate,
          class _IterMove>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) pair<_InputIterator, _ForwardIterator> __uninitialized_move_n(
    _InputIterator __ifirst, _Size __n, _ForwardIterator __ofirst, _EndPredicate __stop_moving, _IterMove __iter_move) {
  auto __idx = __ofirst;



    for (; __n > 0 && !__stop_moving(__idx); ++__idx, (void)++__ifirst, --__n)
      ::new (std::__voidify(*__idx)) _ValueType(__iter_move(__ifirst));







  return {std::move(__ifirst), std::move(__idx)};
}

template <class _InputIterator, class _Size, class _ForwardIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) pair<_InputIterator, _ForwardIterator>
uninitialized_move_n(_InputIterator __ifirst, _Size __n, _ForwardIterator __ofirst) {
  using _ValueType = typename iterator_traits<_ForwardIterator>::value_type;
  auto __iter_move = [](auto&& __iter) -> decltype(auto) { return std::move(*__iter); };

  return std::__uninitialized_move_n<_ValueType>(
      std::move(__ifirst), __n, std::move(__ofirst), __always_false(), __iter_move);
}
# 367 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/uninitialized_algorithms.h" 3
template <class _Alloc,
          class _BidirIter,
          class = __enable_if_t< __has_bidirectional_iterator_category<_BidirIter>::value >>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr void
__allocator_destroy_multidimensional(_Alloc& __alloc, _BidirIter __first, _BidirIter __last) noexcept {
  using _ValueType = typename iterator_traits<_BidirIter>::value_type;
  static_assert(is_same_v<typename allocator_traits<_Alloc>::value_type, _ValueType>,
                "The allocator should already be rebound to the correct type");

  if (__first == __last)
    return;

  if constexpr (is_array_v<_ValueType>) {
    static_assert(!__libcpp_is_unbounded_array<_ValueType>::value,
                  "arrays of unbounded arrays don't exist, but if they did we would mess up here");

    using _Element = remove_extent_t<_ValueType>;
    __allocator_traits_rebind_t<_Alloc, _Element> __elem_alloc(__alloc);
    do {
      --__last;
      decltype(auto) __array = *__last;
      std::__allocator_destroy_multidimensional(__elem_alloc, __array, __array + extent_v<_ValueType>);
    } while (__last != __first);
  } else {
    do {
      --__last;
      allocator_traits<_Alloc>::destroy(__alloc, std::addressof(*__last));
    } while (__last != __first);
  }
}
# 405 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/uninitialized_algorithms.h" 3
template <class _Alloc, class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr void __allocator_construct_at_multidimensional(_Alloc& __alloc, _Tp* __loc) {
  static_assert(is_same_v<typename allocator_traits<_Alloc>::value_type, _Tp>,
                "The allocator should already be rebound to the correct type");

  if constexpr (is_array_v<_Tp>) {
    using _Element = remove_extent_t<_Tp>;
    __allocator_traits_rebind_t<_Alloc, _Element> __elem_alloc(__alloc);
    size_t __i = 0;
    _Tp& __array = *__loc;


    auto __guard = std::__make_exception_guard([&]() {
      std::__allocator_destroy_multidimensional(__elem_alloc, __array, __array + __i);
    });

    for (; __i != extent_v<_Tp>; ++__i) {
      std::__allocator_construct_at_multidimensional(__elem_alloc, std::addressof(__array[__i]));
    }
    __guard.__complete();
  } else {
    allocator_traits<_Alloc>::construct(__alloc, __loc);
  }
}
# 440 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/uninitialized_algorithms.h" 3
template <class _Alloc, class _Tp, class _Arg>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr void
__allocator_construct_at_multidimensional(_Alloc& __alloc, _Tp* __loc, _Arg const& __arg) {
  static_assert(is_same_v<typename allocator_traits<_Alloc>::value_type, _Tp>,
                "The allocator should already be rebound to the correct type");

  if constexpr (is_array_v<_Tp>) {
    static_assert(is_array_v<_Arg>,
                  "Provided non-array initialization argument to __allocator_construct_at_multidimensional when "
                  "trying to construct an array.");

    using _Element = remove_extent_t<_Tp>;
    __allocator_traits_rebind_t<_Alloc, _Element> __elem_alloc(__alloc);
    size_t __i = 0;
    _Tp& __array = *__loc;


    auto __guard = std::__make_exception_guard([&]() {
      std::__allocator_destroy_multidimensional(__elem_alloc, __array, __array + __i);
    });
    for (; __i != extent_v<_Tp>; ++__i) {
      std::__allocator_construct_at_multidimensional(__elem_alloc, std::addressof(__array[__i]), __arg[__i]);
    }
    __guard.__complete();
  } else {
    allocator_traits<_Alloc>::construct(__alloc, __loc, __arg);
  }
}
# 476 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/uninitialized_algorithms.h" 3
template <class _Alloc,
          class _BidirIter,
          class _Tp,
          class _Size = typename iterator_traits<_BidirIter>::difference_type>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr void
__uninitialized_allocator_fill_n_multidimensional(_Alloc& __alloc, _BidirIter __it, _Size __n, _Tp const& __value) {
  using _ValueType = typename iterator_traits<_BidirIter>::value_type;
  __allocator_traits_rebind_t<_Alloc, _ValueType> __value_alloc(__alloc);
  _BidirIter __begin = __it;


  auto __guard =
      std::__make_exception_guard([&]() { std::__allocator_destroy_multidimensional(__value_alloc, __begin, __it); });
  for (; __n != 0; --__n, ++__it) {
    std::__allocator_construct_at_multidimensional(__value_alloc, std::addressof(*__it), __value);
  }
  __guard.__complete();
}



template <class _Alloc, class _BidirIter, class _Size = typename iterator_traits<_BidirIter>::difference_type>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr void
__uninitialized_allocator_value_construct_n_multidimensional(_Alloc& __alloc, _BidirIter __it, _Size __n) {
  using _ValueType = typename iterator_traits<_BidirIter>::value_type;
  __allocator_traits_rebind_t<_Alloc, _ValueType> __value_alloc(__alloc);
  _BidirIter __begin = __it;


  auto __guard =
      std::__make_exception_guard([&]() { std::__allocator_destroy_multidimensional(__value_alloc, __begin, __it); });
  for (; __n != 0; --__n, ++__it) {
    std::__allocator_construct_at_multidimensional(__value_alloc, std::addressof(*__it));
  }
  __guard.__complete();
}




template <class _Alloc, class _Iter, class _Sent>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
__allocator_destroy(_Alloc& __alloc, _Iter __first, _Sent __last) {
  for (; __first != __last; ++__first)
    allocator_traits<_Alloc>::destroy(__alloc, std::__to_address(__first));
}

template <class _Alloc, class _Iter>
class _AllocatorDestroyRangeReverse {
public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr
  _AllocatorDestroyRangeReverse(_Alloc& __alloc, _Iter& __first, _Iter& __last)
      : __alloc_(__alloc), __first_(__first), __last_(__last) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr void operator()() const {
    std::__allocator_destroy(__alloc_, std::reverse_iterator<_Iter>(__last_), std::reverse_iterator<_Iter>(__first_));
  }

private:
  _Alloc& __alloc_;
  _Iter& __first_;
  _Iter& __last_;
};





template <class _Alloc, class _Iter1, class _Sent1, class _Iter2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Iter2
__uninitialized_allocator_copy_impl(_Alloc& __alloc, _Iter1 __first1, _Sent1 __last1, _Iter2 __first2) {
  auto __destruct_first = __first2;
  auto __guard =
      std::__make_exception_guard(_AllocatorDestroyRangeReverse<_Alloc, _Iter2>(__alloc, __destruct_first, __first2));
  while (__first1 != __last1) {
    allocator_traits<_Alloc>::construct(__alloc, std::__to_address(__first2), *__first1);
    ++__first1;
    ++__first2;
  }
  __guard.__complete();
  return __first2;
}

template <class _Alloc, class _Type>
struct __allocator_has_trivial_copy_construct : _Not<__has_construct<_Alloc, _Type*, const _Type&> > {};

template <class _Type>
struct __allocator_has_trivial_copy_construct<allocator<_Type>, _Type> : true_type {};

template <class _Alloc,
          class _In,
          class _RawTypeIn = __remove_const_t<_In>,
          class _Out,
          __enable_if_t<

              is_trivially_copy_constructible<_RawTypeIn>::value && is_trivially_copy_assignable<_RawTypeIn>::value &&
              is_same<__remove_const_t<_In>, __remove_const_t<_Out> >::value &&
              __allocator_has_trivial_copy_construct<_Alloc, _RawTypeIn>::value>* = nullptr>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Out*
__uninitialized_allocator_copy_impl(_Alloc&, _In* __first1, _In* __last1, _Out* __first2) {

  if (__libcpp_is_constant_evaluated()) {
    while (__first1 != __last1) {
      std::__construct_at(std::__to_address(__first2), *__first1);
      ++__first1;
      ++__first2;
    }
    return __first2;
  } else {
    return std::copy(__first1, __last1, const_cast<_RawTypeIn*>(__first2));
  }
}

template <class _Alloc, class _Iter1, class _Sent1, class _Iter2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Iter2
__uninitialized_allocator_copy(_Alloc& __alloc, _Iter1 __first1, _Sent1 __last1, _Iter2 __first2) {
  auto __unwrapped_range = std::__unwrap_range(__first1, __last1);
  auto __result = std::__uninitialized_allocator_copy_impl(
      __alloc, __unwrapped_range.first, __unwrapped_range.second, std::__unwrap_iter(__first2));
  return std::__rewrap_iter(__first2, __result);
}

template <class _Alloc, class _Type>
struct __allocator_has_trivial_move_construct : _Not<__has_construct<_Alloc, _Type*, _Type&&> > {};

template <class _Type>
struct __allocator_has_trivial_move_construct<allocator<_Type>, _Type> : true_type {};

template <class _Alloc, class _Tp>
struct __allocator_has_trivial_destroy : _Not<__has_destroy<_Alloc, _Tp*> > {};

template <class _Tp, class _Up>
struct __allocator_has_trivial_destroy<allocator<_Tp>, _Up> : true_type {};
# 622 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/uninitialized_algorithms.h" 3
template <class _Alloc, class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr void
__uninitialized_allocator_relocate(_Alloc& __alloc, _Tp* __first, _Tp* __last, _Tp* __result) {
  static_assert(__is_cpp17_move_insertable<_Alloc>::value,
                "The specified type does not meet the requirements of Cpp17MoveInsertable");
  if (__libcpp_is_constant_evaluated() || !__libcpp_is_trivially_relocatable<_Tp>::value ||
      !__allocator_has_trivial_move_construct<_Alloc, _Tp>::value ||
      !__allocator_has_trivial_destroy<_Alloc, _Tp>::value) {
    auto __destruct_first = __result;
    auto __guard =
        std::__make_exception_guard(_AllocatorDestroyRangeReverse<_Alloc, _Tp*>(__alloc, __destruct_first, __result));
    auto __iter = __first;
    while (__iter != __last) {



      allocator_traits<_Alloc>::construct(__alloc, __result, std::move(*__iter));

      ++__iter;
      ++__result;
    }
    __guard.__complete();
    std::__allocator_destroy(__alloc, __first, __last);
  } else {
    __builtin_memcpy(const_cast<__remove_const_t<_Tp>*>(__result), __first, sizeof(_Tp) * (__last - __first));
  }
}

}}
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/ranges_uninitialized_algorithms.h" 2 3
# 32 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/ranges_uninitialized_algorithms.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 36 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/ranges_uninitialized_algorithms.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 321 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/ranges_uninitialized_algorithms.h" 3
}}
# 937 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\memory" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/raw_storage_iterator.h" 1 3
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/raw_storage_iterator.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 27 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/raw_storage_iterator.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



#pragma GCC diagnostic push
# 32 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/raw_storage_iterator.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 32 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/raw_storage_iterator.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template <class _OutputIterator, class _Tp>
class __attribute__((__deprecated__)) raw_storage_iterator

    : public iterator<output_iterator_tag, void, void, void, void>

{
#pragma GCC diagnostic pop

private:
  _OutputIterator __x_;

public:
  typedef output_iterator_tag iterator_category;
  typedef void value_type;



  typedef void difference_type;

  typedef void pointer;
  typedef void reference;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit raw_storage_iterator(_OutputIterator __x) : __x_(__x) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) raw_storage_iterator& operator*() { return *this; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) raw_storage_iterator& operator=(const _Tp& __element) {
    ::new ((void*)std::addressof(*__x_)) _Tp(__element);
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) raw_storage_iterator& operator=(_Tp&& __element) {
    ::new ((void*)std::addressof(*__x_)) _Tp(std::move(__element));
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) raw_storage_iterator& operator++() {
    ++__x_;
    return *this;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) raw_storage_iterator operator++(int) {
    raw_storage_iterator __t(*this);
    ++__x_;
    return __t;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _OutputIterator base() const { return __x_; }

};



}}
# 938 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\memory" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/shared_ptr.h" 1 3
# 26 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/shared_ptr.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/allocator_destructor.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/allocator_destructor.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Alloc>
class __allocator_destructor {
  typedef __attribute__((__nodebug__)) allocator_traits<_Alloc> __alloc_traits;

public:
  typedef __attribute__((__nodebug__)) typename __alloc_traits::pointer pointer;
  typedef __attribute__((__nodebug__)) typename __alloc_traits::size_type size_type;

private:
  _Alloc& __alloc_;
  size_type __s_;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __allocator_destructor(_Alloc& __a, size_type __s) noexcept : __alloc_(__a), __s_(__s) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void operator()(pointer __p) noexcept { __alloc_traits::deallocate(__alloc_, __p, __s_); }
};

}}
# 27 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/shared_ptr.h" 2 3






# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/unique_ptr.h" 1 3
# 47 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/unique_ptr.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 51 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/unique_ptr.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
struct default_delete {
  static_assert(!is_function<_Tp>::value, "default_delete cannot be instantiated for function types");

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr default_delete() noexcept = default;



  template <class _Up, __enable_if_t<is_convertible<_Up*, _Tp*>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) default_delete(const default_delete<_Up>&) noexcept {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void operator()(_Tp* __ptr) const noexcept {
    static_assert(sizeof(_Tp) >= 0, "cannot delete an incomplete type");
    static_assert(!is_void<_Tp>::value, "cannot delete an incomplete type");
    delete __ptr;
  }
};

template <class _Tp>
struct default_delete<_Tp[]> {
private:
  template <class _Up>
  struct _EnableIfConvertible : enable_if<is_convertible<_Up (*)[], _Tp (*)[]>::value> {};

public:

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr default_delete() noexcept = default;




  template <class _Up>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
  default_delete(const default_delete<_Up[]>&, typename _EnableIfConvertible<_Up>::type* = 0) noexcept {}

  template <class _Up>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) typename _EnableIfConvertible<_Up>::type
  operator()(_Up* __ptr) const noexcept {
    static_assert(sizeof(_Up) >= 0, "cannot delete an incomplete type");
    delete[] __ptr;
  }
};

template <class _Deleter>
struct __unique_ptr_deleter_sfinae {
  static_assert(!is_reference<_Deleter>::value, "incorrect specialization");
  typedef const _Deleter& __lval_ref_type;
  typedef _Deleter&& __good_rval_ref_type;
  typedef true_type __enable_rval_overload;
};

template <class _Deleter>
struct __unique_ptr_deleter_sfinae<_Deleter const&> {
  typedef const _Deleter& __lval_ref_type;
  typedef const _Deleter&& __bad_rval_ref_type;
  typedef false_type __enable_rval_overload;
};

template <class _Deleter>
struct __unique_ptr_deleter_sfinae<_Deleter&> {
  typedef _Deleter& __lval_ref_type;
  typedef _Deleter&& __bad_rval_ref_type;
  typedef false_type __enable_rval_overload;
};







template <class _Tp, class _Dp = default_delete<_Tp> >
class __attribute__((__trivial_abi__)) unique_ptr {
public:
  typedef _Tp element_type;
  typedef _Dp deleter_type;
  typedef __attribute__((__nodebug__)) typename __pointer<_Tp, deleter_type>::type pointer;

  static_assert(!is_rvalue_reference<deleter_type>::value, "the specified deleter type cannot be an rvalue reference");







  using __trivially_relocatable = __conditional_t<
      __libcpp_is_trivially_relocatable<pointer>::value && __libcpp_is_trivially_relocatable<deleter_type>::value,
      unique_ptr,
      void>;

private:
  __compressed_pair<pointer, deleter_type> __ptr_;

  typedef __attribute__((__nodebug__)) __unique_ptr_deleter_sfinae<_Dp> _DeleterSFINAE;

  template <bool _Dummy>
  using _LValRefType __attribute__((__nodebug__)) = typename __dependent_type<_DeleterSFINAE, _Dummy>::__lval_ref_type;

  template <bool _Dummy>
  using _GoodRValRefType __attribute__((__nodebug__)) = typename __dependent_type<_DeleterSFINAE, _Dummy>::__good_rval_ref_type;

  template <bool _Dummy>
  using _BadRValRefType __attribute__((__nodebug__)) = typename __dependent_type<_DeleterSFINAE, _Dummy>::__bad_rval_ref_type;

  template <bool _Dummy, class _Deleter = typename __dependent_type< __type_identity<deleter_type>, _Dummy>::type>
  using _EnableIfDeleterDefaultConstructible __attribute__((__nodebug__)) =
      __enable_if_t<is_default_constructible<_Deleter>::value && !is_pointer<_Deleter>::value>;

  template <class _ArgType>
  using _EnableIfDeleterConstructible __attribute__((__nodebug__)) = __enable_if_t<is_constructible<deleter_type, _ArgType>::value>;

  template <class _UPtr, class _Up>
  using _EnableIfMoveConvertible __attribute__((__nodebug__)) =
      __enable_if_t< is_convertible<typename _UPtr::pointer, pointer>::value && !is_array<_Up>::value >;

  template <class _UDel>
  using _EnableIfDeleterConvertible __attribute__((__nodebug__)) =
      __enable_if_t< (is_reference<_Dp>::value && is_same<_Dp, _UDel>::value) ||
                     (!is_reference<_Dp>::value && is_convertible<_UDel, _Dp>::value) >;

  template <class _UDel>
  using _EnableIfDeleterAssignable = __enable_if_t< is_assignable<_Dp&, _UDel&&>::value >;

public:
  template <bool _Dummy = true, class = _EnableIfDeleterDefaultConstructible<_Dummy> >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr unique_ptr() noexcept : __ptr_(__value_init_tag(), __value_init_tag()) {}

  template <bool _Dummy = true, class = _EnableIfDeleterDefaultConstructible<_Dummy> >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr unique_ptr(nullptr_t) noexcept
      : __ptr_(__value_init_tag(), __value_init_tag()) {}

  template <bool _Dummy = true, class = _EnableIfDeleterDefaultConstructible<_Dummy> >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit unique_ptr(pointer __p) noexcept
      : __ptr_(__p, __value_init_tag()) {}

  template <bool _Dummy = true, class = _EnableIfDeleterConstructible<_LValRefType<_Dummy> > >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) unique_ptr(pointer __p, _LValRefType<_Dummy> __d) noexcept
      : __ptr_(__p, __d) {}

  template <bool _Dummy = true, class = _EnableIfDeleterConstructible<_GoodRValRefType<_Dummy> > >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) unique_ptr(pointer __p, _GoodRValRefType<_Dummy> __d) noexcept
      : __ptr_(__p, std::move(__d)) {
    static_assert(!is_reference<deleter_type>::value, "rvalue deleter bound to reference");
  }

  template <bool _Dummy = true, class = _EnableIfDeleterConstructible<_BadRValRefType<_Dummy> > >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) unique_ptr(pointer __p, _BadRValRefType<_Dummy> __d) = delete;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) unique_ptr(unique_ptr&& __u) noexcept
      : __ptr_(__u.release(), std::forward<deleter_type>(__u.get_deleter())) {}

  template <class _Up,
            class _Ep,
            class = _EnableIfMoveConvertible<unique_ptr<_Up, _Ep>, _Up>,
            class = _EnableIfDeleterConvertible<_Ep> >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
      : __ptr_(__u.release(), std::forward<_Ep>(__u.get_deleter())) {}







  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) unique_ptr& operator=(unique_ptr&& __u) noexcept {
    reset(__u.release());
    __ptr_.second() = std::forward<deleter_type>(__u.get_deleter());
    return *this;
  }

  template <class _Up,
            class _Ep,
            class = _EnableIfMoveConvertible<unique_ptr<_Up, _Ep>, _Up>,
            class = _EnableIfDeleterAssignable<_Ep> >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) unique_ptr& operator=(unique_ptr<_Up, _Ep>&& __u) noexcept {
    reset(__u.release());
    __ptr_.second() = std::forward<_Ep>(__u.get_deleter());
    return *this;
  }
# 249 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/unique_ptr.h" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) ~unique_ptr() { reset(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) unique_ptr& operator=(nullptr_t) noexcept {
    reset();
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __add_lvalue_reference_t<_Tp> operator*() const {
    return *__ptr_.first();
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) pointer operator->() const noexcept { return __ptr_.first(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) pointer get() const noexcept { return __ptr_.first(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) deleter_type& get_deleter() noexcept { return __ptr_.second(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const deleter_type& get_deleter() const noexcept {
    return __ptr_.second();
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit operator bool() const noexcept {
    return __ptr_.first() != nullptr;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) pointer release() noexcept {
    pointer __t = __ptr_.first();
    __ptr_.first() = pointer();
    return __t;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void reset(pointer __p = pointer()) noexcept {
    pointer __tmp = __ptr_.first();
    __ptr_.first() = __p;
    if (__tmp)
      __ptr_.second()(__tmp);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void swap(unique_ptr& __u) noexcept { __ptr_.swap(__u.__ptr_); }
};

template <class _Tp, class _Dp>
class __attribute__((__trivial_abi__)) unique_ptr<_Tp[], _Dp> {
public:
  typedef _Tp element_type;
  typedef _Dp deleter_type;
  typedef typename __pointer<_Tp, deleter_type>::type pointer;







  using __trivially_relocatable = __conditional_t<
      __libcpp_is_trivially_relocatable<pointer>::value && __libcpp_is_trivially_relocatable<deleter_type>::value,
      unique_ptr,
      void>;

private:
  __compressed_pair<pointer, deleter_type> __ptr_;

  template <class _From>
  struct _CheckArrayPointerConversion : is_same<_From, pointer> {};

  template <class _FromElem>
  struct _CheckArrayPointerConversion<_FromElem*>
      : integral_constant<bool,
                          is_same<_FromElem*, pointer>::value ||
                              (is_same<pointer, element_type*>::value &&
                               is_convertible<_FromElem (*)[], element_type (*)[]>::value) > {};

  typedef __unique_ptr_deleter_sfinae<_Dp> _DeleterSFINAE;

  template <bool _Dummy>
  using _LValRefType __attribute__((__nodebug__)) = typename __dependent_type<_DeleterSFINAE, _Dummy>::__lval_ref_type;

  template <bool _Dummy>
  using _GoodRValRefType __attribute__((__nodebug__)) = typename __dependent_type<_DeleterSFINAE, _Dummy>::__good_rval_ref_type;

  template <bool _Dummy>
  using _BadRValRefType __attribute__((__nodebug__)) = typename __dependent_type<_DeleterSFINAE, _Dummy>::__bad_rval_ref_type;

  template <bool _Dummy, class _Deleter = typename __dependent_type< __type_identity<deleter_type>, _Dummy>::type>
  using _EnableIfDeleterDefaultConstructible __attribute__((__nodebug__)) =
      __enable_if_t<is_default_constructible<_Deleter>::value && !is_pointer<_Deleter>::value>;

  template <class _ArgType>
  using _EnableIfDeleterConstructible __attribute__((__nodebug__)) = __enable_if_t<is_constructible<deleter_type, _ArgType>::value>;

  template <class _Pp>
  using _EnableIfPointerConvertible __attribute__((__nodebug__)) = __enable_if_t< _CheckArrayPointerConversion<_Pp>::value >;

  template <class _UPtr, class _Up, class _ElemT = typename _UPtr::element_type>
  using _EnableIfMoveConvertible __attribute__((__nodebug__)) =
      __enable_if_t< is_array<_Up>::value && is_same<pointer, element_type*>::value &&
                     is_same<typename _UPtr::pointer, _ElemT*>::value &&
                     is_convertible<_ElemT (*)[], element_type (*)[]>::value >;

  template <class _UDel>
  using _EnableIfDeleterConvertible __attribute__((__nodebug__)) =
      __enable_if_t< (is_reference<_Dp>::value && is_same<_Dp, _UDel>::value) ||
                     (!is_reference<_Dp>::value && is_convertible<_UDel, _Dp>::value) >;

  template <class _UDel>
  using _EnableIfDeleterAssignable __attribute__((__nodebug__)) = __enable_if_t< is_assignable<_Dp&, _UDel&&>::value >;

public:
  template <bool _Dummy = true, class = _EnableIfDeleterDefaultConstructible<_Dummy> >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr unique_ptr() noexcept : __ptr_(__value_init_tag(), __value_init_tag()) {}

  template <bool _Dummy = true, class = _EnableIfDeleterDefaultConstructible<_Dummy> >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr unique_ptr(nullptr_t) noexcept
      : __ptr_(__value_init_tag(), __value_init_tag()) {}

  template <class _Pp,
            bool _Dummy = true,
            class = _EnableIfDeleterDefaultConstructible<_Dummy>,
            class = _EnableIfPointerConvertible<_Pp> >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit unique_ptr(_Pp __p) noexcept
      : __ptr_(__p, __value_init_tag()) {}

  template <class _Pp,
            bool _Dummy = true,
            class = _EnableIfDeleterConstructible<_LValRefType<_Dummy> >,
            class = _EnableIfPointerConvertible<_Pp> >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) unique_ptr(_Pp __p, _LValRefType<_Dummy> __d) noexcept
      : __ptr_(__p, __d) {}

  template <bool _Dummy = true, class = _EnableIfDeleterConstructible<_LValRefType<_Dummy> > >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) unique_ptr(nullptr_t, _LValRefType<_Dummy> __d) noexcept
      : __ptr_(nullptr, __d) {}

  template <class _Pp,
            bool _Dummy = true,
            class = _EnableIfDeleterConstructible<_GoodRValRefType<_Dummy> >,
            class = _EnableIfPointerConvertible<_Pp> >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) unique_ptr(_Pp __p, _GoodRValRefType<_Dummy> __d) noexcept
      : __ptr_(__p, std::move(__d)) {
    static_assert(!is_reference<deleter_type>::value, "rvalue deleter bound to reference");
  }

  template <bool _Dummy = true, class = _EnableIfDeleterConstructible<_GoodRValRefType<_Dummy> > >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) unique_ptr(nullptr_t, _GoodRValRefType<_Dummy> __d) noexcept
      : __ptr_(nullptr, std::move(__d)) {
    static_assert(!is_reference<deleter_type>::value, "rvalue deleter bound to reference");
  }

  template <class _Pp,
            bool _Dummy = true,
            class = _EnableIfDeleterConstructible<_BadRValRefType<_Dummy> >,
            class = _EnableIfPointerConvertible<_Pp> >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) unique_ptr(_Pp __p, _BadRValRefType<_Dummy> __d) = delete;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) unique_ptr(unique_ptr&& __u) noexcept
      : __ptr_(__u.release(), std::forward<deleter_type>(__u.get_deleter())) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) unique_ptr& operator=(unique_ptr&& __u) noexcept {
    reset(__u.release());
    __ptr_.second() = std::forward<deleter_type>(__u.get_deleter());
    return *this;
  }

  template <class _Up,
            class _Ep,
            class = _EnableIfMoveConvertible<unique_ptr<_Up, _Ep>, _Up>,
            class = _EnableIfDeleterConvertible<_Ep> >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
      : __ptr_(__u.release(), std::forward<_Ep>(__u.get_deleter())) {}

  template <class _Up,
            class _Ep,
            class = _EnableIfMoveConvertible<unique_ptr<_Up, _Ep>, _Up>,
            class = _EnableIfDeleterAssignable<_Ep> >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) unique_ptr& operator=(unique_ptr<_Up, _Ep>&& __u) noexcept {
    reset(__u.release());
    __ptr_.second() = std::forward<_Ep>(__u.get_deleter());
    return *this;
  }






public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) ~unique_ptr() { reset(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) unique_ptr& operator=(nullptr_t) noexcept {
    reset();
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __add_lvalue_reference_t<_Tp> operator[](size_t __i) const {
    return __ptr_.first()[__i];
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) pointer get() const noexcept { return __ptr_.first(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) deleter_type& get_deleter() noexcept { return __ptr_.second(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const deleter_type& get_deleter() const noexcept {
    return __ptr_.second();
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit operator bool() const noexcept {
    return __ptr_.first() != nullptr;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) pointer release() noexcept {
    pointer __t = __ptr_.first();
    __ptr_.first() = pointer();
    return __t;
  }

  template <class _Pp, __enable_if_t<_CheckArrayPointerConversion<_Pp>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void reset(_Pp __p) noexcept {
    pointer __tmp = __ptr_.first();
    __ptr_.first() = __p;
    if (__tmp)
      __ptr_.second()(__tmp);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void reset(nullptr_t = nullptr) noexcept {
    pointer __tmp = __ptr_.first();
    __ptr_.first() = nullptr;
    if (__tmp)
      __ptr_.second()(__tmp);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void swap(unique_ptr& __u) noexcept { __ptr_.swap(__u.__ptr_); }
};

template <class _Tp, class _Dp, __enable_if_t<__is_swappable<_Dp>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
swap(unique_ptr<_Tp, _Dp>& __x, unique_ptr<_Tp, _Dp>& __y) noexcept {
  __x.swap(__y);
}

template <class _T1, class _D1, class _T2, class _D2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
operator==(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {
  return __x.get() == __y.get();
}


template <class _T1, class _D1, class _T2, class _D2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator!=(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {
  return !(__x == __y);
}


template <class _T1, class _D1, class _T2, class _D2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator<(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {
  typedef typename unique_ptr<_T1, _D1>::pointer _P1;
  typedef typename unique_ptr<_T2, _D2>::pointer _P2;
  typedef typename common_type<_P1, _P2>::type _Vp;
  return less<_Vp>()(__x.get(), __y.get());
}

template <class _T1, class _D1, class _T2, class _D2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator>(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {
  return __y < __x;
}

template <class _T1, class _D1, class _T2, class _D2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator<=(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {
  return !(__y < __x);
}

template <class _T1, class _D1, class _T2, class _D2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator>=(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {
  return !(__x < __y);
}
# 527 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/unique_ptr.h" 3
template <class _T1, class _D1>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
operator==(const unique_ptr<_T1, _D1>& __x, nullptr_t) noexcept {
  return !__x;
}


template <class _T1, class _D1>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator==(nullptr_t, const unique_ptr<_T1, _D1>& __x) noexcept {
  return !__x;
}

template <class _T1, class _D1>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator!=(const unique_ptr<_T1, _D1>& __x, nullptr_t) noexcept {
  return static_cast<bool>(__x);
}

template <class _T1, class _D1>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator!=(nullptr_t, const unique_ptr<_T1, _D1>& __x) noexcept {
  return static_cast<bool>(__x);
}


template <class _T1, class _D1>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator<(const unique_ptr<_T1, _D1>& __x, nullptr_t) {
  typedef typename unique_ptr<_T1, _D1>::pointer _P1;
  return less<_P1>()(__x.get(), nullptr);
}

template <class _T1, class _D1>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator<(nullptr_t, const unique_ptr<_T1, _D1>& __x) {
  typedef typename unique_ptr<_T1, _D1>::pointer _P1;
  return less<_P1>()(nullptr, __x.get());
}

template <class _T1, class _D1>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator>(const unique_ptr<_T1, _D1>& __x, nullptr_t) {
  return nullptr < __x;
}

template <class _T1, class _D1>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator>(nullptr_t, const unique_ptr<_T1, _D1>& __x) {
  return __x < nullptr;
}

template <class _T1, class _D1>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator<=(const unique_ptr<_T1, _D1>& __x, nullptr_t) {
  return !(nullptr < __x);
}

template <class _T1, class _D1>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator<=(nullptr_t, const unique_ptr<_T1, _D1>& __x) {
  return !(__x < nullptr);
}

template <class _T1, class _D1>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator>=(const unique_ptr<_T1, _D1>& __x, nullptr_t) {
  return !(__x < nullptr);
}

template <class _T1, class _D1>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator>=(nullptr_t, const unique_ptr<_T1, _D1>& __x) {
  return !(nullptr < __x);
}
# 603 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/unique_ptr.h" 3
template <class _Tp>
struct __unique_if {
  typedef unique_ptr<_Tp> __unique_single;
};

template <class _Tp>
struct __unique_if<_Tp[]> {
  typedef unique_ptr<_Tp[]> __unique_array_unknown_bound;
};

template <class _Tp, size_t _Np>
struct __unique_if<_Tp[_Np]> {
  typedef void __unique_array_known_bound;
};

template <class _Tp, class... _Args>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) typename __unique_if<_Tp>::__unique_single
make_unique(_Args&&... __args) {
  return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...));
}

template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) typename __unique_if<_Tp>::__unique_array_unknown_bound
make_unique(size_t __n) {
  typedef __remove_extent_t<_Tp> _Up;
  return unique_ptr<_Tp>(new _Up[__n]());
}

template <class _Tp, class... _Args>
typename __unique_if<_Tp>::__unique_array_known_bound make_unique(_Args&&...) = delete;
# 655 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/unique_ptr.h" 3
template <class _Tp>
struct hash;

template <class _Tp, class _Dp>



struct hash<__enable_hash_helper< unique_ptr<_Tp, _Dp>, typename unique_ptr<_Tp, _Dp>::pointer> >

{

  __attribute__((__deprecated__)) typedef unique_ptr<_Tp, _Dp> argument_type;
  __attribute__((__deprecated__)) typedef size_t result_type;


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_t operator()(const unique_ptr<_Tp, _Dp>& __ptr) const {
    typedef typename unique_ptr<_Tp, _Dp>::pointer pointer;
    return hash<pointer>()(__ptr.get());
  }
};

}}
# 34 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/shared_ptr.h" 2 3
# 62 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/shared_ptr.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 66 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/shared_ptr.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 78 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/shared_ptr.h" 3
template <class _ValueType>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _ValueType __libcpp_relaxed_load(_ValueType const* __value) {




  return *__value;

}

template <class _ValueType>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _ValueType __libcpp_acquire_load(_ValueType const* __value) {




  return *__value;

}

template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp __libcpp_atomic_refcount_increment(_Tp& __t) noexcept {



  return __t += 1;

}

template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp __libcpp_atomic_refcount_decrement(_Tp& __t) noexcept {



  return __t -= 1;

}

class __attribute__((__visibility__("default"))) bad_weak_ptr : public std::exception {
public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bad_weak_ptr() noexcept = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bad_weak_ptr(const bad_weak_ptr&) noexcept = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bad_weak_ptr& operator=(const bad_weak_ptr&) noexcept = default;
  ~bad_weak_ptr() noexcept override;
  const char* what() const noexcept override;
};

[[noreturn]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __throw_bad_weak_ptr() {



  ::std::__libcpp_verbose_abort("bad_weak_ptr was thrown in -fno-exceptions mode");

}

template <class _Tp>
class weak_ptr;

class __attribute__((__visibility__("default"))) __shared_count {
  __shared_count(const __shared_count&);
  __shared_count& operator=(const __shared_count&);

protected:
  long __shared_owners_;
  virtual ~__shared_count();

private:
  virtual void __on_zero_shared() noexcept = 0;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit __shared_count(long __refs = 0) noexcept : __shared_owners_(__refs) {}





  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __add_shared() noexcept { __libcpp_atomic_refcount_increment(__shared_owners_); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool __release_shared() noexcept {
    if (__libcpp_atomic_refcount_decrement(__shared_owners_) == -1) {
      __on_zero_shared();
      return true;
    }
    return false;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long use_count() const noexcept { return __libcpp_relaxed_load(&__shared_owners_) + 1; }
};

class __attribute__((__visibility__("default"))) __shared_weak_count : private __shared_count {
  long __shared_weak_owners_;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit __shared_weak_count(long __refs = 0) noexcept
      : __shared_count(__refs),
        __shared_weak_owners_(__refs) {}

protected:
  ~__shared_weak_count() override;

public:





  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __add_shared() noexcept { __shared_count::__add_shared(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __add_weak() noexcept { __libcpp_atomic_refcount_increment(__shared_weak_owners_); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __release_shared() noexcept {
    if (__shared_count::__release_shared())
      __release_weak();
  }

  void __release_weak() noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long use_count() const noexcept { return __shared_count::use_count(); }
  __shared_weak_count* lock() noexcept;

  virtual const void* __get_deleter(const type_info&) const noexcept;

private:
  virtual void __on_zero_shared_weak() noexcept = 0;
};

template <class _Tp, class _Dp, class _Alloc>
class __shared_ptr_pointer : public __shared_weak_count {
  __compressed_pair<__compressed_pair<_Tp, _Dp>, _Alloc> __data_;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __shared_ptr_pointer(_Tp __p, _Dp __d, _Alloc __a)
      : __data_(__compressed_pair<_Tp, _Dp>(__p, std::move(__d)), std::move(__a)) {}





private:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) void __on_zero_shared() noexcept override;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) void __on_zero_shared_weak() noexcept override;
};
# 226 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/shared_ptr.h" 3
template <class _Tp, class _Dp, class _Alloc>
void __shared_ptr_pointer<_Tp, _Dp, _Alloc>::__on_zero_shared() noexcept {
  __data_.first().second()(__data_.first().first());
  __data_.first().second().~_Dp();
}

template <class _Tp, class _Dp, class _Alloc>
void __shared_ptr_pointer<_Tp, _Dp, _Alloc>::__on_zero_shared_weak() noexcept {
  typedef typename __allocator_traits_rebind<_Alloc, __shared_ptr_pointer>::type _Al;
  typedef allocator_traits<_Al> _ATraits;
  typedef pointer_traits<typename _ATraits::pointer> _PTraits;

  _Al __a(__data_.second());
  __data_.second().~_Alloc();
  __a.deallocate(_PTraits::pointer_to(*this), 1);
}




struct __for_overwrite_tag {};

template <class _Tp, class _Alloc>
struct __shared_ptr_emplace : __shared_weak_count {
  template <class... _Args,
            class _Allocator = _Alloc,
            __enable_if_t<is_same<typename _Allocator::value_type, __for_overwrite_tag>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit __shared_ptr_emplace(_Alloc __a, _Args&&...) : __storage_(std::move(__a)) {
    static_assert(
        sizeof...(_Args) == 0, "No argument should be provided to the control block when using _for_overwrite");
    ::new ((void*)__get_elem()) _Tp;
  }

  template <class... _Args,
            class _Allocator = _Alloc,
            __enable_if_t<!is_same<typename _Allocator::value_type, __for_overwrite_tag>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit __shared_ptr_emplace(_Alloc __a, _Args&&... __args) : __storage_(std::move(__a)) {
    using _TpAlloc = typename __allocator_traits_rebind<_Alloc, _Tp>::type;
    _TpAlloc __tmp(*__get_alloc());
    allocator_traits<_TpAlloc>::construct(__tmp, __get_elem(), std::forward<_Args>(__args)...);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Alloc* __get_alloc() noexcept { return __storage_.__get_alloc(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp* __get_elem() noexcept { return __storage_.__get_elem(); }

private:
  template <class _Allocator = _Alloc,
            __enable_if_t<is_same<typename _Allocator::value_type, __for_overwrite_tag>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __on_zero_shared_impl() noexcept {
    __get_elem()->~_Tp();
  }

  template <class _Allocator = _Alloc,
            __enable_if_t<!is_same<typename _Allocator::value_type, __for_overwrite_tag>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __on_zero_shared_impl() noexcept {
    using _TpAlloc = typename __allocator_traits_rebind<_Allocator, _Tp>::type;
    _TpAlloc __tmp(*__get_alloc());
    allocator_traits<_TpAlloc>::destroy(__tmp, __get_elem());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) void __on_zero_shared() noexcept override { __on_zero_shared_impl(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) void __on_zero_shared_weak() noexcept override {
    using _ControlBlockAlloc = typename __allocator_traits_rebind<_Alloc, __shared_ptr_emplace>::type;
    using _ControlBlockPointer = typename allocator_traits<_ControlBlockAlloc>::pointer;
    _ControlBlockAlloc __tmp(*__get_alloc());
    __storage_.~_Storage();
    allocator_traits<_ControlBlockAlloc>::deallocate(__tmp, pointer_traits<_ControlBlockPointer>::pointer_to(*this), 1);
  }
# 305 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/shared_ptr.h" 3
  using _CompressedPair = __compressed_pair<_Alloc, _Tp>;
  struct alignas(_CompressedPair) _Storage {
    char __blob_[sizeof(_CompressedPair)];

    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit _Storage(_Alloc&& __a) { ::new ((void*)__get_alloc()) _Alloc(std::move(__a)); }
    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) ~_Storage() { __get_alloc()->~_Alloc(); }
    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Alloc* __get_alloc() noexcept {
      _CompressedPair* __as_pair = reinterpret_cast<_CompressedPair*>(__blob_);
      typename _CompressedPair::_Base1* __first = _CompressedPair::__get_first_base(__as_pair);
      _Alloc* __alloc = reinterpret_cast<_Alloc*>(__first);
      return __alloc;
    }
    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__no_sanitize__("cfi"))) _Tp* __get_elem() noexcept {
      _CompressedPair* __as_pair = reinterpret_cast<_CompressedPair*>(__blob_);
      typename _CompressedPair::_Base2* __second = _CompressedPair::__get_second_base(__as_pair);
      _Tp* __elem = reinterpret_cast<_Tp*>(__second);
      return __elem;
    }
  };

  static_assert(alignof(_Storage) == alignof(_CompressedPair), "");
  static_assert(sizeof(_Storage) == sizeof(_CompressedPair), "");
  _Storage __storage_;
};

struct __shared_ptr_dummy_rebind_allocator_type;
template <>
class allocator<__shared_ptr_dummy_rebind_allocator_type> {
public:
  template <class _Other>
  struct rebind {
    typedef allocator<_Other> other;
  };
};

template <class _Tp>
class enable_shared_from_this;





template <class _Yp, class _Tp>
struct __bounded_convertible_to_unbounded : false_type {};

template <class _Up, std::size_t _Np, class _Tp>
struct __bounded_convertible_to_unbounded<_Up[_Np], _Tp> : is_same<__remove_cv_t<_Tp>, _Up[]> {};

template <class _Yp, class _Tp>
struct __compatible_with : _Or< is_convertible<_Yp*, _Tp*>, __bounded_convertible_to_unbounded<_Yp, _Tp> > {};
# 366 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/shared_ptr.h" 3
template <class _Yp, class _Tp, class = void>
struct __raw_pointer_compatible_with : _And< _Not<is_array<_Tp>>, is_convertible<_Yp*, _Tp*> > {};

template <class _Yp, class _Up, std::size_t _Np>
struct __raw_pointer_compatible_with<_Yp, _Up[_Np], __enable_if_t< is_convertible<_Yp (*)[_Np], _Up (*)[_Np]>::value> >
    : true_type {};

template <class _Yp, class _Up>
struct __raw_pointer_compatible_with<_Yp, _Up[], __enable_if_t< is_convertible<_Yp (*)[], _Up (*)[]>::value> >
    : true_type {};






template <class _Ptr, class = void>
struct __is_deletable : false_type {};
template <class _Ptr>
struct __is_deletable<_Ptr, decltype(delete std::declval<_Ptr>())> : true_type {};

template <class _Ptr, class = void>
struct __is_array_deletable : false_type {};
template <class _Ptr>
struct __is_array_deletable<_Ptr, decltype(delete[] std::declval<_Ptr>())> : true_type {};

template <class _Dp, class _Pt, class = decltype(std::declval<_Dp>()(std::declval<_Pt>()))>
true_type __well_formed_deleter_test(int);

template <class, class>
false_type __well_formed_deleter_test(...);

template <class _Dp, class _Pt>
struct __well_formed_deleter : decltype(std::__well_formed_deleter_test<_Dp, _Pt>(0)) {};

template <class _Dp, class _Yp, class _Tp>
struct __shared_ptr_deleter_ctor_reqs {
  static const bool value = __raw_pointer_compatible_with<_Yp, _Tp>::value && is_move_constructible<_Dp>::value &&
                            __well_formed_deleter<_Dp, _Yp*>::value;
};







template <class _Tp>
class __attribute__((__trivial_abi__)) shared_ptr {
public:

  typedef weak_ptr<_Tp> weak_type;
  typedef remove_extent_t<_Tp> element_type;




private:
  element_type* __ptr_;
  __shared_weak_count* __cntrl_;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr shared_ptr() noexcept : __ptr_(nullptr), __cntrl_(nullptr) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr shared_ptr(nullptr_t) noexcept : __ptr_(nullptr), __cntrl_(nullptr) {}

  template <class _Yp,
            class = __enable_if_t< _And< __raw_pointer_compatible_with<_Yp, _Tp>




                                         ,
                                         _If<is_array<_Tp>::value, __is_array_deletable<_Yp*>, __is_deletable<_Yp*> >

                                         >::value > >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit shared_ptr(_Yp* __p) : __ptr_(__p) {
    unique_ptr<_Yp> __hold(__p);
    typedef typename __shared_ptr_default_allocator<_Yp>::type _AllocT;
    typedef __shared_ptr_pointer<_Yp*, __shared_ptr_default_delete<_Tp, _Yp>, _AllocT> _CntrlBlk;
    __cntrl_ = new _CntrlBlk(__p, __shared_ptr_default_delete<_Tp, _Yp>(), _AllocT());
    __hold.release();
    __enable_weak_this(__p, __p);
  }

  template <class _Yp, class _Dp, class = __enable_if_t<__shared_ptr_deleter_ctor_reqs<_Dp, _Yp, _Tp>::value> >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) shared_ptr(_Yp* __p, _Dp __d) : __ptr_(__p) {



      typedef typename __shared_ptr_default_allocator<_Yp>::type _AllocT;
      typedef __shared_ptr_pointer<_Yp*, _Dp, _AllocT> _CntrlBlk;

      __cntrl_ = new _CntrlBlk(__p, std::move(__d), _AllocT());



      __enable_weak_this(__p, __p);






  }

  template <class _Yp,
            class _Dp,
            class _Alloc,
            class = __enable_if_t<__shared_ptr_deleter_ctor_reqs<_Dp, _Yp, _Tp>::value> >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) shared_ptr(_Yp* __p, _Dp __d, _Alloc __a) : __ptr_(__p) {



      typedef __shared_ptr_pointer<_Yp*, _Dp, _Alloc> _CntrlBlk;
      typedef typename __allocator_traits_rebind<_Alloc, _CntrlBlk>::type _A2;
      typedef __allocator_destructor<_A2> _D2;
      _A2 __a2(__a);
      unique_ptr<_CntrlBlk, _D2> __hold2(__a2.allocate(1), _D2(__a2, 1));
      ::new ((void*)std::addressof(*__hold2.get()))

          _CntrlBlk(__p, std::move(__d), __a);



      __cntrl_ = std::addressof(*__hold2.release());
      __enable_weak_this(__p, __p);






  }

  template <class _Dp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) shared_ptr(nullptr_t __p, _Dp __d) : __ptr_(nullptr) {



      typedef typename __shared_ptr_default_allocator<_Tp>::type _AllocT;
      typedef __shared_ptr_pointer<nullptr_t, _Dp, _AllocT> _CntrlBlk;

      __cntrl_ = new _CntrlBlk(__p, std::move(__d), _AllocT());
# 519 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/shared_ptr.h" 3
  }

  template <class _Dp, class _Alloc>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) shared_ptr(nullptr_t __p, _Dp __d, _Alloc __a) : __ptr_(nullptr) {



      typedef __shared_ptr_pointer<nullptr_t, _Dp, _Alloc> _CntrlBlk;
      typedef typename __allocator_traits_rebind<_Alloc, _CntrlBlk>::type _A2;
      typedef __allocator_destructor<_A2> _D2;
      _A2 __a2(__a);
      unique_ptr<_CntrlBlk, _D2> __hold2(__a2.allocate(1), _D2(__a2, 1));
      ::new ((void*)std::addressof(*__hold2.get()))

          _CntrlBlk(__p, std::move(__d), __a);



      __cntrl_ = std::addressof(*__hold2.release());






  }

  template <class _Yp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) shared_ptr(const shared_ptr<_Yp>& __r, element_type* __p) noexcept
      : __ptr_(__p),
        __cntrl_(__r.__cntrl_) {
    if (__cntrl_)
      __cntrl_->__add_shared();
  }
# 565 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/shared_ptr.h" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) shared_ptr(const shared_ptr& __r) noexcept : __ptr_(__r.__ptr_), __cntrl_(__r.__cntrl_) {
    if (__cntrl_)
      __cntrl_->__add_shared();
  }

  template <class _Yp, class = __enable_if_t<__compatible_with<_Yp, _Tp>::value> >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) shared_ptr(const shared_ptr<_Yp>& __r) noexcept : __ptr_(__r.__ptr_), __cntrl_(__r.__cntrl_) {
    if (__cntrl_)
      __cntrl_->__add_shared();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) shared_ptr(shared_ptr&& __r) noexcept : __ptr_(__r.__ptr_), __cntrl_(__r.__cntrl_) {
    __r.__ptr_ = nullptr;
    __r.__cntrl_ = nullptr;
  }

  template <class _Yp, class = __enable_if_t<__compatible_with<_Yp, _Tp>::value> >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) shared_ptr(shared_ptr<_Yp>&& __r) noexcept : __ptr_(__r.__ptr_), __cntrl_(__r.__cntrl_) {
    __r.__ptr_ = nullptr;
    __r.__cntrl_ = nullptr;
  }

  template <class _Yp, class = __enable_if_t<__compatible_with<_Yp, _Tp>::value> >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit shared_ptr(const weak_ptr<_Yp>& __r)
      : __ptr_(__r.__ptr_), __cntrl_(__r.__cntrl_ ? __r.__cntrl_->lock() : __r.__cntrl_) {
    if (__cntrl_ == nullptr)
      __throw_bad_weak_ptr();
  }
# 604 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/shared_ptr.h" 3
  template <class _Yp,
            class _Dp,
            class = __enable_if_t< !is_lvalue_reference<_Dp>::value && __compatible_with<_Yp, _Tp>::value &&
                                   is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value > >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) shared_ptr(unique_ptr<_Yp, _Dp>&& __r) : __ptr_(__r.get()) {

    if (__ptr_ == nullptr)
      __cntrl_ = nullptr;
    else

    {
      typedef typename __shared_ptr_default_allocator<_Yp>::type _AllocT;
      typedef __shared_ptr_pointer<typename unique_ptr<_Yp, _Dp>::pointer, _Dp, _AllocT> _CntrlBlk;
      __cntrl_ = new _CntrlBlk(__r.get(), std::move(__r.get_deleter()), _AllocT());
      __enable_weak_this(__r.get(), __r.get());
    }
    __r.release();
  }

  template <class _Yp,
            class _Dp,
            class = void,
            class = __enable_if_t< is_lvalue_reference<_Dp>::value && __compatible_with<_Yp, _Tp>::value &&
                                   is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value > >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) shared_ptr(unique_ptr<_Yp, _Dp>&& __r) : __ptr_(__r.get()) {

    if (__ptr_ == nullptr)
      __cntrl_ = nullptr;
    else

    {
      typedef typename __shared_ptr_default_allocator<_Yp>::type _AllocT;
      typedef __shared_ptr_pointer<typename unique_ptr<_Yp, _Dp>::pointer,
                                   reference_wrapper<__libcpp_remove_reference_t<_Dp> >,
                                   _AllocT>
          _CntrlBlk;
      __cntrl_ = new _CntrlBlk(__r.get(), std::ref(__r.get_deleter()), _AllocT());
      __enable_weak_this(__r.get(), __r.get());
    }
    __r.release();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) ~shared_ptr() {
    if (__cntrl_)
      __cntrl_->__release_shared();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) shared_ptr<_Tp>& operator=(const shared_ptr& __r) noexcept {
    shared_ptr(__r).swap(*this);
    return *this;
  }

  template <class _Yp, class = __enable_if_t<__compatible_with<_Yp, _Tp>::value> >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) shared_ptr<_Tp>& operator=(const shared_ptr<_Yp>& __r) noexcept {
    shared_ptr(__r).swap(*this);
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) shared_ptr<_Tp>& operator=(shared_ptr&& __r) noexcept {
    shared_ptr(std::move(__r)).swap(*this);
    return *this;
  }

  template <class _Yp, class = __enable_if_t<__compatible_with<_Yp, _Tp>::value> >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) shared_ptr<_Tp>& operator=(shared_ptr<_Yp>&& __r) {
    shared_ptr(std::move(__r)).swap(*this);
    return *this;
  }
# 683 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/shared_ptr.h" 3
  template <
      class _Yp,
      class _Dp,
      class = __enable_if_t<_And< __compatible_with<_Yp, _Tp>,
                                  is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*> >::value> >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) shared_ptr<_Tp>& operator=(unique_ptr<_Yp, _Dp>&& __r) {
    shared_ptr(std::move(__r)).swap(*this);
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void swap(shared_ptr& __r) noexcept {
    std::swap(__ptr_, __r.__ptr_);
    std::swap(__cntrl_, __r.__cntrl_);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void reset() noexcept { shared_ptr().swap(*this); }

  template <class _Yp, class = __enable_if_t< __raw_pointer_compatible_with<_Yp, _Tp>::value > >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void reset(_Yp* __p) {
    shared_ptr(__p).swap(*this);
  }

  template <class _Yp, class _Dp, class = __enable_if_t< __shared_ptr_deleter_ctor_reqs<_Dp, _Yp, _Tp>::value> >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void reset(_Yp* __p, _Dp __d) {
    shared_ptr(__p, __d).swap(*this);
  }

  template <class _Yp,
            class _Dp,
            class _Alloc,
            class = __enable_if_t< __shared_ptr_deleter_ctor_reqs<_Dp, _Yp, _Tp>::value> >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void reset(_Yp* __p, _Dp __d, _Alloc __a) {
    shared_ptr(__p, __d, __a).swap(*this);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) element_type* get() const noexcept { return __ptr_; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __add_lvalue_reference_t<element_type> operator*() const noexcept { return *__ptr_; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) element_type* operator->() const noexcept {
    static_assert(!is_array<_Tp>::value, "std::shared_ptr<T>::operator-> is only valid when T is not an array type.");
    return __ptr_;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long use_count() const noexcept { return __cntrl_ ? __cntrl_->use_count() : 0; }


  __attribute__((__deprecated__)) __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool unique() const noexcept { return use_count() == 1; }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit operator bool() const noexcept { return get() != nullptr; }

  template <class _Up>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool owner_before(shared_ptr<_Up> const& __p) const noexcept {
    return __cntrl_ < __p.__cntrl_;
  }

  template <class _Up>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool owner_before(weak_ptr<_Up> const& __p) const noexcept {
    return __cntrl_ < __p.__cntrl_;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool __owner_equivalent(const shared_ptr& __p) const { return __cntrl_ == __p.__cntrl_; }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __add_lvalue_reference_t<element_type> operator[](ptrdiff_t __i) const {
    static_assert(is_array<_Tp>::value, "std::shared_ptr<T>::operator[] is only valid when T is an array type.");
    return __ptr_[__i];
  }
# 761 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/shared_ptr.h" 3
  template <class _Yp, class _CntrlBlk>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static shared_ptr<_Tp> __create_with_control_block(_Yp* __p, _CntrlBlk* __cntrl) noexcept {
    shared_ptr<_Tp> __r;
    __r.__ptr_ = __p;
    __r.__cntrl_ = __cntrl;
    __r.__enable_weak_this(__r.__ptr_, __r.__ptr_);
    return __r;
  }

private:
  template <class _Yp, bool = is_function<_Yp>::value>
  struct __shared_ptr_default_allocator {
    typedef allocator<_Yp> type;
  };

  template <class _Yp>
  struct __shared_ptr_default_allocator<_Yp, true> {
    typedef allocator<__shared_ptr_dummy_rebind_allocator_type> type;
  };

  template <class _Yp,
            class _OrigPtr,
            class = __enable_if_t< is_convertible<_OrigPtr*, const enable_shared_from_this<_Yp>*>::value > >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __enable_weak_this(const enable_shared_from_this<_Yp>* __e, _OrigPtr* __ptr) noexcept {
    typedef __remove_cv_t<_Yp> _RawYp;
    if (__e && __e->__weak_this_.expired()) {
      __e->__weak_this_ = shared_ptr<_RawYp>(*this, const_cast<_RawYp*>(static_cast<const _Yp*>(__ptr)));
    }
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __enable_weak_this(...) noexcept {}

  template <class, class _Yp>
  struct __shared_ptr_default_delete : default_delete<_Yp> {};

  template <class _Yp, class _Un, size_t _Sz>
  struct __shared_ptr_default_delete<_Yp[_Sz], _Un> : default_delete<_Yp[]> {};

  template <class _Yp, class _Un>
  struct __shared_ptr_default_delete<_Yp[], _Un> : default_delete<_Yp[]> {};

  template <class _Up>
  friend class shared_ptr;
  template <class _Up>
  friend class weak_ptr;
};


template <class _Tp>
shared_ptr(weak_ptr<_Tp>) -> shared_ptr<_Tp>;
template <class _Tp, class _Dp>
shared_ptr(unique_ptr<_Tp, _Dp>) -> shared_ptr<_Tp>;





template <class _Tp, class _Alloc, class... _Args, class = __enable_if_t<!is_array<_Tp>::value> >
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) shared_ptr<_Tp> allocate_shared(const _Alloc& __a, _Args&&... __args) {
  using _ControlBlock = __shared_ptr_emplace<_Tp, _Alloc>;
  using _ControlBlockAllocator = typename __allocator_traits_rebind<_Alloc, _ControlBlock>::type;
  __allocation_guard<_ControlBlockAllocator> __guard(__a, 1);
  ::new ((void*)std::addressof(*__guard.__get())) _ControlBlock(__a, std::forward<_Args>(__args)...);
  auto __control_block = __guard.__release_ptr();
  return shared_ptr<_Tp>::__create_with_control_block(
      (*__control_block).__get_elem(), std::addressof(*__control_block));
}

template <class _Tp, class... _Args, class = __enable_if_t<!is_array<_Tp>::value> >
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) shared_ptr<_Tp> make_shared(_Args&&... __args) {
  return std::allocate_shared<_Tp>(allocator<_Tp>(), std::forward<_Args>(__args)...);
}
# 852 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/shared_ptr.h" 3
template <size_t _Alignment>
struct __sp_aligned_storage {
  alignas(_Alignment) char __storage[_Alignment];
};

template <class _Tp, class _Alloc>
struct __unbounded_array_control_block;

template <class _Tp, class _Alloc>
struct __unbounded_array_control_block<_Tp[], _Alloc> : __shared_weak_count {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Tp* __get_data() noexcept { return __data_; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit __unbounded_array_control_block(
      _Alloc const& __alloc, size_t __count, _Tp const& __arg)
      : __alloc_(__alloc), __count_(__count) {
    std::__uninitialized_allocator_fill_n_multidimensional(__alloc_, std::begin(__data_), __count_, __arg);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit __unbounded_array_control_block(_Alloc const& __alloc, size_t __count)
      : __alloc_(__alloc), __count_(__count) {
# 881 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/shared_ptr.h" 3
    std::__uninitialized_allocator_value_construct_n_multidimensional(__alloc_, std::begin(__data_), __count_);

  }



  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr size_t __bytes_for(size_t __elements) {






    size_t __bytes = __elements == 0 ? sizeof(__unbounded_array_control_block)
                                               : (__elements - 1) * sizeof(_Tp) + sizeof(__unbounded_array_control_block);
    constexpr size_t __align = alignof(_Tp);
    return (__bytes + __align - 1) & ~(__align - 1);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__))
  ~__unbounded_array_control_block() override {
  }

private:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) void __on_zero_shared() noexcept override {
# 914 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/shared_ptr.h" 3
    __allocator_traits_rebind_t<_Alloc, _Tp> __value_alloc(__alloc_);
    std::__allocator_destroy_multidimensional(__value_alloc, __data_, __data_ + __count_);

  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) void __on_zero_shared_weak() noexcept override {
    using _AlignedStorage = __sp_aligned_storage<alignof(__unbounded_array_control_block)>;
    using _StorageAlloc = __allocator_traits_rebind_t<_Alloc, _AlignedStorage>;
    using _PointerTraits = pointer_traits<typename allocator_traits<_StorageAlloc>::pointer>;

    _StorageAlloc __tmp(__alloc_);
    __alloc_.~_Alloc();
    size_t __size = __unbounded_array_control_block::__bytes_for(__count_);
    _AlignedStorage* __storage = reinterpret_cast<_AlignedStorage*>(this);
    allocator_traits<_StorageAlloc>::deallocate(
        __tmp, _PointerTraits::pointer_to(*__storage), __size / sizeof(_AlignedStorage));
  }

  [[__no_unique_address__]] _Alloc __alloc_;
  size_t __count_;
  union {
    _Tp __data_[1];
  };
};

template <class _Array, class _Alloc, class... _Arg>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) shared_ptr<_Array>
__allocate_shared_unbounded_array(const _Alloc& __a, size_t __n, _Arg&&... __arg) {
  static_assert(__libcpp_is_unbounded_array<_Array>::value);




  using _ControlBlock = __unbounded_array_control_block<_Array, _Alloc>;
  using _AlignedStorage = __sp_aligned_storage<alignof(_ControlBlock)>;
  using _StorageAlloc = __allocator_traits_rebind_t<_Alloc, _AlignedStorage>;
  __allocation_guard<_StorageAlloc> __guard(__a, _ControlBlock::__bytes_for(__n) / sizeof(_AlignedStorage));
  _ControlBlock* __control_block = reinterpret_cast<_ControlBlock*>(std::addressof(*__guard.__get()));
  std::__construct_at(__control_block, __a, __n, std::forward<_Arg>(__arg)...);
  __guard.__release_ptr();
  return shared_ptr<_Array>::__create_with_control_block(__control_block->__get_data(), __control_block);
}

template <class _Tp, class _Alloc>
struct __bounded_array_control_block;

template <class _Tp, size_t _Count, class _Alloc>
struct __bounded_array_control_block<_Tp[_Count], _Alloc> : __shared_weak_count {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Tp* __get_data() noexcept { return __data_; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit __bounded_array_control_block(_Alloc const& __alloc, _Tp const& __arg)
      : __alloc_(__alloc) {
    std::__uninitialized_allocator_fill_n_multidimensional(__alloc_, std::addressof(__data_[0]), _Count, __arg);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit __bounded_array_control_block(_Alloc const& __alloc) : __alloc_(__alloc) {
# 979 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/shared_ptr.h" 3
    std::__uninitialized_allocator_value_construct_n_multidimensional(__alloc_, std::addressof(__data_[0]), _Count);

  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__))
  ~__bounded_array_control_block() override {
  }

private:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) void __on_zero_shared() noexcept override {
# 997 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/shared_ptr.h" 3
    __allocator_traits_rebind_t<_Alloc, _Tp> __value_alloc(__alloc_);
    std::__allocator_destroy_multidimensional(__value_alloc, __data_, __data_ + _Count);

  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) void __on_zero_shared_weak() noexcept override {
    using _ControlBlockAlloc = __allocator_traits_rebind_t<_Alloc, __bounded_array_control_block>;
    using _PointerTraits = pointer_traits<typename allocator_traits<_ControlBlockAlloc>::pointer>;

    _ControlBlockAlloc __tmp(__alloc_);
    __alloc_.~_Alloc();
    allocator_traits<_ControlBlockAlloc>::deallocate(__tmp, _PointerTraits::pointer_to(*this), 1);
  }

  [[__no_unique_address__]] _Alloc __alloc_;
  union {
    _Tp __data_[_Count];
  };
};

template <class _Array, class _Alloc, class... _Arg>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) shared_ptr<_Array> __allocate_shared_bounded_array(const _Alloc& __a, _Arg&&... __arg) {
  static_assert(__libcpp_is_bounded_array<_Array>::value);
  using _ControlBlock = __bounded_array_control_block<_Array, _Alloc>;
  using _ControlBlockAlloc = __allocator_traits_rebind_t<_Alloc, _ControlBlock>;

  __allocation_guard<_ControlBlockAlloc> __guard(__a, 1);
  _ControlBlock* __control_block = reinterpret_cast<_ControlBlock*>(std::addressof(*__guard.__get()));
  std::__construct_at(__control_block, __a, std::forward<_Arg>(__arg)...);
  __guard.__release_ptr();
  return shared_ptr<_Array>::__create_with_control_block(__control_block->__get_data(), __control_block);
}
# 1102 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/shared_ptr.h" 3
template <class _Tp, class _Up>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator==(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) noexcept {
  return __x.get() == __y.get();
}



template <class _Tp, class _Up>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator!=(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) noexcept {
  return !(__x == __y);
}

template <class _Tp, class _Up>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator<(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) noexcept {




  return less<>()(__x.get(), __y.get());

}

template <class _Tp, class _Up>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator>(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) noexcept {
  return __y < __x;
}

template <class _Tp, class _Up>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator<=(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) noexcept {
  return !(__y < __x);
}

template <class _Tp, class _Up>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator>=(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) noexcept {
  return !(__x < __y);
}
# 1148 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/shared_ptr.h" 3
template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator==(const shared_ptr<_Tp>& __x, nullptr_t) noexcept {
  return !__x;
}



template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator==(nullptr_t, const shared_ptr<_Tp>& __x) noexcept {
  return !__x;
}

template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator!=(const shared_ptr<_Tp>& __x, nullptr_t) noexcept {
  return static_cast<bool>(__x);
}

template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator!=(nullptr_t, const shared_ptr<_Tp>& __x) noexcept {
  return static_cast<bool>(__x);
}

template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator<(const shared_ptr<_Tp>& __x, nullptr_t) noexcept {
  return less<typename shared_ptr<_Tp>::element_type*>()(__x.get(), nullptr);
}

template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator<(nullptr_t, const shared_ptr<_Tp>& __x) noexcept {
  return less<typename shared_ptr<_Tp>::element_type*>()(nullptr, __x.get());
}

template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator>(const shared_ptr<_Tp>& __x, nullptr_t) noexcept {
  return nullptr < __x;
}

template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator>(nullptr_t, const shared_ptr<_Tp>& __x) noexcept {
  return __x < nullptr;
}

template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator<=(const shared_ptr<_Tp>& __x, nullptr_t) noexcept {
  return !(nullptr < __x);
}

template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator<=(nullptr_t, const shared_ptr<_Tp>& __x) noexcept {
  return !(__x < nullptr);
}

template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator>=(const shared_ptr<_Tp>& __x, nullptr_t) noexcept {
  return !(__x < nullptr);
}

template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator>=(nullptr_t, const shared_ptr<_Tp>& __x) noexcept {
  return !(nullptr < __x);
}
# 1219 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/shared_ptr.h" 3
template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void swap(shared_ptr<_Tp>& __x, shared_ptr<_Tp>& __y) noexcept {
  __x.swap(__y);
}

template <class _Tp, class _Up>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) shared_ptr<_Tp> static_pointer_cast(const shared_ptr<_Up>& __r) noexcept {
  return shared_ptr<_Tp>(__r, static_cast< typename shared_ptr<_Tp>::element_type*>(__r.get()));
}
# 1238 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/shared_ptr.h" 3
template <class _Tp, class _Up>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) shared_ptr<_Tp> dynamic_pointer_cast(const shared_ptr<_Up>& __r) noexcept {
  typedef typename shared_ptr<_Tp>::element_type _ET;
  _ET* __p = dynamic_cast<_ET*>(__r.get());
  return __p ? shared_ptr<_Tp>(__r, __p) : shared_ptr<_Tp>();
}
# 1255 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/shared_ptr.h" 3
template <class _Tp, class _Up>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) shared_ptr<_Tp> const_pointer_cast(const shared_ptr<_Up>& __r) noexcept {
  typedef typename shared_ptr<_Tp>::element_type _RTp;
  return shared_ptr<_Tp>(__r, const_cast<_RTp*>(__r.get()));
}
# 1270 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/shared_ptr.h" 3
template <class _Tp, class _Up>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) shared_ptr<_Tp> reinterpret_pointer_cast(const shared_ptr<_Up>& __r) noexcept {
  return shared_ptr<_Tp>(__r, reinterpret_cast< typename shared_ptr<_Tp>::element_type*>(__r.get()));
}
# 1293 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/shared_ptr.h" 3
template <class _Tp>
class __attribute__((__trivial_abi__)) weak_ptr {
public:

  typedef remove_extent_t<_Tp> element_type;




private:
  element_type* __ptr_;
  __shared_weak_count* __cntrl_;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr weak_ptr() noexcept;

  template <class _Yp, __enable_if_t<__compatible_with<_Yp, _Tp>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) weak_ptr(shared_ptr<_Yp> const& __r) noexcept;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) weak_ptr(weak_ptr const& __r) noexcept;

  template <class _Yp, __enable_if_t<__compatible_with<_Yp, _Tp>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) weak_ptr(weak_ptr<_Yp> const& __r) noexcept;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) weak_ptr(weak_ptr&& __r) noexcept;

  template <class _Yp, __enable_if_t<__compatible_with<_Yp, _Tp>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) weak_ptr(weak_ptr<_Yp>&& __r) noexcept;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) ~weak_ptr();

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) weak_ptr& operator=(weak_ptr const& __r) noexcept;
  template <class _Yp, __enable_if_t<__compatible_with<_Yp, _Tp>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) weak_ptr& operator=(weak_ptr<_Yp> const& __r) noexcept;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) weak_ptr& operator=(weak_ptr&& __r) noexcept;
  template <class _Yp, __enable_if_t<__compatible_with<_Yp, _Tp>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) weak_ptr& operator=(weak_ptr<_Yp>&& __r) noexcept;

  template <class _Yp, __enable_if_t<__compatible_with<_Yp, _Tp>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) weak_ptr& operator=(shared_ptr<_Yp> const& __r) noexcept;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void swap(weak_ptr& __r) noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void reset() noexcept;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long use_count() const noexcept { return __cntrl_ ? __cntrl_->use_count() : 0; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool expired() const noexcept { return __cntrl_ == nullptr || __cntrl_->use_count() == 0; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) shared_ptr<_Tp> lock() const noexcept;
  template <class _Up>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool owner_before(const shared_ptr<_Up>& __r) const noexcept {
    return __cntrl_ < __r.__cntrl_;
  }
  template <class _Up>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool owner_before(const weak_ptr<_Up>& __r) const noexcept {
    return __cntrl_ < __r.__cntrl_;
  }

  template <class _Up>
  friend class weak_ptr;
  template <class _Up>
  friend class shared_ptr;
};


template <class _Tp>
weak_ptr(shared_ptr<_Tp>) -> weak_ptr<_Tp>;


template <class _Tp>
inline constexpr weak_ptr<_Tp>::weak_ptr() noexcept : __ptr_(nullptr), __cntrl_(nullptr) {}

template <class _Tp>
inline weak_ptr<_Tp>::weak_ptr(weak_ptr const& __r) noexcept : __ptr_(__r.__ptr_), __cntrl_(__r.__cntrl_) {
  if (__cntrl_)
    __cntrl_->__add_weak();
}

template <class _Tp>
template <class _Yp, __enable_if_t<__compatible_with<_Yp, _Tp>::value, int> >
inline weak_ptr<_Tp>::weak_ptr(shared_ptr<_Yp> const& __r) noexcept : __ptr_(__r.__ptr_), __cntrl_(__r.__cntrl_) {
  if (__cntrl_)
    __cntrl_->__add_weak();
}

template <class _Tp>
template <class _Yp, __enable_if_t<__compatible_with<_Yp, _Tp>::value, int> >
inline weak_ptr<_Tp>::weak_ptr(weak_ptr<_Yp> const& __r) noexcept : __ptr_(nullptr), __cntrl_(nullptr) {
  shared_ptr<_Yp> __s = __r.lock();
  *this = weak_ptr<_Tp>(__s);
}

template <class _Tp>
inline weak_ptr<_Tp>::weak_ptr(weak_ptr&& __r) noexcept : __ptr_(__r.__ptr_), __cntrl_(__r.__cntrl_) {
  __r.__ptr_ = nullptr;
  __r.__cntrl_ = nullptr;
}

template <class _Tp>
template <class _Yp, __enable_if_t<__compatible_with<_Yp, _Tp>::value, int> >
inline weak_ptr<_Tp>::weak_ptr(weak_ptr<_Yp>&& __r) noexcept : __ptr_(nullptr), __cntrl_(nullptr) {
  shared_ptr<_Yp> __s = __r.lock();
  *this = weak_ptr<_Tp>(__s);
  __r.reset();
}

template <class _Tp>
weak_ptr<_Tp>::~weak_ptr() {
  if (__cntrl_)
    __cntrl_->__release_weak();
}

template <class _Tp>
inline weak_ptr<_Tp>& weak_ptr<_Tp>::operator=(weak_ptr const& __r) noexcept {
  weak_ptr(__r).swap(*this);
  return *this;
}

template <class _Tp>
template <class _Yp, __enable_if_t<__compatible_with<_Yp, _Tp>::value, int> >
inline weak_ptr<_Tp>& weak_ptr<_Tp>::operator=(weak_ptr<_Yp> const& __r) noexcept {
  weak_ptr(__r).swap(*this);
  return *this;
}

template <class _Tp>
inline weak_ptr<_Tp>& weak_ptr<_Tp>::operator=(weak_ptr&& __r) noexcept {
  weak_ptr(std::move(__r)).swap(*this);
  return *this;
}

template <class _Tp>
template <class _Yp, __enable_if_t<__compatible_with<_Yp, _Tp>::value, int> >
inline weak_ptr<_Tp>& weak_ptr<_Tp>::operator=(weak_ptr<_Yp>&& __r) noexcept {
  weak_ptr(std::move(__r)).swap(*this);
  return *this;
}

template <class _Tp>
template <class _Yp, __enable_if_t<__compatible_with<_Yp, _Tp>::value, int> >
inline weak_ptr<_Tp>& weak_ptr<_Tp>::operator=(shared_ptr<_Yp> const& __r) noexcept {
  weak_ptr(__r).swap(*this);
  return *this;
}

template <class _Tp>
inline void weak_ptr<_Tp>::swap(weak_ptr& __r) noexcept {
  std::swap(__ptr_, __r.__ptr_);
  std::swap(__cntrl_, __r.__cntrl_);
}

template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void swap(weak_ptr<_Tp>& __x, weak_ptr<_Tp>& __y) noexcept {
  __x.swap(__y);
}

template <class _Tp>
inline void weak_ptr<_Tp>::reset() noexcept {
  weak_ptr().swap(*this);
}

template <class _Tp>
shared_ptr<_Tp> weak_ptr<_Tp>::lock() const noexcept {
  shared_ptr<_Tp> __r;
  __r.__cntrl_ = __cntrl_ ? __cntrl_->lock() : __cntrl_;
  if (__r.__cntrl_)
    __r.__ptr_ = __ptr_;
  return __r;
}


template <class _Tp = void>
struct owner_less;





template <class _Tp>
struct owner_less<shared_ptr<_Tp> > : __binary_function<shared_ptr<_Tp>, shared_ptr<_Tp>, bool> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator()(shared_ptr<_Tp> const& __x, shared_ptr<_Tp> const& __y) const noexcept {
    return __x.owner_before(__y);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator()(shared_ptr<_Tp> const& __x, weak_ptr<_Tp> const& __y) const noexcept {
    return __x.owner_before(__y);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator()(weak_ptr<_Tp> const& __x, shared_ptr<_Tp> const& __y) const noexcept {
    return __x.owner_before(__y);
  }
};

template <class _Tp>
struct owner_less<weak_ptr<_Tp> > : __binary_function<weak_ptr<_Tp>, weak_ptr<_Tp>, bool> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator()(weak_ptr<_Tp> const& __x, weak_ptr<_Tp> const& __y) const noexcept {
    return __x.owner_before(__y);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator()(shared_ptr<_Tp> const& __x, weak_ptr<_Tp> const& __y) const noexcept {
    return __x.owner_before(__y);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator()(weak_ptr<_Tp> const& __x, shared_ptr<_Tp> const& __y) const noexcept {
    return __x.owner_before(__y);
  }
};


template <>
struct owner_less<void> {
  template <class _Tp, class _Up>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator()(shared_ptr<_Tp> const& __x, shared_ptr<_Up> const& __y) const noexcept {
    return __x.owner_before(__y);
  }
  template <class _Tp, class _Up>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator()(shared_ptr<_Tp> const& __x, weak_ptr<_Up> const& __y) const noexcept {
    return __x.owner_before(__y);
  }
  template <class _Tp, class _Up>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator()(weak_ptr<_Tp> const& __x, shared_ptr<_Up> const& __y) const noexcept {
    return __x.owner_before(__y);
  }
  template <class _Tp, class _Up>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator()(weak_ptr<_Tp> const& __x, weak_ptr<_Up> const& __y) const noexcept {
    return __x.owner_before(__y);
  }
  typedef void is_transparent;
};


template <class _Tp>
class enable_shared_from_this {
  mutable weak_ptr<_Tp> __weak_this_;

protected:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr enable_shared_from_this() noexcept {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) enable_shared_from_this(enable_shared_from_this const&) noexcept {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) enable_shared_from_this& operator=(enable_shared_from_this const&) noexcept { return *this; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) ~enable_shared_from_this() {}

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) shared_ptr<_Tp> shared_from_this() { return shared_ptr<_Tp>(__weak_this_); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) shared_ptr<_Tp const> shared_from_this() const { return shared_ptr<const _Tp>(__weak_this_); }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) weak_ptr<_Tp> weak_from_this() noexcept { return __weak_this_; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) weak_ptr<const _Tp> weak_from_this() const noexcept { return __weak_this_; }


  template <class _Up>
  friend class shared_ptr;
};

template <class _Tp>
struct hash;

template <class _Tp>
struct hash<shared_ptr<_Tp> > {

  __attribute__((__deprecated__)) typedef shared_ptr<_Tp> argument_type;
  __attribute__((__deprecated__)) typedef size_t result_type;


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_t operator()(const shared_ptr<_Tp>& __ptr) const noexcept {
    return hash<typename shared_ptr<_Tp>::element_type*>()(__ptr.get());
  }
};

template <class _CharT, class _Traits, class _Yp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_ostream<_CharT, _Traits>&
operator<<(basic_ostream<_CharT, _Traits>& __os, shared_ptr<_Yp> const& __p);
# 1666 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/shared_ptr.h" 3
}}
# 939 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\memory" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/temporary_buffer.h" 1 3
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/temporary_buffer.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__no_sanitize__("cfi"))) __attribute__((__deprecated__)) pair<_Tp*, ptrdiff_t>
get_temporary_buffer(ptrdiff_t __n) noexcept {
  pair<_Tp*, ptrdiff_t> __r(0, 0);
  const ptrdiff_t __m =
      (~ptrdiff_t(0) ^ ptrdiff_t(ptrdiff_t(1) << (sizeof(ptrdiff_t) * 8 - 1))) / sizeof(_Tp);
  if (__n > __m)
    __n = __m;
  while (__n > 0) {

    if (__is_overaligned_for_new(alignof(_Tp))) {
      align_val_t __al = align_val_t(alignof(_Tp));
      __r.first = static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al, nothrow));
    } else {
      __r.first = static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), nothrow));
    }
# 50 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/temporary_buffer.h" 3
    if (__r.first) {
      __r.second = __n;
      break;
    }
    __n /= 2;
  }
  return __r;
}

template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__deprecated__)) void return_temporary_buffer(_Tp* __p) noexcept {
  std::__libcpp_deallocate_unsized((void*)__p, alignof(_Tp));
}

struct __return_temporary_buffer {
#pragma GCC diagnostic push
# 65 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/temporary_buffer.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 65 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/temporary_buffer.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  template <class _Tp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void operator()(_Tp* __p) const {
    std::return_temporary_buffer(__p);
  }
#pragma GCC diagnostic pop
};

}}
# 940 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\memory" 2 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/uses_allocator_construction.h" 1 3
# 25 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/uses_allocator_construction.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 29 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/uses_allocator_construction.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



template <class _Type>
inline constexpr bool __is_std_pair = false;

template <class _Type1, class _Type2>
inline constexpr bool __is_std_pair<pair<_Type1, _Type2>> = true;

template <class _Tp>
inline constexpr bool __is_cv_std_pair = __is_std_pair<remove_cv_t<_Tp>>;

template <class _Type, class _Alloc, class... _Args, __enable_if_t<!__is_cv_std_pair<_Type>, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr auto
__uses_allocator_construction_args(const _Alloc& __alloc, _Args&&... __args) noexcept {
  if constexpr (!uses_allocator_v<remove_cv_t<_Type>, _Alloc> && is_constructible_v<_Type, _Args...>) {
    return std::forward_as_tuple(std::forward<_Args>(__args)...);
  } else if constexpr (uses_allocator_v<remove_cv_t<_Type>, _Alloc> &&
                       is_constructible_v<_Type, allocator_arg_t, const _Alloc&, _Args...>) {
    return tuple<allocator_arg_t, const _Alloc&, _Args&&...>(allocator_arg, __alloc, std::forward<_Args>(__args)...);
  } else if constexpr (uses_allocator_v<remove_cv_t<_Type>, _Alloc> &&
                       is_constructible_v<_Type, _Args..., const _Alloc&>) {
    return std::forward_as_tuple(std::forward<_Args>(__args)..., __alloc);
  } else {
    static_assert(
        sizeof(_Type) + 1 == 0, "If uses_allocator_v<Type> is true, the type has to be allocator-constructible");
  }
}

template <class _Pair, class _Alloc, class _Tuple1, class _Tuple2, __enable_if_t<__is_cv_std_pair<_Pair>, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr auto __uses_allocator_construction_args(
    const _Alloc& __alloc, piecewise_construct_t, _Tuple1&& __x, _Tuple2&& __y) noexcept {
  return std::make_tuple(
      piecewise_construct,
      std::apply(
          [&__alloc](auto&&... __args1) {
            return std::__uses_allocator_construction_args<typename _Pair::first_type>(
                __alloc, std::forward<decltype(__args1)>(__args1)...);
          },
          std::forward<_Tuple1>(__x)),
      std::apply(
          [&__alloc](auto&&... __args2) {
            return std::__uses_allocator_construction_args<typename _Pair::second_type>(
                __alloc, std::forward<decltype(__args2)>(__args2)...);
          },
          std::forward<_Tuple2>(__y)));
}

template <class _Pair, class _Alloc, __enable_if_t<__is_cv_std_pair<_Pair>, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr auto __uses_allocator_construction_args(const _Alloc& __alloc) noexcept {
  return std::__uses_allocator_construction_args<_Pair>(__alloc, piecewise_construct, tuple<>{}, tuple<>{});
}

template <class _Pair, class _Alloc, class _Up, class _Vp, __enable_if_t<__is_cv_std_pair<_Pair>, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr auto
__uses_allocator_construction_args(const _Alloc& __alloc, _Up&& __u, _Vp&& __v) noexcept {
  return std::__uses_allocator_construction_args<_Pair>(
      __alloc,
      piecewise_construct,
      std::forward_as_tuple(std::forward<_Up>(__u)),
      std::forward_as_tuple(std::forward<_Vp>(__v)));
}
# 103 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/uses_allocator_construction.h" 3
template <class _Pair, class _Alloc, class _Up, class _Vp, __enable_if_t<__is_cv_std_pair<_Pair>, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr auto
__uses_allocator_construction_args(const _Alloc& __alloc, const pair<_Up, _Vp>& __pair) noexcept {
  return std::__uses_allocator_construction_args<_Pair>(
      __alloc, piecewise_construct, std::forward_as_tuple(__pair.first), std::forward_as_tuple(__pair.second));
}

template <class _Pair, class _Alloc, class _Up, class _Vp, __enable_if_t<__is_cv_std_pair<_Pair>, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr auto
__uses_allocator_construction_args(const _Alloc& __alloc, pair<_Up, _Vp>&& __pair) noexcept {
  return std::__uses_allocator_construction_args<_Pair>(
      __alloc,
      piecewise_construct,
      std::forward_as_tuple(std::get<0>(std::move(__pair))),
      std::forward_as_tuple(std::get<1>(std::move(__pair))));
}
# 146 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/uses_allocator_construction.h" 3
namespace __uses_allocator_detail {

template <class _Ap, class _Bp>
void __fun(const pair<_Ap, _Bp>&);

template <class _Tp>
decltype(__uses_allocator_detail::__fun(std::declval<_Tp>()), true_type()) __convertible_to_const_pair_ref_impl(int);

template <class>
false_type __convertible_to_const_pair_ref_impl(...);

template <class _Tp>
inline constexpr bool __convertible_to_const_pair_ref =
    decltype(__uses_allocator_detail::__convertible_to_const_pair_ref_impl<_Tp>(0))::value;
# 168 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/uses_allocator_construction.h" 3
template <class _Tp, class _Up>
inline constexpr bool __uses_allocator_constraints = __is_cv_std_pair<_Tp> && !__convertible_to_const_pair_ref<_Up>;


}

template < class _Pair,
           class _Alloc,
           class _Type,
           __enable_if_t<__uses_allocator_detail::__uses_allocator_constraints<_Pair, _Type>, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr auto
__uses_allocator_construction_args(const _Alloc& __alloc, _Type&& __value) noexcept;

template <class _Type, class _Alloc, class... _Args>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Type __make_obj_using_allocator(const _Alloc& __alloc, _Args&&... __args);

template < class _Pair,
           class _Alloc,
           class _Type,
           __enable_if_t< __uses_allocator_detail::__uses_allocator_constraints<_Pair, _Type>, int>>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr auto
__uses_allocator_construction_args(const _Alloc& __alloc, _Type&& __value) noexcept {
  struct __pair_constructor {
    using _PairMutable = remove_cv_t<_Pair>;

    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr auto __do_construct(const _PairMutable& __pair) const {
      return std::__make_obj_using_allocator<_PairMutable>(__alloc_, __pair);
    }

    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr auto __do_construct(_PairMutable&& __pair) const {
      return std::__make_obj_using_allocator<_PairMutable>(__alloc_, std::move(__pair));
    }

    const _Alloc& __alloc_;
    _Type& __value_;

    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr operator _PairMutable() const {
      return __do_construct(std::forward<_Type>(this->__value_));
    }
  };

  return std::make_tuple(__pair_constructor{__alloc, __value});
}

template <class _Type, class _Alloc, class... _Args>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Type __make_obj_using_allocator(const _Alloc& __alloc, _Args&&... __args) {
  return std::make_from_tuple<_Type>(
      std::__uses_allocator_construction_args<_Type>(__alloc, std::forward<_Args>(__args)...));
}

template <class _Type, class _Alloc, class... _Args>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Type*
__uninitialized_construct_using_allocator(_Type* __ptr, const _Alloc& __alloc, _Args&&... __args) {
  return std::apply(
      [&__ptr](auto&&... __xs) { return std::__construct_at(__ptr, std::forward<decltype(__xs)>(__xs)...); },
      std::__uses_allocator_construction_args<_Type>(__alloc, std::forward<_Args>(__args)...));
}
# 251 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/uses_allocator_construction.h" 3
}}
# 944 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\memory" 2 3
# 953 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\memory" 3
# 1295 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\optional" 2 3
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/movable_box.h" 2 3
# 27 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/movable_box.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 31 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/movable_box.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 245 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/movable_box.h" 3
}}
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/for_each.h" 2 3
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/for_each.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 27 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/for_each.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _InputIterator, class _Function>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Function
for_each(_InputIterator __first, _InputIterator __last, _Function __f) {
  for (; __first != __last; ++__first)
    __f(*__first);
  return __f;
}
# 53 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/for_each.h" 3
}}
# 1811 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/for_each_n.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/for_each_n.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



template <class _InputIterator, class _Size, class _Function>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _InputIterator
for_each_n(_InputIterator __first, _Size __orig_n, _Function __f) {
  typedef decltype(std::__convert_to_integral(__orig_n)) _IntegralSize;
  _IntegralSize __n = __orig_n;
  while (__n > 0) {
    __f(*__first);
    ++__first;
    --__n;
  }
  return __first;
}



}}
# 1812 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/generate.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/generate.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _ForwardIterator, class _Generator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
generate(_ForwardIterator __first, _ForwardIterator __last, _Generator __gen) {
  for (; __first != __last; ++__first)
    *__first = __gen();
}

}}
# 1813 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/generate_n.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/generate_n.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _OutputIterator, class _Size, class _Generator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _OutputIterator
generate_n(_OutputIterator __first, _Size __orig_n, _Generator __gen) {
  typedef decltype(std::__convert_to_integral(__orig_n)) _IntegralSize;
  _IntegralSize __n = __orig_n;
  for (; __n > 0; ++__first, (void)--__n)
    *__first = __gen();
  return __first;
}

}}
# 1814 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/in_found_result.h" 1 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/in_found_result.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/in_found_result.h" 2 3
# 1816 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/in_fun_result.h" 1 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/in_fun_result.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/in_fun_result.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 50 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/in_fun_result.h" 3
}}
# 1817 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/in_in_out_result.h" 1 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/in_in_out_result.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/in_in_out_result.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 55 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/in_in_out_result.h" 3
}}
# 1818 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/in_in_result.h" 1 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/in_in_result.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/in_in_result.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 52 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/in_in_result.h" 3
}}
# 1819 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/in_out_out_result.h" 1 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/in_out_out_result.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/in_out_out_result.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 53 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/in_out_out_result.h" 3
}}
# 1820 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/includes.h" 1 3
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/includes.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 27 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/includes.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Iter1, class _Sent1, class _Iter2, class _Sent2, class _Comp, class _Proj1, class _Proj2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool __includes(
    _Iter1 __first1,
    _Sent1 __last1,
    _Iter2 __first2,
    _Sent2 __last2,
    _Comp&& __comp,
    _Proj1&& __proj1,
    _Proj2&& __proj2) {
  for (; __first2 != __last2; ++__first1) {
    if (__first1 == __last1 ||
        std::__invoke(__comp, std::__invoke(__proj2, *__first2), std::__invoke(__proj1, *__first1)))
      return false;
    if (!std::__invoke(__comp, std::__invoke(__proj1, *__first1), std::__invoke(__proj2, *__first2)))
      ++__first2;
  }
  return true;
}

template <class _InputIterator1, class _InputIterator2, class _Compare>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
includes(_InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _Compare __comp) {
  static_assert(
      __is_callable<_Compare, decltype(*__first1), decltype(*__first2)>::value, "Comparator has to be callable");

  return std::__includes(
      std::move(__first1),
      std::move(__last1),
      std::move(__first2),
      std::move(__last2),
      static_cast<__comp_ref_type<_Compare> >(__comp),
      __identity(),
      __identity());
}

template <class _InputIterator1, class _InputIterator2>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
includes(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2) {
  return std::includes(std::move(__first1), std::move(__last1), std::move(__first2), std::move(__last2), __less<>());
}

}}
# 1822 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/inplace_merge.h" 1 3
# 26 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/inplace_merge.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/destruct_n.h" 1 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/destruct_n.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

struct __destruct_n {
private:
  size_t __size_;

  template <class _Tp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __process(_Tp* __p, false_type) noexcept {
    for (size_t __i = 0; __i < __size_; ++__i, ++__p)
      __p->~_Tp();
  }

  template <class _Tp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __process(_Tp*, true_type) noexcept {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __incr(false_type) noexcept { ++__size_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __incr(true_type) noexcept {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __set(size_t __s, false_type) noexcept { __size_ = __s; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __set(size_t, true_type) noexcept {}

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit __destruct_n(size_t __s) noexcept : __size_(__s) {}

  template <class _Tp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __incr() noexcept {
    __incr(integral_constant<bool, is_trivially_destructible<_Tp>::value>());
  }

  template <class _Tp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __set(size_t __s, _Tp*) noexcept {
    __set(__s, integral_constant<bool, is_trivially_destructible<_Tp>::value>());
  }

  template <class _Tp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void operator()(_Tp* __p) noexcept {
    __process(__p, integral_constant<bool, is_trivially_destructible<_Tp>::value>());
  }
};

}}
# 27 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/inplace_merge.h" 2 3
# 34 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/inplace_merge.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 38 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/inplace_merge.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Predicate>
class __invert
{
private:
  _Predicate __p_;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __invert() {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit __invert(_Predicate __p) : __p_(__p) {}

  template <class _T1>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator()(const _T1& __x) {
    return !__p_(__x);
  }

  template <class _T1, class _T2>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator()(const _T1& __x, const _T2& __y) {
    return __p_(__y, __x);
  }
};

template <class _AlgPolicy,
          class _Compare,
          class _InputIterator1,
          class _Sent1,
          class _InputIterator2,
          class _Sent2,
          class _OutputIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __half_inplace_merge(
    _InputIterator1 __first1,
    _Sent1 __last1,
    _InputIterator2 __first2,
    _Sent2 __last2,
    _OutputIterator __result,
    _Compare&& __comp) {
  for (; __first1 != __last1; ++__result) {
    if (__first2 == __last2) {
      std::__move<_AlgPolicy>(__first1, __last1, __result);
      return;
    }

    if (__comp(*__first2, *__first1)) {
      *__result = _IterOps<_AlgPolicy>::__iter_move(__first2);
      ++__first2;
    } else {
      *__result = _IterOps<_AlgPolicy>::__iter_move(__first1);
      ++__first1;
    }
  }

}

template <class _AlgPolicy, class _Compare, class _BidirectionalIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __buffered_inplace_merge(
    _BidirectionalIterator __first,
    _BidirectionalIterator __middle,
    _BidirectionalIterator __last,
    _Compare&& __comp,
    typename iterator_traits<_BidirectionalIterator>::difference_type __len1,
    typename iterator_traits<_BidirectionalIterator>::difference_type __len2,
    typename iterator_traits<_BidirectionalIterator>::value_type* __buff) {
  typedef typename iterator_traits<_BidirectionalIterator>::value_type value_type;
  __destruct_n __d(0);
  unique_ptr<value_type, __destruct_n&> __h2(__buff, __d);
  if (__len1 <= __len2) {
    value_type* __p = __buff;
    for (_BidirectionalIterator __i = __first; __i != __middle;
         __d.template __incr<value_type>(), (void)++__i, (void)++__p)
      ::new ((void*)__p) value_type(_IterOps<_AlgPolicy>::__iter_move(__i));
    std::__half_inplace_merge<_AlgPolicy>(__buff, __p, __middle, __last, __first, __comp);
  } else {
    value_type* __p = __buff;
    for (_BidirectionalIterator __i = __middle; __i != __last;
         __d.template __incr<value_type>(), (void)++__i, (void)++__p)
      ::new ((void*)__p) value_type(_IterOps<_AlgPolicy>::__iter_move(__i));
    typedef __unconstrained_reverse_iterator<_BidirectionalIterator> _RBi;
    typedef __unconstrained_reverse_iterator<value_type*> _Rv;
    typedef __invert<_Compare> _Inverted;
    std::__half_inplace_merge<_AlgPolicy>(
        _Rv(__p), _Rv(__buff), _RBi(__middle), _RBi(__first), _RBi(__last), _Inverted(__comp));
  }
}

template <class _AlgPolicy, class _Compare, class _BidirectionalIterator>
void __inplace_merge(
    _BidirectionalIterator __first,
    _BidirectionalIterator __middle,
    _BidirectionalIterator __last,
    _Compare&& __comp,
    typename iterator_traits<_BidirectionalIterator>::difference_type __len1,
    typename iterator_traits<_BidirectionalIterator>::difference_type __len2,
    typename iterator_traits<_BidirectionalIterator>::value_type* __buff,
    ptrdiff_t __buff_size) {
  using _Ops = _IterOps<_AlgPolicy>;

  typedef typename iterator_traits<_BidirectionalIterator>::difference_type difference_type;
  while (true) {

    if (__len2 == 0)
      return;
    if (__len1 <= __buff_size || __len2 <= __buff_size)
      return std::__buffered_inplace_merge<_AlgPolicy>(__first, __middle, __last, __comp, __len1, __len2, __buff);

    for (; true; ++__first, (void)--__len1) {
      if (__len1 == 0)
        return;
      if (__comp(*__middle, *__first))
        break;
    }
# 159 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/inplace_merge.h" 3
    _BidirectionalIterator __m1;
    _BidirectionalIterator __m2;
    difference_type __len11;
    difference_type __len21;

    if (__len1 < __len2) {
      __len21 = __len2 / 2;
      __m2 = __middle;
      _Ops::advance(__m2, __len21);
      __m1 = std::__upper_bound<_AlgPolicy>(__first, __middle, *__m2, __comp, std::__identity());
      __len11 = _Ops::distance(__first, __m1);
    } else {
      if (__len1 == 1) {

        _Ops::iter_swap(__first, __middle);
        return;
      }

      __len11 = __len1 / 2;
      __m1 = __first;
      _Ops::advance(__m1, __len11);
      __m2 = std::lower_bound(__middle, __last, *__m1, __comp);
      __len21 = _Ops::distance(__middle, __m2);
    }
    difference_type __len12 = __len1 - __len11;
    difference_type __len22 = __len2 - __len21;


    __middle = std::__rotate<_AlgPolicy>(__m1, __middle, __m2).first;


    if (__len11 + __len21 < __len12 + __len22) {
      std::__inplace_merge<_AlgPolicy>(__first, __m1, __middle, __comp, __len11, __len21, __buff, __buff_size);
      __first = __middle;
      __middle = __m2;
      __len1 = __len12;
      __len2 = __len22;
    } else {
      std::__inplace_merge<_AlgPolicy>(__middle, __m2, __last, __comp, __len12, __len22, __buff, __buff_size);
      __last = __middle;
      __middle = __m1;
      __len1 = __len11;
      __len2 = __len21;
    }
  }
}

template <class _AlgPolicy, class _BidirectionalIterator, class _Compare>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __inplace_merge(
    _BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last, _Compare&& __comp) {
  typedef typename iterator_traits<_BidirectionalIterator>::value_type value_type;
  typedef typename iterator_traits<_BidirectionalIterator>::difference_type difference_type;
  difference_type __len1 = _IterOps<_AlgPolicy>::distance(__first, __middle);
  difference_type __len2 = _IterOps<_AlgPolicy>::distance(__middle, __last);
  difference_type __buf_size = std::min(__len1, __len2);

#pragma GCC diagnostic push
# 215 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/inplace_merge.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 215 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/inplace_merge.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  pair<value_type*, ptrdiff_t> __buf = std::get_temporary_buffer<value_type>(__buf_size);
#pragma GCC diagnostic pop
  unique_ptr<value_type, __return_temporary_buffer> __h(__buf.first);
  return std::__inplace_merge<_AlgPolicy>(
      std::move(__first), std::move(__middle), std::move(__last), __comp, __len1, __len2, __buf.first, __buf.second);
}

template <class _BidirectionalIterator, class _Compare>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void inplace_merge(
    _BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last, _Compare __comp) {
  std::__inplace_merge<_ClassicAlgPolicy>(
      std::move(__first), std::move(__middle), std::move(__last), static_cast<__comp_ref_type<_Compare> >(__comp));
}

template <class _BidirectionalIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
inplace_merge(_BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last) {
  std::inplace_merge(std::move(__first), std::move(__middle), std::move(__last), __less<>());
}

}}
# 1823 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/is_heap.h" 1 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/is_heap.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/is_heap_until.h" 1 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/is_heap_until.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Compare, class _RandomAccessIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _RandomAccessIterator
__is_heap_until(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare&& __comp) {
  typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type;
  difference_type __len = __last - __first;
  difference_type __p = 0;
  difference_type __c = 1;
  _RandomAccessIterator __pp = __first;
  while (__c < __len) {
    _RandomAccessIterator __cp = __first + __c;
    if (__comp(*__pp, *__cp))
      return __cp;
    ++__c;
    ++__cp;
    if (__c == __len)
      return __last;
    if (__comp(*__pp, *__cp))
      return __cp;
    ++__p;
    ++__pp;
    __c = 2 * __p + 1;
  }
  return __last;
}

template <class _RandomAccessIterator, class _Compare>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _RandomAccessIterator
is_heap_until(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp) {
  return std::__is_heap_until(__first, __last, static_cast<__comp_ref_type<_Compare> >(__comp));
}

template <class _RandomAccessIterator>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _RandomAccessIterator
is_heap_until(_RandomAccessIterator __first, _RandomAccessIterator __last) {
  return std::__is_heap_until(__first, __last, __less<>());
}

}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/is_heap.h" 2 3
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/is_heap.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _RandomAccessIterator, class _Compare>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp) {
  return std::__is_heap_until(__first, __last, static_cast<__comp_ref_type<_Compare> >(__comp)) == __last;
}

template <class _RandomAccessIterator>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last) {
  return std::is_heap(__first, __last, __less<>());
}

}}
# 1824 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/is_partitioned.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/is_partitioned.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _InputIterator, class _Predicate>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
is_partitioned(_InputIterator __first, _InputIterator __last, _Predicate __pred) {
  for (; __first != __last; ++__first)
    if (!__pred(*__first))
      break;
  if (__first == __last)
    return true;
  ++__first;
  for (; __first != __last; ++__first)
    if (__pred(*__first))
      return false;
  return true;
}

}}
# 1826 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/is_permutation.h" 1 3
# 27 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/is_permutation.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 31 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/is_permutation.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Iter1, class _Sent1, class _Iter2, class _Sent2, class = void>
struct _ConstTimeDistance : false_type {};
# 49 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/is_permutation.h" 3
template <class _Iter1, class _Iter2>
struct _ConstTimeDistance<
    _Iter1,
    _Iter1,
    _Iter2,
    _Iter2,
    __enable_if_t< is_same<typename iterator_traits<_Iter1>::iterator_category, random_access_iterator_tag>::value &&
                   is_same<typename iterator_traits<_Iter2>::iterator_category, random_access_iterator_tag>::value > >
    : true_type {};






template <class _AlgPolicy,
          class _Iter1,
          class _Sent1,
          class _Iter2,
          class _Sent2,
          class _Proj1,
          class _Proj2,
          class _Pred>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool __is_permutation_impl(
    _Iter1 __first1,
    _Sent1 __last1,
    _Iter2 __first2,
    _Sent2 __last2,
    _Pred&& __pred,
    _Proj1&& __proj1,
    _Proj2&& __proj2) {
  using _D1 = __iter_diff_t<_Iter1>;

  for (auto __i = __first1; __i != __last1; ++__i) {

    auto __match = __first1;
    for (; __match != __i; ++__match) {
      if (std::__invoke(__pred, std::__invoke(__proj1, *__match), std::__invoke(__proj1, *__i)))
        break;
    }

    if (__match == __i) {

      _D1 __c2 = 0;
      for (auto __j = __first2; __j != __last2; ++__j) {
        if (std::__invoke(__pred, std::__invoke(__proj1, *__i), std::__invoke(__proj2, *__j)))
          ++__c2;
      }
      if (__c2 == 0)
        return false;


      _D1 __c1 = 1;
      for (auto __j = _IterOps<_AlgPolicy>::next(__i); __j != __last1; ++__j) {
        if (std::__invoke(__pred, std::__invoke(__proj1, *__i), std::__invoke(__proj1, *__j)))
          ++__c1;
      }
      if (__c1 != __c2)
        return false;
    }
  }

  return true;
}


template <class _AlgPolicy, class _ForwardIterator1, class _Sentinel1, class _ForwardIterator2, class _BinaryPredicate>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool __is_permutation(
    _ForwardIterator1 __first1, _Sentinel1 __last1, _ForwardIterator2 __first2, _BinaryPredicate&& __pred) {

  for (; __first1 != __last1; ++__first1, (void)++__first2) {
    if (!__pred(*__first1, *__first2))
      break;
  }

  if (__first1 == __last1)
    return true;


  using _D1 = __iter_diff_t<_ForwardIterator1>;
  _D1 __l1 = _IterOps<_AlgPolicy>::distance(__first1, __last1);
  if (__l1 == _D1(1))
    return false;
  auto __last2 = _IterOps<_AlgPolicy>::next(__first2, __l1);

  return std::__is_permutation_impl<_AlgPolicy>(
      std::move(__first1),
      std::move(__last1),
      std::move(__first2),
      std::move(__last2),
      __pred,
      __identity(),
      __identity());
}


template <class _AlgPolicy,
          class _Iter1,
          class _Sent1,
          class _Iter2,
          class _Sent2,
          class _Proj1,
          class _Proj2,
          class _Pred>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool __is_permutation(
    _Iter1 __first1,
    _Sent1 __last1,
    _Iter2 __first2,
    _Sent2 __last2,
    _Pred&& __pred,
    _Proj1&& __proj1,
    _Proj2&& __proj2,
                           false_type) {

  while (__first1 != __last1 && __first2 != __last2) {
    if (!std::__invoke(__pred, std::__invoke(__proj1, *__first1), std::__invoke(__proj2, *__first2)))
      break;
    ++__first1;
    ++__first2;
  }

  if (__first1 == __last1)
    return __first2 == __last2;
  if (__first2 == __last2)
    return false;

  using _D1 = __iter_diff_t<_Iter1>;
  _D1 __l1 = _IterOps<_AlgPolicy>::distance(__first1, __last1);

  using _D2 = __iter_diff_t<_Iter2>;
  _D2 __l2 = _IterOps<_AlgPolicy>::distance(__first2, __last2);
  if (__l1 != __l2)
    return false;

  return std::__is_permutation_impl<_AlgPolicy>(
      std::move(__first1), std::move(__last1), std::move(__first2), std::move(__last2), __pred, __proj1, __proj2);
}


template <class _AlgPolicy,
          class _Iter1,
          class _Sent1,
          class _Iter2,
          class _Sent2,
          class _Proj1,
          class _Proj2,
          class _Pred>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool __is_permutation(
    _Iter1 __first1,
    _Sent1 __last1,
    _Iter2 __first2,
    _Sent2 __last2,
    _Pred&& __pred,
    _Proj1&& __proj1,
    _Proj2&& __proj2,
                           true_type) {
  if (std::distance(__first1, __last1) != std::distance(__first2, __last2))
    return false;
  return std::__is_permutation<_AlgPolicy>(
      std::move(__first1),
      std::move(__last1),
      std::move(__first2),
      std::move(__last2),
      __pred,
      __proj1,
      __proj2,
                             false_type());
}


template <class _AlgPolicy,
          class _Iter1,
          class _Sent1,
          class _Iter2,
          class _Sent2,
          class _Proj1,
          class _Proj2,
          class _Pred>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool __is_permutation(
    _Iter1 __first1,
    _Sent1 __last1,
    _Iter2 __first2,
    _Sent2 __last2,
    _Pred&& __pred,
    _Proj1&& __proj1,
    _Proj2&& __proj2) {
  return std::__is_permutation<_AlgPolicy>(
      std::move(__first1),
      std::move(__last1),
      std::move(__first2),
      std::move(__last2),
      __pred,
      __proj1,
      __proj2,
      _ConstTimeDistance<_Iter1, _Sent1, _Iter2, _Sent2>());
}




template <class _ForwardIterator1, class _ForwardIterator2, class _BinaryPredicate>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool is_permutation(
    _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _BinaryPredicate __pred) {
  static_assert(__is_callable<_BinaryPredicate, decltype(*__first1), decltype(*__first2)>::value,
                "The predicate has to be callable");

  return std::__is_permutation<_ClassicAlgPolicy>(std::move(__first1), std::move(__last1), std::move(__first2), __pred);
}


template <class _ForwardIterator1, class _ForwardIterator2>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2) {
  return std::is_permutation(__first1, __last1, __first2, __equal_to());
}




template <class _ForwardIterator1, class _ForwardIterator2>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool is_permutation(
    _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2) {
  return std::__is_permutation<_ClassicAlgPolicy>(
      std::move(__first1),
      std::move(__last1),
      std::move(__first2),
      std::move(__last2),
      __equal_to(),
      __identity(),
      __identity());
}


template <class _ForwardIterator1, class _ForwardIterator2, class _BinaryPredicate>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool is_permutation(
    _ForwardIterator1 __first1,
    _ForwardIterator1 __last1,
    _ForwardIterator2 __first2,
    _ForwardIterator2 __last2,
    _BinaryPredicate __pred) {
  static_assert(__is_callable<_BinaryPredicate, decltype(*__first1), decltype(*__first2)>::value,
                "The predicate has to be callable");

  return std::__is_permutation<_ClassicAlgPolicy>(
      std::move(__first1),
      std::move(__last1),
      std::move(__first2),
      std::move(__last2),
      __pred,
      __identity(),
      __identity());
}



}}
# 1827 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/is_sorted.h" 1 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/is_sorted.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/is_sorted_until.h" 1 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/is_sorted_until.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Compare, class _ForwardIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _ForwardIterator
__is_sorted_until(_ForwardIterator __first, _ForwardIterator __last, _Compare __comp) {
  if (__first != __last) {
    _ForwardIterator __i = __first;
    while (++__i != __last) {
      if (__comp(*__i, *__first))
        return __i;
      __first = __i;
    }
  }
  return __last;
}

template <class _ForwardIterator, class _Compare>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _ForwardIterator
is_sorted_until(_ForwardIterator __first, _ForwardIterator __last, _Compare __comp) {
  return std::__is_sorted_until<__comp_ref_type<_Compare> >(__first, __last, __comp);
}

template <class _ForwardIterator>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _ForwardIterator
is_sorted_until(_ForwardIterator __first, _ForwardIterator __last) {
  return std::is_sorted_until(__first, __last, __less<>());
}

}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/is_sorted.h" 2 3
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/is_sorted.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _ForwardIterator, class _Compare>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
is_sorted(_ForwardIterator __first, _ForwardIterator __last, _Compare __comp) {
  return std::__is_sorted_until<__comp_ref_type<_Compare> >(__first, __last, __comp) == __last;
}

template <class _ForwardIterator>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
is_sorted(_ForwardIterator __first, _ForwardIterator __last) {
  return std::is_sorted(__first, __last, __less<>());
}

}}
# 1828 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3





# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/make_heap.h" 1 3
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/make_heap.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/sift_down.h" 1 3
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/sift_down.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/sift_down.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _AlgPolicy, class _Compare, class _RandomAccessIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr void
__sift_down(_RandomAccessIterator __first,
            _Compare&& __comp,
            typename iterator_traits<_RandomAccessIterator>::difference_type __len,
            _RandomAccessIterator __start) {
  using _Ops = _IterOps<_AlgPolicy>;

  typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type;
  typedef typename iterator_traits<_RandomAccessIterator>::value_type value_type;


  difference_type __child = __start - __first;

  if (__len < 2 || (__len - 2) / 2 < __child)
    return;

  __child = 2 * __child + 1;
  _RandomAccessIterator __child_i = __first + __child;

  if ((__child + 1) < __len && __comp(*__child_i, *(__child_i + difference_type(1)))) {

    ++__child_i;
    ++__child;
  }


  if (__comp(*__child_i, *__start))

    return;

  value_type __top(_Ops::__iter_move(__start));
  do {

    *__start = _Ops::__iter_move(__child_i);
    __start = __child_i;

    if ((__len - 2) / 2 < __child)
      break;


    __child = 2 * __child + 1;
    __child_i = __first + __child;

    if ((__child + 1) < __len && __comp(*__child_i, *(__child_i + difference_type(1)))) {

      ++__child_i;
      ++__child;
    }


  } while (!__comp(*__child_i, __top));
  *__start = std::move(__top);
}

template <class _AlgPolicy, class _Compare, class _RandomAccessIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _RandomAccessIterator __floyd_sift_down(
    _RandomAccessIterator __first,
    _Compare&& __comp,
    typename iterator_traits<_RandomAccessIterator>::difference_type __len) {
  using difference_type = typename iterator_traits<_RandomAccessIterator>::difference_type;
  ((void)0);

  _RandomAccessIterator __hole = __first;
  _RandomAccessIterator __child_i = __first;
  difference_type __child = 0;

  while (true) {
    __child_i += difference_type(__child + 1);
    __child = 2 * __child + 1;

    if ((__child + 1) < __len && __comp(*__child_i, *(__child_i + difference_type(1)))) {

      ++__child_i;
      ++__child;
    }


    *__hole = _IterOps<_AlgPolicy>::__iter_move(__child_i);
    __hole = __child_i;


    if (__child > (__len - 2) / 2)
      return __hole;
  }
}

}}
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/make_heap.h" 2 3
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/make_heap.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 26 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/make_heap.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _AlgPolicy, class _Compare, class _RandomAccessIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr void
__make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare&& __comp) {
  __comp_ref_type<_Compare> __comp_ref = __comp;

  using difference_type = typename iterator_traits<_RandomAccessIterator>::difference_type;
  difference_type __n = __last - __first;
  if (__n > 1) {

    for (difference_type __start = (__n - 2) / 2; __start >= 0; --__start) {
      std::__sift_down<_AlgPolicy>(__first, __comp_ref, __n, __first + __start);
    }
  }
}

template <class _RandomAccessIterator, class _Compare>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp) {
  std::__make_heap<_ClassicAlgPolicy>(std::move(__first), std::move(__last), __comp);
}

template <class _RandomAccessIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last) {
  std::make_heap(std::move(__first), std::move(__last), __less<>());
}

}}
# 1834 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/max.h" 1 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/max.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/max_element.h" 1 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/max_element.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Compare, class _ForwardIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _ForwardIterator
__max_element(_ForwardIterator __first, _ForwardIterator __last, _Compare __comp) {
  static_assert(
      __has_forward_iterator_category<_ForwardIterator>::value, "std::max_element requires a ForwardIterator");
  if (__first != __last) {
    _ForwardIterator __i = __first;
    while (++__i != __last)
      if (__comp(*__first, *__i))
        __first = __i;
  }
  return __first;
}

template <class _ForwardIterator, class _Compare>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _ForwardIterator
max_element(_ForwardIterator __first, _ForwardIterator __last, _Compare __comp) {
  return std::__max_element<__comp_ref_type<_Compare> >(__first, __last, __comp);
}

template <class _ForwardIterator>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _ForwardIterator
max_element(_ForwardIterator __first, _ForwardIterator __last) {
  return std::max_element(__first, __last, __less<>());
}

}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/max.h" 2 3
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/max.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/max.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp, class _Compare>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const _Tp&
max([[_Clang::__lifetimebound__]] const _Tp& __a, [[_Clang::__lifetimebound__]] const _Tp& __b, _Compare __comp) {
  return __comp(__a, __b) ? __b : __a;
}

template <class _Tp>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const _Tp&
max([[_Clang::__lifetimebound__]] const _Tp& __a, [[_Clang::__lifetimebound__]] const _Tp& __b) {
  return std::max(__a, __b, __less<>());
}



template <class _Tp, class _Compare>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Tp
max(initializer_list<_Tp> __t, _Compare __comp) {
  return *std::__max_element<__comp_ref_type<_Compare> >(__t.begin(), __t.end(), __comp);
}

template <class _Tp>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Tp max(initializer_list<_Tp> __t) {
  return *std::max_element(__t.begin(), __t.end(), __less<>());
}



}}
# 1835 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/merge.h" 1 3
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/merge.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Compare, class _InputIterator1, class _InputIterator2, class _OutputIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _OutputIterator __merge(
    _InputIterator1 __first1,
    _InputIterator1 __last1,
    _InputIterator2 __first2,
    _InputIterator2 __last2,
    _OutputIterator __result,
    _Compare __comp) {
  for (; __first1 != __last1; ++__result) {
    if (__first2 == __last2)
      return std::copy(__first1, __last1, __result);
    if (__comp(*__first2, *__first1)) {
      *__result = *__first2;
      ++__first2;
    } else {
      *__result = *__first1;
      ++__first1;
    }
  }
  return std::copy(__first2, __last2, __result);
}

template <class _InputIterator1, class _InputIterator2, class _OutputIterator, class _Compare>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _OutputIterator
merge(_InputIterator1 __first1,
      _InputIterator1 __last1,
      _InputIterator2 __first2,
      _InputIterator2 __last2,
      _OutputIterator __result,
      _Compare __comp) {
  return std::__merge<__comp_ref_type<_Compare> >(__first1, __last1, __first2, __last2, __result, __comp);
}

template <class _InputIterator1, class _InputIterator2, class _OutputIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _OutputIterator
merge(_InputIterator1 __first1,
      _InputIterator1 __last1,
      _InputIterator2 __first2,
      _InputIterator2 __last2,
      _OutputIterator __result) {
  return std::merge(__first1, __last1, __first2, __last2, __result, __less<>());
}

}}
# 1837 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3


# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/min_max_result.h" 1 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/min_max_result.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/min_max_result.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 52 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/min_max_result.h" 3
}}
# 1840 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/minmax.h" 1 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/minmax.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/minmax_element.h" 1 3
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/minmax_element.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Comp, class _Proj>
class _MinmaxElementLessFunc {
  _Comp& __comp_;
  _Proj& __proj_;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _MinmaxElementLessFunc(_Comp& __comp, _Proj& __proj)
      : __comp_(__comp), __proj_(__proj) {}

  template <class _Iter>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool operator()(_Iter& __it1, _Iter& __it2) {
    return std::__invoke(__comp_, std::__invoke(__proj_, *__it1), std::__invoke(__proj_, *__it2));
  }
};

template <class _Iter, class _Sent, class _Proj, class _Comp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pair<_Iter, _Iter>
__minmax_element_impl(_Iter __first, _Sent __last, _Comp& __comp, _Proj& __proj) {
  auto __less = _MinmaxElementLessFunc<_Comp, _Proj>(__comp, __proj);

  pair<_Iter, _Iter> __result(__first, __first);
  if (__first == __last || ++__first == __last)
    return __result;

  if (__less(__first, __result.first))
    __result.first = __first;
  else
    __result.second = __first;

  while (++__first != __last) {
    _Iter __i = __first;
    if (++__first == __last) {
      if (__less(__i, __result.first))
        __result.first = __i;
      else if (!__less(__i, __result.second))
        __result.second = __i;
      return __result;
    }

    if (__less(__first, __i)) {
      if (__less(__first, __result.first))
        __result.first = __first;
      if (!__less(__i, __result.second))
        __result.second = __i;
    } else {
      if (__less(__i, __result.first))
        __result.first = __i;
      if (!__less(__first, __result.second))
        __result.second = __first;
    }
  }

  return __result;
}

template <class _ForwardIterator, class _Compare>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pair<_ForwardIterator, _ForwardIterator>
minmax_element(_ForwardIterator __first, _ForwardIterator __last, _Compare __comp) {
  static_assert(
      __has_forward_iterator_category<_ForwardIterator>::value, "std::minmax_element requires a ForwardIterator");
  static_assert(
      __is_callable<_Compare, decltype(*__first), decltype(*__first)>::value, "The comparator has to be callable");
  auto __proj = __identity();
  return std::__minmax_element_impl(__first, __last, __comp, __proj);
}

template <class _ForwardIterator>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr
    pair<_ForwardIterator, _ForwardIterator>
    minmax_element(_ForwardIterator __first, _ForwardIterator __last) {
  return std::minmax_element(__first, __last, __less<>());
}

}}
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/minmax.h" 2 3
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/minmax.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp, class _Compare>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pair<const _Tp&, const _Tp&>
minmax([[_Clang::__lifetimebound__]] const _Tp& __a, [[_Clang::__lifetimebound__]] const _Tp& __b, _Compare __comp) {
  return __comp(__b, __a) ? pair<const _Tp&, const _Tp&>(__b, __a) : pair<const _Tp&, const _Tp&>(__a, __b);
}

template <class _Tp>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pair<const _Tp&, const _Tp&>
minmax([[_Clang::__lifetimebound__]] const _Tp& __a, [[_Clang::__lifetimebound__]] const _Tp& __b) {
  return std::minmax(__a, __b, __less<>());
}



template <class _Tp, class _Compare>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pair<_Tp, _Tp>
minmax(initializer_list<_Tp> __t, _Compare __comp) {
  static_assert(__is_callable<_Compare, _Tp, _Tp>::value, "The comparator has to be callable");
  __identity __proj;
  auto __ret = std::__minmax_element_impl(__t.begin(), __t.end(), __comp, __proj);
  return pair<_Tp, _Tp>(*__ret.first, *__ret.second);
}

template <class _Tp>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pair<_Tp, _Tp>
minmax(initializer_list<_Tp> __t) {
  return std::minmax(__t, __less<>());
}



}}
# 1841 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/mismatch.h" 1 3
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/mismatch.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _InputIterator1, class _InputIterator2, class _BinaryPredicate>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) pair<_InputIterator1, _InputIterator2>
mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _BinaryPredicate __pred) {
  for (; __first1 != __last1; ++__first1, (void)++__first2)
    if (!__pred(*__first1, *__first2))
      break;
  return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
}

template <class _InputIterator1, class _InputIterator2>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) pair<_InputIterator1, _InputIterator2>
mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2) {
  return std::mismatch(__first1, __last1, __first2, __equal_to());
}


template <class _InputIterator1, class _InputIterator2, class _BinaryPredicate>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) pair<_InputIterator1, _InputIterator2>
mismatch(_InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _BinaryPredicate __pred) {
  for (; __first1 != __last1 && __first2 != __last2; ++__first1, (void)++__first2)
    if (!__pred(*__first1, *__first2))
      break;
  return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
}

template <class _InputIterator1, class _InputIterator2>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) pair<_InputIterator1, _InputIterator2>
mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2) {
  return std::mismatch(__first1, __last1, __first2, __last2, __equal_to());
}


}}
# 1843 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3


# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/next_permutation.h" 1 3
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/next_permutation.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/reverse.h" 1 3
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/reverse.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/reverse.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _AlgPolicy, class _BidirectionalIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
__reverse_impl(_BidirectionalIterator __first, _BidirectionalIterator __last, bidirectional_iterator_tag) {
  while (__first != __last) {
    if (__first == --__last)
      break;
    _IterOps<_AlgPolicy>::iter_swap(__first, __last);
    ++__first;
  }
}

template <class _AlgPolicy, class _RandomAccessIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
__reverse_impl(_RandomAccessIterator __first, _RandomAccessIterator __last, random_access_iterator_tag) {
  if (__first != __last)
    for (; __first < --__last; ++__first)
      _IterOps<_AlgPolicy>::iter_swap(__first, __last);
}

template <class _AlgPolicy, class _BidirectionalIterator, class _Sentinel>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __reverse(_BidirectionalIterator __first, _Sentinel __last) {
  using _IterCategory = typename _IterOps<_AlgPolicy>::template __iterator_category<_BidirectionalIterator>;
  std::__reverse_impl<_AlgPolicy>(std::move(__first), std::move(__last), _IterCategory());
}

template <class _BidirectionalIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
reverse(_BidirectionalIterator __first, _BidirectionalIterator __last) {
  std::__reverse<_ClassicAlgPolicy>(std::move(__first), std::move(__last));
}

}}
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/next_permutation.h" 2 3
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/next_permutation.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 27 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/next_permutation.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _AlgPolicy, class _Compare, class _BidirectionalIterator, class _Sentinel>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) pair<_BidirectionalIterator, bool>
__next_permutation(_BidirectionalIterator __first, _Sentinel __last, _Compare&& __comp) {
  using _Result = pair<_BidirectionalIterator, bool>;

  _BidirectionalIterator __last_iter = _IterOps<_AlgPolicy>::next(__first, __last);
  _BidirectionalIterator __i = __last_iter;
  if (__first == __last || __first == --__i)
    return _Result(std::move(__last_iter), false);

  while (true) {
    _BidirectionalIterator __ip1 = __i;
    if (__comp(*--__i, *__ip1)) {
      _BidirectionalIterator __j = __last_iter;
      while (!__comp(*__i, *--__j))
        ;
      _IterOps<_AlgPolicy>::iter_swap(__i, __j);
      std::__reverse<_AlgPolicy>(__ip1, __last_iter);
      return _Result(std::move(__last_iter), true);
    }
    if (__i == __first) {
      std::__reverse<_AlgPolicy>(__first, __last_iter);
      return _Result(std::move(__last_iter), false);
    }
  }
}

template <class _BidirectionalIterator, class _Compare>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
next_permutation(_BidirectionalIterator __first, _BidirectionalIterator __last, _Compare __comp) {
  return std::__next_permutation<_ClassicAlgPolicy>(
             std::move(__first), std::move(__last), static_cast<__comp_ref_type<_Compare> >(__comp))
      .second;
}

template <class _BidirectionalIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
next_permutation(_BidirectionalIterator __first, _BidirectionalIterator __last) {
  return std::next_permutation(__first, __last, __less<>());
}

}}
# 1846 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/none_of.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/none_of.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _InputIterator, class _Predicate>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
none_of(_InputIterator __first, _InputIterator __last, _Predicate __pred) {
  for (; __first != __last; ++__first)
    if (__pred(*__first))
      return false;
  return true;
}

}}
# 1847 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/nth_element.h" 1 3
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/nth_element.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/sort.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/sort.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/partial_sort.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/partial_sort.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/sort_heap.h" 1 3
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/sort_heap.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pop_heap.h" 1 3
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pop_heap.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/push_heap.h" 1 3
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/push_heap.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 27 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/push_heap.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _AlgPolicy, class _Compare, class _RandomAccessIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr void
__sift_up(_RandomAccessIterator __first,
          _RandomAccessIterator __last,
          _Compare&& __comp,
          typename iterator_traits<_RandomAccessIterator>::difference_type __len) {
  using value_type = typename iterator_traits<_RandomAccessIterator>::value_type;

  if (__len > 1) {
    __len = (__len - 2) / 2;
    _RandomAccessIterator __ptr = __first + __len;

    if (__comp(*__ptr, *--__last)) {
      value_type __t(_IterOps<_AlgPolicy>::__iter_move(__last));
      do {
        *__last = _IterOps<_AlgPolicy>::__iter_move(__ptr);
        __last = __ptr;
        if (__len == 0)
          break;
        __len = (__len - 1) / 2;
        __ptr = __first + __len;
      } while (__comp(*__ptr, __t));

      *__last = std::move(__t);
    }
  }
}

template <class _AlgPolicy, class _RandomAccessIterator, class _Compare>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr void
__push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare& __comp) {
  typename iterator_traits<_RandomAccessIterator>::difference_type __len = __last - __first;
  std::__sift_up<_AlgPolicy, __comp_ref_type<_Compare> >(std::move(__first), std::move(__last), __comp, __len);
}

template <class _RandomAccessIterator, class _Compare>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp) {
  static_assert(std::is_copy_constructible<_RandomAccessIterator>::value, "Iterators must be copy constructible.");
  static_assert(std::is_copy_assignable<_RandomAccessIterator>::value, "Iterators must be copy assignable.");

  std::__push_heap<_ClassicAlgPolicy>(std::move(__first), std::move(__last), __comp);
}

template <class _RandomAccessIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last) {
  std::push_heap(std::move(__first), std::move(__last), __less<>());
}

}}
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pop_heap.h" 2 3
# 26 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pop_heap.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 30 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pop_heap.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _AlgPolicy, class _Compare, class _RandomAccessIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr void
__pop_heap(_RandomAccessIterator __first,
           _RandomAccessIterator __last,
           _Compare& __comp,
           typename iterator_traits<_RandomAccessIterator>::difference_type __len) {

  ((void)0);

  __comp_ref_type<_Compare> __comp_ref = __comp;

  using value_type = typename iterator_traits<_RandomAccessIterator>::value_type;
  if (__len > 1) {
    value_type __top = _IterOps<_AlgPolicy>::__iter_move(__first);
    _RandomAccessIterator __hole = std::__floyd_sift_down<_AlgPolicy>(__first, __comp_ref, __len);
    --__last;

    if (__hole == __last) {
      *__hole = std::move(__top);
    } else {
      *__hole = _IterOps<_AlgPolicy>::__iter_move(__last);
      ++__hole;
      *__last = std::move(__top);
      std::__sift_up<_AlgPolicy>(__first, __hole, __comp_ref, __hole - __first);
    }
  }
}

template <class _RandomAccessIterator, class _Compare>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp) {
  static_assert(std::is_copy_constructible<_RandomAccessIterator>::value, "Iterators must be copy constructible.");
  static_assert(std::is_copy_assignable<_RandomAccessIterator>::value, "Iterators must be copy assignable.");

  typename iterator_traits<_RandomAccessIterator>::difference_type __len = __last - __first;
  std::__pop_heap<_ClassicAlgPolicy>(std::move(__first), std::move(__last), __comp, __len);
}

template <class _RandomAccessIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last) {
  std::pop_heap(std::move(__first), std::move(__last), __less<>());
}

}}
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/sort_heap.h" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__debug_utils/strict_weak_ordering_check.h" 1 3
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__debug_utils/strict_weak_ordering_check.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _RandomAccessIterator, class _Comp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr void
__check_strict_weak_ordering_sorted(_RandomAccessIterator __first, _RandomAccessIterator __last, _Comp& __comp) {
# 69 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__debug_utils/strict_weak_ordering_check.h" 3
  (void)__first;
  (void)__last;
  (void)__comp;

}

}}
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/sort_heap.h" 2 3
# 25 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/sort_heap.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 29 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/sort_heap.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _AlgPolicy, class _Compare, class _RandomAccessIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr void
__sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare&& __comp) {
  _RandomAccessIterator __saved_last = __last;
  __comp_ref_type<_Compare> __comp_ref = __comp;

  using difference_type = typename iterator_traits<_RandomAccessIterator>::difference_type;
  for (difference_type __n = __last - __first; __n > 1; --__last, (void)--__n)
    std::__pop_heap<_AlgPolicy>(__first, __last, __comp_ref, __n);
  std::__check_strict_weak_ordering_sorted(__first, __saved_last, __comp_ref);
}

template <class _RandomAccessIterator, class _Compare>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp) {
  static_assert(std::is_copy_constructible<_RandomAccessIterator>::value, "Iterators must be copy constructible.");
  static_assert(std::is_copy_assignable<_RandomAccessIterator>::value, "Iterators must be copy assignable.");

  std::__sort_heap<_ClassicAlgPolicy>(std::move(__first), std::move(__last), __comp);
}

template <class _RandomAccessIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last) {
  std::sort_heap(std::move(__first), std::move(__last), __less<>());
}

}}
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/partial_sort.h" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__debug_utils/randomize_range.h" 1 3
# 21 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__debug_utils/randomize_range.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _AlgPolicy, class _Iterator, class _Sentinel>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr void __debug_randomize_range(_Iterator __first, _Sentinel __last) {
# 35 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__debug_utils/randomize_range.h" 3
  (void)__first;
  (void)__last;

}

}}
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/partial_sort.h" 2 3
# 27 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/partial_sort.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 31 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/partial_sort.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _AlgPolicy, class _Compare, class _RandomAccessIterator, class _Sentinel>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _RandomAccessIterator __partial_sort_impl(
    _RandomAccessIterator __first, _RandomAccessIterator __middle, _Sentinel __last, _Compare&& __comp) {
  if (__first == __middle) {
    return _IterOps<_AlgPolicy>::next(__middle, __last);
  }

  std::__make_heap<_AlgPolicy>(__first, __middle, __comp);

  typename iterator_traits<_RandomAccessIterator>::difference_type __len = __middle - __first;
  _RandomAccessIterator __i = __middle;
  for (; __i != __last; ++__i) {
    if (__comp(*__i, *__first)) {
      _IterOps<_AlgPolicy>::iter_swap(__i, __first);
      std::__sift_down<_AlgPolicy>(__first, __comp, __len, __first);
    }
  }
  std::__sort_heap<_AlgPolicy>(std::move(__first), std::move(__middle), __comp);

  return __i;
}

template <class _AlgPolicy, class _Compare, class _RandomAccessIterator, class _Sentinel>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _RandomAccessIterator
__partial_sort(_RandomAccessIterator __first, _RandomAccessIterator __middle, _Sentinel __last, _Compare& __comp) {
  if (__first == __middle)
    return _IterOps<_AlgPolicy>::next(__middle, __last);

  std::__debug_randomize_range<_AlgPolicy>(__first, __last);

  auto __last_iter =
      std::__partial_sort_impl<_AlgPolicy>(__first, __middle, __last, static_cast<__comp_ref_type<_Compare> >(__comp));

  std::__debug_randomize_range<_AlgPolicy>(__middle, __last);

  return __last_iter;
}

template <class _RandomAccessIterator, class _Compare>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void partial_sort(
    _RandomAccessIterator __first, _RandomAccessIterator __middle, _RandomAccessIterator __last, _Compare __comp) {
  static_assert(std::is_copy_constructible<_RandomAccessIterator>::value, "Iterators must be copy constructible.");
  static_assert(std::is_copy_assignable<_RandomAccessIterator>::value, "Iterators must be copy assignable.");

  (void)std::__partial_sort<_ClassicAlgPolicy>(std::move(__first), std::move(__middle), std::move(__last), __comp);
}

template <class _RandomAccessIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
partial_sort(_RandomAccessIterator __first, _RandomAccessIterator __middle, _RandomAccessIterator __last) {
  std::partial_sort(__first, __middle, __last, __less<>());
}

}}
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/sort.h" 2 3


# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__bit/blsr.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__bit/blsr.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr unsigned __libcpp_blsr(unsigned __x) noexcept {
  return __x ^ (__x & -__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr unsigned long __libcpp_blsr(unsigned long __x) noexcept {
  return __x ^ (__x & -__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr unsigned long long __libcpp_blsr(unsigned long long __x) noexcept {
  return __x ^ (__x & -__x);
}

}}
# 21 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/sort.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__bit/countl.h" 1 3
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__bit/countl.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__bit/countl.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr int __libcpp_clz(unsigned __x) noexcept {
  return __builtin_clz(__x);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr int __libcpp_clz(unsigned long __x) noexcept {
  return __builtin_clzl(__x);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr int __libcpp_clz(unsigned long long __x) noexcept {
  return __builtin_clzll(__x);
}
# 55 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__bit/countl.h" 3
template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr int __countl_zero(_Tp __t) noexcept {
  static_assert(__libcpp_is_unsigned_integer<_Tp>::value, "__countl_zero requires an unsigned integer type");
  if (__t == 0)
    return numeric_limits<_Tp>::digits;

  if (sizeof(_Tp) <= sizeof(unsigned int))
    return std::__libcpp_clz(static_cast<unsigned int>(__t)) -
           (numeric_limits<unsigned int>::digits - numeric_limits<_Tp>::digits);
  else if (sizeof(_Tp) <= sizeof(unsigned long))
    return std::__libcpp_clz(static_cast<unsigned long>(__t)) -
           (numeric_limits<unsigned long>::digits - numeric_limits<_Tp>::digits);
  else if (sizeof(_Tp) <= sizeof(unsigned long long))
    return std::__libcpp_clz(static_cast<unsigned long long>(__t)) -
           (numeric_limits<unsigned long long>::digits - numeric_limits<_Tp>::digits);
  else {
    int __ret = 0;
    int __iter = 0;
    const unsigned int __ulldigits = numeric_limits<unsigned long long>::digits;
    while (true) {
      __t = std::__rotl(__t, __ulldigits);
      if ((__iter = std::__countl_zero(static_cast<unsigned long long>(__t))) != __ulldigits)
        break;
      __ret += __iter;
    }
    return __ret + __iter;
  }
}
# 98 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__bit/countl.h" 3
}}
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/sort.h" 2 3
# 40 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/sort.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 44 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/sort.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



template <class _AlgPolicy, class _Compare, class _ForwardIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr unsigned
__sort3(_ForwardIterator __x, _ForwardIterator __y, _ForwardIterator __z, _Compare __c) {
  using _Ops = _IterOps<_AlgPolicy>;

  unsigned __r = 0;
  if (!__c(*__y, *__x))
  {
    if (!__c(*__z, *__y))
      return __r;

    _Ops::iter_swap(__y, __z);
    __r = 1;
    if (__c(*__y, *__x))
    {
      _Ops::iter_swap(__x, __y);
      __r = 2;
    }
    return __r;
  }
  if (__c(*__z, *__y))
  {
    _Ops::iter_swap(__x, __z);
    __r = 1;
    return __r;
  }
  _Ops::iter_swap(__x, __y);
  __r = 1;
  if (__c(*__z, *__y))
  {
    _Ops::iter_swap(__y, __z);
    __r = 2;
  }
  return __r;
}



template <class _AlgPolicy, class _Compare, class _ForwardIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
__sort4(_ForwardIterator __x1, _ForwardIterator __x2, _ForwardIterator __x3, _ForwardIterator __x4, _Compare __c) {
  using _Ops = _IterOps<_AlgPolicy>;
  std::__sort3<_AlgPolicy, _Compare>(__x1, __x2, __x3, __c);
  if (__c(*__x4, *__x3)) {
    _Ops::iter_swap(__x3, __x4);
    if (__c(*__x3, *__x2)) {
      _Ops::iter_swap(__x2, __x3);
      if (__c(*__x2, *__x1)) {
        _Ops::iter_swap(__x1, __x2);
      }
    }
  }
}



template <class _AlgPolicy, class _Comp, class _ForwardIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
__sort5(_ForwardIterator __x1,
        _ForwardIterator __x2,
        _ForwardIterator __x3,
        _ForwardIterator __x4,
        _ForwardIterator __x5,
        _Comp __comp) {
  using _Ops = _IterOps<_AlgPolicy>;

  std::__sort4<_AlgPolicy, _Comp>(__x1, __x2, __x3, __x4, __comp);
  if (__comp(*__x5, *__x4)) {
    _Ops::iter_swap(__x4, __x5);
    if (__comp(*__x4, *__x3)) {
      _Ops::iter_swap(__x3, __x4);
      if (__comp(*__x3, *__x2)) {
        _Ops::iter_swap(__x2, __x3);
        if (__comp(*__x2, *__x1)) {
          _Ops::iter_swap(__x1, __x2);
        }
      }
    }
  }
}


template <class _Tp>
struct __is_simple_comparator : false_type {};
template <>
struct __is_simple_comparator<__less<>&> : true_type {};
template <class _Tp>
struct __is_simple_comparator<less<_Tp>&> : true_type {};
template <class _Tp>
struct __is_simple_comparator<greater<_Tp>&> : true_type {};







template <class _Compare, class _Iter, class _Tp = typename iterator_traits<_Iter>::value_type>
using __use_branchless_sort =
    integral_constant<bool,
                      __libcpp_is_contiguous_iterator<_Iter>::value && sizeof(_Tp) <= sizeof(void*) &&
                          is_arithmetic<_Tp>::value && __is_simple_comparator<_Compare>::value>;

namespace __detail {


enum { __block_size = sizeof(uint64_t) * 8 };

}


template <class _Compare, class _RandomAccessIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __cond_swap(_RandomAccessIterator __x, _RandomAccessIterator __y, _Compare __c) {

  using value_type = typename iterator_traits<_RandomAccessIterator>::value_type;
  bool __r = __c(*__x, *__y);
  value_type __tmp = __r ? *__x : *__y;
  *__y = __r ? *__y : *__x;
  *__x = __tmp;
}



template <class _Compare, class _RandomAccessIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
__partially_sorted_swap(_RandomAccessIterator __x, _RandomAccessIterator __y, _RandomAccessIterator __z, _Compare __c) {

  using value_type = typename iterator_traits<_RandomAccessIterator>::value_type;
  bool __r = __c(*__z, *__x);
  value_type __tmp = __r ? *__z : *__x;
  *__z = __r ? *__x : *__z;
  __r = __c(__tmp, *__y);
  *__x = __r ? *__x : *__y;
  *__y = __r ? *__y : __tmp;
}

template <class,
          class _Compare,
          class _RandomAccessIterator,
          __enable_if_t<__use_branchless_sort<_Compare, _RandomAccessIterator>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __sort3_maybe_branchless(
    _RandomAccessIterator __x1, _RandomAccessIterator __x2, _RandomAccessIterator __x3, _Compare __c) {
  std::__cond_swap<_Compare>(__x2, __x3, __c);
  std::__partially_sorted_swap<_Compare>(__x1, __x2, __x3, __c);
}

template <class _AlgPolicy,
          class _Compare,
          class _RandomAccessIterator,
          __enable_if_t<!__use_branchless_sort<_Compare, _RandomAccessIterator>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __sort3_maybe_branchless(
    _RandomAccessIterator __x1, _RandomAccessIterator __x2, _RandomAccessIterator __x3, _Compare __c) {
  std::__sort3<_AlgPolicy, _Compare>(__x1, __x2, __x3, __c);
}

template <class,
          class _Compare,
          class _RandomAccessIterator,
          __enable_if_t<__use_branchless_sort<_Compare, _RandomAccessIterator>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __sort4_maybe_branchless(
    _RandomAccessIterator __x1,
    _RandomAccessIterator __x2,
    _RandomAccessIterator __x3,
    _RandomAccessIterator __x4,
    _Compare __c) {
  std::__cond_swap<_Compare>(__x1, __x3, __c);
  std::__cond_swap<_Compare>(__x2, __x4, __c);
  std::__cond_swap<_Compare>(__x1, __x2, __c);
  std::__cond_swap<_Compare>(__x3, __x4, __c);
  std::__cond_swap<_Compare>(__x2, __x3, __c);
}

template <class _AlgPolicy,
          class _Compare,
          class _RandomAccessIterator,
          __enable_if_t<!__use_branchless_sort<_Compare, _RandomAccessIterator>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __sort4_maybe_branchless(
    _RandomAccessIterator __x1,
    _RandomAccessIterator __x2,
    _RandomAccessIterator __x3,
    _RandomAccessIterator __x4,
    _Compare __c) {
  std::__sort4<_AlgPolicy, _Compare>(__x1, __x2, __x3, __x4, __c);
}

template <class _AlgPolicy,
          class _Compare,
          class _RandomAccessIterator,
          __enable_if_t<__use_branchless_sort<_Compare, _RandomAccessIterator>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __sort5_maybe_branchless(
    _RandomAccessIterator __x1,
    _RandomAccessIterator __x2,
    _RandomAccessIterator __x3,
    _RandomAccessIterator __x4,
    _RandomAccessIterator __x5,
    _Compare __c) {
  std::__cond_swap<_Compare>(__x1, __x2, __c);
  std::__cond_swap<_Compare>(__x4, __x5, __c);
  std::__partially_sorted_swap<_Compare>(__x3, __x4, __x5, __c);
  std::__cond_swap<_Compare>(__x2, __x5, __c);
  std::__partially_sorted_swap<_Compare>(__x1, __x3, __x4, __c);
  std::__partially_sorted_swap<_Compare>(__x2, __x3, __x4, __c);
}

template <class _AlgPolicy,
          class _Compare,
          class _RandomAccessIterator,
          __enable_if_t<!__use_branchless_sort<_Compare, _RandomAccessIterator>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __sort5_maybe_branchless(
    _RandomAccessIterator __x1,
    _RandomAccessIterator __x2,
    _RandomAccessIterator __x3,
    _RandomAccessIterator __x4,
    _RandomAccessIterator __x5,
    _Compare __c) {
  std::__sort5<_AlgPolicy, _Compare, _RandomAccessIterator>(
      std::move(__x1), std::move(__x2), std::move(__x3), std::move(__x4), std::move(__x5), __c);
}


template <class _AlgPolicy, class _Compare, class _BidirectionalIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr void
__selection_sort(_BidirectionalIterator __first, _BidirectionalIterator __last, _Compare __comp) {
  _BidirectionalIterator __lm1 = __last;
  for (--__lm1; __first != __lm1; ++__first) {
    _BidirectionalIterator __i = std::__min_element<_Compare>(__first, __last, __comp);
    if (__i != __first)
      _IterOps<_AlgPolicy>::iter_swap(__first, __i);
  }
}



template <class _AlgPolicy, class _Compare, class _BidirectionalIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
__insertion_sort(_BidirectionalIterator __first, _BidirectionalIterator __last, _Compare __comp) {
  using _Ops = _IterOps<_AlgPolicy>;

  typedef typename iterator_traits<_BidirectionalIterator>::value_type value_type;
  if (__first == __last)
    return;
  _BidirectionalIterator __i = __first;
  for (++__i; __i != __last; ++__i) {
    _BidirectionalIterator __j = __i;
    --__j;
    if (__comp(*__i, *__j)) {
      value_type __t(_Ops::__iter_move(__i));
      _BidirectionalIterator __k = __j;
      __j = __i;
      do {
        *__j = _Ops::__iter_move(__k);
        __j = __k;
      } while (__j != __first && __comp(__t, *--__k));
      *__j = std::move(__t);
    }
  }
}






template <class _AlgPolicy, class _Compare, class _RandomAccessIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
__insertion_sort_unguarded(_RandomAccessIterator const __first, _RandomAccessIterator __last, _Compare __comp) {
  using _Ops = _IterOps<_AlgPolicy>;
  typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type;
  typedef typename iterator_traits<_RandomAccessIterator>::value_type value_type;
  if (__first == __last)
    return;
  const _RandomAccessIterator __leftmost = __first - difference_type(1);
  (void)__leftmost;
  for (_RandomAccessIterator __i = __first + difference_type(1); __i != __last; ++__i) {
    _RandomAccessIterator __j = __i - difference_type(1);
    if (__comp(*__i, *__j)) {
      value_type __t(_Ops::__iter_move(__i));
      _RandomAccessIterator __k = __j;
      __j = __i;
      do {
        *__j = _Ops::__iter_move(__k);
        __j = __k;
        ((void)0);


      } while (__comp(__t, *--__k));
      *__j = std::move(__t);
    }
  }
}

template <class _AlgPolicy, class _Comp, class _RandomAccessIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
__insertion_sort_incomplete(_RandomAccessIterator __first, _RandomAccessIterator __last, _Comp __comp) {
  using _Ops = _IterOps<_AlgPolicy>;

  typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type;
  switch (__last - __first) {
  case 0:
  case 1:
    return true;
  case 2:
    if (__comp(*--__last, *__first))
      _Ops::iter_swap(__first, __last);
    return true;
  case 3:
    std::__sort3_maybe_branchless<_AlgPolicy, _Comp>(__first, __first + difference_type(1), --__last, __comp);
    return true;
  case 4:
    std::__sort4_maybe_branchless<_AlgPolicy, _Comp>(
        __first, __first + difference_type(1), __first + difference_type(2), --__last, __comp);
    return true;
  case 5:
    std::__sort5_maybe_branchless<_AlgPolicy, _Comp>(
        __first,
        __first + difference_type(1),
        __first + difference_type(2),
        __first + difference_type(3),
        --__last,
        __comp);
    return true;
  }
  typedef typename iterator_traits<_RandomAccessIterator>::value_type value_type;
  _RandomAccessIterator __j = __first + difference_type(2);
  std::__sort3_maybe_branchless<_AlgPolicy, _Comp>(__first, __first + difference_type(1), __j, __comp);
  const unsigned __limit = 8;
  unsigned __count = 0;
  for (_RandomAccessIterator __i = __j + difference_type(1); __i != __last; ++__i) {
    if (__comp(*__i, *__j)) {
      value_type __t(_Ops::__iter_move(__i));
      _RandomAccessIterator __k = __j;
      __j = __i;
      do {
        *__j = _Ops::__iter_move(__k);
        __j = __k;
      } while (__j != __first && __comp(__t, *--__k));
      *__j = std::move(__t);
      if (++__count == __limit)
        return ++__i == __last;
    }
    __j = __i;
  }
  return true;
}

template <class _AlgPolicy, class _RandomAccessIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __swap_bitmap_pos(
    _RandomAccessIterator __first, _RandomAccessIterator __last, uint64_t& __left_bitset, uint64_t& __right_bitset) {
  using _Ops = _IterOps<_AlgPolicy>;
  typedef typename std::iterator_traits<_RandomAccessIterator>::difference_type difference_type;


  while (__left_bitset != 0 && __right_bitset != 0) {
    difference_type __tz_left = __libcpp_ctz(__left_bitset);
    __left_bitset = __libcpp_blsr(__left_bitset);
    difference_type __tz_right = __libcpp_ctz(__right_bitset);
    __right_bitset = __libcpp_blsr(__right_bitset);
    _Ops::iter_swap(__first + __tz_left, __last - __tz_right);
  }
}

template <class _Compare,
          class _RandomAccessIterator,
          class _ValueType = typename iterator_traits<_RandomAccessIterator>::value_type>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
__populate_left_bitset(_RandomAccessIterator __first, _Compare __comp, _ValueType& __pivot, uint64_t& __left_bitset) {


  _RandomAccessIterator __iter = __first;
  for (int __j = 0; __j < __detail::__block_size;) {
    bool __comp_result = !__comp(*__iter, __pivot);
    __left_bitset |= (static_cast<uint64_t>(__comp_result) << __j);
    __j++;
    ++__iter;
  }
}

template <class _Compare,
          class _RandomAccessIterator,
          class _ValueType = typename iterator_traits<_RandomAccessIterator>::value_type>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
__populate_right_bitset(_RandomAccessIterator __lm1, _Compare __comp, _ValueType& __pivot, uint64_t& __right_bitset) {


  _RandomAccessIterator __iter = __lm1;
  for (int __j = 0; __j < __detail::__block_size;) {
    bool __comp_result = __comp(*__iter, __pivot);
    __right_bitset |= (static_cast<uint64_t>(__comp_result) << __j);
    __j++;
    --__iter;
  }
}

template <class _AlgPolicy,
          class _Compare,
          class _RandomAccessIterator,
          class _ValueType = typename iterator_traits<_RandomAccessIterator>::value_type>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __bitset_partition_partial_blocks(
    _RandomAccessIterator& __first,
    _RandomAccessIterator& __lm1,
    _Compare __comp,
    _ValueType& __pivot,
    uint64_t& __left_bitset,
    uint64_t& __right_bitset) {
  typedef typename std::iterator_traits<_RandomAccessIterator>::difference_type difference_type;
  difference_type __remaining_len = __lm1 - __first + 1;
  difference_type __l_size;
  difference_type __r_size;
  if (__left_bitset == 0 && __right_bitset == 0) {
    __l_size = __remaining_len / 2;
    __r_size = __remaining_len - __l_size;
  } else if (__left_bitset == 0) {

    __l_size = __remaining_len - __detail::__block_size;
    __r_size = __detail::__block_size;
  } else {
    __l_size = __detail::__block_size;
    __r_size = __remaining_len - __detail::__block_size;
  }

  if (__left_bitset == 0) {
    _RandomAccessIterator __iter = __first;
    for (int __j = 0; __j < __l_size; __j++) {
      bool __comp_result = !__comp(*__iter, __pivot);
      __left_bitset |= (static_cast<uint64_t>(__comp_result) << __j);
      ++__iter;
    }
  }


  if (__right_bitset == 0) {
    _RandomAccessIterator __iter = __lm1;
    for (int __j = 0; __j < __r_size; __j++) {
      bool __comp_result = __comp(*__iter, __pivot);
      __right_bitset |= (static_cast<uint64_t>(__comp_result) << __j);
      --__iter;
    }
  }
  std::__swap_bitmap_pos<_AlgPolicy, _RandomAccessIterator>(__first, __lm1, __left_bitset, __right_bitset);
  __first += (__left_bitset == 0) ? __l_size : 0;
  __lm1 -= (__right_bitset == 0) ? __r_size : 0;
}

template <class _AlgPolicy, class _RandomAccessIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __swap_bitmap_pos_within(
    _RandomAccessIterator& __first, _RandomAccessIterator& __lm1, uint64_t& __left_bitset, uint64_t& __right_bitset) {
  using _Ops = _IterOps<_AlgPolicy>;
  typedef typename std::iterator_traits<_RandomAccessIterator>::difference_type difference_type;
  if (__left_bitset) {


    while (__left_bitset != 0) {
      difference_type __tz_left = __detail::__block_size - 1 - __libcpp_clz(__left_bitset);
      __left_bitset &= (static_cast<uint64_t>(1) << __tz_left) - 1;
      _RandomAccessIterator __it = __first + __tz_left;
      if (__it != __lm1) {
        _Ops::iter_swap(__it, __lm1);
      }
      --__lm1;
    }
    __first = __lm1 + difference_type(1);
  } else if (__right_bitset) {


    while (__right_bitset != 0) {
      difference_type __tz_right = __detail::__block_size - 1 - __libcpp_clz(__right_bitset);
      __right_bitset &= (static_cast<uint64_t>(1) << __tz_right) - 1;
      _RandomAccessIterator __it = __lm1 - __tz_right;
      if (__it != __first) {
        _Ops::iter_swap(__it, __first);
      }
      ++__first;
    }
  }
}
# 533 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/sort.h" 3
template <class _AlgPolicy, class _RandomAccessIterator, class _Compare>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) std::pair<_RandomAccessIterator, bool>
__bitset_partition(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp) {
  using _Ops = _IterOps<_AlgPolicy>;
  typedef typename std::iterator_traits<_RandomAccessIterator>::value_type value_type;
  typedef typename std::iterator_traits<_RandomAccessIterator>::difference_type difference_type;
  ((void)0);
  const _RandomAccessIterator __begin = __first;
  const _RandomAccessIterator __end = __last;
  (void)__end;

  value_type __pivot(_Ops::__iter_move(__first));

  if (__comp(__pivot, *(__last - difference_type(1)))) {

    do {
      ++__first;
      ((void)0);


    } while (!__comp(__pivot, *__first));
  } else {
    while (++__first < __last && !__comp(__pivot, *__first)) {
    }
  }

  if (__first < __last) {


    do {
      ((void)0);


      --__last;
    } while (__comp(__pivot, *__last));
  }




  bool __already_partitioned = __first >= __last;
  if (!__already_partitioned) {
    _Ops::iter_swap(__first, __last);
    ++__first;
  }



  _RandomAccessIterator __lm1 = __last - difference_type(1);
  uint64_t __left_bitset = 0;
  uint64_t __right_bitset = 0;


  while (__lm1 - __first >= 2 * __detail::__block_size - 1) {


    if (__left_bitset == 0)
      std::__populate_left_bitset<_Compare>(__first, __comp, __pivot, __left_bitset);


    if (__right_bitset == 0)
      std::__populate_right_bitset<_Compare>(__lm1, __comp, __pivot, __right_bitset);


    std::__swap_bitmap_pos<_AlgPolicy, _RandomAccessIterator>(__first, __lm1, __left_bitset, __right_bitset);


    __first += (__left_bitset == 0) ? difference_type(__detail::__block_size) : difference_type(0);
    __lm1 -= (__right_bitset == 0) ? difference_type(__detail::__block_size) : difference_type(0);
  }


  std::__bitset_partition_partial_blocks<_AlgPolicy, _Compare>(
      __first, __lm1, __comp, __pivot, __left_bitset, __right_bitset);


  std::__swap_bitmap_pos_within<_AlgPolicy>(__first, __lm1, __left_bitset, __right_bitset);


  _RandomAccessIterator __pivot_pos = __first - difference_type(1);
  if (__begin != __pivot_pos) {
    *__begin = _Ops::__iter_move(__pivot_pos);
  }
  *__pivot_pos = std::move(__pivot);
  return std::make_pair(__pivot_pos, __already_partitioned);
}






template <class _AlgPolicy, class _RandomAccessIterator, class _Compare>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) std::pair<_RandomAccessIterator, bool>
__partition_with_equals_on_right(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp) {
  using _Ops = _IterOps<_AlgPolicy>;
  typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type;
  typedef typename std::iterator_traits<_RandomAccessIterator>::value_type value_type;
  ((void)0);
  const _RandomAccessIterator __begin = __first;
  const _RandomAccessIterator __end = __last;
  (void)__end;
  value_type __pivot(_Ops::__iter_move(__first));



  do {
    ++__first;
    ((void)0);


  } while (__comp(*__first, __pivot));


  if (__begin == __first - difference_type(1)) {
    while (__first < __last && !__comp(*--__last, __pivot))
      ;
  } else {

    do {
      ((void)0);


      --__last;
    } while (!__comp(*__last, __pivot));
  }




  bool __already_partitioned = __first >= __last;



  while (__first < __last) {
    _Ops::iter_swap(__first, __last);
    do {
      ++__first;
      ((void)0);


    } while (__comp(*__first, __pivot));
    do {
      ((void)0);


      --__last;
    } while (!__comp(*__last, __pivot));
  }

  _RandomAccessIterator __pivot_pos = __first - difference_type(1);
  if (__begin != __pivot_pos) {
    *__begin = _Ops::__iter_move(__pivot_pos);
  }
  *__pivot_pos = std::move(__pivot);
  return std::make_pair(__pivot_pos, __already_partitioned);
}



template <class _AlgPolicy, class _RandomAccessIterator, class _Compare>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _RandomAccessIterator
__partition_with_equals_on_left(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp) {
  using _Ops = _IterOps<_AlgPolicy>;
  typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type;
  typedef typename std::iterator_traits<_RandomAccessIterator>::value_type value_type;

  _RandomAccessIterator __begin = __first;
  const _RandomAccessIterator __end = __last;
  (void)__end;
  value_type __pivot(_Ops::__iter_move(__first));
  if (__comp(__pivot, *(__last - difference_type(1)))) {

    do {
      ++__first;
      ((void)0);


    } while (!__comp(__pivot, *__first));
  } else {
    while (++__first < __last && !__comp(__pivot, *__first)) {
    }
  }

  if (__first < __last) {


    do {
      ((void)0);


      --__last;
    } while (__comp(__pivot, *__last));
  }
  while (__first < __last) {
    _Ops::iter_swap(__first, __last);
    do {
      ++__first;
      ((void)0);


    } while (!__comp(__pivot, *__first));
    do {
      ((void)0);


      --__last;
    } while (__comp(__pivot, *__last));
  }
  _RandomAccessIterator __pivot_pos = __first - difference_type(1);
  if (__begin != __pivot_pos) {
    *__begin = _Ops::__iter_move(__pivot_pos);
  }
  *__pivot_pos = std::move(__pivot);
  return __first;
}
# 757 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/sort.h" 3
template <class _AlgPolicy, class _Compare, class _RandomAccessIterator, bool _UseBitSetPartition>
void __introsort(_RandomAccessIterator __first,
                 _RandomAccessIterator __last,
                 _Compare __comp,
                 typename iterator_traits<_RandomAccessIterator>::difference_type __depth,
                 bool __leftmost = true) {
  using _Ops = _IterOps<_AlgPolicy>;
  typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type;
  using _Comp_ref = __comp_ref_type<_Compare>;

  constexpr difference_type __limit = 24;

  constexpr difference_type __ninther_threshold = 128;
  while (true) {
    difference_type __len = __last - __first;
    switch (__len) {
    case 0:
    case 1:
      return;
    case 2:
      if (__comp(*--__last, *__first))
        _Ops::iter_swap(__first, __last);
      return;
    case 3:
      std::__sort3_maybe_branchless<_AlgPolicy, _Compare>(__first, __first + difference_type(1), --__last, __comp);
      return;
    case 4:
      std::__sort4_maybe_branchless<_AlgPolicy, _Compare>(
          __first, __first + difference_type(1), __first + difference_type(2), --__last, __comp);
      return;
    case 5:
      std::__sort5_maybe_branchless<_AlgPolicy, _Compare>(
          __first,
          __first + difference_type(1),
          __first + difference_type(2),
          __first + difference_type(3),
          --__last,
          __comp);
      return;
    }

    if (__len < __limit) {
      if (__leftmost) {
        std::__insertion_sort<_AlgPolicy, _Compare>(__first, __last, __comp);
      } else {
        std::__insertion_sort_unguarded<_AlgPolicy, _Compare>(__first, __last, __comp);
      }
      return;
    }
    if (__depth == 0) {

      std::__partial_sort<_AlgPolicy, _Compare>(__first, __last, __last, __comp);
      return;
    }
    --__depth;
    {
      difference_type __half_len = __len / 2;


      if (__len > __ninther_threshold) {
        std::__sort3<_AlgPolicy, _Compare>(__first, __first + __half_len, __last - difference_type(1), __comp);
        std::__sort3<_AlgPolicy, _Compare>(
            __first + difference_type(1), __first + (__half_len - 1), __last - difference_type(2), __comp);
        std::__sort3<_AlgPolicy, _Compare>(
            __first + difference_type(2), __first + (__half_len + 1), __last - difference_type(3), __comp);
        std::__sort3<_AlgPolicy, _Compare>(
            __first + (__half_len - 1), __first + __half_len, __first + (__half_len + 1), __comp);
        _Ops::iter_swap(__first, __first + __half_len);
      } else {
        std::__sort3<_AlgPolicy, _Compare>(__first + __half_len, __first, __last - difference_type(1), __comp);
      }
    }
# 837 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/sort.h" 3
    if (!__leftmost && !__comp(*(__first - difference_type(1)), *__first)) {
      __first = std::__partition_with_equals_on_left<_AlgPolicy, _RandomAccessIterator, _Comp_ref>(
          __first, __last, _Comp_ref(__comp));
      continue;
    }

    auto __ret = _UseBitSetPartition
                                  ? std::__bitset_partition<_AlgPolicy, _RandomAccessIterator, _Compare>(__first, __last, __comp)
                                  : std::__partition_with_equals_on_right<_AlgPolicy, _RandomAccessIterator, _Compare>(
                         __first, __last, __comp);
    _RandomAccessIterator __i = __ret.first;


    if (__ret.second) {
      bool __fs = std::__insertion_sort_incomplete<_AlgPolicy, _Compare>(__first, __i, __comp);
      if (std::__insertion_sort_incomplete<_AlgPolicy, _Compare>(__i + difference_type(1), __last, __comp)) {
        if (__fs)
          return;
        __last = __i;
        continue;
      } else {
        if (__fs) {
          __first = ++__i;
          continue;
        }
      }
    }

    std::__introsort<_AlgPolicy, _Compare, _RandomAccessIterator, _UseBitSetPartition>(
        __first, __i, __comp, __depth, __leftmost);
    __leftmost = false;
    __first = ++__i;
  }
}

template <typename _Number>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Number __log2i(_Number __n) {
  if (__n == 0)
    return 0;
  if (sizeof(__n) <= sizeof(unsigned))
    return sizeof(unsigned) * 8 - 1 - __libcpp_clz(static_cast<unsigned>(__n));
  if (sizeof(__n) <= sizeof(unsigned long))
    return sizeof(unsigned long) * 8 - 1 - __libcpp_clz(static_cast<unsigned long>(__n));
  if (sizeof(__n) <= sizeof(unsigned long long))
    return sizeof(unsigned long long) * 8 - 1 - __libcpp_clz(static_cast<unsigned long long>(__n));

  _Number __log2 = 0;
  while (__n > 1) {
    __log2++;
    __n >>= 1;
  }
  return __log2;
}

template <class _Comp, class _RandomAccessIterator>
void __sort(_RandomAccessIterator, _RandomAccessIterator, _Comp);

extern template __attribute__((__visibility__("default"))) void __sort<__less<char>&, char*>(char*, char*, __less<char>&);

extern template __attribute__((__visibility__("default"))) void __sort<__less<wchar_t>&, wchar_t*>(wchar_t*, wchar_t*, __less<wchar_t>&);

extern template __attribute__((__visibility__("default"))) void
__sort<__less<signed char>&, signed char*>(signed char*, signed char*, __less<signed char>&);
extern template __attribute__((__visibility__("default"))) void
__sort<__less<unsigned char>&, unsigned char*>(unsigned char*, unsigned char*, __less<unsigned char>&);
extern template __attribute__((__visibility__("default"))) void __sort<__less<short>&, short*>(short*, short*, __less<short>&);
extern template __attribute__((__visibility__("default"))) void
__sort<__less<unsigned short>&, unsigned short*>(unsigned short*, unsigned short*, __less<unsigned short>&);
extern template __attribute__((__visibility__("default"))) void __sort<__less<int>&, int*>(int*, int*, __less<int>&);
extern template __attribute__((__visibility__("default"))) void
__sort<__less<unsigned>&, unsigned*>(unsigned*, unsigned*, __less<unsigned>&);
extern template __attribute__((__visibility__("default"))) void __sort<__less<long>&, long*>(long*, long*, __less<long>&);
extern template __attribute__((__visibility__("default"))) void
__sort<__less<unsigned long>&, unsigned long*>(unsigned long*, unsigned long*, __less<unsigned long>&);
extern template __attribute__((__visibility__("default"))) void
__sort<__less<long long>&, long long*>(long long*, long long*, __less<long long>&);
extern template __attribute__((__visibility__("default"))) void __sort<__less<unsigned long long>&, unsigned long long*>(
    unsigned long long*, unsigned long long*, __less<unsigned long long>&);
extern template __attribute__((__visibility__("default"))) void __sort<__less<float>&, float*>(float*, float*, __less<float>&);
extern template __attribute__((__visibility__("default"))) void __sort<__less<double>&, double*>(double*, double*, __less<double>&);
extern template __attribute__((__visibility__("default"))) void
__sort<__less<long double>&, long double*>(long double*, long double*, __less<long double>&);

template <class _AlgPolicy, class _RandomAccessIterator, class _Comp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
__sort_dispatch(_RandomAccessIterator __first, _RandomAccessIterator __last, _Comp& __comp) {
  typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type;
  difference_type __depth_limit = 2 * std::__log2i(__last - __first);




  std::__introsort<_AlgPolicy,
                   _Comp&,
                   _RandomAccessIterator,
                   __use_branchless_sort<_Comp, _RandomAccessIterator>::value>(__first, __last, __comp, __depth_limit);
}

template <class _Type, class... _Options>
using __is_any_of = _Or<is_same<_Type, _Options>...>;

template <class _Type>
using __sort_is_specialized_in_library = __is_any_of<
    _Type,
    char,

    wchar_t,

    signed char,
    unsigned char,
    short,
    unsigned short,
    int,
    unsigned int,
    long,
    unsigned long,
    long long,
    unsigned long long,
    float,
    double,
    long double>;

template <class _AlgPolicy, class _Type, __enable_if_t<__sort_is_specialized_in_library<_Type>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __sort_dispatch(_Type* __first, _Type* __last, __less<>&) {
  __less<_Type> __comp;
  std::__sort<__less<_Type>&, _Type*>(__first, __last, __comp);
}

template <class _AlgPolicy, class _Type, __enable_if_t<__sort_is_specialized_in_library<_Type>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __sort_dispatch(_Type* __first, _Type* __last, less<_Type>&) {
  __less<_Type> __comp;
  std::__sort<__less<_Type>&, _Type*>(__first, __last, __comp);
}


template <class _AlgPolicy, class _Type, __enable_if_t<__sort_is_specialized_in_library<_Type>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __sort_dispatch(_Type* __first, _Type* __last, less<>&) {
  __less<_Type> __comp;
  std::__sort<__less<_Type>&, _Type*>(__first, __last, __comp);
}
# 987 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/sort.h" 3
template <class _AlgPolicy, class _RandomAccessIterator, class _Comp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
__sort_impl(_RandomAccessIterator __first, _RandomAccessIterator __last, _Comp& __comp) {
  std::__debug_randomize_range<_AlgPolicy>(__first, __last);

  if (__libcpp_is_constant_evaluated()) {
    std::__partial_sort<_AlgPolicy>(
        std::__unwrap_iter(__first), std::__unwrap_iter(__last), std::__unwrap_iter(__last), __comp);
  } else {
    std::__sort_dispatch<_AlgPolicy>(std::__unwrap_iter(__first), std::__unwrap_iter(__last), __comp);
  }
  std::__check_strict_weak_ordering_sorted(std::__unwrap_iter(__first), std::__unwrap_iter(__last), __comp);
}

template <class _RandomAccessIterator, class _Comp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Comp __comp) {
  std::__sort_impl<_ClassicAlgPolicy>(std::move(__first), std::move(__last), __comp);
}

template <class _RandomAccessIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
sort(_RandomAccessIterator __first, _RandomAccessIterator __last) {
  std::sort(__first, __last, __less<>());
}

}}
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/nth_element.h" 2 3
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/nth_element.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 28 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/nth_element.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Compare, class _RandomAccessIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool __nth_element_find_guard(
    _RandomAccessIterator& __i, _RandomAccessIterator& __j, _RandomAccessIterator __m, _Compare __comp) {

  while (true) {
    if (__i == --__j) {
      return false;
    }
    if (__comp(*__j, *__m)) {
      return true;
    }
  }
}

template <class _AlgPolicy, class _Compare, class _RandomAccessIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr void

__nth_element(
    _RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator __last, _Compare __comp) {
  using _Ops = _IterOps<_AlgPolicy>;


  typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type;
  const difference_type __limit = 7;
  while (true) {
    if (__nth == __last)
      return;
    difference_type __len = __last - __first;
    switch (__len) {
    case 0:
    case 1:
      return;
    case 2:
      if (__comp(*--__last, *__first))
        _Ops::iter_swap(__first, __last);
      return;
    case 3: {
      _RandomAccessIterator __m = __first;
      std::__sort3<_AlgPolicy, _Compare>(__first, ++__m, --__last, __comp);
      return;
    }
    }
    if (__len <= __limit) {
      std::__selection_sort<_AlgPolicy, _Compare>(__first, __last, __comp);
      return;
    }

    _RandomAccessIterator __m = __first + __len / 2;
    _RandomAccessIterator __lm1 = __last;
    unsigned __n_swaps = std::__sort3<_AlgPolicy, _Compare>(__first, __m, --__lm1, __comp);



    _RandomAccessIterator __i = __first;
    _RandomAccessIterator __j = __lm1;



    if (!__comp(*__i, *__m))
    {

      if (std::__nth_element_find_guard<_Compare>(__i, __j, __m, __comp)) {
        _Ops::iter_swap(__i, __j);
        ++__n_swaps;
      } else {


        ++__i;
        __j = __last;
        if (!__comp(*__first, *--__j)) {
          while (true) {
            if (__i == __j) {
              return;
            } else if (__comp(*__first, *__i)) {
              _Ops::iter_swap(__i, __j);
              ++__n_swaps;
              ++__i;
              break;
            }
            ++__i;
          }
        }

        if (__i == __j) {
          return;
        }
        while (true) {
          while (!__comp(*__first, *__i)) {
            ++__i;
            ((void)0);


          }
          do {
            ((void)0);


            --__j;
          } while (__comp(*__first, *__j));
          if (__i >= __j)
            break;
          _Ops::iter_swap(__i, __j);
          ++__n_swaps;
          ++__i;
        }


        if (__nth < __i) {
          return;
        }


        __first = __i;
        continue;
      }
    }
    ++__i;


    if (__i < __j) {

      while (true) {

        while (__comp(*__i, *__m)) {
          ++__i;
          ((void)0);


        }

        do {
          ((void)0);


          --__j;
        } while (!__comp(*__j, *__m));
        if (__i >= __j)
          break;
        _Ops::iter_swap(__i, __j);
        ++__n_swaps;


        if (__m == __i)
          __m = __j;
        ++__i;
      }
    }

    if (__i != __m && __comp(*__m, *__i)) {
      _Ops::iter_swap(__i, __m);
      ++__n_swaps;
    }

    if (__nth == __i)
      return;
    if (__n_swaps == 0) {

      if (__nth < __i) {

        __j = __m = __first;
        while (true) {
          if (++__j == __i) {

            return;
          }
          if (__comp(*__j, *__m)) {

            break;
          }
          __m = __j;
        }
      } else {

        __j = __m = __i;
        while (true) {
          if (++__j == __last) {

            return;
          }
          if (__comp(*__j, *__m)) {

            break;
          }
          __m = __j;
        }
      }
    }

    if (__nth < __i) {

      __last = __i;
    } else {

      __first = ++__i;
    }
  }
}

template <class _AlgPolicy, class _RandomAccessIterator, class _Compare>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __nth_element_impl(
    _RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator __last, _Compare& __comp) {
  if (__nth == __last)
    return;

  std::__debug_randomize_range<_AlgPolicy>(__first, __last);

  std::__nth_element<_AlgPolicy, __comp_ref_type<_Compare> >(__first, __nth, __last, __comp);

  std::__debug_randomize_range<_AlgPolicy>(__first, __nth);
  if (__nth != __last) {
    std::__debug_randomize_range<_AlgPolicy>(++__nth, __last);
  }
}

template <class _RandomAccessIterator, class _Compare>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator __last, _Compare __comp) {
  std::__nth_element_impl<_ClassicAlgPolicy>(std::move(__first), std::move(__nth), std::move(__last), __comp);
}

template <class _RandomAccessIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator __last) {
  std::nth_element(std::move(__first), std::move(__nth), std::move(__last), __less<>());
}

}}
# 1848 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/partial_sort_copy.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/partial_sort_copy.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/make_projected.h" 1 3
# 26 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/make_projected.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Pred, class _Proj>
struct _ProjectedPred {
  _Pred& __pred;
  _Proj& __proj;

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _ProjectedPred(_Pred& __pred_arg, _Proj& __proj_arg)
      : __pred(__pred_arg), __proj(__proj_arg) {}

  template <class _Tp>
  typename __invoke_of<_Pred&, decltype(std::__invoke(std::declval<_Proj&>(), std::declval<_Tp>())) >::
      type constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
      operator()(_Tp&& __v) const {
    return std::__invoke(__pred, std::__invoke(__proj, std::forward<_Tp>(__v)));
  }

  template <class _T1, class _T2>
  typename __invoke_of<_Pred&,
                       decltype(std::__invoke(std::declval<_Proj&>(), std::declval<_T1>())),
                       decltype(std::__invoke(std::declval<_Proj&>(),
                                              std::declval<_T2>())) >::type constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
  operator()(_T1&& __lhs, _T2&& __rhs) const {
    return std::__invoke(
        __pred, std::__invoke(__proj, std::forward<_T1>(__lhs)), std::__invoke(__proj, std::forward<_T2>(__rhs)));
  }
};

template <
    class _Pred,
    class _Proj,
    __enable_if_t<!(!is_member_pointer<__decay_t<_Pred> >::value && __is_identity<__decay_t<_Proj> >::value), int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _ProjectedPred<_Pred, _Proj> __make_projected(_Pred& __pred, _Proj& __proj) {
  return _ProjectedPred<_Pred, _Proj>(__pred, __proj);
}




template <
    class _Pred,
    class _Proj,
    __enable_if_t<!is_member_pointer<__decay_t<_Pred> >::value && __is_identity<__decay_t<_Proj> >::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Pred& __make_projected(_Pred& __pred, _Proj&) {
  return __pred;
}

}}
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/partial_sort_copy.h" 2 3
# 29 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/partial_sort_copy.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 33 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/partial_sort_copy.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _AlgPolicy,
          class _Compare,
          class _InputIterator,
          class _Sentinel1,
          class _RandomAccessIterator,
          class _Sentinel2,
          class _Proj1,
          class _Proj2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) pair<_InputIterator, _RandomAccessIterator> __partial_sort_copy(
    _InputIterator __first,
    _Sentinel1 __last,
    _RandomAccessIterator __result_first,
    _Sentinel2 __result_last,
    _Compare&& __comp,
    _Proj1&& __proj1,
    _Proj2&& __proj2) {
  _RandomAccessIterator __r = __result_first;
  auto&& __projected_comp = std::__make_projected(__comp, __proj2);

  if (__r != __result_last) {
    for (; __first != __last && __r != __result_last; ++__first, (void)++__r)
      *__r = *__first;
    std::__make_heap<_AlgPolicy>(__result_first, __r, __projected_comp);
    typename iterator_traits<_RandomAccessIterator>::difference_type __len = __r - __result_first;
    for (; __first != __last; ++__first)
      if (std::__invoke(__comp, std::__invoke(__proj1, *__first), std::__invoke(__proj2, *__result_first))) {
        *__result_first = *__first;
        std::__sift_down<_AlgPolicy>(__result_first, __projected_comp, __len, __result_first);
      }
    std::__sort_heap<_AlgPolicy>(__result_first, __r, __projected_comp);
  }

  return pair<_InputIterator, _RandomAccessIterator>(
      _IterOps<_AlgPolicy>::next(std::move(__first), std::move(__last)), std::move(__r));
}

template <class _InputIterator, class _RandomAccessIterator, class _Compare>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _RandomAccessIterator partial_sort_copy(
    _InputIterator __first,
    _InputIterator __last,
    _RandomAccessIterator __result_first,
    _RandomAccessIterator __result_last,
    _Compare __comp) {
  static_assert(
      __is_callable<_Compare, decltype(*__first), decltype(*__result_first)>::value, "Comparator has to be callable");

  auto __result = std::__partial_sort_copy<_ClassicAlgPolicy>(
      __first,
      __last,
      __result_first,
      __result_last,
      static_cast<__comp_ref_type<_Compare> >(__comp),
      __identity(),
      __identity());
  return __result.second;
}

template <class _InputIterator, class _RandomAccessIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _RandomAccessIterator partial_sort_copy(
    _InputIterator __first,
    _InputIterator __last,
    _RandomAccessIterator __result_first,
    _RandomAccessIterator __result_last) {
  return std::partial_sort_copy(__first, __last, __result_first, __result_last, __less<>());
}

}}
# 1850 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/partition.h" 1 3
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/partition.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/partition.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Predicate, class _AlgPolicy, class _ForwardIterator, class _Sentinel>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) pair<_ForwardIterator, _ForwardIterator>
__partition_impl(_ForwardIterator __first, _Sentinel __last, _Predicate __pred, forward_iterator_tag) {
  while (true) {
    if (__first == __last)
      return std::make_pair(std::move(__first), std::move(__first));
    if (!__pred(*__first))
      break;
    ++__first;
  }

  _ForwardIterator __p = __first;
  while (++__p != __last) {
    if (__pred(*__p)) {
      _IterOps<_AlgPolicy>::iter_swap(__first, __p);
      ++__first;
    }
  }
  return std::make_pair(std::move(__first), std::move(__p));
}

template <class _Predicate, class _AlgPolicy, class _BidirectionalIterator, class _Sentinel>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) pair<_BidirectionalIterator, _BidirectionalIterator>
__partition_impl(_BidirectionalIterator __first, _Sentinel __sentinel, _Predicate __pred, bidirectional_iterator_tag) {
  _BidirectionalIterator __original_last = _IterOps<_AlgPolicy>::next(__first, __sentinel);
  _BidirectionalIterator __last = __original_last;

  while (true) {
    while (true) {
      if (__first == __last)
        return std::make_pair(std::move(__first), std::move(__original_last));
      if (!__pred(*__first))
        break;
      ++__first;
    }
    do {
      if (__first == --__last)
        return std::make_pair(std::move(__first), std::move(__original_last));
    } while (!__pred(*__last));
    _IterOps<_AlgPolicy>::iter_swap(__first, __last);
    ++__first;
  }
}

template <class _AlgPolicy, class _ForwardIterator, class _Sentinel, class _Predicate, class _IterCategory>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) pair<_ForwardIterator, _ForwardIterator>
__partition(_ForwardIterator __first, _Sentinel __last, _Predicate&& __pred, _IterCategory __iter_category) {
  return std::__partition_impl<__remove_cvref_t<_Predicate>&, _AlgPolicy>(
      std::move(__first), std::move(__last), __pred, __iter_category);
}

template <class _ForwardIterator, class _Predicate>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _ForwardIterator
partition(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred) {
  using _IterCategory = typename iterator_traits<_ForwardIterator>::iterator_category;
  auto __result = std::__partition<_ClassicAlgPolicy>(std::move(__first), std::move(__last), __pred, _IterCategory());
  return __result.first;
}

}}
# 1851 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/partition_copy.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/partition_copy.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _InputIterator, class _OutputIterator1, class _OutputIterator2, class _Predicate>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) pair<_OutputIterator1, _OutputIterator2> partition_copy(
    _InputIterator __first,
    _InputIterator __last,
    _OutputIterator1 __out_true,
    _OutputIterator2 __out_false,
    _Predicate __pred) {
  for (; __first != __last; ++__first) {
    if (__pred(*__first)) {
      *__out_true = *__first;
      ++__out_true;
    } else {
      *__out_false = *__first;
      ++__out_false;
    }
  }
  return pair<_OutputIterator1, _OutputIterator2>(__out_true, __out_false);
}

}}
# 1852 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/partition_point.h" 1 3
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/partition_point.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _ForwardIterator, class _Predicate>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _ForwardIterator
partition_point(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred) {
  typedef typename iterator_traits<_ForwardIterator>::difference_type difference_type;
  difference_type __len = std::distance(__first, __last);
  while (__len != 0) {
    difference_type __l2 = std::__half_positive(__len);
    _ForwardIterator __m = __first;
    std::advance(__m, __l2);
    if (__pred(*__m)) {
      __first = ++__m;
      __len -= __l2 + 1;
    } else
      __len = __l2;
  }
  return __first;
}

}}
# 1853 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/prev_permutation.h" 1 3
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/prev_permutation.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 27 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/prev_permutation.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _AlgPolicy, class _Compare, class _BidirectionalIterator, class _Sentinel>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) pair<_BidirectionalIterator, bool>
__prev_permutation(_BidirectionalIterator __first, _Sentinel __last, _Compare&& __comp) {
  using _Result = pair<_BidirectionalIterator, bool>;

  _BidirectionalIterator __last_iter = _IterOps<_AlgPolicy>::next(__first, __last);
  _BidirectionalIterator __i = __last_iter;
  if (__first == __last || __first == --__i)
    return _Result(std::move(__last_iter), false);

  while (true) {
    _BidirectionalIterator __ip1 = __i;
    if (__comp(*__ip1, *--__i)) {
      _BidirectionalIterator __j = __last_iter;
      while (!__comp(*--__j, *__i))
        ;
      _IterOps<_AlgPolicy>::iter_swap(__i, __j);
      std::__reverse<_AlgPolicy>(__ip1, __last_iter);
      return _Result(std::move(__last_iter), true);
    }
    if (__i == __first) {
      std::__reverse<_AlgPolicy>(__first, __last_iter);
      return _Result(std::move(__last_iter), false);
    }
  }
}

template <class _BidirectionalIterator, class _Compare>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
prev_permutation(_BidirectionalIterator __first, _BidirectionalIterator __last, _Compare __comp) {
  return std::__prev_permutation<_ClassicAlgPolicy>(
             std::move(__first), std::move(__last), static_cast<__comp_ref_type<_Compare> >(__comp))
      .second;
}

template <class _BidirectionalIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
prev_permutation(_BidirectionalIterator __first, _BidirectionalIterator __last) {
  return std::prev_permutation(__first, __last, __less<>());
}

}}
# 1855 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_any_all_none_of.h" 1 3
# 12 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_any_all_none_of.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_find.h" 1 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_find.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_backend.h" 1 3
# 12 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_backend.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_backends/cpu_backend.h" 1 3
# 58 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_backends/cpu_backend.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_backends/cpu_backends/any_of.h" 1 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_backends/cpu_backends/any_of.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_backends/cpu_backends/backend.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_backends/cpu_backends/backend.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_backends/cpu_backends/serial.h" 1 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_backends/cpu_backends/serial.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/empty.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/empty.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

struct __empty {};

}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_backends/cpu_backends/serial.h" 2 3
# 21 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_backends/cpu_backends/serial.h" 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_backends/cpu_backends/backend.h" 2 3
# 27 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_backends/cpu_backends/backend.h" 3




namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

struct __cpu_backend_tag {};

inline constexpr size_t __lane_size = 64;

}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_backends/cpu_backends/any_of.h" 2 3





# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_execution_policy.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_execution_policy.h" 3




namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class>
inline constexpr bool is_execution_policy_v = false;

template <class>
inline constexpr bool __is_unsequenced_execution_policy_impl = false;

template <class _Tp>
inline constexpr bool __is_unsequenced_execution_policy_v =
    __is_unsequenced_execution_policy_impl<__remove_cvref_t<_Tp>>;

template <class>
inline constexpr bool __is_parallel_execution_policy_impl = false;

template <class _Tp>
inline constexpr bool __is_parallel_execution_policy_v = __is_parallel_execution_policy_impl<__remove_cvref_t<_Tp>>;

namespace execution {
struct __disable_user_instantiations_tag {
  explicit __disable_user_instantiations_tag() = default;
};
}


template <class _ExecutionPolicy>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) auto
__remove_parallel_policy(const _ExecutionPolicy& = _ExecutionPolicy{execution::__disable_user_instantiations_tag{}});



template <class _ExecutionPolicy>
using __remove_parallel_policy_t = decltype(std::__remove_parallel_policy<_ExecutionPolicy>());

}}
# 21 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_backends/cpu_backends/any_of.h" 2 3
# 59 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_backends/cpu_backend.h" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_backends/cpu_backends/fill.h" 1 3
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_backends/cpu_backends/fill.h" 3
# 61 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_backends/cpu_backend.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_backends/cpu_backends/find_if.h" 1 3
# 27 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_backends/cpu_backends/find_if.h" 3
# 62 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_backends/cpu_backend.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_backends/cpu_backends/for_each.h" 1 3
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_backends/cpu_backends/for_each.h" 3
# 63 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_backends/cpu_backend.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_backends/cpu_backends/merge.h" 1 3
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_backends/cpu_backends/merge.h" 3
# 64 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_backends/cpu_backend.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_backends/cpu_backends/stable_sort.h" 1 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_backends/cpu_backends/stable_sort.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/stable_sort.h" 1 3
# 30 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/stable_sort.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 34 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/stable_sort.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _AlgPolicy, class _Compare, class _BidirectionalIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __insertion_sort_move(
    _BidirectionalIterator __first1,
    _BidirectionalIterator __last1,
    typename iterator_traits<_BidirectionalIterator>::value_type* __first2,
    _Compare __comp) {
  using _Ops = _IterOps<_AlgPolicy>;

  typedef typename iterator_traits<_BidirectionalIterator>::value_type value_type;
  if (__first1 != __last1) {
    __destruct_n __d(0);
    unique_ptr<value_type, __destruct_n&> __h(__first2, __d);
    value_type* __last2 = __first2;
    ::new ((void*)__last2) value_type(_Ops::__iter_move(__first1));
    __d.template __incr<value_type>();
    for (++__last2; ++__first1 != __last1; ++__last2) {
      value_type* __j2 = __last2;
      value_type* __i2 = __j2;
      if (__comp(*__first1, *--__i2)) {
        ::new ((void*)__j2) value_type(std::move(*__i2));
        __d.template __incr<value_type>();
        for (--__j2; __i2 != __first2 && __comp(*__first1, *--__i2); --__j2)
          *__j2 = std::move(*__i2);
        *__j2 = _Ops::__iter_move(__first1);
      } else {
        ::new ((void*)__j2) value_type(_Ops::__iter_move(__first1));
        __d.template __incr<value_type>();
      }
    }
    __h.release();
  }
}

template <class _AlgPolicy, class _Compare, class _InputIterator1, class _InputIterator2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __merge_move_construct(
    _InputIterator1 __first1,
    _InputIterator1 __last1,
    _InputIterator2 __first2,
    _InputIterator2 __last2,
    typename iterator_traits<_InputIterator1>::value_type* __result,
    _Compare __comp) {
  using _Ops = _IterOps<_AlgPolicy>;

  typedef typename iterator_traits<_InputIterator1>::value_type value_type;
  __destruct_n __d(0);
  unique_ptr<value_type, __destruct_n&> __h(__result, __d);
  for (; true; ++__result) {
    if (__first1 == __last1) {
      for (; __first2 != __last2; ++__first2, (void)++__result, __d.template __incr<value_type>())
        ::new ((void*)__result) value_type(_Ops::__iter_move(__first2));
      __h.release();
      return;
    }
    if (__first2 == __last2) {
      for (; __first1 != __last1; ++__first1, (void)++__result, __d.template __incr<value_type>())
        ::new ((void*)__result) value_type(_Ops::__iter_move(__first1));
      __h.release();
      return;
    }
    if (__comp(*__first2, *__first1)) {
      ::new ((void*)__result) value_type(_Ops::__iter_move(__first2));
      __d.template __incr<value_type>();
      ++__first2;
    } else {
      ::new ((void*)__result) value_type(_Ops::__iter_move(__first1));
      __d.template __incr<value_type>();
      ++__first1;
    }
  }
}

template <class _AlgPolicy, class _Compare, class _InputIterator1, class _InputIterator2, class _OutputIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __merge_move_assign(
    _InputIterator1 __first1,
    _InputIterator1 __last1,
    _InputIterator2 __first2,
    _InputIterator2 __last2,
    _OutputIterator __result,
    _Compare __comp) {
  using _Ops = _IterOps<_AlgPolicy>;

  for (; __first1 != __last1; ++__result) {
    if (__first2 == __last2) {
      for (; __first1 != __last1; ++__first1, (void)++__result)
        *__result = _Ops::__iter_move(__first1);
      return;
    }
    if (__comp(*__first2, *__first1)) {
      *__result = _Ops::__iter_move(__first2);
      ++__first2;
    } else {
      *__result = _Ops::__iter_move(__first1);
      ++__first1;
    }
  }
  for (; __first2 != __last2; ++__first2, (void)++__result)
    *__result = _Ops::__iter_move(__first2);
}

template <class _AlgPolicy, class _Compare, class _RandomAccessIterator>
void __stable_sort(_RandomAccessIterator __first,
                   _RandomAccessIterator __last,
                   _Compare __comp,
                   typename iterator_traits<_RandomAccessIterator>::difference_type __len,
                   typename iterator_traits<_RandomAccessIterator>::value_type* __buff,
                   ptrdiff_t __buff_size);

template <class _AlgPolicy, class _Compare, class _RandomAccessIterator>
void __stable_sort_move(_RandomAccessIterator __first1,
                        _RandomAccessIterator __last1,
                        _Compare __comp,
                        typename iterator_traits<_RandomAccessIterator>::difference_type __len,
                        typename iterator_traits<_RandomAccessIterator>::value_type* __first2) {
  using _Ops = _IterOps<_AlgPolicy>;

  typedef typename iterator_traits<_RandomAccessIterator>::value_type value_type;
  switch (__len) {
  case 0:
    return;
  case 1:
    ::new ((void*)__first2) value_type(_Ops::__iter_move(__first1));
    return;
  case 2:
    __destruct_n __d(0);
    unique_ptr<value_type, __destruct_n&> __h2(__first2, __d);
    if (__comp(*--__last1, *__first1)) {
      ::new ((void*)__first2) value_type(_Ops::__iter_move(__last1));
      __d.template __incr<value_type>();
      ++__first2;
      ::new ((void*)__first2) value_type(_Ops::__iter_move(__first1));
    } else {
      ::new ((void*)__first2) value_type(_Ops::__iter_move(__first1));
      __d.template __incr<value_type>();
      ++__first2;
      ::new ((void*)__first2) value_type(_Ops::__iter_move(__last1));
    }
    __h2.release();
    return;
  }
  if (__len <= 8) {
    std::__insertion_sort_move<_AlgPolicy, _Compare>(__first1, __last1, __first2, __comp);
    return;
  }
  typename iterator_traits<_RandomAccessIterator>::difference_type __l2 = __len / 2;
  _RandomAccessIterator __m = __first1 + __l2;
  std::__stable_sort<_AlgPolicy, _Compare>(__first1, __m, __comp, __l2, __first2, __l2);
  std::__stable_sort<_AlgPolicy, _Compare>(__m, __last1, __comp, __len - __l2, __first2 + __l2, __len - __l2);
  std::__merge_move_construct<_AlgPolicy, _Compare>(__first1, __m, __m, __last1, __first2, __comp);
}

template <class _Tp>
struct __stable_sort_switch {
  static const unsigned value = 128 * is_trivially_copy_assignable<_Tp>::value;
};

template <class _AlgPolicy, class _Compare, class _RandomAccessIterator>
void __stable_sort(_RandomAccessIterator __first,
                   _RandomAccessIterator __last,
                   _Compare __comp,
                   typename iterator_traits<_RandomAccessIterator>::difference_type __len,
                   typename iterator_traits<_RandomAccessIterator>::value_type* __buff,
                   ptrdiff_t __buff_size) {
  typedef typename iterator_traits<_RandomAccessIterator>::value_type value_type;
  typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type;
  switch (__len) {
  case 0:
  case 1:
    return;
  case 2:
    if (__comp(*--__last, *__first))
      _IterOps<_AlgPolicy>::iter_swap(__first, __last);
    return;
  }
  if (__len <= static_cast<difference_type>(__stable_sort_switch<value_type>::value)) {
    std::__insertion_sort<_AlgPolicy, _Compare>(__first, __last, __comp);
    return;
  }
  typename iterator_traits<_RandomAccessIterator>::difference_type __l2 = __len / 2;
  _RandomAccessIterator __m = __first + __l2;
  if (__len <= __buff_size) {
    __destruct_n __d(0);
    unique_ptr<value_type, __destruct_n&> __h2(__buff, __d);
    std::__stable_sort_move<_AlgPolicy, _Compare>(__first, __m, __comp, __l2, __buff);
    __d.__set(__l2, (value_type*)nullptr);
    std::__stable_sort_move<_AlgPolicy, _Compare>(__m, __last, __comp, __len - __l2, __buff + __l2);
    __d.__set(__len, (value_type*)nullptr);
    std::__merge_move_assign<_AlgPolicy, _Compare>(
        __buff, __buff + __l2, __buff + __l2, __buff + __len, __first, __comp);





    return;
  }
  std::__stable_sort<_AlgPolicy, _Compare>(__first, __m, __comp, __l2, __buff, __buff_size);
  std::__stable_sort<_AlgPolicy, _Compare>(__m, __last, __comp, __len - __l2, __buff, __buff_size);
  std::__inplace_merge<_AlgPolicy>(__first, __m, __last, __comp, __l2, __len - __l2, __buff, __buff_size);
}

template <class _AlgPolicy, class _RandomAccessIterator, class _Compare>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
__stable_sort_impl(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare& __comp) {
  using value_type = typename iterator_traits<_RandomAccessIterator>::value_type;
  using difference_type = typename iterator_traits<_RandomAccessIterator>::difference_type;

  difference_type __len = __last - __first;
  pair<value_type*, ptrdiff_t> __buf(0, 0);
  unique_ptr<value_type, __return_temporary_buffer> __h;
  if (__len > static_cast<difference_type>(__stable_sort_switch<value_type>::value)) {

#pragma GCC diagnostic push
# 248 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/stable_sort.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 248 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/stable_sort.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    __buf = std::get_temporary_buffer<value_type>(__len);
#pragma GCC diagnostic pop
    __h.reset(__buf.first);
  }

  std::__stable_sort<_AlgPolicy, __comp_ref_type<_Compare> >(__first, __last, __comp, __len, __buf.first, __buf.second);
  std::__check_strict_weak_ordering_sorted(__first, __last, __comp);
}

template <class _RandomAccessIterator, class _Compare>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp) {
  std::__stable_sort_impl<_ClassicAlgPolicy>(std::move(__first), std::move(__last), __comp);
}

template <class _RandomAccessIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last) {
  std::stable_sort(__first, __last, __less<>());
}

}}
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_backends/cpu_backends/stable_sort.h" 2 3
# 21 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_backends/cpu_backends/stable_sort.h" 3
# 65 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_backends/cpu_backend.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_backends/cpu_backends/transform.h" 1 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_backends/cpu_backends/transform.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/transform.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/transform.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _InputIterator, class _OutputIterator, class _UnaryOperation>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _OutputIterator
transform(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _UnaryOperation __op) {
  for (; __first != __last; ++__first, (void)++__result)
    *__result = __op(*__first);
  return __result;
}

template <class _InputIterator1, class _InputIterator2, class _OutputIterator, class _BinaryOperation>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _OutputIterator transform(
    _InputIterator1 __first1,
    _InputIterator1 __last1,
    _InputIterator2 __first2,
    _OutputIterator __result,
    _BinaryOperation __binary_op) {
  for (; __first1 != __last1; ++__first1, (void)++__first2, ++__result)
    *__result = __binary_op(*__first1, *__first2);
  return __result;
}

}}
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_backends/cpu_backends/transform.h" 2 3
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_backends/cpu_backends/transform.h" 3
# 66 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_backends/cpu_backend.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_backends/cpu_backends/transform_reduce.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_backends/cpu_backends/transform_reduce.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__numeric/transform_reduce.h" 1 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__numeric/transform_reduce.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__numeric/transform_reduce.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {


template <class _InputIterator, class _Tp, class _BinaryOp, class _UnaryOp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp
transform_reduce(_InputIterator __first, _InputIterator __last, _Tp __init, _BinaryOp __b, _UnaryOp __u) {
  for (; __first != __last; ++__first)
    __init = __b(std::move(__init), __u(*__first));
  return __init;
}

template <class _InputIterator1, class _InputIterator2, class _Tp, class _BinaryOp1, class _BinaryOp2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp transform_reduce(
    _InputIterator1 __first1,
    _InputIterator1 __last1,
    _InputIterator2 __first2,
    _Tp __init,
    _BinaryOp1 __b1,
    _BinaryOp2 __b2) {
  for (; __first1 != __last1; ++__first1, (void)++__first2)
    __init = __b1(std::move(__init), __b2(*__first1, *__first2));
  return __init;
}

template <class _InputIterator1, class _InputIterator2, class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp
transform_reduce(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _Tp __init) {
  return std::transform_reduce(__first1, __last1, __first2, std::move(__init), std::plus<>(), std::multiplies<>());
}


}}
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_backends/cpu_backends/transform_reduce.h" 2 3
# 26 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_backends/cpu_backends/transform_reduce.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 30 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_backends/cpu_backends/transform_reduce.h" 2 3
# 67 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_backends/cpu_backend.h" 2 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_backend.h" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\execution" 1 3
# 44 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\execution" 3
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_backend.h" 2 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_backend.h" 3
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_find.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_frontend_dispatch.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_frontend_dispatch.h" 3




namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {







template <class _SpecializedImpl, class _GenericImpl, class... _Args>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) decltype(auto)
__pstl_frontend_dispatch(_SpecializedImpl __specialized_impl, _GenericImpl __generic_impl, _Args&&... __args) {
  if constexpr (__is_callable<_SpecializedImpl, _Args...>::value) {
    return __specialized_impl(std::forward<_Args>(__args)...);
  } else {
    return __generic_impl(std::forward<_Args>(__args)...);
  }
}

}}
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_find.h" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/cpp17_iterator_concepts.h" 1 3
# 30 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/cpp17_iterator_concepts.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 34 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__iterator/cpp17_iterator_concepts.h" 2 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_find.h" 2 3
# 26 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_find.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 30 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_find.h" 2 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_any_all_none_of.h" 2 3
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_any_all_none_of.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 28 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_any_all_none_of.h" 2 3
# 1856 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_copy.h" 1 3
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_copy.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_transform.h" 1 3
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_transform.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 27 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_transform.h" 2 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_copy.h" 2 3
# 29 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_copy.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 33 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_copy.h" 2 3
# 1857 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_count.h" 1 3
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_count.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_for_each.h" 1 3
# 29 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_for_each.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 33 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_for_each.h" 2 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_count.h" 2 3





# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__numeric/pstl_transform_reduce.h" 1 3
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__numeric/pstl_transform_reduce.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 27 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__numeric/pstl_transform_reduce.h" 2 3
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_count.h" 2 3
# 30 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_count.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 34 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_count.h" 2 3
# 1858 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_equal.h" 1 3
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_equal.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 26 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_equal.h" 2 3
# 1859 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_fill.h" 1 3
# 27 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_fill.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 31 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_fill.h" 2 3
# 1860 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3


# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_generate.h" 1 3
# 26 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_generate.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 30 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_generate.h" 2 3
# 1863 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_is_partitioned.h" 1 3
# 25 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_is_partitioned.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 29 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_is_partitioned.h" 2 3
# 1864 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_merge.h" 1 3
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_merge.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 27 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_merge.h" 2 3
# 1865 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_move.h" 1 3
# 28 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_move.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 32 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_move.h" 2 3
# 1866 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_replace.h" 1 3
# 25 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_replace.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 29 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_replace.h" 2 3
# 1867 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_rotate_copy.h" 1 3
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_rotate_copy.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_rotate_copy.h" 2 3
# 1868 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_sort.h" 1 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_sort.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_stable_sort.h" 1 3
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_stable_sort.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 28 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_stable_sort.h" 2 3
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_sort.h" 2 3
# 26 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_sort.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 30 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/pstl_sort.h" 2 3
# 1869 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_adjacent_find.h" 1 3
# 25 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_adjacent_find.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 29 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_adjacent_find.h" 2 3
# 1873 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_all_of.h" 1 3
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_all_of.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 27 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_all_of.h" 2 3
# 1874 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_any_of.h" 1 3
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_any_of.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 27 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_any_of.h" 2 3
# 1875 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_binary_search.h" 1 3
# 25 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_binary_search.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 29 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_binary_search.h" 2 3
# 1876 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_clamp.h" 1 3
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_clamp.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 27 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_clamp.h" 2 3
# 1877 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_contains.h" 1 3
# 12 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_contains.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_find.h" 1 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_find.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_find_if.h" 1 3
# 25 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_find_if.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 29 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_find_if.h" 2 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_find.h" 2 3
# 29 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_find.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 33 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_find.h" 2 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_contains.h" 2 3
# 26 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_contains.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 30 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_contains.h" 2 3
# 1878 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_copy.h" 1 3
# 26 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_copy.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 30 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_copy.h" 2 3
# 1879 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_copy_backward.h" 1 3
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_copy_backward.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 28 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_copy_backward.h" 2 3
# 1880 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_copy_if.h" 1 3
# 25 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_copy_if.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 29 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_copy_if.h" 2 3
# 1881 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_copy_n.h" 1 3
# 26 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_copy_n.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 30 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_copy_n.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 77 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_copy_n.h" 3
}}
# 1882 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_count.h" 1 3
# 27 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_count.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 31 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_count.h" 2 3
# 1883 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_count_if.h" 1 3
# 26 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_count_if.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 30 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_count_if.h" 2 3
# 1884 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_ends_with.h" 1 3
# 12 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_ends_with.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_equal.h" 1 3
# 27 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_equal.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 31 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_equal.h" 2 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_ends_with.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_starts_with.h" 1 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_starts_with.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_mismatch.h" 1 3
# 26 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_mismatch.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 30 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_mismatch.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 90 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_mismatch.h" 3
}}
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_starts_with.h" 2 3
# 25 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_starts_with.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 29 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_starts_with.h" 2 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_ends_with.h" 2 3
# 29 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_ends_with.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 33 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_ends_with.h" 2 3
# 1885 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_equal_range.h" 1 3
# 31 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_equal_range.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 35 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_equal_range.h" 2 3
# 1887 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_fill.h" 1 3
# 12 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_fill.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_fill_n.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_fill_n.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_fill_n.h" 2 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_fill.h" 2 3
# 21 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_fill.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 25 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_fill.h" 2 3
# 1888 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3


# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_find_end.h" 1 3
# 28 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_find_end.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 32 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_find_end.h" 2 3
# 1891 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_find_first_of.h" 1 3
# 25 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_find_first_of.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 29 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_find_first_of.h" 2 3
# 1892 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_find_if_not.h" 1 3
# 27 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_find_if_not.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 31 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_find_if_not.h" 2 3
# 1894 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_for_each.h" 1 3
# 25 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_for_each.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 29 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_for_each.h" 2 3
# 1895 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_for_each_n.h" 1 3
# 25 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_for_each_n.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 29 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_for_each_n.h" 2 3
# 1896 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_generate.h" 1 3
# 25 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_generate.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 29 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_generate.h" 2 3
# 1897 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_generate_n.h" 1 3
# 26 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_generate_n.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 30 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_generate_n.h" 2 3
# 1898 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_includes.h" 1 3
# 28 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_includes.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 32 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_includes.h" 2 3
# 1899 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_inplace_merge.h" 1 3
# 32 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_inplace_merge.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 36 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_inplace_merge.h" 2 3
# 1900 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_is_heap.h" 1 3
# 27 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_is_heap.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 31 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_is_heap.h" 2 3
# 1901 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_is_heap_until.h" 1 3
# 28 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_is_heap_until.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 32 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_is_heap_until.h" 2 3
# 1902 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_is_partitioned.h" 1 3
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_is_partitioned.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 28 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_is_partitioned.h" 2 3
# 1903 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_is_permutation.h" 1 3
# 26 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_is_permutation.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 30 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_is_permutation.h" 2 3
# 1904 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_is_sorted.h" 1 3
# 12 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_is_sorted.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_is_sorted_until.h" 1 3
# 25 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_is_sorted_until.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 29 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_is_sorted_until.h" 2 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_is_sorted.h" 2 3
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_is_sorted.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 28 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_is_sorted.h" 2 3
# 1905 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_lexicographical_compare.h" 1 3
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_lexicographical_compare.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 28 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_lexicographical_compare.h" 2 3
# 1907 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_lower_bound.h" 1 3
# 28 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_lower_bound.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 32 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_lower_bound.h" 2 3
# 1908 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_make_heap.h" 1 3
# 33 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_make_heap.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 37 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_make_heap.h" 2 3
# 1909 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_max.h" 1 3
# 12 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_max.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_min_element.h" 1 3
# 25 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_min_element.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 29 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_min_element.h" 2 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_max.h" 2 3
# 29 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_max.h" 3
# 1910 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_max_element.h" 1 3
# 25 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_max_element.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 29 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_max_element.h" 2 3
# 1911 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_merge.h" 1 3
# 28 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_merge.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 32 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_merge.h" 2 3
# 1912 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_min.h" 1 3
# 28 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_min.h" 3
# 1913 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_minmax.h" 1 3
# 35 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_minmax.h" 3
# 1915 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_minmax_element.h" 1 3
# 29 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_minmax_element.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 33 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_minmax_element.h" 2 3
# 1916 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_move.h" 1 3
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_move.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 28 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_move.h" 2 3
# 1918 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_move_backward.h" 1 3
# 26 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_move_backward.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 30 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_move_backward.h" 2 3
# 1919 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_next_permutation.h" 1 3
# 29 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_next_permutation.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 33 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_next_permutation.h" 2 3
# 1920 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_none_of.h" 1 3
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_none_of.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 27 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_none_of.h" 2 3
# 1921 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_nth_element.h" 1 3
# 32 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_nth_element.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 36 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_nth_element.h" 2 3
# 1922 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_partial_sort.h" 1 3
# 34 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_partial_sort.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 38 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_partial_sort.h" 2 3
# 1923 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_partial_sort_copy.h" 1 3
# 31 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_partial_sort_copy.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 35 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_partial_sort_copy.h" 2 3
# 1924 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_partition.h" 1 3
# 33 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_partition.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 37 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_partition.h" 2 3
# 1925 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_partition_copy.h" 1 3
# 27 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_partition_copy.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 31 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_partition_copy.h" 2 3
# 1926 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_partition_point.h" 1 3
# 28 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_partition_point.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 32 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_partition_point.h" 2 3
# 1927 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_pop_heap.h" 1 3
# 33 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_pop_heap.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 37 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_pop_heap.h" 2 3
# 1928 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_prev_permutation.h" 1 3
# 29 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_prev_permutation.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 33 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_prev_permutation.h" 2 3
# 1929 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_push_heap.h" 1 3
# 33 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_push_heap.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 37 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_push_heap.h" 2 3
# 1930 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_remove.h" 1 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_remove.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_remove_if.h" 1 3
# 28 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_remove_if.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 32 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_remove_if.h" 2 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_remove.h" 2 3
# 26 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_remove.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 30 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_remove.h" 2 3
# 1931 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_remove_copy.h" 1 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_remove_copy.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_remove_copy_if.h" 1 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_remove_copy_if.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/remove_copy_if.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/remove_copy_if.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _InputIterator, class _OutputIterator, class _Predicate>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _OutputIterator
remove_copy_if(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _Predicate __pred) {
  for (; __first != __last; ++__first) {
    if (!__pred(*__first)) {
      *__result = *__first;
      ++__result;
    }
  }
  return __result;
}

}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_remove_copy_if.h" 2 3
# 30 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_remove_copy_if.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 34 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_remove_copy_if.h" 2 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_remove_copy.h" 2 3
# 27 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_remove_copy.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 31 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_remove_copy.h" 2 3
# 1932 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3


# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_replace.h" 1 3
# 12 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_replace.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_replace_if.h" 1 3
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_replace_if.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 28 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_replace_if.h" 2 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_replace.h" 2 3
# 25 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_replace.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 29 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_replace.h" 2 3
# 1935 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_replace_copy.h" 1 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_replace_copy.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_replace_copy_if.h" 1 3
# 25 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_replace_copy_if.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 29 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_replace_copy_if.h" 2 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_replace_copy.h" 2 3
# 27 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_replace_copy.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 31 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_replace_copy.h" 2 3
# 1936 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3


# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_reverse.h" 1 3
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_reverse.h" 3
# 1939 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_reverse_copy.h" 1 3
# 26 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_reverse_copy.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 30 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_reverse_copy.h" 2 3
# 1940 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_rotate.h" 1 3
# 26 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_rotate.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 30 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_rotate.h" 2 3
# 1941 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_rotate_copy.h" 1 3
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_rotate_copy.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 27 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_rotate_copy.h" 2 3
# 1942 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_sample.h" 1 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_sample.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/sample.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/sample.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__random/uniform_int_distribution.h" 1 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__random/uniform_int_distribution.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__random/is_valid.h" 1 3
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__random/is_valid.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {






template <class>
struct __libcpp_random_is_valid_realtype : false_type {};
template <>
struct __libcpp_random_is_valid_realtype<float> : true_type {};
template <>
struct __libcpp_random_is_valid_realtype<double> : true_type {};
template <>
struct __libcpp_random_is_valid_realtype<long double> : true_type {};







template <class>
struct __libcpp_random_is_valid_inttype : false_type {};
template <>
struct __libcpp_random_is_valid_inttype<int8_t> : true_type {};
template <>
struct __libcpp_random_is_valid_inttype<short> : true_type {};
template <>
struct __libcpp_random_is_valid_inttype<int> : true_type {};
template <>
struct __libcpp_random_is_valid_inttype<long> : true_type {};
template <>
struct __libcpp_random_is_valid_inttype<long long> : true_type {};
template <>
struct __libcpp_random_is_valid_inttype<uint8_t> : true_type {};
template <>
struct __libcpp_random_is_valid_inttype<unsigned short> : true_type {};
template <>
struct __libcpp_random_is_valid_inttype<unsigned int> : true_type {};
template <>
struct __libcpp_random_is_valid_inttype<unsigned long> : true_type {};
template <>
struct __libcpp_random_is_valid_inttype<unsigned long long> : true_type {};
# 84 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__random/is_valid.h" 3
template <class, class = void>
struct __libcpp_random_is_valid_urng : false_type {};
template <class _Gp>
struct __libcpp_random_is_valid_urng<
    _Gp,
    __enable_if_t< is_unsigned<typename _Gp::result_type>::value &&
                   _IsSame<decltype(std::declval<_Gp&>()()), typename _Gp::result_type>::value > > : true_type {};

}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__random/uniform_int_distribution.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__random/log2.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__random/log2.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _UIntType, _UIntType _Xp, size_t _Rp>
struct __log2_imp;

template <unsigned long long _Xp, size_t _Rp>
struct __log2_imp<unsigned long long, _Xp, _Rp> {
  static const size_t value =
      _Xp & ((unsigned long long)(1) << _Rp) ? _Rp : __log2_imp<unsigned long long, _Xp, _Rp - 1>::value;
};

template <unsigned long long _Xp>
struct __log2_imp<unsigned long long, _Xp, 0> {
  static const size_t value = 0;
};

template <size_t _Rp>
struct __log2_imp<unsigned long long, 0, _Rp> {
  static const size_t value = _Rp + 1;
};
# 52 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__random/log2.h" 3
template <class _UIntType, _UIntType _Xp>
struct __log2 {
  static const size_t value = __log2_imp<



      unsigned long long,

      _Xp,
      sizeof(_UIntType) * 8 - 1>::value;
};

}}
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__random/uniform_int_distribution.h" 2 3
# 25 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__random/uniform_int_distribution.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 29 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__random/uniform_int_distribution.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Engine, class _UIntType>
class __independent_bits_engine {
public:

  typedef _UIntType result_type;

private:
  typedef typename _Engine::result_type _Engine_result_type;
  typedef __conditional_t<sizeof(_Engine_result_type) <= sizeof(result_type), result_type, _Engine_result_type>
      _Working_result_type;

  _Engine& __e_;
  size_t __w_;
  size_t __w0_;
  size_t __n_;
  size_t __n0_;
  _Working_result_type __y0_;
  _Working_result_type __y1_;
  _Engine_result_type __mask0_;
  _Engine_result_type __mask1_;




  static constexpr const _Working_result_type _Rp = _Engine::max() - _Engine::min() + _Working_result_type(1);

  static constexpr const size_t __m = __log2<_Working_result_type, _Rp>::value;
  static constexpr const size_t _WDt = numeric_limits<_Working_result_type>::digits;
  static constexpr const size_t _EDt = numeric_limits<_Engine_result_type>::digits;

public:

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __independent_bits_engine(_Engine& __e, size_t __w);


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) result_type operator()() { return __eval(integral_constant<bool, _Rp != 0>()); }

private:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) result_type __eval(false_type);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) result_type __eval(true_type);
};

template <class _Engine, class _UIntType>
__independent_bits_engine<_Engine, _UIntType>::__independent_bits_engine(_Engine& __e, size_t __w)
    : __e_(__e), __w_(__w) {
  __n_ = __w_ / __m + (__w_ % __m != 0);
  __w0_ = __w_ / __n_;
  if (_Rp == 0)
    __y0_ = _Rp;
  else if (__w0_ < _WDt)
    __y0_ = (_Rp >> __w0_) << __w0_;
  else
    __y0_ = 0;
  if (_Rp - __y0_ > __y0_ / __n_) {
    ++__n_;
    __w0_ = __w_ / __n_;
    if (__w0_ < _WDt)
      __y0_ = (_Rp >> __w0_) << __w0_;
    else
      __y0_ = 0;
  }
  __n0_ = __n_ - __w_ % __n_;
  if (__w0_ < _WDt - 1)
    __y1_ = (_Rp >> (__w0_ + 1)) << (__w0_ + 1);
  else
    __y1_ = 0;
  __mask0_ = __w0_ > 0 ? _Engine_result_type(~0) >> (_EDt - __w0_) : _Engine_result_type(0);
  __mask1_ = __w0_ < _EDt - 1 ? _Engine_result_type(~0) >> (_EDt - (__w0_ + 1)) : _Engine_result_type(~0);
}

template <class _Engine, class _UIntType>
inline _UIntType __independent_bits_engine<_Engine, _UIntType>::__eval(false_type) {
  return static_cast<result_type>(__e_() & __mask0_);
}

template <class _Engine, class _UIntType>
_UIntType __independent_bits_engine<_Engine, _UIntType>::__eval(true_type) {
  const size_t __w_rt = numeric_limits<result_type>::digits;
  result_type __sp = 0;
  for (size_t __k = 0; __k < __n0_; ++__k) {
    _Engine_result_type __u;
    do {
      __u = __e_() - _Engine::min();
    } while (__u >= __y0_);
    if (__w0_ < __w_rt)
      __sp <<= __w0_;
    else
      __sp = 0;
    __sp += __u & __mask0_;
  }
  for (size_t __k = __n0_; __k < __n_; ++__k) {
    _Engine_result_type __u;
    do {
      __u = __e_() - _Engine::min();
    } while (__u >= __y1_);
    if (__w0_ < __w_rt - 1)
      __sp <<= __w0_ + 1;
    else
      __sp = 0;
    __sp += __u & __mask1_;
  }
  return __sp;
}

template <class _IntType = int>
class uniform_int_distribution {
  static_assert(__libcpp_random_is_valid_inttype<_IntType>::value, "IntType must be a supported integer type");

public:

  typedef _IntType result_type;

  class param_type {
    result_type __a_;
    result_type __b_;

  public:
    typedef uniform_int_distribution distribution_type;

    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit param_type(result_type __a = 0, result_type __b = numeric_limits<result_type>::max())
        : __a_(__a), __b_(__b) {}

    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) result_type a() const { return __a_; }
    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) result_type b() const { return __b_; }

    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) friend bool operator==(const param_type& __x, const param_type& __y) {
      return __x.__a_ == __y.__a_ && __x.__b_ == __y.__b_;
    }
    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) friend bool operator!=(const param_type& __x, const param_type& __y) { return !(__x == __y); }
  };

private:
  param_type __p_;

public:


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) uniform_int_distribution() : uniform_int_distribution(0) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit uniform_int_distribution(
      result_type __a, result_type __b = numeric_limits<result_type>::max())
      : __p_(param_type(__a, __b)) {}




  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit uniform_int_distribution(const param_type& __p) : __p_(__p) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void reset() {}


  template <class _URNG>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) result_type operator()(_URNG& __g) {
    return (*this)(__g, __p_);
  }
  template <class _URNG>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) result_type operator()(_URNG& __g, const param_type& __p);


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) result_type a() const { return __p_.a(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) result_type b() const { return __p_.b(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) param_type param() const { return __p_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void param(const param_type& __p) { __p_ = __p; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) result_type min() const { return a(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) result_type max() const { return b(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) friend bool
  operator==(const uniform_int_distribution& __x, const uniform_int_distribution& __y) {
    return __x.__p_ == __y.__p_;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) friend bool
  operator!=(const uniform_int_distribution& __x, const uniform_int_distribution& __y) {
    return !(__x == __y);
  }
};

template <class _IntType>
template <class _URNG>
typename uniform_int_distribution<_IntType>::result_type uniform_int_distribution<_IntType>::operator()(
    _URNG& __g, const param_type& __p) __attribute__((__no_sanitize__("unsigned-integer-overflow"))) {
  static_assert(__libcpp_random_is_valid_urng<_URNG>::value, "");
  typedef __conditional_t<sizeof(result_type) <= sizeof(uint32_t), uint32_t, __make_unsigned_t<result_type> > _UIntType;
  const _UIntType __rp = _UIntType(__p.b()) - _UIntType(__p.a()) + _UIntType(1);
  if (__rp == 1)
    return __p.a();
  const size_t __dt = numeric_limits<_UIntType>::digits;
  typedef __independent_bits_engine<_URNG, _UIntType> _Eng;
  if (__rp == 0)
    return static_cast<result_type>(_Eng(__g, __dt)());
  size_t __w = __dt - std::__countl_zero(__rp) - 1;
  if ((__rp & (numeric_limits<_UIntType>::max() >> (__dt - __w))) != 0)
    ++__w;
  _Eng __e(__g, __w);
  _UIntType __u;
  do {
    __u = __e();
  } while (__u >= __rp);
  return static_cast<result_type>(__u + __p.a());
}

template <class _CharT, class _Traits, class _IT>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_ostream<_CharT, _Traits>&
operator<<(basic_ostream<_CharT, _Traits>& __os, const uniform_int_distribution<_IT>& __x) {
  __save_flags<_CharT, _Traits> __lx(__os);
  typedef basic_ostream<_CharT, _Traits> _Ostream;
  __os.flags(_Ostream::dec | _Ostream::left);
  _CharT __sp = __os.widen(' ');
  __os.fill(__sp);
  return __os << __x.a() << __sp << __x.b();
}

template <class _CharT, class _Traits, class _IT>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_istream<_CharT, _Traits>&
operator>>(basic_istream<_CharT, _Traits>& __is, uniform_int_distribution<_IT>& __x) {
  typedef uniform_int_distribution<_IT> _Eng;
  typedef typename _Eng::result_type result_type;
  typedef typename _Eng::param_type param_type;
  __save_flags<_CharT, _Traits> __lx(__is);
  typedef basic_istream<_CharT, _Traits> _Istream;
  __is.flags(_Istream::dec | _Istream::skipws);
  result_type __a;
  result_type __b;
  __is >> __a >> __b;
  if (!__is.fail())
    __x.param(param_type(__a, __b));
  return __is;
}

}}
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/sample.h" 2 3
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/sample.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 28 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/sample.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _AlgPolicy,
          class _PopulationIterator,
          class _PopulationSentinel,
          class _SampleIterator,
          class _Distance,
          class _UniformRandomNumberGenerator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _SampleIterator __sample(
    _PopulationIterator __first,
    _PopulationSentinel __last,
    _SampleIterator __output_iter,
    _Distance __n,
    _UniformRandomNumberGenerator& __g,
    input_iterator_tag) {
  _Distance __k = 0;
  for (; __first != __last && __k < __n; ++__first, (void)++__k)
    __output_iter[__k] = *__first;
  _Distance __sz = __k;
  for (; __first != __last; ++__first, (void)++__k) {
    _Distance __r = uniform_int_distribution<_Distance>(0, __k)(__g);
    if (__r < __sz)
      __output_iter[__r] = *__first;
  }
  return __output_iter + std::min(__n, __k);
}

template <class _AlgPolicy,
          class _PopulationIterator,
          class _PopulationSentinel,
          class _SampleIterator,
          class _Distance,
          class _UniformRandomNumberGenerator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _SampleIterator __sample(
    _PopulationIterator __first,
    _PopulationSentinel __last,
    _SampleIterator __output_iter,
    _Distance __n,
    _UniformRandomNumberGenerator& __g,
    forward_iterator_tag) {
  _Distance __unsampled_sz = _IterOps<_AlgPolicy>::distance(__first, __last);
  for (__n = std::min(__n, __unsampled_sz); __n != 0; ++__first) {
    _Distance __r = uniform_int_distribution<_Distance>(0, --__unsampled_sz)(__g);
    if (__r < __n) {
      *__output_iter++ = *__first;
      --__n;
    }
  }
  return __output_iter;
}

template <class _AlgPolicy,
          class _PopulationIterator,
          class _PopulationSentinel,
          class _SampleIterator,
          class _Distance,
          class _UniformRandomNumberGenerator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _SampleIterator __sample(
    _PopulationIterator __first,
    _PopulationSentinel __last,
    _SampleIterator __output_iter,
    _Distance __n,
    _UniformRandomNumberGenerator& __g) {
  ((void)0);

  using _PopIterCategory = typename _IterOps<_AlgPolicy>::template __iterator_category<_PopulationIterator>;
  using _Difference = typename _IterOps<_AlgPolicy>::template __difference_type<_PopulationIterator>;
  using _CommonType = typename common_type<_Distance, _Difference>::type;

  return std::__sample<_AlgPolicy>(
      std::move(__first), std::move(__last), std::move(__output_iter), _CommonType(__n), __g, _PopIterCategory());
}


template <class _PopulationIterator, class _SampleIterator, class _Distance, class _UniformRandomNumberGenerator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _SampleIterator
sample(_PopulationIterator __first,
       _PopulationIterator __last,
       _SampleIterator __output_iter,
       _Distance __n,
       _UniformRandomNumberGenerator&& __g) {
  static_assert(__has_forward_iterator_category<_PopulationIterator>::value ||
                    __has_random_access_iterator_category<_SampleIterator>::value,
                "SampleIterator must meet the requirements of RandomAccessIterator");

  return std::__sample<_ClassicAlgPolicy>(std::move(__first), std::move(__last), std::move(__output_iter), __n, __g);
}



}}
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_sample.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/uniform_random_bit_generator_adaptor.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/uniform_random_bit_generator_adaptor.h" 3
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_sample.h" 2 3




# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__random/uniform_random_bit_generator.h" 1 3
# 21 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__random/uniform_random_bit_generator.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 25 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__random/uniform_random_bit_generator.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 40 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__random/uniform_random_bit_generator.h" 3
}}
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_sample.h" 2 3
# 28 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_sample.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 32 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_sample.h" 2 3
# 1943 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_search.h" 1 3
# 29 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_search.h" 3
# 1944 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_search_n.h" 1 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_search_n.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/search_n.h" 1 3
# 29 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/search_n.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _AlgPolicy, class _Pred, class _Iter, class _Sent, class _SizeT, class _Type, class _Proj>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pair<_Iter, _Iter> __search_n_forward_impl(
    _Iter __first, _Sent __last, _SizeT __count, const _Type& __value, _Pred& __pred, _Proj& __proj) {
  if (__count <= 0)
    return std::make_pair(__first, __first);
  while (true) {

    while (true) {
      if (__first == __last) {
        _IterOps<_AlgPolicy>::__advance_to(__first, __last);
        return std::make_pair(__first, __first);
      }
      if (std::__invoke(__pred, std::__invoke(__proj, *__first), __value))
        break;
      ++__first;
    }

    _Iter __m = __first;
    _SizeT __c(0);
    while (true) {
      if (++__c == __count)
        return std::make_pair(__first, ++__m);
      if (++__m == __last) {
        _IterOps<_AlgPolicy>::__advance_to(__first, __last);
        return std::make_pair(__first, __first);
      }


      if (!std::__invoke(__pred, std::__invoke(__proj, *__m), __value)) {
        __first = __m;
        ++__first;
        break;
      }
    }
  }
}

template <class _AlgPolicy, class _Pred, class _Iter, class _Sent, class _SizeT, class _Type, class _Proj, class _DiffT>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr std::pair<_Iter, _Iter> __search_n_random_access_impl(
    _Iter __first, _Sent __last, _SizeT __count, const _Type& __value, _Pred& __pred, _Proj& __proj, _DiffT __size1) {
  using difference_type = typename iterator_traits<_Iter>::difference_type;
  if (__count == 0)
    return std::make_pair(__first, __first);
  if (__size1 < static_cast<_DiffT>(__count)) {
    _IterOps<_AlgPolicy>::__advance_to(__first, __last);
    return std::make_pair(__first, __first);
  }

  const auto __s = __first + __size1 - difference_type(__count - 1);
  while (true) {

    while (true) {
      if (__first >= __s) {
        _IterOps<_AlgPolicy>::__advance_to(__first, __last);
        return std::make_pair(__first, __first);
      }
      if (std::__invoke(__pred, std::__invoke(__proj, *__first), __value))
        break;
      ++__first;
    }

    auto __m = __first;
    _SizeT __c(0);
    while (true) {
      if (++__c == __count)
        return std::make_pair(__first, __first + _DiffT(__count));
      ++__m;


      if (!std::__invoke(__pred, std::__invoke(__proj, *__m), __value)) {
        __first = __m;
        ++__first;
        break;
      }
    }
  }
}

template <class _Iter, class _Sent, class _DiffT, class _Type, class _Pred, class _Proj>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pair<_Iter, _Iter> __search_n_impl(
    _Iter __first,
    _Sent __last,
    _DiffT __count,
    const _Type& __value,
    _Pred& __pred,
    _Proj& __proj,
    __enable_if_t<__has_random_access_iterator_category<_Iter>::value>* = nullptr) {
  return std::__search_n_random_access_impl<_ClassicAlgPolicy>(
      __first, __last, __count, __value, __pred, __proj, __last - __first);
}

template <class _Iter1, class _Sent1, class _DiffT, class _Type, class _Pred, class _Proj>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr pair<_Iter1, _Iter1> __search_n_impl(
    _Iter1 __first,
    _Sent1 __last,
    _DiffT __count,
    const _Type& __value,
    _Pred& __pred,
    _Proj& __proj,
    __enable_if_t<__has_forward_iterator_category<_Iter1>::value &&
                  !__has_random_access_iterator_category<_Iter1>::value>* = nullptr) {
  return std::__search_n_forward_impl<_ClassicAlgPolicy>(__first, __last, __count, __value, __pred, __proj);
}

template <class _ForwardIterator, class _Size, class _Tp, class _BinaryPredicate>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _ForwardIterator search_n(
    _ForwardIterator __first, _ForwardIterator __last, _Size __count, const _Tp& __value, _BinaryPredicate __pred) {
  static_assert(
      __is_callable<_BinaryPredicate, decltype(*__first), const _Tp&>::value, "BinaryPredicate has to be callable");
  auto __proj = __identity();
  return std::__search_n_impl(__first, __last, std::__convert_to_integral(__count), __value, __pred, __proj).first;
}

template <class _ForwardIterator, class _Size, class _Tp>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _ForwardIterator
search_n(_ForwardIterator __first, _ForwardIterator __last, _Size __count, const _Tp& __value) {
  return std::search_n(__first, __last, std::__convert_to_integral(__count), __value, __equal_to());
}

}}
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_search_n.h" 2 3
# 32 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_search_n.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 36 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_search_n.h" 2 3
# 1945 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_set_difference.h" 1 3
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_set_difference.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/set_difference.h" 1 3
# 26 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/set_difference.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 30 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/set_difference.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _AlgPolicy, class _Comp, class _InIter1, class _Sent1, class _InIter2, class _Sent2, class _OutIter>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) pair<__remove_cvref_t<_InIter1>, __remove_cvref_t<_OutIter> >
__set_difference(
    _InIter1&& __first1, _Sent1&& __last1, _InIter2&& __first2, _Sent2&& __last2, _OutIter&& __result, _Comp&& __comp) {
  while (__first1 != __last1 && __first2 != __last2) {
    if (__comp(*__first1, *__first2)) {
      *__result = *__first1;
      ++__first1;
      ++__result;
    } else if (__comp(*__first2, *__first1)) {
      ++__first2;
    } else {
      ++__first1;
      ++__first2;
    }
  }
  return std::__copy<_AlgPolicy>(std::move(__first1), std::move(__last1), std::move(__result));
}

template <class _InputIterator1, class _InputIterator2, class _OutputIterator, class _Compare>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _OutputIterator set_difference(
    _InputIterator1 __first1,
    _InputIterator1 __last1,
    _InputIterator2 __first2,
    _InputIterator2 __last2,
    _OutputIterator __result,
    _Compare __comp) {
  return std::__set_difference<_ClassicAlgPolicy, __comp_ref_type<_Compare> >(
             __first1, __last1, __first2, __last2, __result, __comp)
      .second;
}

template <class _InputIterator1, class _InputIterator2, class _OutputIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _OutputIterator set_difference(
    _InputIterator1 __first1,
    _InputIterator1 __last1,
    _InputIterator2 __first2,
    _InputIterator2 __last2,
    _OutputIterator __result) {
  return std::__set_difference<_ClassicAlgPolicy>(__first1, __last1, __first2, __last2, __result, __less<>()).second;
}

}}
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_set_difference.h" 2 3
# 31 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_set_difference.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 35 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_set_difference.h" 2 3
# 1946 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_set_intersection.h" 1 3
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_set_intersection.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/set_intersection.h" 1 3
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/set_intersection.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 26 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/set_intersection.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _InIter1, class _InIter2, class _OutIter>
struct __set_intersection_result {
  _InIter1 __in1_;
  _InIter2 __in2_;
  _OutIter __out_;


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
  __set_intersection_result(_InIter1&& __in_iter1, _InIter2&& __in_iter2, _OutIter&& __out_iter)
      : __in1_(std::move(__in_iter1)), __in2_(std::move(__in_iter2)), __out_(std::move(__out_iter)) {}
};

template <class _AlgPolicy, class _Compare, class _InIter1, class _Sent1, class _InIter2, class _Sent2, class _OutIter>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __set_intersection_result<_InIter1, _InIter2, _OutIter>
__set_intersection(
    _InIter1 __first1, _Sent1 __last1, _InIter2 __first2, _Sent2 __last2, _OutIter __result, _Compare&& __comp) {
  while (__first1 != __last1 && __first2 != __last2) {
    if (__comp(*__first1, *__first2))
      ++__first1;
    else {
      if (!__comp(*__first2, *__first1)) {
        *__result = *__first1;
        ++__result;
        ++__first1;
      }
      ++__first2;
    }
  }

  return __set_intersection_result<_InIter1, _InIter2, _OutIter>(
      _IterOps<_AlgPolicy>::next(std::move(__first1), std::move(__last1)),
      _IterOps<_AlgPolicy>::next(std::move(__first2), std::move(__last2)),
      std::move(__result));
}

template <class _InputIterator1, class _InputIterator2, class _OutputIterator, class _Compare>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _OutputIterator set_intersection(
    _InputIterator1 __first1,
    _InputIterator1 __last1,
    _InputIterator2 __first2,
    _InputIterator2 __last2,
    _OutputIterator __result,
    _Compare __comp) {
  return std::__set_intersection<_ClassicAlgPolicy, __comp_ref_type<_Compare> >(
             std::move(__first1),
             std::move(__last1),
             std::move(__first2),
             std::move(__last2),
             std::move(__result),
             __comp)
      .__out_;
}

template <class _InputIterator1, class _InputIterator2, class _OutputIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _OutputIterator set_intersection(
    _InputIterator1 __first1,
    _InputIterator1 __last1,
    _InputIterator2 __first2,
    _InputIterator2 __last2,
    _OutputIterator __result) {
  return std::__set_intersection<_ClassicAlgPolicy>(
             std::move(__first1),
             std::move(__last1),
             std::move(__first2),
             std::move(__last2),
             std::move(__result),
             __less<>())
      .__out_;
}

}}
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_set_intersection.h" 2 3
# 29 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_set_intersection.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 33 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_set_intersection.h" 2 3
# 1947 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_set_symmetric_difference.h" 1 3
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_set_symmetric_difference.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/set_symmetric_difference.h" 1 3
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/set_symmetric_difference.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 27 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/set_symmetric_difference.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _InIter1, class _InIter2, class _OutIter>
struct __set_symmetric_difference_result {
  _InIter1 __in1_;
  _InIter2 __in2_;
  _OutIter __out_;


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
  __set_symmetric_difference_result(_InIter1&& __in_iter1, _InIter2&& __in_iter2, _OutIter&& __out_iter)
      : __in1_(std::move(__in_iter1)), __in2_(std::move(__in_iter2)), __out_(std::move(__out_iter)) {}
};

template <class _AlgPolicy, class _Compare, class _InIter1, class _Sent1, class _InIter2, class _Sent2, class _OutIter>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __set_symmetric_difference_result<_InIter1, _InIter2, _OutIter>
__set_symmetric_difference(
    _InIter1 __first1, _Sent1 __last1, _InIter2 __first2, _Sent2 __last2, _OutIter __result, _Compare&& __comp) {
  while (__first1 != __last1) {
    if (__first2 == __last2) {
      auto __ret1 = std::__copy<_AlgPolicy>(std::move(__first1), std::move(__last1), std::move(__result));
      return __set_symmetric_difference_result<_InIter1, _InIter2, _OutIter>(
          std::move(__ret1.first), std::move(__first2), std::move((__ret1.second)));
    }
    if (__comp(*__first1, *__first2)) {
      *__result = *__first1;
      ++__result;
      ++__first1;
    } else {
      if (__comp(*__first2, *__first1)) {
        *__result = *__first2;
        ++__result;
      } else {
        ++__first1;
      }
      ++__first2;
    }
  }
  auto __ret2 = std::__copy<_AlgPolicy>(std::move(__first2), std::move(__last2), std::move(__result));
  return __set_symmetric_difference_result<_InIter1, _InIter2, _OutIter>(
      std::move(__first1), std::move(__ret2.first), std::move((__ret2.second)));
}

template <class _InputIterator1, class _InputIterator2, class _OutputIterator, class _Compare>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _OutputIterator set_symmetric_difference(
    _InputIterator1 __first1,
    _InputIterator1 __last1,
    _InputIterator2 __first2,
    _InputIterator2 __last2,
    _OutputIterator __result,
    _Compare __comp) {
  return std::__set_symmetric_difference<_ClassicAlgPolicy, __comp_ref_type<_Compare> >(
             std::move(__first1),
             std::move(__last1),
             std::move(__first2),
             std::move(__last2),
             std::move(__result),
             __comp)
      .__out_;
}

template <class _InputIterator1, class _InputIterator2, class _OutputIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _OutputIterator set_symmetric_difference(
    _InputIterator1 __first1,
    _InputIterator1 __last1,
    _InputIterator2 __first2,
    _InputIterator2 __last2,
    _OutputIterator __result) {
  return std::set_symmetric_difference(
      std::move(__first1),
      std::move(__last1),
      std::move(__first2),
      std::move(__last2),
      std::move(__result),
      __less<>());
}

}}
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_set_symmetric_difference.h" 2 3
# 29 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_set_symmetric_difference.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 33 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_set_symmetric_difference.h" 2 3
# 1948 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_set_union.h" 1 3
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_set_union.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/set_union.h" 1 3
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/set_union.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 27 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/set_union.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _InIter1, class _InIter2, class _OutIter>
struct __set_union_result {
  _InIter1 __in1_;
  _InIter2 __in2_;
  _OutIter __out_;


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
  __set_union_result(_InIter1&& __in_iter1, _InIter2&& __in_iter2, _OutIter&& __out_iter)
      : __in1_(std::move(__in_iter1)), __in2_(std::move(__in_iter2)), __out_(std::move(__out_iter)) {}
};

template <class _AlgPolicy, class _Compare, class _InIter1, class _Sent1, class _InIter2, class _Sent2, class _OutIter>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __set_union_result<_InIter1, _InIter2, _OutIter> __set_union(
    _InIter1 __first1, _Sent1 __last1, _InIter2 __first2, _Sent2 __last2, _OutIter __result, _Compare&& __comp) {
  for (; __first1 != __last1; ++__result) {
    if (__first2 == __last2) {
      auto __ret1 = std::__copy<_AlgPolicy>(std::move(__first1), std::move(__last1), std::move(__result));
      return __set_union_result<_InIter1, _InIter2, _OutIter>(
          std::move(__ret1.first), std::move(__first2), std::move((__ret1.second)));
    }
    if (__comp(*__first2, *__first1)) {
      *__result = *__first2;
      ++__first2;
    } else {
      if (!__comp(*__first1, *__first2)) {
        ++__first2;
      }
      *__result = *__first1;
      ++__first1;
    }
  }
  auto __ret2 = std::__copy<_AlgPolicy>(std::move(__first2), std::move(__last2), std::move(__result));
  return __set_union_result<_InIter1, _InIter2, _OutIter>(
      std::move(__first1), std::move(__ret2.first), std::move((__ret2.second)));
}

template <class _InputIterator1, class _InputIterator2, class _OutputIterator, class _Compare>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _OutputIterator set_union(
    _InputIterator1 __first1,
    _InputIterator1 __last1,
    _InputIterator2 __first2,
    _InputIterator2 __last2,
    _OutputIterator __result,
    _Compare __comp) {
  return std::__set_union<_ClassicAlgPolicy, __comp_ref_type<_Compare> >(
             std::move(__first1),
             std::move(__last1),
             std::move(__first2),
             std::move(__last2),
             std::move(__result),
             __comp)
      .__out_;
}

template <class _InputIterator1, class _InputIterator2, class _OutputIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _OutputIterator set_union(
    _InputIterator1 __first1,
    _InputIterator1 __last1,
    _InputIterator2 __first2,
    _InputIterator2 __last2,
    _OutputIterator __result) {
  return std::set_union(
      std::move(__first1),
      std::move(__last1),
      std::move(__first2),
      std::move(__last2),
      std::move(__result),
      __less<>());
}

}}
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_set_union.h" 2 3
# 32 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_set_union.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 36 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_set_union.h" 2 3
# 1949 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_shuffle.h" 1 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_shuffle.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/shuffle.h" 1 3
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/shuffle.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 28 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/shuffle.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

class __attribute__((__visibility__("default"))) __libcpp_debug_randomizer {
public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __libcpp_debug_randomizer() {
    __state_ = __seed();
    __inc_ = __state_ + 0xda3e39cb94b95bdbULL;
    __inc_ = (__inc_ << 1) | 1;
  }
  typedef uint_fast32_t result_type;

  static const result_type _Min = 0;
  static const result_type _Max = 0xFFFFFFFF;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) result_type operator()() {
    uint_fast64_t __oldstate = __state_;
    __state_ = __oldstate * 6364136223846793005ULL + __inc_;
    return __oldstate >> 32;
  }

  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr result_type min() { return _Min; }
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr result_type max() { return _Max; }

private:
  uint_fast64_t __state_;
  uint_fast64_t __inc_;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static uint_fast64_t __seed() {



    static char __x;
    return reinterpret_cast<uintptr_t>(&__x);

  }
};
# 134 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/shuffle.h" 3
template <class _AlgPolicy, class _RandomAccessIterator, class _Sentinel, class _UniformRandomNumberGenerator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _RandomAccessIterator
__shuffle(_RandomAccessIterator __first, _Sentinel __last_sentinel, _UniformRandomNumberGenerator&& __g) {
  typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type;
  typedef uniform_int_distribution<ptrdiff_t> _Dp;
  typedef typename _Dp::param_type _Pp;

  auto __original_last = _IterOps<_AlgPolicy>::next(__first, __last_sentinel);
  auto __last = __original_last;
  difference_type __d = __last - __first;
  if (__d > 1) {
    _Dp __uid;
    for (--__last, (void)--__d; __first < __last; ++__first, (void)--__d) {
      difference_type __i = __uid(__g, _Pp(0, __d));
      if (__i != difference_type(0))
        _IterOps<_AlgPolicy>::iter_swap(__first, __first + __i);
    }
  }

  return __original_last;
}

template <class _RandomAccessIterator, class _UniformRandomNumberGenerator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last, _UniformRandomNumberGenerator&& __g) {
  (void)std::__shuffle<_ClassicAlgPolicy>(
      std::move(__first), std::move(__last), std::forward<_UniformRandomNumberGenerator>(__g));
}

}}
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_shuffle.h" 2 3
# 32 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_shuffle.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 36 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_shuffle.h" 2 3
# 1950 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_sort.h" 1 3
# 32 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_sort.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 36 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_sort.h" 2 3
# 1951 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_sort_heap.h" 1 3
# 33 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_sort_heap.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 37 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_sort_heap.h" 2 3
# 1952 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_stable_partition.h" 1 3
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_stable_partition.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/stable_partition.h" 1 3
# 27 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/stable_partition.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 31 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/stable_partition.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _AlgPolicy, class _Predicate, class _ForwardIterator, class _Distance, class _Pair>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _ForwardIterator __stable_partition_impl(
    _ForwardIterator __first,
    _ForwardIterator __last,
    _Predicate __pred,
    _Distance __len,
    _Pair __p,
    forward_iterator_tag __fit) {
  using _Ops = _IterOps<_AlgPolicy>;



  if (__len == 1)
    return __first;
  if (__len == 2) {
    _ForwardIterator __m = __first;
    if (__pred(*++__m)) {
      _Ops::iter_swap(__first, __m);
      return __m;
    }
    return __first;
  }
  if (__len <= __p.second) {
    typedef typename iterator_traits<_ForwardIterator>::value_type value_type;
    __destruct_n __d(0);
    unique_ptr<value_type, __destruct_n&> __h(__p.first, __d);


    value_type* __t = __p.first;
    ::new ((void*)__t) value_type(_Ops::__iter_move(__first));
    __d.template __incr<value_type>();
    ++__t;
    _ForwardIterator __i = __first;
    while (++__i != __last) {
      if (__pred(*__i)) {
        *__first = _Ops::__iter_move(__i);
        ++__first;
      } else {
        ::new ((void*)__t) value_type(_Ops::__iter_move(__i));
        __d.template __incr<value_type>();
        ++__t;
      }
    }


    __i = __first;
    for (value_type* __t2 = __p.first; __t2 < __t; ++__t2, (void)++__i)
      *__i = _Ops::__iter_move(__t2);

    return __first;
  }


  _ForwardIterator __m = __first;
  _Distance __len2 = __len / 2;
  _Ops::advance(__m, __len2);



  _ForwardIterator __first_false =
      std::__stable_partition_impl<_AlgPolicy, _Predicate&>(__first, __m, __pred, __len2, __p, __fit);



  _ForwardIterator __m1 = __m;
  _ForwardIterator __second_false = __last;
  _Distance __len_half = __len - __len2;
  while (__pred(*__m1)) {
    if (++__m1 == __last)
      goto __second_half_done;
    --__len_half;
  }


  __second_false = std::__stable_partition_impl<_AlgPolicy, _Predicate&>(__m1, __last, __pred, __len_half, __p, __fit);
__second_half_done:


  return std::__rotate<_AlgPolicy>(__first_false, __m, __second_false).first;


}

template <class _AlgPolicy, class _Predicate, class _ForwardIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _ForwardIterator
__stable_partition_impl(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred, forward_iterator_tag) {
  typedef typename iterator_traits<_ForwardIterator>::difference_type difference_type;
  typedef typename iterator_traits<_ForwardIterator>::value_type value_type;

  const difference_type __alloc_limit = 3;

  while (true) {
    if (__first == __last)
      return __first;
    if (!__pred(*__first))
      break;
    ++__first;
  }


  difference_type __len = _IterOps<_AlgPolicy>::distance(__first, __last);
  pair<value_type*, ptrdiff_t> __p(0, 0);
  unique_ptr<value_type, __return_temporary_buffer> __h;
  if (__len >= __alloc_limit) {

#pragma GCC diagnostic push
# 139 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/stable_partition.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 139 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/stable_partition.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    __p = std::get_temporary_buffer<value_type>(__len);
#pragma GCC diagnostic pop
    __h.reset(__p.first);
  }
  return std::__stable_partition_impl<_AlgPolicy, _Predicate&>(
      std::move(__first), std::move(__last), __pred, __len, __p, forward_iterator_tag());
}

template <class _AlgPolicy, class _Predicate, class _BidirectionalIterator, class _Distance, class _Pair>
_BidirectionalIterator __stable_partition_impl(
    _BidirectionalIterator __first,
    _BidirectionalIterator __last,
    _Predicate __pred,
    _Distance __len,
    _Pair __p,
    bidirectional_iterator_tag __bit) {
  using _Ops = _IterOps<_AlgPolicy>;




  if (__len == 2) {
    _Ops::iter_swap(__first, __last);
    return __last;
  }
  if (__len == 3) {
    _BidirectionalIterator __m = __first;
    if (__pred(*++__m)) {
      _Ops::iter_swap(__first, __m);
      _Ops::iter_swap(__m, __last);
      return __last;
    }
    _Ops::iter_swap(__m, __last);
    _Ops::iter_swap(__first, __m);
    return __m;
  }
  if (__len <= __p.second) {
    typedef typename iterator_traits<_BidirectionalIterator>::value_type value_type;
    __destruct_n __d(0);
    unique_ptr<value_type, __destruct_n&> __h(__p.first, __d);


    value_type* __t = __p.first;
    ::new ((void*)__t) value_type(_Ops::__iter_move(__first));
    __d.template __incr<value_type>();
    ++__t;
    _BidirectionalIterator __i = __first;
    while (++__i != __last) {
      if (__pred(*__i)) {
        *__first = _Ops::__iter_move(__i);
        ++__first;
      } else {
        ::new ((void*)__t) value_type(_Ops::__iter_move(__i));
        __d.template __incr<value_type>();
        ++__t;
      }
    }

    *__first = _Ops::__iter_move(__i);
    __i = ++__first;


    for (value_type* __t2 = __p.first; __t2 < __t; ++__t2, (void)++__i)
      *__i = _Ops::__iter_move(__t2);

    return __first;
  }


  _BidirectionalIterator __m = __first;
  _Distance __len2 = __len / 2;
  _Ops::advance(__m, __len2);



  _BidirectionalIterator __m1 = __m;
  _BidirectionalIterator __first_false = __first;
  _Distance __len_half = __len2;
  while (!__pred(*--__m1)) {
    if (__m1 == __first)
      goto __first_half_done;
    --__len_half;
  }


  __first_false = std::__stable_partition_impl<_AlgPolicy, _Predicate&>(__first, __m1, __pred, __len_half, __p, __bit);
__first_half_done:



  __m1 = __m;
  _BidirectionalIterator __second_false = __last;
  ++__second_false;
  __len_half = __len - __len2;
  while (__pred(*__m1)) {
    if (++__m1 == __last)
      goto __second_half_done;
    --__len_half;
  }


  __second_false = std::__stable_partition_impl<_AlgPolicy, _Predicate&>(__m1, __last, __pred, __len_half, __p, __bit);
__second_half_done:


  return std::__rotate<_AlgPolicy>(__first_false, __m, __second_false).first;


}

template <class _AlgPolicy, class _Predicate, class _BidirectionalIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _BidirectionalIterator __stable_partition_impl(
    _BidirectionalIterator __first, _BidirectionalIterator __last, _Predicate __pred, bidirectional_iterator_tag) {
  typedef typename iterator_traits<_BidirectionalIterator>::difference_type difference_type;
  typedef typename iterator_traits<_BidirectionalIterator>::value_type value_type;
  const difference_type __alloc_limit = 4;

  while (true) {
    if (__first == __last)
      return __first;
    if (!__pred(*__first))
      break;
    ++__first;
  }


  do {
    if (__first == --__last)
      return __first;
  } while (!__pred(*__last));




  difference_type __len = _IterOps<_AlgPolicy>::distance(__first, __last) + 1;
  pair<value_type*, ptrdiff_t> __p(0, 0);
  unique_ptr<value_type, __return_temporary_buffer> __h;
  if (__len >= __alloc_limit) {

#pragma GCC diagnostic push
# 279 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/stable_partition.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 279 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/stable_partition.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    __p = std::get_temporary_buffer<value_type>(__len);
#pragma GCC diagnostic pop
    __h.reset(__p.first);
  }
  return std::__stable_partition_impl<_AlgPolicy, _Predicate&>(
      std::move(__first), std::move(__last), __pred, __len, __p, bidirectional_iterator_tag());
}

template <class _AlgPolicy, class _Predicate, class _ForwardIterator, class _IterCategory>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _ForwardIterator __stable_partition(
    _ForwardIterator __first, _ForwardIterator __last, _Predicate&& __pred, _IterCategory __iter_category) {
  return std::__stable_partition_impl<_AlgPolicy, __remove_cvref_t<_Predicate>&>(
      std::move(__first), std::move(__last), __pred, __iter_category);
}

template <class _ForwardIterator, class _Predicate>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _ForwardIterator
stable_partition(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred) {
  using _IterCategory = typename iterator_traits<_ForwardIterator>::iterator_category;
  return std::__stable_partition<_ClassicAlgPolicy, _Predicate&>(
      std::move(__first), std::move(__last), __pred, _IterCategory());
}

}}
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_stable_partition.h" 2 3
# 35 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_stable_partition.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 39 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_stable_partition.h" 2 3
# 1953 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_stable_sort.h" 1 3
# 32 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_stable_sort.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 36 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_stable_sort.h" 2 3
# 1954 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_swap_ranges.h" 1 3
# 25 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_swap_ranges.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 29 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_swap_ranges.h" 2 3
# 1956 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_transform.h" 1 3
# 27 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_transform.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 31 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_transform.h" 2 3
# 1957 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_unique.h" 1 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_unique.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/unique.h" 1 3
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/unique.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 26 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/unique.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



template <class _AlgPolicy, class _Iter, class _Sent, class _BinaryPredicate>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) std::pair<_Iter, _Iter>
__unique(_Iter __first, _Sent __last, _BinaryPredicate&& __pred) {
  __first = std::__adjacent_find(__first, __last, __pred);
  if (__first != __last) {


    _Iter __i = __first;
    for (++__i; ++__i != __last;)
      if (!__pred(*__first, *__i))
        *++__first = _IterOps<_AlgPolicy>::__iter_move(__i);
    ++__first;
    return std::pair<_Iter, _Iter>(std::move(__first), std::move(__i));
  }
  return std::pair<_Iter, _Iter>(__first, __first);
}

template <class _ForwardIterator, class _BinaryPredicate>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _ForwardIterator
unique(_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate __pred) {
  return std::__unique<_ClassicAlgPolicy>(std::move(__first), std::move(__last), __pred).first;
}

template <class _ForwardIterator>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _ForwardIterator
unique(_ForwardIterator __first, _ForwardIterator __last) {
  return std::unique(__first, __last, __equal_to());
}

}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_unique.h" 2 3
# 33 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_unique.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 37 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_unique.h" 2 3
# 1958 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_unique_copy.h" 1 3
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_unique_copy.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/unique_copy.h" 1 3
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/unique_copy.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 28 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/unique_copy.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

namespace __unique_copy_tags {

struct __reread_from_input_tag {};
struct __reread_from_output_tag {};
struct __read_from_tmp_value_tag {};

}

template <class _AlgPolicy, class _BinaryPredicate, class _InputIterator, class _Sent, class _OutputIterator>
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) pair<_InputIterator, _OutputIterator>
__unique_copy(_InputIterator __first,
              _Sent __last,
              _OutputIterator __result,
              _BinaryPredicate&& __pred,
              __unique_copy_tags::__read_from_tmp_value_tag) {
  if (__first != __last) {
    typename _IterOps<_AlgPolicy>::template __value_type<_InputIterator> __t(*__first);
    *__result = __t;
    ++__result;
    while (++__first != __last) {
      if (!__pred(__t, *__first)) {
        __t = *__first;
        *__result = __t;
        ++__result;
      }
    }
  }
  return pair<_InputIterator, _OutputIterator>(std::move(__first), std::move(__result));
}

template <class _AlgPolicy, class _BinaryPredicate, class _ForwardIterator, class _Sent, class _OutputIterator>
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) pair<_ForwardIterator, _OutputIterator>
__unique_copy(_ForwardIterator __first,
              _Sent __last,
              _OutputIterator __result,
              _BinaryPredicate&& __pred,
              __unique_copy_tags::__reread_from_input_tag) {
  if (__first != __last) {
    _ForwardIterator __i = __first;
    *__result = *__i;
    ++__result;
    while (++__first != __last) {
      if (!__pred(*__i, *__first)) {
        *__result = *__first;
        ++__result;
        __i = __first;
      }
    }
  }
  return pair<_ForwardIterator, _OutputIterator>(std::move(__first), std::move(__result));
}

template <class _AlgPolicy, class _BinaryPredicate, class _InputIterator, class _Sent, class _InputAndOutputIterator>
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) pair<_InputIterator, _InputAndOutputIterator>
__unique_copy(_InputIterator __first,
              _Sent __last,
              _InputAndOutputIterator __result,
              _BinaryPredicate&& __pred,
              __unique_copy_tags::__reread_from_output_tag) {
  if (__first != __last) {
    *__result = *__first;
    while (++__first != __last)
      if (!__pred(*__result, *__first))
        *++__result = *__first;
    ++__result;
  }
  return pair<_InputIterator, _InputAndOutputIterator>(std::move(__first), std::move(__result));
}

template <class _InputIterator, class _OutputIterator, class _BinaryPredicate>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _OutputIterator
unique_copy(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _BinaryPredicate __pred) {
  using __algo_tag = __conditional_t<
      is_base_of<forward_iterator_tag, typename iterator_traits<_InputIterator>::iterator_category>::value,
      __unique_copy_tags::__reread_from_input_tag,
      __conditional_t<
          is_base_of<forward_iterator_tag, typename iterator_traits<_OutputIterator>::iterator_category>::value &&
              is_same< typename iterator_traits<_InputIterator>::value_type,
                       typename iterator_traits<_OutputIterator>::value_type>::value,
          __unique_copy_tags::__reread_from_output_tag,
          __unique_copy_tags::__read_from_tmp_value_tag> >;
  return std::__unique_copy<_ClassicAlgPolicy>(
             std::move(__first), std::move(__last), std::move(__result), __pred, __algo_tag())
      .second;
}

template <class _InputIterator, class _OutputIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _OutputIterator
unique_copy(_InputIterator __first, _InputIterator __last, _OutputIterator __result) {
  return std::unique_copy(std::move(__first), std::move(__last), std::move(__result), __equal_to());
}

}}
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_unique_copy.h" 2 3
# 33 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_unique_copy.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 37 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_unique_copy.h" 2 3
# 1959 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_upper_bound.h" 1 3
# 26 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/ranges_upper_bound.h" 3
# 1960 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/remove_copy.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/remove_copy.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _InputIterator, class _OutputIterator, class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _OutputIterator
remove_copy(_InputIterator __first, _InputIterator __last, _OutputIterator __result, const _Tp& __value) {
  for (; __first != __last; ++__first) {
    if (!(*__first == __value)) {
      *__result = *__first;
      ++__result;
    }
  }
  return __result;
}

}}
# 1962 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3


# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/replace.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/replace.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _ForwardIterator, class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
replace(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __old_value, const _Tp& __new_value) {
  for (; __first != __last; ++__first)
    if (*__first == __old_value)
      *__first = __new_value;
}

}}
# 1965 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/replace_copy.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/replace_copy.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _InputIterator, class _OutputIterator, class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _OutputIterator replace_copy(
    _InputIterator __first,
    _InputIterator __last,
    _OutputIterator __result,
    const _Tp& __old_value,
    const _Tp& __new_value) {
  for (; __first != __last; ++__first, (void)++__result)
    if (*__first == __old_value)
      *__result = __new_value;
    else
      *__result = *__first;
  return __result;
}

}}
# 1966 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/replace_copy_if.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/replace_copy_if.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _InputIterator, class _OutputIterator, class _Predicate, class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _OutputIterator replace_copy_if(
    _InputIterator __first,
    _InputIterator __last,
    _OutputIterator __result,
    _Predicate __pred,
    const _Tp& __new_value) {
  for (; __first != __last; ++__first, (void)++__result)
    if (__pred(*__first))
      *__result = __new_value;
    else
      *__result = *__first;
  return __result;
}

}}
# 1967 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/replace_if.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/replace_if.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _ForwardIterator, class _Predicate, class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
replace_if(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred, const _Tp& __new_value) {
  for (; __first != __last; ++__first)
    if (__pred(*__first))
      *__first = __new_value;
}

}}
# 1968 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/reverse_copy.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/reverse_copy.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _BidirectionalIterator, class _OutputIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _OutputIterator
reverse_copy(_BidirectionalIterator __first, _BidirectionalIterator __last, _OutputIterator __result) {
  for (; __first != __last; ++__result)
    *__result = *--__last;
  return __result;
}

}}
# 1970 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/rotate_copy.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/rotate_copy.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _ForwardIterator, class _OutputIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _OutputIterator
rotate_copy(_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator __last, _OutputIterator __result) {
  return std::copy(__first, __middle, std::copy(__middle, __last, __result));
}

}}
# 1972 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3







# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/shift_left.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/shift_left.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/shift_left.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 55 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/shift_left.h" 3
}}
# 1980 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/shift_right.h" 1 3
# 21 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/shift_right.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 25 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/shift_right.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 101 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__algorithm/shift_right.h" 3
}}
# 1981 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 2001 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 3




# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\bit" 1 3
# 66 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\bit" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__bit/bit_ceil.h" 1 3
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__bit/bit_ceil.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



template <class _Tp>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Tp __bit_ceil(_Tp __t) noexcept {
  if (__t < 2)
    return 1;
  const unsigned __n = numeric_limits<_Tp>::digits - std::__countl_zero((_Tp)(__t - 1u));
  ((void)0);

  if constexpr (sizeof(_Tp) >= sizeof(unsigned))
    return _Tp{1} << __n;
  else {
    const unsigned __extra = numeric_limits<unsigned>::digits - numeric_limits<_Tp>::digits;
    const unsigned __ret_val = 1u << (__n + __extra);
    return (_Tp)(__ret_val >> __extra);
  }
}
# 52 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__bit/bit_ceil.h" 3
}}
# 67 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\bit" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__bit/bit_floor.h" 1 3
# 12 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__bit/bit_floor.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__bit/bit_log2.h" 1 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__bit/bit_log2.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 32 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__bit/bit_log2.h" 3
}}
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__bit/bit_floor.h" 2 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__bit/bit_floor.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 32 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__bit/bit_floor.h" 3
}}
# 68 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\bit" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__bit/bit_width.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__bit/bit_width.h" 3
# 70 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\bit" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__bit/byteswap.h" 1 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__bit/byteswap.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 51 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__bit/byteswap.h" 3
}}
# 72 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\bit" 2 3


# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__bit/endian.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__bit/endian.h" 3
# 75 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\bit" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__bit/has_single_bit.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__bit/has_single_bit.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 21 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__bit/has_single_bit.h" 2 3
# 76 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\bit" 2 3
# 83 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\bit" 3
# 2006 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\algorithm" 2 3
# 940 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string_view" 2 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/format_parse_context.h" 2 3
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/format_parse_context.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 103 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/format_parse_context.h" 3
}}
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/concepts.h" 2 3
# 25 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/concepts.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 79 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/concepts.h" 3
}}
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/formatter_bool.h" 2 3


# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/formatter_integral.h" 1 3
# 13 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/formatter_integral.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__charconv/to_chars_integral.h" 1 3
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__charconv/to_chars_integral.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__charconv/tables.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__charconv/tables.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



namespace __itoa {

inline constexpr char __base_2_lut[64] = {
    '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '1', '0', '0', '0', '1', '1', '0', '1', '0', '0', '0', '1',
    '0', '1', '0', '1', '1', '0', '0', '1', '1', '1', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '1', '0',
    '1', '0', '1', '1', '1', '1', '0', '0', '1', '1', '0', '1', '1', '1', '1', '0', '1', '1', '1', '1'};

inline constexpr char __base_8_lut[128] = {
    '0', '0', '0', '1', '0', '2', '0', '3', '0', '4', '0', '5', '0', '6', '0', '7', '1', '0', '1', '1', '1', '2',
    '1', '3', '1', '4', '1', '5', '1', '6', '1', '7', '2', '0', '2', '1', '2', '2', '2', '3', '2', '4', '2', '5',
    '2', '6', '2', '7', '3', '0', '3', '1', '3', '2', '3', '3', '3', '4', '3', '5', '3', '6', '3', '7', '4', '0',
    '4', '1', '4', '2', '4', '3', '4', '4', '4', '5', '4', '6', '4', '7', '5', '0', '5', '1', '5', '2', '5', '3',
    '5', '4', '5', '5', '5', '6', '5', '7', '6', '0', '6', '1', '6', '2', '6', '3', '6', '4', '6', '5', '6', '6',
    '6', '7', '7', '0', '7', '1', '7', '2', '7', '3', '7', '4', '7', '5', '7', '6', '7', '7'};

inline constexpr char __base_16_lut[512] = {
    '0', '0', '0', '1', '0', '2', '0', '3', '0', '4', '0', '5', '0', '6', '0', '7', '0', '8', '0', '9', '0', 'a', '0',
    'b', '0', 'c', '0', 'd', '0', 'e', '0', 'f', '1', '0', '1', '1', '1', '2', '1', '3', '1', '4', '1', '5', '1', '6',
    '1', '7', '1', '8', '1', '9', '1', 'a', '1', 'b', '1', 'c', '1', 'd', '1', 'e', '1', 'f', '2', '0', '2', '1', '2',
    '2', '2', '3', '2', '4', '2', '5', '2', '6', '2', '7', '2', '8', '2', '9', '2', 'a', '2', 'b', '2', 'c', '2', 'd',
    '2', 'e', '2', 'f', '3', '0', '3', '1', '3', '2', '3', '3', '3', '4', '3', '5', '3', '6', '3', '7', '3', '8', '3',
    '9', '3', 'a', '3', 'b', '3', 'c', '3', 'd', '3', 'e', '3', 'f', '4', '0', '4', '1', '4', '2', '4', '3', '4', '4',
    '4', '5', '4', '6', '4', '7', '4', '8', '4', '9', '4', 'a', '4', 'b', '4', 'c', '4', 'd', '4', 'e', '4', 'f', '5',
    '0', '5', '1', '5', '2', '5', '3', '5', '4', '5', '5', '5', '6', '5', '7', '5', '8', '5', '9', '5', 'a', '5', 'b',
    '5', 'c', '5', 'd', '5', 'e', '5', 'f', '6', '0', '6', '1', '6', '2', '6', '3', '6', '4', '6', '5', '6', '6', '6',
    '7', '6', '8', '6', '9', '6', 'a', '6', 'b', '6', 'c', '6', 'd', '6', 'e', '6', 'f', '7', '0', '7', '1', '7', '2',
    '7', '3', '7', '4', '7', '5', '7', '6', '7', '7', '7', '8', '7', '9', '7', 'a', '7', 'b', '7', 'c', '7', 'd', '7',
    'e', '7', 'f', '8', '0', '8', '1', '8', '2', '8', '3', '8', '4', '8', '5', '8', '6', '8', '7', '8', '8', '8', '9',
    '8', 'a', '8', 'b', '8', 'c', '8', 'd', '8', 'e', '8', 'f', '9', '0', '9', '1', '9', '2', '9', '3', '9', '4', '9',
    '5', '9', '6', '9', '7', '9', '8', '9', '9', '9', 'a', '9', 'b', '9', 'c', '9', 'd', '9', 'e', '9', 'f', 'a', '0',
    'a', '1', 'a', '2', 'a', '3', 'a', '4', 'a', '5', 'a', '6', 'a', '7', 'a', '8', 'a', '9', 'a', 'a', 'a', 'b', 'a',
    'c', 'a', 'd', 'a', 'e', 'a', 'f', 'b', '0', 'b', '1', 'b', '2', 'b', '3', 'b', '4', 'b', '5', 'b', '6', 'b', '7',
    'b', '8', 'b', '9', 'b', 'a', 'b', 'b', 'b', 'c', 'b', 'd', 'b', 'e', 'b', 'f', 'c', '0', 'c', '1', 'c', '2', 'c',
    '3', 'c', '4', 'c', '5', 'c', '6', 'c', '7', 'c', '8', 'c', '9', 'c', 'a', 'c', 'b', 'c', 'c', 'c', 'd', 'c', 'e',
    'c', 'f', 'd', '0', 'd', '1', 'd', '2', 'd', '3', 'd', '4', 'd', '5', 'd', '6', 'd', '7', 'd', '8', 'd', '9', 'd',
    'a', 'd', 'b', 'd', 'c', 'd', 'd', 'd', 'e', 'd', 'f', 'e', '0', 'e', '1', 'e', '2', 'e', '3', 'e', '4', 'e', '5',
    'e', '6', 'e', '7', 'e', '8', 'e', '9', 'e', 'a', 'e', 'b', 'e', 'c', 'e', 'd', 'e', 'e', 'e', 'f', 'f', '0', 'f',
    '1', 'f', '2', 'f', '3', 'f', '4', 'f', '5', 'f', '6', 'f', '7', 'f', '8', 'f', '9', 'f', 'a', 'f', 'b', 'f', 'c',
    'f', 'd', 'f', 'e', 'f', 'f'};

inline constexpr uint32_t __pow10_32[10] = {
    (0u),
    (10u),
    (100u),
    (1000u),
    (10000u),
    (100000u),
    (1000000u),
    (10000000u),
    (100000000u),
    (1000000000u)};

inline constexpr uint64_t __pow10_64[20] = {
    (0uLL),
    (10uLL),
    (100uLL),
    (1000uLL),
    (10000uLL),
    (100000uLL),
    (1000000uLL),
    (10000000uLL),
    (100000000uLL),
    (1000000000uLL),
    (10000000000uLL),
    (100000000000uLL),
    (1000000000000uLL),
    (10000000000000uLL),
    (100000000000000uLL),
    (1000000000000000uLL),
    (10000000000000000uLL),
    (100000000000000000uLL),
    (1000000000000000000uLL),
    (10000000000000000000uLL)};
# 143 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__charconv/tables.h" 3
inline constexpr char __digits_base_10[200] = {

    '0', '0', '0', '1', '0', '2', '0', '3', '0', '4', '0', '5', '0', '6', '0', '7', '0', '8', '0', '9',
    '1', '0', '1', '1', '1', '2', '1', '3', '1', '4', '1', '5', '1', '6', '1', '7', '1', '8', '1', '9',
    '2', '0', '2', '1', '2', '2', '2', '3', '2', '4', '2', '5', '2', '6', '2', '7', '2', '8', '2', '9',
    '3', '0', '3', '1', '3', '2', '3', '3', '3', '4', '3', '5', '3', '6', '3', '7', '3', '8', '3', '9',
    '4', '0', '4', '1', '4', '2', '4', '3', '4', '4', '4', '5', '4', '6', '4', '7', '4', '8', '4', '9',
    '5', '0', '5', '1', '5', '2', '5', '3', '5', '4', '5', '5', '5', '6', '5', '7', '5', '8', '5', '9',
    '6', '0', '6', '1', '6', '2', '6', '3', '6', '4', '6', '5', '6', '6', '6', '7', '6', '8', '6', '9',
    '7', '0', '7', '1', '7', '2', '7', '3', '7', '4', '7', '5', '7', '6', '7', '7', '7', '8', '7', '9',
    '8', '0', '8', '1', '8', '2', '8', '3', '8', '4', '8', '5', '8', '6', '8', '7', '8', '8', '8', '9',
    '9', '0', '9', '1', '9', '2', '9', '3', '9', '4', '9', '5', '9', '6', '9', '7', '9', '8', '9', '9'};


}



}}
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__charconv/to_chars_integral.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__charconv/to_chars_base_10.h" 1 3
# 21 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__charconv/to_chars_base_10.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 25 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__charconv/to_chars_base_10.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



namespace __itoa {

                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline char* __append1(char* __first, uint32_t __value) noexcept {
  *__first = '0' + static_cast<char>(__value);
  return __first + 1;
}

                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline char* __append2(char* __first, uint32_t __value) noexcept {
  return std::copy_n(&__digits_base_10[__value * 2], 2, __first);
}

                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline char* __append3(char* __first, uint32_t __value) noexcept {
  return __itoa::__append2(__itoa::__append1(__first, __value / 100), __value % 100);
}

                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline char* __append4(char* __first, uint32_t __value) noexcept {
  return __itoa::__append2(__itoa::__append2(__first, __value / 100), __value % 100);
}

                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline char* __append5(char* __first, uint32_t __value) noexcept {
  return __itoa::__append4(__itoa::__append1(__first, __value / 10000), __value % 10000);
}

                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline char* __append6(char* __first, uint32_t __value) noexcept {
  return __itoa::__append4(__itoa::__append2(__first, __value / 10000), __value % 10000);
}

                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline char* __append7(char* __first, uint32_t __value) noexcept {
  return __itoa::__append6(__itoa::__append1(__first, __value / 1000000), __value % 1000000);
}

                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline char* __append8(char* __first, uint32_t __value) noexcept {
  return __itoa::__append6(__itoa::__append2(__first, __value / 1000000), __value % 1000000);
}

                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline char* __append9(char* __first, uint32_t __value) noexcept {
  return __itoa::__append8(__itoa::__append1(__first, __value / 100000000), __value % 100000000);
}

template <class _Tp>
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) char* __append10(char* __first, _Tp __value) noexcept {
  return __itoa::__append8(__itoa::__append2(__first, static_cast<uint32_t>(__value / 100000000)),
                           static_cast<uint32_t>(__value % 100000000));
}

                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline char*
__base_10_u32(char* __first, uint32_t __value) noexcept {
  if (__value < 1000000) {
    if (__value < 10000) {
      if (__value < 100) {

        if (__value < 10)
          return __itoa::__append1(__first, __value);
        return __itoa::__append2(__first, __value);
      }

      if (__value < 1000)
        return __itoa::__append3(__first, __value);
      return __itoa::__append4(__first, __value);
    }


    if (__value < 100000)
      return __itoa::__append5(__first, __value);
    return __itoa::__append6(__first, __value);
  }


  if (__value < 100000000) {

    if (__value < 10000000)
      return __itoa::__append7(__first, __value);
    return __itoa::__append8(__first, __value);
  }


  if (__value < 1000000000)
    return __itoa::__append9(__first, __value);
  return __itoa::__append10(__first, __value);
}

                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline char*
__base_10_u64(char* __buffer, uint64_t __value) noexcept {
  if (__value <= 4294967295u)
    return __itoa::__base_10_u32(__buffer, static_cast<uint32_t>(__value));



  if (__value >= 10000000000) {

    __buffer = __itoa::__base_10_u32(__buffer, static_cast<uint32_t>(__value / 10000000000));
    __value %= 10000000000;
  }
  return __itoa::__append10(__buffer, __value);
}
# 179 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__charconv/to_chars_base_10.h" 3
}



}}
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__charconv/to_chars_integral.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__charconv/to_chars_result.h" 1 3
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__charconv/to_chars_result.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__system_error/errc.h" 1 3
# 104 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__system_error/errc.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cerrno" 1 3
# 28 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cerrno" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\errno.h" 1 3
# 29 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\errno.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\errno.h" 1 3
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\errno.h" 3
        namespace std {

        extern "C" {





extern __attribute__((__nothrow__)) __attribute__((__const__)) volatile int *__aeabi_errno_addr(void);



         }
      }





      using ::std::__aeabi_errno_addr;
# 33 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\errno.h" 2 3
# 46 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\errno.h" 3
static const int __elast1 = 104;
static const int __elast2 = 105;
# 29 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cerrno" 2 3
# 40 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cerrno" 3
# 105 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__system_error/errc.h" 2 3
# 108 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__system_error/errc.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {





enum class errc{
    address_family_not_supported = 9901,
    address_in_use = 9902,
    address_not_available = 9903,
    already_connected = 9904,
    argument_list_too_long = 9946,
    argument_out_of_domain = 1,
    bad_address = 9948,
    bad_file_descriptor = 9949,
    bad_message = 9905,
    broken_pipe = 9950,
    connection_aborted = 9906,
    connection_already_in_progress = 9907,
    connection_refused = 9908,
    connection_reset = 9909,
    cross_device_link = 9951,
    destination_address_required = 9910,
    device_or_resource_busy = 9952,
    directory_not_empty = 9953,
    executable_format_error = 9954,
    file_exists = 9955,
    file_too_large = 9956,
    filename_too_long = 9957,
    function_not_supported = 9942,
    host_unreachable = 9911,
    identifier_removed = 9912,
    illegal_byte_sequence = 4,
    inappropriate_io_control_operation = 9958,
    interrupted = 9959,
    invalid_argument = 5,
    invalid_seek = 9960,
    io_error = 9961,
    is_a_directory = 9962,
    message_size = 9913,
    network_down = 9914,
    network_reset = 9915,
    network_unreachable = 9916,
    no_buffer_space = 9917,
    no_child_process = 9963,
    no_link = 9918,
    no_lock_available = 9964,

    no_message_available = 9919,



    no_message = 9920,
    no_protocol_option = 9921,
    no_space_on_device = 9965,

    no_stream_resources = 9922,



    no_such_device_or_address = 9966,
    no_such_device = 9967,
    no_such_file_or_directory = 9968,
    no_such_process = 9969,
    not_a_directory = 9970,
    not_a_socket = 9923,

    not_a_stream = 9924,



    not_connected = 9925,
    not_enough_memory = 6,
    not_supported = 9926,
    operation_canceled = 9927,
    operation_in_progress = 9928,
    operation_not_permitted = 9972,
    operation_not_supported = 9929,
    operation_would_block = 9930,
    owner_dead = __elast1,
    permission_denied = 9973,
    protocol_error = 9932,
    protocol_not_supported = 9933,
    read_only_file_system = 9974,
    resource_deadlock_would_occur = 9975,
    resource_unavailable_try_again = 9976,
    result_out_of_range = 2,
    state_not_recoverable = __elast2,

    stream_timeout = 9935,



    text_file_busy = 9936,
    timed_out = 9938,
    too_many_files_open_in_system = 9977,
    too_many_files_open = 9978,
    too_many_links = 9979,
    too_many_symbolic_link_levels = 9939,
    value_too_large = 9940,
    wrong_protocol_type = 9941};


}}
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__charconv/to_chars_result.h" 2 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__charconv/to_chars_result.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



struct __attribute__((__visibility__("default"))) to_chars_result {
  char* ptr;
  errc ec;






};



}}
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__charconv/to_chars_integral.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__charconv/traits.h" 1 3
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__charconv/traits.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 28 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__charconv/traits.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



namespace __itoa {

template <typename _Tp, typename = void>
struct __attribute__((__visibility__("hidden"))) __traits_base;

template <typename _Tp>
struct __attribute__((__visibility__("hidden"))) __traits_base<_Tp, __enable_if_t<sizeof(_Tp) <= sizeof(uint32_t)>> {
  using type = uint32_t;
# 50 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__charconv/traits.h" 3
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) int __width(_Tp __v) {
    auto __t = (32 - std::__libcpp_clz(static_cast<type>(__v | 1))) * 1233 >> 12;
    return __t - (__v < __itoa::__pow10_32[__t]) + 1;
  }

  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) char* __convert(char* __p, _Tp __v) {
    return __itoa::__base_10_u32(__p, __v);
  }

  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) decltype(__pow10_32)& __pow() {
    return __itoa::__pow10_32;
  }
};

template <typename _Tp>
struct __attribute__((__visibility__("hidden"))) __traits_base<_Tp, __enable_if_t<sizeof(_Tp) == sizeof(uint64_t)>> {
  using type = uint64_t;
# 76 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__charconv/traits.h" 3
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) int __width(_Tp __v) {
    auto __t = (64 - std::__libcpp_clz(static_cast<type>(__v | 1))) * 1233 >> 12;
    return __t - (__v < __itoa::__pow10_64[__t]) + 1;
  }

  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) char* __convert(char* __p, _Tp __v) {
    return __itoa::__base_10_u64(__p, __v);
  }

  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) decltype(__pow10_64)& __pow() {
    return __itoa::__pow10_64;
  }
};
# 125 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__charconv/traits.h" 3
template <typename _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
__mul_overflowed(unsigned char __a, _Tp __b, unsigned char& __r) {
  auto __c = __a * __b;
  __r = __c;
  return __c > numeric_limits<unsigned char>::max();
}

template <typename _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
__mul_overflowed(unsigned short __a, _Tp __b, unsigned short& __r) {
  auto __c = __a * __b;
  __r = __c;
  return __c > numeric_limits<unsigned short>::max();
}

template <typename _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool __mul_overflowed(_Tp __a, _Tp __b, _Tp& __r) {
  static_assert(is_unsigned<_Tp>::value, "");
  return __builtin_mul_overflow(__a, __b, &__r);
}

template <typename _Tp, typename _Up>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool __mul_overflowed(_Tp __a, _Up __b, _Tp& __r) {
  return __itoa::__mul_overflowed(__a, static_cast<_Tp>(__b), __r);
}

template <typename _Tp>
struct __attribute__((__visibility__("hidden"))) __traits : __traits_base<_Tp> {
  static constexpr int digits = numeric_limits<_Tp>::digits10 + 1;
  using __traits_base<_Tp>::__pow;
  using typename __traits_base<_Tp>::type;


  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) char const*
  __read(char const* __p, char const* __ep, type& __a, type& __b) {
    type __cprod[digits];
    int __j = digits - 1;
    int __i = digits;
    do {
      if (*__p < '0' || *__p > '9')
        break;
      __cprod[--__i] = *__p++ - '0';
    } while (__p != __ep && __i != 0);

    __a = __inner_product(__cprod + __i + 1, __cprod + __j, __pow() + 1, __cprod[__i]);
    if (__itoa::__mul_overflowed(__cprod[__j], __pow()[__j - __i], __b))
      --__p;
    return __p;
  }

  template <typename _It1, typename _It2, class _Up>
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Up
  __inner_product(_It1 __first1, _It1 __last1, _It2 __first2, _Up __init) {
    for (; __first1 < __last1; ++__first1, ++__first2)
      __init = __init + *__first1 * *__first2;
    return __init;
  }
};

}

template <typename _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp __complement(_Tp __x) {
  static_assert(is_unsigned<_Tp>::value, "cast to unsigned first");
  return _Tp(~__x + 1);
}



}}
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__charconv/to_chars_integral.h" 2 3





# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/make_32_64_or_128_bit.h" 1 3
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/make_32_64_or_128_bit.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {




template <class _Tp>




using __make_32_64_or_128_bit_t =
    __copy_unsigned_t<_Tp,
        __conditional_t<sizeof(_Tp) <= sizeof(int32_t), int32_t,
        __conditional_t<sizeof(_Tp) <= sizeof(int64_t), int64_t,




                                                           void

    > > >;


}}
# 25 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__charconv/to_chars_integral.h" 2 3
# 33 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__charconv/to_chars_integral.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 37 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__charconv/to_chars_integral.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



to_chars_result to_chars(char*, char*, bool, int = 10) = delete;

template <typename _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) to_chars_result
__to_chars_itoa(char* __first, char* __last, _Tp __value, false_type);

template <typename _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) to_chars_result
__to_chars_itoa(char* __first, char* __last, _Tp __value, true_type) {
  auto __x = std::__to_unsigned_like(__value);
  if (__value < 0 && __first != __last) {
    *__first++ = '-';
    __x = std::__complement(__x);
  }

  return std::__to_chars_itoa(__first, __last, __x, false_type());
}

template <typename _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) to_chars_result
__to_chars_itoa(char* __first, char* __last, _Tp __value, false_type) {
  using __tx = __itoa::__traits<_Tp>;
  auto __diff = __last - __first;

  if (__tx::digits <= __diff || __tx::__width(__value) <= __diff)
    return {__tx::__convert(__first, __value), errc(0)};
  else
    return {__last, errc::value_too_large};
}
# 93 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__charconv/to_chars_integral.h" 3
template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) to_chars_result
__to_chars_integral(char* __first, char* __last, _Tp __value, int __base, false_type);

template <typename _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) to_chars_result
__to_chars_integral(char* __first, char* __last, _Tp __value, int __base, true_type) {
  auto __x = std::__to_unsigned_like(__value);
  if (__value < 0 && __first != __last) {
    *__first++ = '-';
    __x = std::__complement(__x);
  }

  return std::__to_chars_integral(__first, __last, __x, __base, false_type());
}

namespace __itoa {

template <unsigned _Base>
struct __attribute__((__visibility__("hidden"))) __integral;

template <>
struct __attribute__((__visibility__("hidden"))) __integral<2> {
  template <typename _Tp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr int __width(_Tp __value) noexcept {



    return numeric_limits<_Tp>::digits - std::__libcpp_clz(__value | 1);
  }

  template <typename _Tp>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static to_chars_result
  __to_chars(char* __first, char* __last, _Tp __value) {
    ptrdiff_t __cap = __last - __first;
    int __n = __width(__value);
    if (__n > __cap)
      return {__last, errc::value_too_large};

    __last = __first + __n;
    char* __p = __last;
    const unsigned __divisor = 16;
    while (__value > __divisor) {
      unsigned __c = __value % __divisor;
      __value /= __divisor;
      __p -= 4;
      std::copy_n(&__base_2_lut[4 * __c], 4, __p);
    }
    do {
      unsigned __c = __value % 2;
      __value /= 2;
      *--__p = "01"[__c];
    } while (__value != 0);
    return {__last, errc(0)};
  }
};

template <>
struct __attribute__((__visibility__("hidden"))) __integral<8> {
  template <typename _Tp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr int __width(_Tp __value) noexcept {



    return ((numeric_limits<_Tp>::digits - std::__libcpp_clz(__value | 1)) + 2) / 3;
  }

  template <typename _Tp>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static to_chars_result
  __to_chars(char* __first, char* __last, _Tp __value) {
    ptrdiff_t __cap = __last - __first;
    int __n = __width(__value);
    if (__n > __cap)
      return {__last, errc::value_too_large};

    __last = __first + __n;
    char* __p = __last;
    unsigned __divisor = 64;
    while (__value > __divisor) {
      unsigned __c = __value % __divisor;
      __value /= __divisor;
      __p -= 2;
      std::copy_n(&__base_8_lut[2 * __c], 2, __p);
    }
    do {
      unsigned __c = __value % 8;
      __value /= 8;
      *--__p = "01234567"[__c];
    } while (__value != 0);
    return {__last, errc(0)};
  }
};

template <>
struct __attribute__((__visibility__("hidden"))) __integral<16> {
  template <typename _Tp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static constexpr int __width(_Tp __value) noexcept {



    return (numeric_limits<_Tp>::digits - std::__libcpp_clz(__value | 1) + 3) / 4;
  }

  template <typename _Tp>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static to_chars_result
  __to_chars(char* __first, char* __last, _Tp __value) {
    ptrdiff_t __cap = __last - __first;
    int __n = __width(__value);
    if (__n > __cap)
      return {__last, errc::value_too_large};

    __last = __first + __n;
    char* __p = __last;
    unsigned __divisor = 256;
    while (__value > __divisor) {
      unsigned __c = __value % __divisor;
      __value /= __divisor;
      __p -= 2;
      std::copy_n(&__base_16_lut[2 * __c], 2, __p);
    }
    if (__first != __last)
      do {
        unsigned __c = __value % 16;
        __value /= 16;
        *--__p = "0123456789abcdef"[__c];
      } while (__value != 0);
    return {__last, errc(0)};
  }
};

}

template <unsigned _Base, typename _Tp, __enable_if_t<(sizeof(_Tp) >= sizeof(unsigned)), int> = 0>
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) int __to_chars_integral_width(_Tp __value) {
  return __itoa::__integral<_Base>::__width(__value);
}

template <unsigned _Base, typename _Tp, __enable_if_t<(sizeof(_Tp) < sizeof(unsigned)), int> = 0>
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) int __to_chars_integral_width(_Tp __value) {
  return std::__to_chars_integral_width<_Base>(static_cast<unsigned>(__value));
}

template <unsigned _Base, typename _Tp, __enable_if_t<(sizeof(_Tp) >= sizeof(unsigned)), int> = 0>
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) to_chars_result
__to_chars_integral(char* __first, char* __last, _Tp __value) {
  return __itoa::__integral<_Base>::__to_chars(__first, __last, __value);
}

template <unsigned _Base, typename _Tp, __enable_if_t<(sizeof(_Tp) < sizeof(unsigned)), int> = 0>
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) to_chars_result
__to_chars_integral(char* __first, char* __last, _Tp __value) {
  return std::__to_chars_integral<_Base>(__first, __last, static_cast<unsigned>(__value));
}

template <typename _Tp>
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) int __to_chars_integral_width(_Tp __value, unsigned __base) {
  ((void)0);

  unsigned __base_2 = __base * __base;
  unsigned __base_3 = __base_2 * __base;
  unsigned __base_4 = __base_2 * __base_2;

  int __r = 0;
  while (true) {
    if (__value < __base)
      return __r + 1;
    if (__value < __base_2)
      return __r + 2;
    if (__value < __base_3)
      return __r + 3;
    if (__value < __base_4)
      return __r + 4;

    __value /= __base_4;
    __r += 4;
  }

  __libcpp_unreachable();
}

template <typename _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) to_chars_result
__to_chars_integral(char* __first, char* __last, _Tp __value, int __base, false_type) {
  if (__base == 10) [[likely]]
    return std::__to_chars_itoa(__first, __last, __value, false_type());

  switch (__base) {
  case 2:
    return std::__to_chars_integral<2>(__first, __last, __value);
  case 8:
    return std::__to_chars_integral<8>(__first, __last, __value);
  case 16:
    return std::__to_chars_integral<16>(__first, __last, __value);
  }

  ptrdiff_t __cap = __last - __first;
  int __n = std::__to_chars_integral_width(__value, __base);
  if (__n > __cap)
    return {__last, errc::value_too_large};

  __last = __first + __n;
  char* __p = __last;
  do {
    unsigned __c = __value % __base;
    __value /= __base;
    *--__p = "0123456789abcdefghijklmnopqrstuvwxyz"[__c];
  } while (__value != 0);
  return {__last, errc(0)};
}

template <typename _Tp, __enable_if_t<is_integral<_Tp>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) to_chars_result
to_chars(char* __first, char* __last, _Tp __value) {
  using _Type = __make_32_64_or_128_bit_t<_Tp>;
  static_assert(!is_same<_Type, void>::value, "unsupported integral type used in to_chars");
  return std::__to_chars_itoa(__first, __last, static_cast<_Type>(__value), is_signed<_Tp>());
}

template <typename _Tp, __enable_if_t<is_integral<_Tp>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) to_chars_result
to_chars(char* __first, char* __last, _Tp __value, int __base) {
  ((void)0);

  using _Type = __make_32_64_or_128_bit_t<_Tp>;
  return std::__to_chars_integral(__first, __last, static_cast<_Type>(__value), __base, is_signed<_Tp>());
}



}}
# 14 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/formatter_integral.h" 2 3







# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/formatter_output.h" 1 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/formatter_output.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/buffer.h" 1 3
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/buffer.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/format_to_n_result.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/format_to_n_result.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 33 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/format_to_n_result.h" 3
}}
# 25 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/buffer.h" 2 3
# 45 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/buffer.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 49 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/buffer.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 651 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/buffer.h" 3
}}
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/formatter_output.h" 2 3


# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/parser_std_format_spec.h" 1 3
# 25 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/parser_std_format_spec.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/format_arg.h" 1 3
# 32 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/format_arg.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 36 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/format_arg.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 403 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/format_arg.h" 3
}}
# 26 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/parser_std_format_spec.h" 2 3


# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/format_string.h" 1 3
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/format_string.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 158 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/format_string.h" 3
}}
# 29 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/parser_std_format_spec.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/unicode.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/unicode.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/extended_grapheme_cluster_table.h" 1 3
# 72 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/extended_grapheme_cluster_table.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 1661 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/extended_grapheme_cluster_table.h" 3
}}
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/unicode.h" 2 3
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/unicode.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 477 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/unicode.h" 3
}}
# 30 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/parser_std_format_spec.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/width_estimation_table.h" 1 3
# 71 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/width_estimation_table.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 269 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/width_estimation_table.h" 3
}}
# 31 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/parser_std_format_spec.h" 2 3








# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string" 1 3
# 582 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ios/fpos.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ios/fpos.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _StateT>
class fpos {
private:
  _StateT __st_;
  streamoff __off_;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) fpos(streamoff __off = streamoff()) : __st_(), __off_(__off) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) operator streamoff() const { return __off_; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _StateT state() const { return __st_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void state(_StateT __st) { __st_ = __st; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) fpos& operator+=(streamoff __off) {
    __off_ += __off;
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) fpos operator+(streamoff __off) const {
    fpos __t(*this);
    __t += __off;
    return __t;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) fpos& operator-=(streamoff __off) {
    __off_ -= __off;
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) fpos operator-(streamoff __off) const {
    fpos __t(*this);
    __t -= __off;
    return __t;
  }
};

template <class _StateT>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) streamoff operator-(const fpos<_StateT>& __x, const fpos<_StateT>& __y) {
  return streamoff(__x) - streamoff(__y);
}

template <class _StateT>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator==(const fpos<_StateT>& __x, const fpos<_StateT>& __y) {
  return streamoff(__x) == streamoff(__y);
}

template <class _StateT>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator!=(const fpos<_StateT>& __x, const fpos<_StateT>& __y) {
  return streamoff(__x) != streamoff(__y);
}

}}
# 583 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string" 2 3
# 594 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/swap_allocator.h" 1 3
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/swap_allocator.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <typename _Alloc>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr void __swap_allocator(_Alloc& __a1, _Alloc& __a2, true_type)

    noexcept



{
  using std::swap;
  swap(__a1, __a2);
}

template <typename _Alloc>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr void
__swap_allocator(_Alloc&, _Alloc&, false_type) noexcept {}

template <typename _Alloc>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr void __swap_allocator(_Alloc& __a1, _Alloc& __a2)

    noexcept



{
  std::__swap_allocator(
      __a1, __a2, integral_constant<bool, allocator_traits<_Alloc>::propagate_on_container_swap::value>());
}

}}
# 595 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory_resource/polymorphic_allocator.h" 1 3
# 15 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory_resource/polymorphic_allocator.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory_resource/memory_resource.h" 1 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory_resource/memory_resource.h" 3




namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

namespace pmr {



class __attribute__((__visibility__("default"))) memory_resource {
  static const size_t __max_align = alignof(max_align_t);

public:
  virtual ~memory_resource();

  [[__nodiscard__]]
  [[using __gnu__: __returns_nonnull__, __alloc_size__(2), __alloc_align__(3)]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void*
  allocate(size_t __bytes, size_t __align = __max_align) {
    return do_allocate(__bytes, __align);
  }

  [[__gnu__::__nonnull__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
  deallocate(void* __p, size_t __bytes, size_t __align = __max_align) {
    do_deallocate(__p, __bytes, __align);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool is_equal(const memory_resource& __other) const noexcept { return do_is_equal(__other); }

private:
  virtual void* do_allocate(size_t, size_t) = 0;
  virtual void do_deallocate(void*, size_t, size_t) = 0;
  virtual bool do_is_equal(memory_resource const&) const noexcept = 0;
};



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
operator==(const memory_resource& __lhs, const memory_resource& __rhs) noexcept {
  return &__lhs == &__rhs || __lhs.is_equal(__rhs);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
operator!=(const memory_resource& __lhs, const memory_resource& __rhs) noexcept {
  return !(__lhs == __rhs);
}





[[__gnu__::__returns_nonnull__]] __attribute__((__visibility__("default"))) memory_resource*
get_default_resource() noexcept;

[[__gnu__::__returns_nonnull__]] __attribute__((__visibility__("default"))) memory_resource*
set_default_resource(memory_resource*) noexcept;

[[using __gnu__: __returns_nonnull__, __const__]] __attribute__((__visibility__("default"))) memory_resource*
new_delete_resource() noexcept;

[[using __gnu__: __returns_nonnull__, __const__]] __attribute__((__visibility__("default"))) memory_resource*
null_memory_resource() noexcept;

}

}}
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory_resource/polymorphic_allocator.h" 2 3
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory_resource/polymorphic_allocator.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 28 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory_resource/polymorphic_allocator.h" 2 3



namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

namespace pmr {



template <class _ValueType



          >
class polymorphic_allocator {

public:
  using value_type = _ValueType;



  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) polymorphic_allocator() noexcept : __res_(std::pmr::get_default_resource()) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) polymorphic_allocator(memory_resource* __r) noexcept : __res_(__r) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) polymorphic_allocator(const polymorphic_allocator&) = default;

  template <class _Tp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) polymorphic_allocator(const polymorphic_allocator<_Tp>& __other) noexcept
      : __res_(__other.resource()) {}

  polymorphic_allocator& operator=(const polymorphic_allocator&) = delete;



  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _ValueType* allocate(size_t __n) {
    if (__n > __max_size()) {
      __throw_bad_array_new_length();
    }
    return static_cast<_ValueType*>(__res_->allocate(__n * sizeof(_ValueType), alignof(_ValueType)));
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void deallocate(_ValueType* __p, size_t __n) {
    ((void)0);



    __res_->deallocate(__p, __n * sizeof(_ValueType), alignof(_ValueType));
  }
# 118 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory_resource/polymorphic_allocator.h" 3
  template <class _Tp, class... _Ts>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void construct(_Tp* __p, _Ts&&... __args) {
    std::__user_alloc_construct_impl(
        typename __uses_alloc_ctor<_Tp, polymorphic_allocator&, _Ts...>::type(),
        __p,
        *this,
        std::forward<_Ts>(__args)...);
  }

  template <class _T1, class _T2, class... _Args1, class... _Args2>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
  construct(pair<_T1, _T2>* __p, piecewise_construct_t, tuple<_Args1...> __x, tuple<_Args2...> __y) {
    ::new ((void*)__p) pair<_T1, _T2>(
        piecewise_construct,
        __transform_tuple(typename __uses_alloc_ctor< _T1, polymorphic_allocator&, _Args1... >::type(),
                          std::move(__x),
                          typename __make_tuple_indices<sizeof...(_Args1)>::type{}),
        __transform_tuple(typename __uses_alloc_ctor< _T2, polymorphic_allocator&, _Args2... >::type(),
                          std::move(__y),
                          typename __make_tuple_indices<sizeof...(_Args2)>::type{}));
  }

  template <class _T1, class _T2>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void construct(pair<_T1, _T2>* __p) {
    construct(__p, piecewise_construct, tuple<>(), tuple<>());
  }

  template <class _T1, class _T2, class _Up, class _Vp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void construct(pair<_T1, _T2>* __p, _Up&& __u, _Vp&& __v) {
    construct(__p,
              piecewise_construct,
              std::forward_as_tuple(std::forward<_Up>(__u)),
              std::forward_as_tuple(std::forward<_Vp>(__v)));
  }

  template <class _T1, class _T2, class _U1, class _U2>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void construct(pair<_T1, _T2>* __p, const pair<_U1, _U2>& __pr) {
    construct(__p, piecewise_construct, std::forward_as_tuple(__pr.first), std::forward_as_tuple(__pr.second));
  }

  template <class _T1, class _T2, class _U1, class _U2>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void construct(pair<_T1, _T2>* __p, pair<_U1, _U2>&& __pr) {
    construct(__p,
              piecewise_construct,
              std::forward_as_tuple(std::forward<_U1>(__pr.first)),
              std::forward_as_tuple(std::forward<_U2>(__pr.second)));
  }

  template <class _Tp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void destroy(_Tp* __p) {
    __p->~_Tp();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) polymorphic_allocator select_on_container_copy_construction() const noexcept {
    return polymorphic_allocator();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) memory_resource* resource() const noexcept { return __res_; }

private:
  template <class... _Args, size_t... _Is>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) tuple<_Args&&...>
  __transform_tuple(integral_constant<int, 0>, tuple<_Args...>&& __t, __tuple_indices<_Is...>) {
    return std::forward_as_tuple(std::get<_Is>(std::move(__t))...);
  }

  template <class... _Args, size_t... _Is>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) tuple<allocator_arg_t const&, polymorphic_allocator&, _Args&&...>
  __transform_tuple(integral_constant<int, 1>, tuple<_Args...>&& __t, __tuple_indices<_Is...>) {
    using _Tup = tuple<allocator_arg_t const&, polymorphic_allocator&, _Args&&...>;
    return _Tup(allocator_arg, *this, std::get<_Is>(std::move(__t))...);
  }

  template <class... _Args, size_t... _Is>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) tuple<_Args&&..., polymorphic_allocator&>
  __transform_tuple(integral_constant<int, 2>, tuple<_Args...>&& __t, __tuple_indices<_Is...>) {
    using _Tup = tuple<_Args&&..., polymorphic_allocator&>;
    return _Tup(std::get<_Is>(std::move(__t))..., *this);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_t __max_size() const noexcept {
    return numeric_limits<size_t>::max() / sizeof(value_type);
  }

  memory_resource* __res_;
};



template <class _Tp, class _Up>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
operator==(const polymorphic_allocator<_Tp>& __lhs, const polymorphic_allocator<_Up>& __rhs) noexcept {
  return *__lhs.resource() == *__rhs.resource();
}



template <class _Tp, class _Up>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
operator!=(const polymorphic_allocator<_Tp>& __lhs, const polymorphic_allocator<_Up>& __rhs) noexcept {
  return !(__lhs == __rhs);
}



}

}}
# 596 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string" 2 3


# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/container_compatible_range.h" 1 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/container_compatible_range.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 31 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/container_compatible_range.h" 3
}}
# 599 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/from_range.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/from_range.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 31 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__ranges/from_range.h" 3
}}
# 600 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string" 2 3


# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__string/extern_template_lists.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__string/extern_template_lists.h" 3
# 603 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_allocator.h" 1 3
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/is_allocator.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <typename _Alloc, typename = void, typename = void>
struct __is_allocator : false_type {};

template <typename _Alloc>
struct __is_allocator<_Alloc,
                      __void_t<typename _Alloc::value_type>,
                      __void_t<decltype(std::declval<_Alloc&>().allocate(size_t(0)))> > : true_type {};

}}
# 605 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string" 2 3








# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/noexcept_move_assign_container.h" 1 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__type_traits/noexcept_move_assign_container.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <typename _Alloc, typename _Traits = allocator_traits<_Alloc> >
struct __noexcept_move_assign_container
    : public integral_constant<bool,
                               _Traits::propagate_on_container_move_assignment::value

                                   || _Traits::is_always_equal::value



                               > {
};

}}
# 614 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string" 2 3
# 650 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 654 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string" 2 3
# 667 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string" 3
namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {



template <class _CharT, class _Traits, class _Allocator>
basic_string<_CharT, _Traits, _Allocator> __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
operator+(const basic_string<_CharT, _Traits, _Allocator>& __x, const basic_string<_CharT, _Traits, _Allocator>& __y);

template <class _CharT, class _Traits, class _Allocator>
__attribute__((__visibility__("hidden"))) basic_string<_CharT, _Traits, _Allocator>
operator+(const _CharT* __x, const basic_string<_CharT, _Traits, _Allocator>& __y);

template <class _CharT, class _Traits, class _Allocator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string<_CharT, _Traits, _Allocator>
operator+(_CharT __x, const basic_string<_CharT, _Traits, _Allocator>& __y);

template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string<_CharT, _Traits, _Allocator>
operator+(const basic_string<_CharT, _Traits, _Allocator>& __x, const _CharT* __y);

template <class _CharT, class _Traits, class _Allocator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string<_CharT, _Traits, _Allocator>
operator+(const basic_string<_CharT, _Traits, _Allocator>& __x, _CharT __y);

extern template __attribute__((__visibility__("default"))) string operator+
    <char, char_traits<char>, allocator<char> >(char const*, string const&);

template <class _Iter>
struct __string_is_trivial_iterator : public false_type {};

template <class _Tp>
struct __string_is_trivial_iterator<_Tp*> : public is_arithmetic<_Tp> {};

template <class _Iter>
struct __string_is_trivial_iterator<__wrap_iter<_Iter> > : public __string_is_trivial_iterator<_Iter> {};

template <class _CharT, class _Traits, class _Tp>
struct __can_be_converted_to_string_view
    : public _BoolConstant< is_convertible<const _Tp&, basic_string_view<_CharT, _Traits> >::value &&
                            !is_convertible<const _Tp&, const _CharT*>::value > {};

struct __uninitialized_size_tag {};
struct __init_with_sentinel_tag {};

template <class _CharT, class _Traits, class _Allocator>
class basic_string {
private:
  using __default_allocator_type = allocator<_CharT>;

public:
  typedef basic_string __self;
  typedef basic_string_view<_CharT, _Traits> __self_view;
  typedef _Traits traits_type;
  typedef _CharT value_type;
  typedef _Allocator allocator_type;
  typedef allocator_traits<allocator_type> __alloc_traits;
  typedef typename __alloc_traits::size_type size_type;
  typedef typename __alloc_traits::difference_type difference_type;
  typedef value_type& reference;
  typedef const value_type& const_reference;
  typedef typename __alloc_traits::pointer pointer;
  typedef typename __alloc_traits::const_pointer const_pointer;
# 739 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string" 3
  using __trivially_relocatable = __conditional_t<
      __libcpp_is_trivially_relocatable<allocator_type>::value && __libcpp_is_trivially_relocatable<pointer>::value,
      basic_string,
      void>;

  static_assert((!is_array<value_type>::value), "Character type of basic_string must not be an array");
  static_assert((is_standard_layout<value_type>::value), "Character type of basic_string must be standard-layout");
  static_assert((is_trivial<value_type>::value), "Character type of basic_string must be trivial");
  static_assert((is_same<_CharT, typename traits_type::char_type>::value),
                "traits_type::char_type must be the same type as CharT");
  static_assert((is_same<typename allocator_type::value_type, value_type>::value),
                "Allocator::value_type must be same type as value_type");

  static_assert(is_same<allocator_type, __rebind_alloc<__alloc_traits, value_type> >::value,
                "[allocator.requirements] states that rebinding an allocator to the same type should result in the "
                "original allocator");


  typedef __wrap_iter<pointer> iterator;
  typedef __wrap_iter<const_pointer> const_iterator;
  typedef std::reverse_iterator<iterator> reverse_iterator;
  typedef std::reverse_iterator<const_iterator> const_reverse_iterator;

private:
  static_assert(8 == 8, "This implementation assumes that one byte contains 8 bits");



  struct __long {
    pointer __data_;
    size_type __size_;
    size_type __cap_ : sizeof(size_type) * 8 - 1;
    size_type __is_long_ : 1;
  };

  enum { __min_cap = (sizeof(__long) - 1) / sizeof(value_type) > 2 ? (sizeof(__long) - 1) / sizeof(value_type) : 2 };

  struct __short {
    value_type __data_[__min_cap];
    unsigned char __padding_[sizeof(value_type) - 1];
    unsigned char __size_ : 7;
    unsigned char __is_long_ : 1;
  };
# 799 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string" 3
  static const size_type __endian_factor = 1;
# 836 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string" 3
  static_assert(sizeof(__short) == (sizeof(value_type) * (__min_cap + 1)), "__short has an unexpected size.");

  union __ulx {
    __long __lx;
    __short __lxx;
  };

  enum { __n_words = sizeof(__ulx) / sizeof(size_type) };

  struct __raw {
    size_type __words[__n_words];
  };

  struct __rep {
    union {
      __short __s;
      __long __l;
      __raw __r;
    };
  };

  __compressed_pair<__rep, allocator_type> __r_;




  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit basic_string(
      __uninitialized_size_tag, size_type __size, const allocator_type& __a)
      : __r_(__default_init_tag(), __a) {
    if (__size > max_size())
      __throw_length_error();
    if (__fits_in_sso(__size)) {
      __r_.first() = __rep();
      __set_short_size(__size);
    } else {
      auto __capacity = __recommend(__size) + 1;
      auto __allocation = __alloc_traits::allocate(__alloc(), __capacity);
      __begin_lifetime(__allocation, __capacity);
      __set_long_cap(__capacity);
      __set_long_pointer(__allocation);
      __set_long_size(__size);
    }
    __annotate_new(__size);
  }

  template <class _Iter, class _Sent>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
  basic_string(__init_with_sentinel_tag, _Iter __first, _Sent __last, const allocator_type& __a)
      : __r_(__default_init_tag(), __a) {
    __init_with_sentinel(std::move(__first), std::move(__last));
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iterator __make_iterator(pointer __p) { return iterator(__p); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_iterator __make_const_iterator(const_pointer __p) const {
    return const_iterator(__p);
  }

public:
  __attribute__((__visibility__("default"))) static const size_type npos = -1;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string()
      noexcept(is_nothrow_default_constructible<allocator_type>::value)
      : __r_(__value_init_tag(), __default_init_tag()) {
    __annotate_new(0);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit basic_string(const allocator_type& __a)



      noexcept

      : __r_(__value_init_tag(), __a) {
    __annotate_new(0);
  }

                                                                      basic_string(const basic_string& __str)
      : __r_(__default_init_tag(), __alloc_traits::select_on_container_copy_construction(__str.__alloc())) {
    if (!__str.__is_long()) {
      __r_.first() = __str.__r_.first();
      __annotate_new(__get_short_size());
    } else
      __init_copy_ctor_external(std::__to_address(__str.__get_long_pointer()), __str.__get_long_size());
  }


  basic_string(const basic_string& __str, const allocator_type& __a)
      : __r_(__default_init_tag(), __a) {
    if (!__str.__is_long()) {
      __r_.first() = __str.__r_.first();
      __annotate_new(__get_short_size());
    } else
      __init_copy_ctor_external(std::__to_address(__str.__get_long_pointer()), __str.__get_long_size());
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string(basic_string&& __str)



      noexcept




      : __r_([](basic_string &__s) -> decltype(__s.__r_)&& { if(!__s.__is_long()) __s.__annotate_delete(); return std::move(__s.__r_); }(__str)) {
    __str.__r_.first() = __rep();
    __str.__annotate_new(0);
    if (!__is_long())
      __annotate_new(size());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string(basic_string&& __str, const allocator_type& __a)
      : __r_(__default_init_tag(), __a) {
    if (__str.__is_long() && __a != __str.__alloc())
      __init(std::__to_address(__str.__get_long_pointer()), __str.__get_long_size());
    else {
      if (__libcpp_is_constant_evaluated())
        __r_.first() = __rep();
      if (!__str.__is_long())
        __str.__annotate_delete();
      __r_.first() = __str.__r_.first();
      __str.__r_.first() = __rep();
      __str.__annotate_new(0);
      if (!__is_long() && this != &__str)
        __annotate_new(size());
    }
  }


  template <__enable_if_t<__is_allocator<_Allocator>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string(const _CharT* __s)
      : __r_(__default_init_tag(), __default_init_tag()) {
    ((void)0);
    __init(__s, traits_type::length(__s));
  }

  template <__enable_if_t<__is_allocator<_Allocator>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string(const _CharT* __s, const _Allocator& __a)
      : __r_(__default_init_tag(), __a) {
    ((void)0);
    __init(__s, traits_type::length(__s));
  }





  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string(const _CharT* __s, size_type __n)
      : __r_(__default_init_tag(), __default_init_tag()) {
    ((void)0);
    __init(__s, __n);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
  basic_string(const _CharT* __s, size_type __n, const _Allocator& __a)
      : __r_(__default_init_tag(), __a) {
    ((void)0);
    __init(__s, __n);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string(size_type __n, _CharT __c)
      : __r_(__default_init_tag(), __default_init_tag()) {
    __init(__n, __c);
  }
# 1024 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string" 3
  template <__enable_if_t<__is_allocator<_Allocator>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string(size_type __n, _CharT __c, const _Allocator& __a)
      : __r_(__default_init_tag(), __a) {
    __init(__n, __c);
  }


  basic_string(const basic_string& __str, size_type __pos, size_type __n, const _Allocator& __a = _Allocator())
      : __r_(__default_init_tag(), __a) {
    size_type __str_sz = __str.size();
    if (__pos > __str_sz)
      __throw_out_of_range();
    __init(__str.data() + __pos, std::min(__n, __str_sz - __pos));
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
  basic_string(const basic_string& __str, size_type __pos, const _Allocator& __a = _Allocator())
      : __r_(__default_init_tag(), __a) {
    size_type __str_sz = __str.size();
    if (__pos > __str_sz)
      __throw_out_of_range();
    __init(__str.data() + __pos, __str_sz - __pos);
  }

  template <class _Tp,
            __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value &&
                              !__is_same_uncvref<_Tp, basic_string>::value,
                          int> = 0>
  inline __attribute__((__visibility__("hidden")))
  basic_string(const _Tp& __t, size_type __pos, size_type __n, const allocator_type& __a = allocator_type())
      : __r_(__default_init_tag(), __a) {
    __self_view __sv0 = __t;
    __self_view __sv = __sv0.substr(__pos, __n);
    __init(__sv.data(), __sv.size());
  }

  template <class _Tp,
            __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value &&
                              !__is_same_uncvref<_Tp, basic_string>::value,
                          int> = 0>
  inline __attribute__((__visibility__("hidden"))) explicit basic_string(const _Tp& __t)
      : __r_(__default_init_tag(), __default_init_tag()) {
    __self_view __sv = __t;
    __init(__sv.data(), __sv.size());
  }

  template <class _Tp,
            __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value &&
                              !__is_same_uncvref<_Tp, basic_string>::value,
                          int> = 0>
  inline __attribute__((__visibility__("hidden"))) explicit basic_string(
      const _Tp& __t, const allocator_type& __a)
      : __r_(__default_init_tag(), __a) {
    __self_view __sv = __t;
    __init(__sv.data(), __sv.size());
  }

  template <class _InputIterator, __enable_if_t<__has_input_iterator_category<_InputIterator>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string(_InputIterator __first, _InputIterator __last)
      : __r_(__default_init_tag(), __default_init_tag()) {
    __init(__first, __last);
  }

  template <class _InputIterator, __enable_if_t<__has_input_iterator_category<_InputIterator>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
  basic_string(_InputIterator __first, _InputIterator __last, const allocator_type& __a)
      : __r_(__default_init_tag(), __a) {
    __init(__first, __last);
  }
# 1108 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string(initializer_list<_CharT> __il)
      : __r_(__default_init_tag(), __default_init_tag()) {
    __init(__il.begin(), __il.end());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string(initializer_list<_CharT> __il, const _Allocator& __a)
      : __r_(__default_init_tag(), __a) {
    __init(__il.begin(), __il.end());
  }


  inline ~basic_string() {
    __annotate_delete();
    if (__is_long())
      __alloc_traits::deallocate(__alloc(), __get_long_pointer(), __get_long_cap());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) operator __self_view() const noexcept {
    return __self_view(data(), size());
  }

                                                                      basic_string&
  operator=(const basic_string& __str);

  template <class _Tp,
            __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value &&
                              !__is_same_uncvref<_Tp, basic_string>::value,
                          int> = 0>
                                basic_string& operator=(const _Tp& __t) {
    __self_view __sv = __t;
    return assign(__sv);
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string& operator=(basic_string&& __str)
      noexcept(__noexcept_move_assign_container<_Allocator, __alloc_traits>::value) {
    __move_assign(__str, integral_constant<bool, __alloc_traits::propagate_on_container_move_assignment::value>());
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string& operator=(initializer_list<value_type> __il) {
    return assign(__il.begin(), __il.size());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string& operator=(const value_type* __s) {
    return assign(__s);
  }



                                basic_string& operator=(value_type __c);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iterator begin() noexcept {
    return __make_iterator(__get_pointer());
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_iterator begin() const noexcept {
    return __make_const_iterator(__get_pointer());
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iterator end() noexcept {
    return __make_iterator(__get_pointer() + size());
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_iterator end() const noexcept {
    return __make_const_iterator(__get_pointer() + size());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) reverse_iterator rbegin() noexcept {
    return reverse_iterator(end());
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_reverse_iterator rbegin() const noexcept {
    return const_reverse_iterator(end());
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) reverse_iterator rend() noexcept {
    return reverse_iterator(begin());
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_reverse_iterator rend() const noexcept {
    return const_reverse_iterator(begin());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_iterator cbegin() const noexcept { return begin(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_iterator cend() const noexcept { return end(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_reverse_iterator crbegin() const noexcept {
    return rbegin();
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_reverse_iterator crend() const noexcept { return rend(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type size() const noexcept {
    return __is_long() ? __get_long_size() : __get_short_size();
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type length() const noexcept { return size(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type max_size() const noexcept {
    size_type __m = __alloc_traits::max_size(__alloc());
    if (__m <= std::numeric_limits<size_type>::max() / 2) {
      return __m - __alignment;
    } else {
      bool __uses_lsb = __endian_factor == 2;
      return __uses_lsb ? __m - __alignment : (__m / 2) - __alignment;
    }
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type capacity() const noexcept {
    return (__is_long() ? __get_long_cap() : static_cast<size_type>(__min_cap)) - 1;
  }

                                void resize(size_type __n, value_type __c);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void resize(size_type __n) { resize(__n, value_type()); }

                                void reserve(size_type __requested_capacity);
# 1225 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __resize_default_init(size_type __n);


                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void reserve() noexcept { shrink_to_fit(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void shrink_to_fit() noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void clear() noexcept;

  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool empty() const noexcept {
    return size() == 0;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_reference operator[](size_type __pos) const noexcept {
    ((void)0);
    if (__builtin_constant_p(__pos) && !__fits_in_sso(__pos)) {
      return *(__get_long_pointer() + __pos);
    }
    return *(data() + __pos);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) reference operator[](size_type __pos) noexcept {
    ((void)0);
    if (__builtin_constant_p(__pos) && !__fits_in_sso(__pos)) {
      return *(__get_long_pointer() + __pos);
    }
    return *(__get_pointer() + __pos);
  }

                                const_reference at(size_type __n) const;
                                reference at(size_type __n);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string& operator+=(const basic_string& __str) {
    return append(__str);
  }

  template <class _Tp,
            __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value &&
                              !__is_same_uncvref<_Tp, basic_string >::value,
                          int> = 0>
  inline __attribute__((__visibility__("hidden"))) basic_string&
  operator+=(const _Tp& __t) {
    __self_view __sv = __t;
    return append(__sv);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string& operator+=(const value_type* __s) {
    return append(__s);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string& operator+=(value_type __c) {
    push_back(__c);
    return *this;
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string& operator+=(initializer_list<value_type> __il) {
    return append(__il);
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string& append(const basic_string& __str) {
    return append(__str.data(), __str.size());
  }

  template <class _Tp,
            __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value &&
                              !__is_same_uncvref<_Tp, basic_string>::value,
                          int> = 0>
  inline __attribute__((__visibility__("hidden"))) basic_string&
  append(const _Tp& __t) {
    __self_view __sv = __t;
    return append(__sv.data(), __sv.size());
  }

                                basic_string& append(const basic_string& __str, size_type __pos, size_type __n = npos);

  template <class _Tp,
            __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value &&
                              !__is_same_uncvref<_Tp, basic_string>::value,
                          int> = 0>
  inline __attribute__((__visibility__("hidden")))

      basic_string&
      append(const _Tp& __t, size_type __pos, size_type __n = npos);

                                basic_string& append(const value_type* __s, size_type __n);
                                basic_string& append(const value_type* __s);
                                basic_string& append(size_type __n, value_type __c);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __append_default_init(size_type __n);

  template <class _InputIterator, __enable_if_t<__has_exactly_input_iterator_category<_InputIterator>::value, int> = 0>
  inline __attribute__((__visibility__("hidden"))) __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string&
  append(_InputIterator __first, _InputIterator __last) {
    const basic_string __temp(__first, __last, __alloc());
    append(__temp.data(), __temp.size());
    return *this;
  }

  template <class _ForwardIterator, __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value, int> = 0>
  inline __attribute__((__visibility__("hidden"))) __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string&
  append(_ForwardIterator __first, _ForwardIterator __last);
# 1337 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string& append(initializer_list<value_type> __il) {
    return append(__il.begin(), __il.size());
  }


                                void push_back(value_type __c);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void pop_back();

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) reference front() noexcept {
    ((void)0);
    return *__get_pointer();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_reference front() const noexcept {
    ((void)0);
    return *data();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) reference back() noexcept {
    ((void)0);
    return *(__get_pointer() + size() - 1);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_reference back() const noexcept {
    ((void)0);
    return *(data() + size() - 1);
  }

  template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> = 0>
  inline __attribute__((__visibility__("hidden"))) basic_string&
  assign(const _Tp& __t) {
    __self_view __sv = __t;
    return assign(__sv.data(), __sv.size());
  }
# 1395 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string& assign(const basic_string& __str) {
    return *this = __str;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string& assign(basic_string&& __str)
      noexcept(__noexcept_move_assign_container<_Allocator, __alloc_traits>::value) {
    *this = std::move(__str);
    return *this;
  }

                                basic_string& assign(const basic_string& __str, size_type __pos, size_type __n = npos);

  template <class _Tp,
            __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value &&
                              !__is_same_uncvref<_Tp, basic_string>::value,
                          int> = 0>
  inline __attribute__((__visibility__("hidden"))) basic_string&
  assign(const _Tp& __t, size_type __pos, size_type __n = npos);

                                basic_string& assign(const value_type* __s, size_type __n);
                                basic_string& assign(const value_type* __s);
                                basic_string& assign(size_type __n, value_type __c);
  template <class _InputIterator, __enable_if_t<__has_exactly_input_iterator_category<_InputIterator>::value, int> = 0>
  inline __attribute__((__visibility__("hidden"))) basic_string&
  assign(_InputIterator __first, _InputIterator __last);

  template <class _ForwardIterator, __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value, int> = 0>
  inline __attribute__((__visibility__("hidden"))) basic_string&
  assign(_ForwardIterator __first, _ForwardIterator __last);
# 1442 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string& assign(initializer_list<value_type> __il) {
    return assign(__il.begin(), __il.size());
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string&
  insert(size_type __pos1, const basic_string& __str) {
    return insert(__pos1, __str.data(), __str.size());
  }

  template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> = 0>
  inline __attribute__((__visibility__("hidden"))) basic_string&
  insert(size_type __pos1, const _Tp& __t) {
    __self_view __sv = __t;
    return insert(__pos1, __sv.data(), __sv.size());
  }

  template <class _Tp,
            __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value &&
                              !__is_same_uncvref<_Tp, basic_string>::value,
                          int> = 0>
  inline __attribute__((__visibility__("hidden"))) basic_string&
  insert(size_type __pos1, const _Tp& __t, size_type __pos2, size_type __n = npos);

                                basic_string&
  insert(size_type __pos1, const basic_string& __str, size_type __pos2, size_type __n = npos);
                                basic_string& insert(size_type __pos, const value_type* __s, size_type __n);
                                basic_string& insert(size_type __pos, const value_type* __s);
                                basic_string& insert(size_type __pos, size_type __n, value_type __c);
                                iterator insert(const_iterator __pos, value_type __c);
# 1487 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iterator
  insert(const_iterator __pos, size_type __n, value_type __c) {
    difference_type __p = __pos - begin();
    insert(static_cast<size_type>(__p), __n, __c);
    return begin() + __p;
  }

  template <class _InputIterator, __enable_if_t<__has_exactly_input_iterator_category<_InputIterator>::value, int> = 0>
  inline __attribute__((__visibility__("hidden"))) iterator
  insert(const_iterator __pos, _InputIterator __first, _InputIterator __last);

  template <class _ForwardIterator, __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value, int> = 0>
  inline __attribute__((__visibility__("hidden"))) iterator
  insert(const_iterator __pos, _ForwardIterator __first, _ForwardIterator __last);


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iterator
  insert(const_iterator __pos, initializer_list<value_type> __il) {
    return insert(__pos, __il.begin(), __il.end());
  }


                                basic_string& erase(size_type __pos = 0, size_type __n = npos);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iterator erase(const_iterator __pos);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iterator erase(const_iterator __first, const_iterator __last);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string&
  replace(size_type __pos1, size_type __n1, const basic_string& __str) {
    return replace(__pos1, __n1, __str.data(), __str.size());
  }

  template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> = 0>
  inline __attribute__((__visibility__("hidden"))) basic_string&
  replace(size_type __pos1, size_type __n1, const _Tp& __t) {
    __self_view __sv = __t;
    return replace(__pos1, __n1, __sv.data(), __sv.size());
  }

                                basic_string&
  replace(size_type __pos1, size_type __n1, const basic_string& __str, size_type __pos2, size_type __n2 = npos);

  template <class _Tp,
            __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value &&
                              !__is_same_uncvref<_Tp, basic_string>::value,
                          int> = 0>
  inline __attribute__((__visibility__("hidden"))) basic_string&
  replace(size_type __pos1, size_type __n1, const _Tp& __t, size_type __pos2, size_type __n2 = npos);

                                basic_string&
  replace(size_type __pos, size_type __n1, const value_type* __s, size_type __n2);
                                basic_string& replace(size_type __pos, size_type __n1, const value_type* __s);
                                basic_string& replace(size_type __pos, size_type __n1, size_type __n2, value_type __c);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string&
  replace(const_iterator __i1, const_iterator __i2, const basic_string& __str) {
    return replace(
        static_cast<size_type>(__i1 - begin()), static_cast<size_type>(__i2 - __i1), __str.data(), __str.size());
  }

  template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> = 0>
  inline __attribute__((__visibility__("hidden"))) basic_string&
  replace(const_iterator __i1, const_iterator __i2, const _Tp& __t) {
    __self_view __sv = __t;
    return replace(__i1 - begin(), __i2 - __i1, __sv);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string&
  replace(const_iterator __i1, const_iterator __i2, const value_type* __s, size_type __n) {
    return replace(static_cast<size_type>(__i1 - begin()), static_cast<size_type>(__i2 - __i1), __s, __n);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string&
  replace(const_iterator __i1, const_iterator __i2, const value_type* __s) {
    return replace(static_cast<size_type>(__i1 - begin()), static_cast<size_type>(__i2 - __i1), __s);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string&
  replace(const_iterator __i1, const_iterator __i2, size_type __n, value_type __c) {
    return replace(static_cast<size_type>(__i1 - begin()), static_cast<size_type>(__i2 - __i1), __n, __c);
  }

  template <class _InputIterator, __enable_if_t<__has_input_iterator_category<_InputIterator>::value, int> = 0>
  inline __attribute__((__visibility__("hidden"))) basic_string&
  replace(const_iterator __i1, const_iterator __i2, _InputIterator __j1, _InputIterator __j2);
# 1582 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string&
  replace(const_iterator __i1, const_iterator __i2, initializer_list<value_type> __il) {
    return replace(__i1, __i2, __il.begin(), __il.end());
  }


                                size_type copy(value_type* __s, size_type __n, size_type __pos = 0) const;


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string
  substr(size_type __pos = 0, size_type __n = npos) const {
    return basic_string(*this, __pos, __n);
  }
# 1605 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void swap(basic_string& __str)

      noexcept;




  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const value_type* c_str() const noexcept { return data(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const value_type* data() const noexcept {
    return std::__to_address(__get_pointer());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) value_type* data() noexcept {
    return std::__to_address(__get_pointer());
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) allocator_type get_allocator() const noexcept {
    return __alloc();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type
  find(const basic_string& __str, size_type __pos = 0) const noexcept;

  template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> = 0>
  inline __attribute__((__visibility__("hidden"))) size_type
  find(const _Tp& __t, size_type __pos = 0) const noexcept;

                                size_type find(const value_type* __s, size_type __pos, size_type __n) const noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type
  find(const value_type* __s, size_type __pos = 0) const noexcept;
                                size_type find(value_type __c, size_type __pos = 0) const noexcept;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type
  rfind(const basic_string& __str, size_type __pos = npos) const noexcept;

  template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> = 0>
  inline __attribute__((__visibility__("hidden"))) size_type
  rfind(const _Tp& __t, size_type __pos = npos) const noexcept;

                                size_type rfind(const value_type* __s, size_type __pos, size_type __n) const noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type
  rfind(const value_type* __s, size_type __pos = npos) const noexcept;
                                size_type rfind(value_type __c, size_type __pos = npos) const noexcept;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type
  find_first_of(const basic_string& __str, size_type __pos = 0) const noexcept;

  template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> = 0>
  inline __attribute__((__visibility__("hidden"))) size_type
  find_first_of(const _Tp& __t, size_type __pos = 0) const noexcept;

                                size_type
  find_first_of(const value_type* __s, size_type __pos, size_type __n) const noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type
  find_first_of(const value_type* __s, size_type __pos = 0) const noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type
  find_first_of(value_type __c, size_type __pos = 0) const noexcept;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type
  find_last_of(const basic_string& __str, size_type __pos = npos) const noexcept;

  template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> = 0>
  inline __attribute__((__visibility__("hidden"))) size_type
  find_last_of(const _Tp& __t, size_type __pos = npos) const noexcept;

                                size_type
  find_last_of(const value_type* __s, size_type __pos, size_type __n) const noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type
  find_last_of(const value_type* __s, size_type __pos = npos) const noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type
  find_last_of(value_type __c, size_type __pos = npos) const noexcept;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type
  find_first_not_of(const basic_string& __str, size_type __pos = 0) const noexcept;

  template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> = 0>
  inline __attribute__((__visibility__("hidden"))) size_type
  find_first_not_of(const _Tp& __t, size_type __pos = 0) const noexcept;

                                size_type
  find_first_not_of(const value_type* __s, size_type __pos, size_type __n) const noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type
  find_first_not_of(const value_type* __s, size_type __pos = 0) const noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type
  find_first_not_of(value_type __c, size_type __pos = 0) const noexcept;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type
  find_last_not_of(const basic_string& __str, size_type __pos = npos) const noexcept;

  template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> = 0>
  inline __attribute__((__visibility__("hidden"))) size_type
  find_last_not_of(const _Tp& __t, size_type __pos = npos) const noexcept;

                                size_type
  find_last_not_of(const value_type* __s, size_type __pos, size_type __n) const noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type
  find_last_not_of(const value_type* __s, size_type __pos = npos) const noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type
  find_last_not_of(value_type __c, size_type __pos = npos) const noexcept;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) int compare(const basic_string& __str) const noexcept;

  template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> = 0>
  inline __attribute__((__visibility__("hidden"))) int
  compare(const _Tp& __t) const noexcept;

  template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> = 0>
  inline __attribute__((__visibility__("hidden"))) int
  compare(size_type __pos1, size_type __n1, const _Tp& __t) const;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) int
  compare(size_type __pos1, size_type __n1, const basic_string& __str) const;
                                int
  compare(size_type __pos1, size_type __n1, const basic_string& __str, size_type __pos2, size_type __n2 = npos) const;

  template <class _Tp,
            __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value &&
                              !__is_same_uncvref<_Tp, basic_string>::value,
                          int> = 0>
  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) int
  compare(size_type __pos1, size_type __n1, const _Tp& __t, size_type __pos2, size_type __n2 = npos) const;

                                int compare(const value_type* __s) const noexcept;
                                int compare(size_type __pos1, size_type __n1, const value_type* __s) const;
                                int
  compare(size_type __pos1, size_type __n1, const value_type* __s, size_type __n2) const;
# 1773 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool __invariants() const;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __clear_and_shrink() noexcept;

private:
  template <class _Alloc>
  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool friend
  operator==(const basic_string<char, char_traits<char>, _Alloc>& __lhs,
             const basic_string<char, char_traits<char>, _Alloc>& __rhs) noexcept;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __shrink_or_extend(size_type __target_capacity);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
  __is_long() const noexcept {
    if (__libcpp_is_constant_evaluated() && __builtin_constant_p(__r_.first().__l.__is_long_)) {
      return __r_.first().__l.__is_long_;
    }
    return __r_.first().__s.__is_long_;
  }

  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __begin_lifetime(pointer __begin, size_type __n) {






    (void)__begin;
    (void)__n;

  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static bool __fits_in_sso(size_type __sz) { return __sz < __min_cap; }

  template <class _Iterator, class _Sentinel>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
  __assign_trivial(_Iterator __first, _Sentinel __last, size_type __n);

  template <class _Iterator, class _Sentinel>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __assign_with_sentinel(_Iterator __first, _Sentinel __last);

  template <class _ForwardIterator, class _Sentinel>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr iterator
  __insert_from_safe_copy(size_type __n, size_type __ip, _ForwardIterator __first, _Sentinel __last) {
    size_type __sz = size();
    size_type __cap = capacity();
    value_type* __p;
    if (__cap - __sz >= __n) {
      __annotate_increase(__n);
      __p = std::__to_address(__get_pointer());
      size_type __n_move = __sz - __ip;
      if (__n_move != 0)
        traits_type::move(__p + __ip + __n, __p + __ip, __n_move);
    } else {
      __grow_by_without_replace(__cap, __sz + __n - __cap, __sz, __ip, 0, __n);
      __p = std::__to_address(__get_long_pointer());
    }
    __sz += __n;
    __set_size(__sz);
    traits_type::assign(__p[__sz], value_type());
    for (__p += __ip; __first != __last; ++__p, ++__first)
      traits_type::assign(*__p, *__first);

    return begin() + __ip;
  }

  template <class _Iterator, class _Sentinel>
                                iterator
  __insert_with_size(const_iterator __pos, _Iterator __first, _Sentinel __last, size_type __n);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr allocator_type& __alloc() noexcept { return __r_.second(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const allocator_type& __alloc() const noexcept { return __r_.second(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
  __set_short_size(size_type __s) noexcept {
    ((void)0);
    __r_.first().__s.__size_ = __s;
    __r_.first().__s.__is_long_ = false;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type
  __get_short_size() const noexcept {
    ((void)0);
    return __r_.first().__s.__size_;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __set_long_size(size_type __s) noexcept {
    __r_.first().__l.__size_ = __s;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type __get_long_size() const noexcept {
    return __r_.first().__l.__size_;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __set_size(size_type __s) noexcept {
    if (__is_long())
      __set_long_size(__s);
    else
      __set_short_size(__s);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __set_long_cap(size_type __s) noexcept {
    __r_.first().__l.__cap_ = __s / __endian_factor;
    __r_.first().__l.__is_long_ = true;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type __get_long_cap() const noexcept {
    return __r_.first().__l.__cap_ * __endian_factor;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __set_long_pointer(pointer __p) noexcept {
    __r_.first().__l.__data_ = __p;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) pointer __get_long_pointer() noexcept {
    return __r_.first().__l.__data_;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_pointer __get_long_pointer() const noexcept {
    return __r_.first().__l.__data_;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) pointer __get_short_pointer() noexcept {
    return pointer_traits<pointer>::pointer_to(__r_.first().__s.__data_[0]);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_pointer __get_short_pointer() const noexcept {
    return pointer_traits<const_pointer>::pointer_to(__r_.first().__s.__data_[0]);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) pointer __get_pointer() noexcept {
    return __is_long() ? __get_long_pointer() : __get_short_pointer();
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_pointer __get_pointer() const noexcept {
    return __is_long() ? __get_long_pointer() : __get_short_pointer();
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
  __annotate_contiguous_container(const void* __old_mid, const void* __new_mid) const {
    (void)__old_mid;
    (void)__new_mid;






  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool __asan_short_string_is_annotated() const noexcept {
    return false && !__libcpp_is_constant_evaluated();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __annotate_new(size_type __current_size) const noexcept {
    (void) __current_size;




  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __annotate_delete() const noexcept {




  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __annotate_increase(size_type __n) const noexcept {
    (void) __n;




  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __annotate_shrink(size_type __old_size) const noexcept {
    (void) __old_size;




  }

  template <size_type __a>
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type __align_it(size_type __s) noexcept {
    return (__s + (__a - 1)) & ~(__a - 1);
  }
  enum {
    __alignment = 8
  };
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type __recommend(size_type __s) noexcept {
    if (__s < __min_cap) {
      return static_cast<size_type>(__min_cap) - 1;
    }
    const size_type __boundary = sizeof(value_type) < __alignment ? __alignment / sizeof(value_type) : 1;
    size_type __guess = __align_it<__boundary>(__s + 1) - 1;
    if (__guess == __min_cap)
      ++__guess;
    return __guess;
  }

  inline void __init(const value_type* __s, size_type __sz, size_type __reserve);
  inline void __init(const value_type* __s, size_type __sz);
  inline void __init(size_type __n, value_type __c);
# 1982 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string" 3
                                __attribute__((__noinline__)) void __init_copy_ctor_external(const value_type* __s, size_type __sz);

  template <class _InputIterator, __enable_if_t<__has_exactly_input_iterator_category<_InputIterator>::value, int> = 0>
  inline void __init(_InputIterator __first, _InputIterator __last);

  template <class _ForwardIterator, __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value, int> = 0>
  inline void __init(_ForwardIterator __first, _ForwardIterator __last);

  template <class _InputIterator, class _Sentinel>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
  __init_with_sentinel(_InputIterator __first, _Sentinel __last);
  template <class _InputIterator, class _Sentinel>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
  __init_with_size(_InputIterator __first, _Sentinel __last, size_type __sz);



      __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))

          __attribute__((__deprecated__("use __grow_by_without_replace"))) void __grow_by(
              size_type __old_cap,
              size_type __delta_cap,
              size_type __old_sz,
              size_type __n_copy,
              size_type __n_del,
              size_type __n_add = 0);
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __grow_by_without_replace(
      size_type __old_cap,
      size_type __delta_cap,
      size_type __old_sz,
      size_type __n_copy,
      size_type __n_del,
      size_type __n_add = 0);
                                void __grow_by_and_replace(
      size_type __old_cap,
      size_type __delta_cap,
      size_type __old_sz,
      size_type __n_copy,
      size_type __n_del,
      size_type __n_add,
      const value_type* __p_new_stuff);




  template <bool __is_short>
                                __attribute__((__noinline__)) basic_string& __assign_no_alias(const value_type* __s, size_type __n);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __erase_to_end(size_type __pos) {
    __null_terminate_at(std::__to_address(__get_pointer()), __pos);
  }



                                __attribute__((__noinline__)) void __erase_external_with_move(size_type __pos, size_type __n);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __copy_assign_alloc(const basic_string& __str) {
    __copy_assign_alloc(
        __str, integral_constant<bool, __alloc_traits::propagate_on_container_copy_assignment::value>());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __copy_assign_alloc(const basic_string& __str, true_type) {
    if (__alloc() == __str.__alloc())
      __alloc() = __str.__alloc();
    else {
      if (!__str.__is_long()) {
        __clear_and_shrink();
        __alloc() = __str.__alloc();
      } else {
        __annotate_delete();
        allocator_type __a = __str.__alloc();
        auto __allocation = std::__allocate_at_least(__a, __str.__get_long_cap());
        __begin_lifetime(__allocation.ptr, __allocation.count);
        if (__is_long())
          __alloc_traits::deallocate(__alloc(), __get_long_pointer(), __get_long_cap());
        __alloc() = std::move(__a);
        __set_long_pointer(__allocation.ptr);
        __set_long_cap(__allocation.count);
        __set_long_size(__str.size());
        __annotate_new(__get_long_size());
      }
    }
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
  __copy_assign_alloc(const basic_string&, false_type) noexcept {}


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __move_assign(basic_string& __str, false_type)
      noexcept(__alloc_traits::is_always_equal::value);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
  __move_assign(basic_string& __str, true_type)

      noexcept;





  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __move_assign_alloc(basic_string& __str)
      noexcept(!__alloc_traits::propagate_on_container_move_assignment::value || is_nothrow_move_assignable<allocator_type>::value) {

    __move_assign_alloc(
        __str, integral_constant<bool, __alloc_traits::propagate_on_container_move_assignment::value>());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __move_assign_alloc(basic_string& __c, true_type)
      noexcept(is_nothrow_move_assignable<allocator_type>::value) {
    __alloc() = std::move(__c.__alloc());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __move_assign_alloc(basic_string&, false_type) noexcept {}

                                __attribute__((__noinline__)) basic_string& __assign_external(const value_type* __s);
                                __attribute__((__noinline__)) basic_string& __assign_external(const value_type* __s, size_type __n);


  inline basic_string& __assign_short(const value_type* __s, size_type __n) {
    size_type __old_size = size();
    if (__n > __old_size)
      __annotate_increase(__n - __old_size);
    pointer __p =
        __is_long() ? (__set_long_size(__n), __get_long_pointer()) : (__set_short_size(__n), __get_short_pointer());
    traits_type::move(std::__to_address(__p), __s, __n);
    traits_type::assign(__p[__n], value_type());
    if (__old_size > __n)
      __annotate_shrink(__old_size);
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string&
  __null_terminate_at(value_type* __p, size_type __newsz) {
    size_type __old_size = size();
    if (__newsz > __old_size)
      __annotate_increase(__newsz - __old_size);
    __set_size(__newsz);
    traits_type::assign(__p[__newsz], value_type());
    if (__old_size > __newsz)
      __annotate_shrink(__old_size);
    return *this;
  }

  template <class _Tp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool __addr_in_range(const _Tp& __v) const {
    return std::__is_pointer_in_range(data(), data() + size() + 1, std::addressof(__v));
  }

  [[noreturn]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __throw_length_error() const {
    std::__throw_length_error("basic_string");
  }

  [[noreturn]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __throw_out_of_range() const {
    std::__throw_out_of_range("basic_string");
  }

  friend basic_string operator+ <>(const basic_string&, const basic_string&);
  friend basic_string operator+ <>(const value_type*, const basic_string&);
  friend basic_string operator+ <>(value_type, const basic_string&);
  friend basic_string operator+ <>(const basic_string&, const value_type*);
  friend basic_string operator+ <>(const basic_string&, value_type);
};





extern template __attribute__((__visibility__("default"))) basic_string<char>& basic_string<char>::replace(size_type, size_type, value_type const*, size_type); extern template __attribute__((__visibility__("default"))) basic_string<char>::size_type basic_string<char>::rfind(value_type const*, size_type, size_type) const; extern template __attribute__((__visibility__("default"))) void basic_string<char>::__init(value_type const*, size_type, size_type); extern template __attribute__((__visibility__("default"))) basic_string<char>& basic_string<char>::replace(size_type, size_type, value_type const*); extern template __attribute__((__visibility__("default"))) basic_string<char>::size_type basic_string<char>::find_last_not_of(value_type const*, size_type, size_type) const; extern template __attribute__((__visibility__("default"))) basic_string<char>::~basic_string(); extern template __attribute__((__visibility__("default"))) basic_string<char>::size_type basic_string<char>::find_first_not_of(value_type const*, size_type, size_type) const; extern template __attribute__((__visibility__("default"))) basic_string<char>& basic_string<char>::insert(size_type, size_type, value_type); extern template __attribute__((__visibility__("default"))) basic_string<char>& basic_string<char>::operator=(value_type); extern template __attribute__((__visibility__("default"))) void basic_string<char>::__init(value_type const*, size_type); extern template __attribute__((__visibility__("default"))) void basic_string<char>::__init_copy_ctor_external(value_type const*, size_type); extern template __attribute__((__visibility__("default"))) const char& basic_string<char>::at(size_type) const; extern template __attribute__((__visibility__("default"))) basic_string<char>& basic_string<char>::insert(size_type, value_type const*, size_type); extern template __attribute__((__visibility__("default"))) basic_string<char>::size_type basic_string<char>::find_first_of(value_type const*, size_type, size_type) const; extern template __attribute__((__visibility__("default"))) basic_string<char>& basic_string<char>::replace(size_type, size_type, size_type, value_type); extern template __attribute__((__visibility__("default"))) basic_string<char>& basic_string<char>::__assign_external(value_type const*, size_type); extern template __attribute__((__visibility__("default"))) basic_string<char>& basic_string<char>::__assign_external(value_type const*); extern template __attribute__((__visibility__("default"))) void basic_string<char>::reserve(size_type); extern template __attribute__((__visibility__("default"))) basic_string<char>& basic_string<char>::append(value_type const*, size_type); extern template __attribute__((__visibility__("default"))) basic_string<char>& basic_string<char>::assign(basic_string const&, size_type, size_type); extern template __attribute__((__visibility__("default"))) basic_string<char>::size_type basic_string<char>::copy(value_type*, size_type, size_type) const; extern template __attribute__((__visibility__("default"))) basic_string<char>::basic_string(basic_string const&, size_type, size_type, allocator<char> const&); extern template __attribute__((__visibility__("default"))) basic_string<char>::size_type basic_string<char>::find(value_type, size_type) const; extern template __attribute__((__visibility__("default"))) void basic_string<char>::__init(size_type, value_type); extern template __attribute__((__visibility__("default"))) basic_string<char>& basic_string<char>::insert(size_type, value_type const*); extern template __attribute__((__visibility__("default"))) basic_string<char>::size_type basic_string<char>::find_last_of(value_type const*, size_type, size_type) const; extern template __attribute__((__visibility__("default"))) void basic_string<char>::__grow_by_and_replace(size_type, size_type, size_type, size_type, size_type, size_type, value_type const*); extern template __attribute__((__visibility__("default"))) basic_string<char>& basic_string<char>::__assign_no_alias<false>(value_type const*, size_type); extern template __attribute__((__visibility__("default"))) basic_string<char>& basic_string<char>::__assign_no_alias<true>(value_type const*, size_type); extern template __attribute__((__visibility__("default"))) void basic_string<char>::push_back(value_type); extern template __attribute__((__visibility__("default"))) basic_string<char>& basic_string<char>::append(size_type, value_type); extern template __attribute__((__visibility__("default"))) basic_string<char>::size_type basic_string<char>::rfind(value_type, size_type) const; extern template __attribute__((__visibility__("default"))) const basic_string<char>::size_type basic_string<char>::npos; extern template __attribute__((__visibility__("default"))) basic_string<char>& basic_string<char>::assign(size_type, value_type); extern template __attribute__((__visibility__("default"))) void basic_string<char>::__erase_external_with_move(size_type, size_type); extern template __attribute__((__visibility__("default"))) basic_string<char>& basic_string<char>::append(basic_string const&, size_type, size_type); extern template __attribute__((__visibility__("default"))) int basic_string<char>::compare(value_type const*) const; extern template __attribute__((__visibility__("default"))) int basic_string<char>::compare(size_type, size_type, value_type const*) const; extern template __attribute__((__visibility__("default"))) char& basic_string<char>::at(size_type); extern template __attribute__((__visibility__("default"))) basic_string<char>::size_type basic_string<char>::find(value_type const*, size_type, size_type) const; extern template __attribute__((__visibility__("default"))) int basic_string<char>::compare(size_type, size_type, basic_string const&, size_type, size_type) const; extern template __attribute__((__visibility__("default"))) int basic_string<char>::compare(size_type, size_type, value_type const*, size_type) const; extern template __attribute__((__visibility__("default"))) basic_string<char>& basic_string<char>::append(value_type const*); extern template __attribute__((__visibility__("default"))) basic_string<char>& basic_string<char>::replace(size_type, size_type, basic_string const&, size_type, size_type); extern template __attribute__((__visibility__("default"))) basic_string<char>::iterator basic_string<char>::insert(basic_string::const_iterator, value_type); extern template __attribute__((__visibility__("default"))) void basic_string<char>::resize(size_type, value_type); extern template __attribute__((__visibility__("default"))) basic_string<char>& basic_string<char>::insert(size_type, basic_string const&, size_type, size_type);

extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>& basic_string<wchar_t>::replace(size_type, size_type, value_type const*, size_type); extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>::size_type basic_string<wchar_t>::rfind(value_type const*, size_type, size_type) const; extern template __attribute__((__visibility__("default"))) void basic_string<wchar_t>::__init(value_type const*, size_type, size_type); extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>& basic_string<wchar_t>::replace(size_type, size_type, value_type const*); extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>::size_type basic_string<wchar_t>::find_last_not_of(value_type const*, size_type, size_type) const; extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>::~basic_string(); extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>::size_type basic_string<wchar_t>::find_first_not_of(value_type const*, size_type, size_type) const; extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>& basic_string<wchar_t>::insert(size_type, size_type, value_type); extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>& basic_string<wchar_t>::operator=(value_type); extern template __attribute__((__visibility__("default"))) void basic_string<wchar_t>::__init(value_type const*, size_type); extern template __attribute__((__visibility__("default"))) void basic_string<wchar_t>::__init_copy_ctor_external(value_type const*, size_type); extern template __attribute__((__visibility__("default"))) const wchar_t& basic_string<wchar_t>::at(size_type) const; extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>& basic_string<wchar_t>::insert(size_type, value_type const*, size_type); extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>::size_type basic_string<wchar_t>::find_first_of(value_type const*, size_type, size_type) const; extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>& basic_string<wchar_t>::replace(size_type, size_type, size_type, value_type); extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>& basic_string<wchar_t>::__assign_external(value_type const*, size_type); extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>& basic_string<wchar_t>::__assign_external(value_type const*); extern template __attribute__((__visibility__("default"))) void basic_string<wchar_t>::reserve(size_type); extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>& basic_string<wchar_t>::append(value_type const*, size_type); extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>& basic_string<wchar_t>::assign(basic_string const&, size_type, size_type); extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>::size_type basic_string<wchar_t>::copy(value_type*, size_type, size_type) const; extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>::basic_string(basic_string const&, size_type, size_type, allocator<wchar_t> const&); extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>::size_type basic_string<wchar_t>::find(value_type, size_type) const; extern template __attribute__((__visibility__("default"))) void basic_string<wchar_t>::__init(size_type, value_type); extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>& basic_string<wchar_t>::insert(size_type, value_type const*); extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>::size_type basic_string<wchar_t>::find_last_of(value_type const*, size_type, size_type) const; extern template __attribute__((__visibility__("default"))) void basic_string<wchar_t>::__grow_by_and_replace(size_type, size_type, size_type, size_type, size_type, size_type, value_type const*); extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>& basic_string<wchar_t>::__assign_no_alias<false>(value_type const*, size_type); extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>& basic_string<wchar_t>::__assign_no_alias<true>(value_type const*, size_type); extern template __attribute__((__visibility__("default"))) void basic_string<wchar_t>::push_back(value_type); extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>& basic_string<wchar_t>::append(size_type, value_type); extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>::size_type basic_string<wchar_t>::rfind(value_type, size_type) const; extern template __attribute__((__visibility__("default"))) const basic_string<wchar_t>::size_type basic_string<wchar_t>::npos; extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>& basic_string<wchar_t>::assign(size_type, value_type); extern template __attribute__((__visibility__("default"))) void basic_string<wchar_t>::__erase_external_with_move(size_type, size_type); extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>& basic_string<wchar_t>::append(basic_string const&, size_type, size_type); extern template __attribute__((__visibility__("default"))) int basic_string<wchar_t>::compare(value_type const*) const; extern template __attribute__((__visibility__("default"))) int basic_string<wchar_t>::compare(size_type, size_type, value_type const*) const; extern template __attribute__((__visibility__("default"))) wchar_t& basic_string<wchar_t>::at(size_type); extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>::size_type basic_string<wchar_t>::find(value_type const*, size_type, size_type) const; extern template __attribute__((__visibility__("default"))) int basic_string<wchar_t>::compare(size_type, size_type, basic_string const&, size_type, size_type) const; extern template __attribute__((__visibility__("default"))) int basic_string<wchar_t>::compare(size_type, size_type, value_type const*, size_type) const; extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>& basic_string<wchar_t>::append(value_type const*); extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>& basic_string<wchar_t>::replace(size_type, size_type, basic_string const&, size_type, size_type); extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>::iterator basic_string<wchar_t>::insert(basic_string::const_iterator, value_type); extern template __attribute__((__visibility__("default"))) void basic_string<wchar_t>::resize(size_type, value_type); extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>& basic_string<wchar_t>::insert(size_type, basic_string const&, size_type, size_type);
# 2161 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string" 3
template <class _InputIterator,
          class _CharT = __iter_value_type<_InputIterator>,
          class _Allocator = allocator<_CharT>,
          class = enable_if_t<__has_input_iterator_category<_InputIterator>::value>,
          class = enable_if_t<__is_allocator<_Allocator>::value> >
basic_string(_InputIterator, _InputIterator, _Allocator = _Allocator())
    -> basic_string<_CharT, char_traits<_CharT>, _Allocator>;

template <class _CharT,
          class _Traits,
          class _Allocator = allocator<_CharT>,
          class = enable_if_t<__is_allocator<_Allocator>::value> >
explicit basic_string(basic_string_view<_CharT, _Traits>, const _Allocator& = _Allocator())
    -> basic_string<_CharT, _Traits, _Allocator>;

template <class _CharT,
          class _Traits,
          class _Allocator = allocator<_CharT>,
          class = enable_if_t<__is_allocator<_Allocator>::value>,
          class _Sz = typename allocator_traits<_Allocator>::size_type >
basic_string(basic_string_view<_CharT, _Traits>, _Sz, _Sz, const _Allocator& = _Allocator())
    -> basic_string<_CharT, _Traits, _Allocator>;
# 2193 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string" 3
template <class _CharT, class _Traits, class _Allocator>
                              void
basic_string<_CharT, _Traits, _Allocator>::__init(const value_type* __s, size_type __sz, size_type __reserve) {
  if (__libcpp_is_constant_evaluated())
    __r_.first() = __rep();
  if (__reserve > max_size())
    __throw_length_error();
  pointer __p;
  if (__fits_in_sso(__reserve)) {
    __set_short_size(__sz);
    __p = __get_short_pointer();
  } else {
    auto __allocation = std::__allocate_at_least(__alloc(), __recommend(__reserve) + 1);
    __p = __allocation.ptr;
    __begin_lifetime(__p, __allocation.count);
    __set_long_pointer(__p);
    __set_long_cap(__allocation.count);
    __set_long_size(__sz);
  }
  traits_type::copy(std::__to_address(__p), __s, __sz);
  traits_type::assign(__p[__sz], value_type());
  __annotate_new(__sz);
}

template <class _CharT, class _Traits, class _Allocator>
                              void
basic_string<_CharT, _Traits, _Allocator>::__init(const value_type* __s, size_type __sz) {
  if (__libcpp_is_constant_evaluated())
    __r_.first() = __rep();
  if (__sz > max_size())
    __throw_length_error();
  pointer __p;
  if (__fits_in_sso(__sz)) {
    __set_short_size(__sz);
    __p = __get_short_pointer();
  } else {
    auto __allocation = std::__allocate_at_least(__alloc(), __recommend(__sz) + 1);
    __p = __allocation.ptr;
    __begin_lifetime(__p, __allocation.count);
    __set_long_pointer(__p);
    __set_long_cap(__allocation.count);
    __set_long_size(__sz);
  }
  traits_type::copy(std::__to_address(__p), __s, __sz);
  traits_type::assign(__p[__sz], value_type());
  __annotate_new(__sz);
}

template <class _CharT, class _Traits, class _Allocator>
                              __attribute__((__noinline__)) void
basic_string<_CharT, _Traits, _Allocator>::__init_copy_ctor_external(const value_type* __s, size_type __sz) {
  if (__libcpp_is_constant_evaluated())
    __r_.first() = __rep();

  pointer __p;
  if (__fits_in_sso(__sz)) {
    __p = __get_short_pointer();
    __set_short_size(__sz);
  } else {
    if (__sz > max_size())
      __throw_length_error();
    auto __allocation = std::__allocate_at_least(__alloc(), __recommend(__sz) + 1);
    __p = __allocation.ptr;
    __begin_lifetime(__p, __allocation.count);
    __set_long_pointer(__p);
    __set_long_cap(__allocation.count);
    __set_long_size(__sz);
  }
  traits_type::copy(std::__to_address(__p), __s, __sz + 1);
  __annotate_new(__sz);
}

template <class _CharT, class _Traits, class _Allocator>
                              void basic_string<_CharT, _Traits, _Allocator>::__init(size_type __n, value_type __c) {
  if (__libcpp_is_constant_evaluated())
    __r_.first() = __rep();

  if (__n > max_size())
    __throw_length_error();
  pointer __p;
  if (__fits_in_sso(__n)) {
    __set_short_size(__n);
    __p = __get_short_pointer();
  } else {
    auto __allocation = std::__allocate_at_least(__alloc(), __recommend(__n) + 1);
    __p = __allocation.ptr;
    __begin_lifetime(__p, __allocation.count);
    __set_long_pointer(__p);
    __set_long_cap(__allocation.count);
    __set_long_size(__n);
  }
  traits_type::assign(std::__to_address(__p), __n, __c);
  traits_type::assign(__p[__n], value_type());
  __annotate_new(__n);
}

template <class _CharT, class _Traits, class _Allocator>
template <class _InputIterator, __enable_if_t<__has_exactly_input_iterator_category<_InputIterator>::value, int> >
                              void
basic_string<_CharT, _Traits, _Allocator>::__init(_InputIterator __first, _InputIterator __last) {
  __init_with_sentinel(std::move(__first), std::move(__last));
}

template <class _CharT, class _Traits, class _Allocator>
template <class _InputIterator, class _Sentinel>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
basic_string<_CharT, _Traits, _Allocator>::__init_with_sentinel(_InputIterator __first, _Sentinel __last) {
  __r_.first() = __rep();
  __annotate_new(0);




    for (; __first != __last; ++__first)
      push_back(*__first);
# 2316 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string" 3
}

template <class _CharT, class _Traits, class _Allocator>
template <class _ForwardIterator, __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value, int> >
                              void
basic_string<_CharT, _Traits, _Allocator>::__init(_ForwardIterator __first, _ForwardIterator __last) {
  size_type __sz = static_cast<size_type>(std::distance(__first, __last));
  __init_with_size(__first, __last, __sz);
}

template <class _CharT, class _Traits, class _Allocator>
template <class _InputIterator, class _Sentinel>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
basic_string<_CharT, _Traits, _Allocator>::__init_with_size(_InputIterator __first, _Sentinel __last, size_type __sz) {
  if (__libcpp_is_constant_evaluated())
    __r_.first() = __rep();

  if (__sz > max_size())
    __throw_length_error();

  pointer __p;
  if (__fits_in_sso(__sz)) {
    __set_short_size(__sz);
    __p = __get_short_pointer();

  } else {
    auto __allocation = std::__allocate_at_least(__alloc(), __recommend(__sz) + 1);
    __p = __allocation.ptr;
    __begin_lifetime(__p, __allocation.count);
    __set_long_pointer(__p);
    __set_long_cap(__allocation.count);
    __set_long_size(__sz);
  }




    for (; __first != __last; ++__first, (void)++__p)
      traits_type::assign(*__p, *__first);
    traits_type::assign(*__p, value_type());







  __annotate_new(__sz);
}

template <class _CharT, class _Traits, class _Allocator>
                              void basic_string<_CharT, _Traits, _Allocator>::__grow_by_and_replace(
    size_type __old_cap,
    size_type __delta_cap,
    size_type __old_sz,
    size_type __n_copy,
    size_type __n_del,
    size_type __n_add,
    const value_type* __p_new_stuff) {
  size_type __ms = max_size();
  if (__delta_cap > __ms - __old_cap - 1)
    __throw_length_error();
  pointer __old_p = __get_pointer();
  size_type __cap =
      __old_cap < __ms / 2 - __alignment ? __recommend(std::max(__old_cap + __delta_cap, 2 * __old_cap)) : __ms - 1;
  __annotate_delete();
  auto __allocation = std::__allocate_at_least(__alloc(), __cap + 1);
  pointer __p = __allocation.ptr;
  __begin_lifetime(__p, __allocation.count);
  if (__n_copy != 0)
    traits_type::copy(std::__to_address(__p), std::__to_address(__old_p), __n_copy);
  if (__n_add != 0)
    traits_type::copy(std::__to_address(__p) + __n_copy, __p_new_stuff, __n_add);
  size_type __sec_cp_sz = __old_sz - __n_del - __n_copy;
  if (__sec_cp_sz != 0)
    traits_type::copy(
        std::__to_address(__p) + __n_copy + __n_add, std::__to_address(__old_p) + __n_copy + __n_del, __sec_cp_sz);
  if (__old_cap + 1 != __min_cap)
    __alloc_traits::deallocate(__alloc(), __old_p, __old_cap + 1);
  __set_long_pointer(__p);
  __set_long_cap(__allocation.count);
  __old_sz = __n_copy + __n_add + __sec_cp_sz;
  __set_long_size(__old_sz);
  traits_type::assign(__p[__old_sz], value_type());
  __annotate_new(__old_sz);
}




template <class _CharT, class _Traits, class _Allocator>
void

    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))

    __attribute__((__deprecated__("use __grow_by_without_replace"))) basic_string<_CharT, _Traits, _Allocator>::__grow_by(
        size_type __old_cap,
        size_type __delta_cap,
        size_type __old_sz,
        size_type __n_copy,
        size_type __n_del,
        size_type __n_add) {
  size_type __ms = max_size();
  if (__delta_cap > __ms - __old_cap)
    __throw_length_error();
  pointer __old_p = __get_pointer();
  size_type __cap =
      __old_cap < __ms / 2 - __alignment ? __recommend(std::max(__old_cap + __delta_cap, 2 * __old_cap)) : __ms - 1;
  __annotate_delete();
  auto __allocation = std::__allocate_at_least(__alloc(), __cap + 1);
  pointer __p = __allocation.ptr;
  __begin_lifetime(__p, __allocation.count);
  if (__n_copy != 0)
    traits_type::copy(std::__to_address(__p), std::__to_address(__old_p), __n_copy);
  size_type __sec_cp_sz = __old_sz - __n_del - __n_copy;
  if (__sec_cp_sz != 0)
    traits_type::copy(
        std::__to_address(__p) + __n_copy + __n_add, std::__to_address(__old_p) + __n_copy + __n_del, __sec_cp_sz);
  if (__old_cap + 1 != __min_cap)
    __alloc_traits::deallocate(__alloc(), __old_p, __old_cap + 1);
  __set_long_pointer(__p);
  __set_long_cap(__allocation.count);
}

template <class _CharT, class _Traits, class _Allocator>
void __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
basic_string<_CharT, _Traits, _Allocator>::__grow_by_without_replace(
    size_type __old_cap,
    size_type __delta_cap,
    size_type __old_sz,
    size_type __n_copy,
    size_type __n_del,
    size_type __n_add) {
#pragma GCC diagnostic push
# 2449 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 2449 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  __grow_by(__old_cap, __delta_cap, __old_sz, __n_copy, __n_del, __n_add);
#pragma GCC diagnostic pop
  __set_long_size(__old_sz - __n_del + __n_add);
  __annotate_new(__old_sz - __n_del + __n_add);
}



template <class _CharT, class _Traits, class _Allocator>
template <bool __is_short>
                              __attribute__((__noinline__)) basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::__assign_no_alias(const value_type* __s, size_type __n) {
  size_type __cap = __is_short ? static_cast<size_type>(__min_cap) : __get_long_cap();
  if (__n < __cap) {
    size_type __old_size = __is_short ? __get_short_size() : __get_long_size();
    if (__n > __old_size)
      __annotate_increase(__n - __old_size);
    pointer __p = __is_short ? __get_short_pointer() : __get_long_pointer();
    __is_short ? __set_short_size(__n) : __set_long_size(__n);
    traits_type::copy(std::__to_address(__p), __s, __n);
    traits_type::assign(__p[__n], value_type());
    if (__old_size > __n)
      __annotate_shrink(__old_size);
  } else {
    size_type __sz = __is_short ? __get_short_size() : __get_long_size();
    __grow_by_and_replace(__cap - 1, __n - __cap + 1, __sz, 0, __sz, __n, __s);
  }
  return *this;
}

template <class _CharT, class _Traits, class _Allocator>
                              __attribute__((__noinline__)) basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::__assign_external(const value_type* __s, size_type __n) {
  size_type __cap = capacity();
  if (__cap >= __n) {
    size_type __old_size = size();
    if (__n > __old_size)
      __annotate_increase(__n - __old_size);
    value_type* __p = std::__to_address(__get_pointer());
    traits_type::move(__p, __s, __n);
    return __null_terminate_at(__p, __n);
  } else {
    size_type __sz = size();
    __grow_by_and_replace(__cap, __n - __cap, __sz, 0, __sz, __n, __s);
    return *this;
  }
}

template <class _CharT, class _Traits, class _Allocator>
                              basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::assign(const value_type* __s, size_type __n) {
  ((void)0);
  return (__builtin_constant_p(__n) && __fits_in_sso(__n)) ? __assign_short(__s, __n) : __assign_external(__s, __n);
}

template <class _CharT, class _Traits, class _Allocator>
                              basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::assign(size_type __n, value_type __c) {
  size_type __cap = capacity();
  size_type __old_size = size();
  if (__cap < __n) {
    size_type __sz = size();
    __grow_by_without_replace(__cap, __n - __cap, __sz, 0, __sz);
    __annotate_increase(__n);
  } else if (__n > __old_size)
    __annotate_increase(__n - __old_size);
  value_type* __p = std::__to_address(__get_pointer());
  traits_type::assign(__p, __n, __c);
  return __null_terminate_at(__p, __n);
}

template <class _CharT, class _Traits, class _Allocator>
                              basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::operator=(value_type __c) {
  pointer __p;
  size_type __old_size = size();
  if (__old_size == 0)
    __annotate_increase(1);
  if (__is_long()) {
    __p = __get_long_pointer();
    __set_long_size(1);
  } else {
    __p = __get_short_pointer();
    __set_short_size(1);
  }
  traits_type::assign(*__p, __c);
  traits_type::assign(*++__p, value_type());
  if (__old_size > 1)
    __annotate_shrink(__old_size);
  return *this;
}

template <class _CharT, class _Traits, class _Allocator>
                                                                    basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::operator=(const basic_string& __str) {
  if (this != std::addressof(__str)) {
    __copy_assign_alloc(__str);
    if (!__is_long()) {
      if (!__str.__is_long()) {
        size_type __old_size = __get_short_size();
        if (__get_short_size() < __str.__get_short_size())
          __annotate_increase(__str.__get_short_size() - __get_short_size());
        __r_.first() = __str.__r_.first();
        if (__old_size > __get_short_size())
          __annotate_shrink(__old_size);
      } else {
        return __assign_no_alias<true>(__str.data(), __str.size());
      }
    } else {
      return __assign_no_alias<false>(__str.data(), __str.size());
    }
  }
  return *this;
}



template <class _CharT, class _Traits, class _Allocator>
inline void
basic_string<_CharT, _Traits, _Allocator>::__move_assign(basic_string& __str, false_type)
    noexcept(__alloc_traits::is_always_equal::value) {
  if (__alloc() != __str.__alloc())
    assign(__str);
  else
    __move_assign(__str, true_type());
}

template <class _CharT, class _Traits, class _Allocator>
inline void
basic_string<_CharT, _Traits, _Allocator>::__move_assign(basic_string& __str, true_type)

    noexcept



{
  __annotate_delete();
  if (__is_long()) {
    __alloc_traits::deallocate(__alloc(), __get_long_pointer(), __get_long_cap());







  }
  size_type __str_old_size = __str.size();
  bool __str_was_short = !__str.__is_long();

  __move_assign_alloc(__str);
  __r_.first() = __str.__r_.first();
  __str.__set_short_size(0);
  traits_type::assign(__str.__get_short_pointer()[0], value_type());

  if (__str_was_short && this != &__str)
    __str.__annotate_shrink(__str_old_size);
  else


    __str.__annotate_new(0);
# 2619 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string" 3
  if (!__is_long() && &__str != this)

    __annotate_new(__get_short_size());
}



template <class _CharT, class _Traits, class _Allocator>
template <class _InputIterator, __enable_if_t<__has_exactly_input_iterator_category<_InputIterator>::value, int> >
                              basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::assign(_InputIterator __first, _InputIterator __last) {
  __assign_with_sentinel(__first, __last);
  return *this;
}

template <class _CharT, class _Traits, class _Allocator>
template <class _InputIterator, class _Sentinel>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
basic_string<_CharT, _Traits, _Allocator>::__assign_with_sentinel(_InputIterator __first, _Sentinel __last) {
  const basic_string __temp(__init_with_sentinel_tag(), std::move(__first), std::move(__last), __alloc());
  assign(__temp.data(), __temp.size());
}

template <class _CharT, class _Traits, class _Allocator>
template <class _ForwardIterator, __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value, int> >
                              basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::assign(_ForwardIterator __first, _ForwardIterator __last) {
  if (__string_is_trivial_iterator<_ForwardIterator>::value) {
    size_type __n = static_cast<size_type>(std::distance(__first, __last));
    __assign_trivial(__first, __last, __n);
  } else {
    __assign_with_sentinel(__first, __last);
  }

  return *this;
}

template <class _CharT, class _Traits, class _Allocator>
template <class _Iterator, class _Sentinel>
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
basic_string<_CharT, _Traits, _Allocator>::__assign_trivial(_Iterator __first, _Sentinel __last, size_type __n) {
  ((void)0);


  size_type __old_size = size();
  size_type __cap = capacity();
  if (__cap < __n) {






    size_type __sz = size();
    __grow_by_without_replace(__cap, __n - __cap, __sz, 0, __sz);
    __annotate_increase(__n);
  } else if (__n > __old_size)
    __annotate_increase(__n - __old_size);
  pointer __p = __get_pointer();
  for (; __first != __last; ++__p, (void)++__first)
    traits_type::assign(*__p, *__first);
  traits_type::assign(*__p, value_type());
  __set_size(__n);
  if (__n < __old_size)
    __annotate_shrink(__old_size);
}

template <class _CharT, class _Traits, class _Allocator>
                              basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::assign(const basic_string& __str, size_type __pos, size_type __n) {
  size_type __sz = __str.size();
  if (__pos > __sz)
    __throw_out_of_range();
  return assign(__str.data() + __pos, std::min(__n, __sz - __pos));
}

template <class _CharT, class _Traits, class _Allocator>
template <class _Tp,
          __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value &&
                            !__is_same_uncvref<_Tp, basic_string<_CharT, _Traits, _Allocator> >::value,
                        int> >
                              basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::assign(const _Tp& __t, size_type __pos, size_type __n) {
  __self_view __sv = __t;
  size_type __sz = __sv.size();
  if (__pos > __sz)
    __throw_out_of_range();
  return assign(__sv.data() + __pos, std::min(__n, __sz - __pos));
}

template <class _CharT, class _Traits, class _Allocator>
                              __attribute__((__noinline__)) basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::__assign_external(const value_type* __s) {
  return __assign_external(__s, traits_type::length(__s));
}

template <class _CharT, class _Traits, class _Allocator>
                              basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::assign(const value_type* __s) {
  ((void)0);
  return __builtin_constant_p(*__s)
           ? (__fits_in_sso(traits_type::length(__s)) ? __assign_short(__s, traits_type::length(__s))
                                                      : __assign_external(__s, traits_type::length(__s)))
           : __assign_external(__s);
}


template <class _CharT, class _Traits, class _Allocator>
                              basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::append(const value_type* __s, size_type __n) {
  ((void)0);
  size_type __cap = capacity();
  size_type __sz = size();
  if (__cap - __sz >= __n) {
    if (__n) {
      __annotate_increase(__n);
      value_type* __p = std::__to_address(__get_pointer());
      traits_type::copy(__p + __sz, __s, __n);
      __sz += __n;
      __set_size(__sz);
      traits_type::assign(__p[__sz], value_type());
    }
  } else
    __grow_by_and_replace(__cap, __sz + __n - __cap, __sz, __sz, 0, __n, __s);
  return *this;
}

template <class _CharT, class _Traits, class _Allocator>
                              basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::append(size_type __n, value_type __c) {
  if (__n) {
    size_type __cap = capacity();
    size_type __sz = size();
    if (__cap - __sz < __n)
      __grow_by_without_replace(__cap, __sz + __n - __cap, __sz, __sz, 0);
    __annotate_increase(__n);
    pointer __p = __get_pointer();
    traits_type::assign(std::__to_address(__p) + __sz, __n, __c);
    __sz += __n;
    __set_size(__sz);
    traits_type::assign(__p[__sz], value_type());
  }
  return *this;
}

template <class _CharT, class _Traits, class _Allocator>
                              inline void
basic_string<_CharT, _Traits, _Allocator>::__append_default_init(size_type __n) {
  if (__n) {
    size_type __cap = capacity();
    size_type __sz = size();
    if (__cap - __sz < __n)
      __grow_by_without_replace(__cap, __sz + __n - __cap, __sz, __sz, 0);
    __annotate_increase(__n);
    pointer __p = __get_pointer();
    __sz += __n;
    __set_size(__sz);
    traits_type::assign(__p[__sz], value_type());
  }
}

template <class _CharT, class _Traits, class _Allocator>
                              void basic_string<_CharT, _Traits, _Allocator>::push_back(value_type __c) {
  bool __is_short = !__is_long();
  size_type __cap;
  size_type __sz;
  if (__is_short) {
    __cap = __min_cap - 1;
    __sz = __get_short_size();
  } else {
    __cap = __get_long_cap() - 1;
    __sz = __get_long_size();
  }
  if (__sz == __cap) {
    __grow_by_without_replace(__cap, 1, __sz, __sz, 0);
    __annotate_increase(1);
    __is_short = false;
  } else
    __annotate_increase(1);
  pointer __p = __get_pointer();
  if (__is_short) {
    __p = __get_short_pointer() + __sz;
    __set_short_size(__sz + 1);
  } else {
    __p = __get_long_pointer() + __sz;
    __set_long_size(__sz + 1);
  }
  traits_type::assign(*__p, __c);
  traits_type::assign(*++__p, value_type());
}

template <class _CharT, class _Traits, class _Allocator>
template <class _ForwardIterator, __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value, int> >
                              basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::append(_ForwardIterator __first, _ForwardIterator __last) {
  size_type __sz = size();
  size_type __cap = capacity();
  size_type __n = static_cast<size_type>(std::distance(__first, __last));
  if (__n) {
    if (__string_is_trivial_iterator<_ForwardIterator>::value && !__addr_in_range(*__first)) {
      if (__cap - __sz < __n)
        __grow_by_without_replace(__cap, __sz + __n - __cap, __sz, __sz, 0);
      __annotate_increase(__n);
      pointer __p = __get_pointer() + __sz;
      for (; __first != __last; ++__p, (void)++__first)
        traits_type::assign(*__p, *__first);
      traits_type::assign(*__p, value_type());
      __set_size(__sz + __n);
    } else {
      const basic_string __temp(__first, __last, __alloc());
      append(__temp.data(), __temp.size());
    }
  }
  return *this;
}

template <class _CharT, class _Traits, class _Allocator>
                              basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::append(const basic_string& __str, size_type __pos, size_type __n) {
  size_type __sz = __str.size();
  if (__pos > __sz)
    __throw_out_of_range();
  return append(__str.data() + __pos, std::min(__n, __sz - __pos));
}

template <class _CharT, class _Traits, class _Allocator>
template <class _Tp,
          __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value &&
                            !__is_same_uncvref<_Tp, basic_string<_CharT, _Traits, _Allocator> >::value,
                        int> >
                              basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::append(const _Tp& __t, size_type __pos, size_type __n) {
  __self_view __sv = __t;
  size_type __sz = __sv.size();
  if (__pos > __sz)
    __throw_out_of_range();
  return append(__sv.data() + __pos, std::min(__n, __sz - __pos));
}

template <class _CharT, class _Traits, class _Allocator>
                              basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::append(const value_type* __s) {
  ((void)0);
  return append(__s, traits_type::length(__s));
}



template <class _CharT, class _Traits, class _Allocator>
                              basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::insert(size_type __pos, const value_type* __s, size_type __n) {
  ((void)0);
  size_type __sz = size();
  if (__pos > __sz)
    __throw_out_of_range();
  size_type __cap = capacity();
  if (__cap - __sz >= __n) {
    if (__n) {
      __annotate_increase(__n);
      value_type* __p = std::__to_address(__get_pointer());
      size_type __n_move = __sz - __pos;
      if (__n_move != 0) {
        if (std::__is_pointer_in_range(__p + __pos, __p + __sz, __s))
          __s += __n;
        traits_type::move(__p + __pos + __n, __p + __pos, __n_move);
      }
      traits_type::move(__p + __pos, __s, __n);
      __sz += __n;
      __set_size(__sz);
      traits_type::assign(__p[__sz], value_type());
    }
  } else
    __grow_by_and_replace(__cap, __sz + __n - __cap, __sz, __pos, 0, __n, __s);
  return *this;
}

template <class _CharT, class _Traits, class _Allocator>
                              basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::insert(size_type __pos, size_type __n, value_type __c) {
  size_type __sz = size();
  if (__pos > __sz)
    __throw_out_of_range();
  if (__n) {
    size_type __cap = capacity();
    value_type* __p;
    if (__cap - __sz >= __n) {
      __annotate_increase(__n);
      __p = std::__to_address(__get_pointer());
      size_type __n_move = __sz - __pos;
      if (__n_move != 0)
        traits_type::move(__p + __pos + __n, __p + __pos, __n_move);
    } else {
      __grow_by_without_replace(__cap, __sz + __n - __cap, __sz, __pos, 0, __n);
      __p = std::__to_address(__get_long_pointer());
    }
    traits_type::assign(__p + __pos, __n, __c);
    __sz += __n;
    __set_size(__sz);
    traits_type::assign(__p[__sz], value_type());
  }
  return *this;
}

template <class _CharT, class _Traits, class _Allocator>
template <class _InputIterator, __enable_if_t<__has_exactly_input_iterator_category<_InputIterator>::value, int> >
                              typename basic_string<_CharT, _Traits, _Allocator>::iterator
basic_string<_CharT, _Traits, _Allocator>::insert(const_iterator __pos, _InputIterator __first, _InputIterator __last) {
  const basic_string __temp(__first, __last, __alloc());
  return insert(__pos, __temp.data(), __temp.data() + __temp.size());
}

template <class _CharT, class _Traits, class _Allocator>
template <class _ForwardIterator, __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value, int> >
                              typename basic_string<_CharT, _Traits, _Allocator>::iterator
basic_string<_CharT, _Traits, _Allocator>::insert(
    const_iterator __pos, _ForwardIterator __first, _ForwardIterator __last) {
  auto __n = static_cast<size_type>(std::distance(__first, __last));
  return __insert_with_size(__pos, __first, __last, __n);
}

template <class _CharT, class _Traits, class _Allocator>
template <class _Iterator, class _Sentinel>
                              typename basic_string<_CharT, _Traits, _Allocator>::iterator
basic_string<_CharT, _Traits, _Allocator>::__insert_with_size(
    const_iterator __pos, _Iterator __first, _Sentinel __last, size_type __n) {
  size_type __ip = static_cast<size_type>(__pos - begin());
  if (__n == 0)
    return begin() + __ip;

  if (__string_is_trivial_iterator<_Iterator>::value && !__addr_in_range(*__first)) {
    return __insert_from_safe_copy(__n, __ip, __first, __last);
  } else {
    const basic_string __temp(__init_with_sentinel_tag(), __first, __last, __alloc());
    return __insert_from_safe_copy(__n, __ip, __temp.begin(), __temp.end());
  }
}

template <class _CharT, class _Traits, class _Allocator>
                              basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::insert(
    size_type __pos1, const basic_string& __str, size_type __pos2, size_type __n) {
  size_type __str_sz = __str.size();
  if (__pos2 > __str_sz)
    __throw_out_of_range();
  return insert(__pos1, __str.data() + __pos2, std::min(__n, __str_sz - __pos2));
}

template <class _CharT, class _Traits, class _Allocator>
template <class _Tp,
          __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value &&
                            !__is_same_uncvref<_Tp, basic_string<_CharT, _Traits, _Allocator> >::value,
                        int> >
                              basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::insert(size_type __pos1, const _Tp& __t, size_type __pos2, size_type __n) {
  __self_view __sv = __t;
  size_type __str_sz = __sv.size();
  if (__pos2 > __str_sz)
    __throw_out_of_range();
  return insert(__pos1, __sv.data() + __pos2, std::min(__n, __str_sz - __pos2));
}

template <class _CharT, class _Traits, class _Allocator>
                              basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::insert(size_type __pos, const value_type* __s) {
  ((void)0);
  return insert(__pos, __s, traits_type::length(__s));
}

template <class _CharT, class _Traits, class _Allocator>
                              typename basic_string<_CharT, _Traits, _Allocator>::iterator
basic_string<_CharT, _Traits, _Allocator>::insert(const_iterator __pos, value_type __c) {
  size_type __ip = static_cast<size_type>(__pos - begin());
  size_type __sz = size();
  size_type __cap = capacity();
  value_type* __p;
  if (__cap == __sz) {
    __grow_by_without_replace(__cap, 1, __sz, __ip, 0, 1);
    __p = std::__to_address(__get_long_pointer());
  } else {
    __annotate_increase(1);
    __p = std::__to_address(__get_pointer());
    size_type __n_move = __sz - __ip;
    if (__n_move != 0)
      traits_type::move(__p + __ip + 1, __p + __ip, __n_move);
  }
  traits_type::assign(__p[__ip], __c);
  traits_type::assign(__p[++__sz], value_type());
  __set_size(__sz);
  return begin() + static_cast<difference_type>(__ip);
}



template <class _CharT, class _Traits, class _Allocator>
                              basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::replace(
    size_type __pos, size_type __n1, const value_type* __s, size_type __n2)
    __attribute__((__no_sanitize__("unsigned-integer-overflow"))) {
  ((void)0);
  size_type __sz = size();
  if (__pos > __sz)
    __throw_out_of_range();
  __n1 = std::min(__n1, __sz - __pos);
  size_type __cap = capacity();
  if (__cap - __sz + __n1 >= __n2) {
    value_type* __p = std::__to_address(__get_pointer());
    if (__n1 != __n2) {
      if (__n2 > __n1)
        __annotate_increase(__n2 - __n1);
      size_type __n_move = __sz - __pos - __n1;
      if (__n_move != 0) {
        if (__n1 > __n2) {
          traits_type::move(__p + __pos, __s, __n2);
          traits_type::move(__p + __pos + __n2, __p + __pos + __n1, __n_move);
          return __null_terminate_at(__p, __sz + (__n2 - __n1));
        }
        if (std::__is_pointer_in_range(__p + __pos + 1, __p + __sz, __s)) {
          if (__p + __pos + __n1 <= __s)
            __s += __n2 - __n1;
          else
          {
            traits_type::move(__p + __pos, __s, __n1);
            __pos += __n1;
            __s += __n2;
            __n2 -= __n1;
            __n1 = 0;
          }
        }
        traits_type::move(__p + __pos + __n2, __p + __pos + __n1, __n_move);
      }
    }
    traits_type::move(__p + __pos, __s, __n2);
    return __null_terminate_at(__p, __sz + (__n2 - __n1));
  } else
    __grow_by_and_replace(__cap, __sz - __n1 + __n2 - __cap, __sz, __pos, __n1, __n2, __s);
  return *this;
}

template <class _CharT, class _Traits, class _Allocator>
                              basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::replace(size_type __pos, size_type __n1, size_type __n2, value_type __c) {
  size_type __sz = size();
  if (__pos > __sz)
    __throw_out_of_range();
  __n1 = std::min(__n1, __sz - __pos);
  size_type __cap = capacity();
  value_type* __p;
  if (__cap - __sz + __n1 >= __n2) {
    __p = std::__to_address(__get_pointer());
    if (__n1 != __n2) {
      if (__n2 > __n1)
        __annotate_increase(__n2 - __n1);
      size_type __n_move = __sz - __pos - __n1;
      if (__n_move != 0)
        traits_type::move(__p + __pos + __n2, __p + __pos + __n1, __n_move);
    }
  } else {
    __grow_by_without_replace(__cap, __sz - __n1 + __n2 - __cap, __sz, __pos, __n1, __n2);
    __p = std::__to_address(__get_long_pointer());
  }
  traits_type::assign(__p + __pos, __n2, __c);
  return __null_terminate_at(__p, __sz - (__n1 - __n2));
}

template <class _CharT, class _Traits, class _Allocator>
template <class _InputIterator, __enable_if_t<__has_input_iterator_category<_InputIterator>::value, int> >
                              basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::replace(
    const_iterator __i1, const_iterator __i2, _InputIterator __j1, _InputIterator __j2) {
  const basic_string __temp(__j1, __j2, __alloc());
  return replace(__i1, __i2, __temp);
}

template <class _CharT, class _Traits, class _Allocator>
                              basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::replace(
    size_type __pos1, size_type __n1, const basic_string& __str, size_type __pos2, size_type __n2) {
  size_type __str_sz = __str.size();
  if (__pos2 > __str_sz)
    __throw_out_of_range();
  return replace(__pos1, __n1, __str.data() + __pos2, std::min(__n2, __str_sz - __pos2));
}

template <class _CharT, class _Traits, class _Allocator>
template <class _Tp,
          __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value &&
                            !__is_same_uncvref<_Tp, basic_string<_CharT, _Traits, _Allocator> >::value,
                        int> >
                              basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::replace(
    size_type __pos1, size_type __n1, const _Tp& __t, size_type __pos2, size_type __n2) {
  __self_view __sv = __t;
  size_type __str_sz = __sv.size();
  if (__pos2 > __str_sz)
    __throw_out_of_range();
  return replace(__pos1, __n1, __sv.data() + __pos2, std::min(__n2, __str_sz - __pos2));
}

template <class _CharT, class _Traits, class _Allocator>
                              basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::replace(size_type __pos, size_type __n1, const value_type* __s) {
  ((void)0);
  return replace(__pos, __n1, __s, traits_type::length(__s));
}





template <class _CharT, class _Traits, class _Allocator>
                              __attribute__((__noinline__)) void
basic_string<_CharT, _Traits, _Allocator>::__erase_external_with_move(size_type __pos, size_type __n) {
  if (__n) {
    size_type __sz = size();
    value_type* __p = std::__to_address(__get_pointer());
    __n = std::min(__n, __sz - __pos);
    size_type __n_move = __sz - __pos - __n;
    if (__n_move != 0)
      traits_type::move(__p + __pos, __p + __pos + __n, __n_move);
    __null_terminate_at(__p, __sz - __n);
  }
}

template <class _CharT, class _Traits, class _Allocator>
                              basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::erase(size_type __pos, size_type __n) {
  if (__pos > size())
    __throw_out_of_range();
  if (__n == npos) {
    __erase_to_end(__pos);
  } else {
    __erase_external_with_move(__pos, __n);
  }
  return *this;
}

template <class _CharT, class _Traits, class _Allocator>
inline typename basic_string<_CharT, _Traits, _Allocator>::iterator
basic_string<_CharT, _Traits, _Allocator>::erase(const_iterator __pos) {
  ((void)0);

  iterator __b = begin();
  size_type __r = static_cast<size_type>(__pos - __b);
  erase(__r, 1);
  return __b + static_cast<difference_type>(__r);
}

template <class _CharT, class _Traits, class _Allocator>
inline typename basic_string<_CharT, _Traits, _Allocator>::iterator
basic_string<_CharT, _Traits, _Allocator>::erase(const_iterator __first, const_iterator __last) {
  ((void)0);
  iterator __b = begin();
  size_type __r = static_cast<size_type>(__first - __b);
  erase(__r, static_cast<size_type>(__last - __first));
  return __b + static_cast<difference_type>(__r);
}

template <class _CharT, class _Traits, class _Allocator>
inline void basic_string<_CharT, _Traits, _Allocator>::pop_back() {
  ((void)0);
  __erase_to_end(size() - 1);
}

template <class _CharT, class _Traits, class _Allocator>
inline void basic_string<_CharT, _Traits, _Allocator>::clear() noexcept {
  size_type __old_size = size();
  if (__is_long()) {
    traits_type::assign(*__get_long_pointer(), value_type());
    __set_long_size(0);
  } else {
    traits_type::assign(*__get_short_pointer(), value_type());
    __set_short_size(0);
  }
  __annotate_shrink(__old_size);
}

template <class _CharT, class _Traits, class _Allocator>
                              void basic_string<_CharT, _Traits, _Allocator>::resize(size_type __n, value_type __c) {
  size_type __sz = size();
  if (__n > __sz)
    append(__n - __sz, __c);
  else
    __erase_to_end(__n);
}

template <class _CharT, class _Traits, class _Allocator>
                              inline void
basic_string<_CharT, _Traits, _Allocator>::__resize_default_init(size_type __n) {
  size_type __sz = size();
  if (__n > __sz) {
    __append_default_init(__n - __sz);
  } else
    __erase_to_end(__n);
}

template <class _CharT, class _Traits, class _Allocator>
                              void basic_string<_CharT, _Traits, _Allocator>::reserve(size_type __requested_capacity) {
  if (__requested_capacity > max_size())
    __throw_length_error();




  if (__requested_capacity <= capacity())
    return;

  size_type __target_capacity = std::max(__requested_capacity, size());
  __target_capacity = __recommend(__target_capacity);
  if (__target_capacity == capacity())
    return;

  __shrink_or_extend(__target_capacity);
}

template <class _CharT, class _Traits, class _Allocator>
inline void basic_string<_CharT, _Traits, _Allocator>::shrink_to_fit() noexcept {
  size_type __target_capacity = __recommend(size());
  if (__target_capacity == capacity())
    return;

  __shrink_or_extend(__target_capacity);
}

template <class _CharT, class _Traits, class _Allocator>
inline void
basic_string<_CharT, _Traits, _Allocator>::__shrink_or_extend(size_type __target_capacity) {
  __annotate_delete();
  size_type __cap = capacity();
  size_type __sz = size();

  pointer __new_data, __p;
  bool __was_long, __now_long;
  if (__fits_in_sso(__target_capacity)) {
    __was_long = true;
    __now_long = false;
    __new_data = __get_short_pointer();
    __p = __get_long_pointer();
  } else {
    if (__target_capacity > __cap) {
      auto __allocation = std::__allocate_at_least(__alloc(), __target_capacity + 1);
      __new_data = __allocation.ptr;
      __target_capacity = __allocation.count - 1;
    } else {



        auto __allocation = std::__allocate_at_least(__alloc(), __target_capacity + 1);
        __new_data = __allocation.ptr;
        __target_capacity = __allocation.count - 1;





      if (__new_data == nullptr)
        return;

    }
    __begin_lifetime(__new_data, __target_capacity + 1);
    __now_long = true;
    __was_long = __is_long();
    __p = __get_pointer();
  }
  traits_type::copy(std::__to_address(__new_data), std::__to_address(__p), size() + 1);
  if (__was_long)
    __alloc_traits::deallocate(__alloc(), __p, __cap + 1);
  if (__now_long) {
    __set_long_cap(__target_capacity + 1);
    __set_long_size(__sz);
    __set_long_pointer(__new_data);
  } else
    __set_short_size(__sz);
  __annotate_new(__sz);
}

template <class _CharT, class _Traits, class _Allocator>
                              typename basic_string<_CharT, _Traits, _Allocator>::const_reference
basic_string<_CharT, _Traits, _Allocator>::at(size_type __n) const {
  if (__n >= size())
    __throw_out_of_range();
  return (*this)[__n];
}

template <class _CharT, class _Traits, class _Allocator>
                              typename basic_string<_CharT, _Traits, _Allocator>::reference
basic_string<_CharT, _Traits, _Allocator>::at(size_type __n) {
  if (__n >= size())
    __throw_out_of_range();
  return (*this)[__n];
}

template <class _CharT, class _Traits, class _Allocator>
                              typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::copy(value_type* __s, size_type __n, size_type __pos) const {
  size_type __sz = size();
  if (__pos > __sz)
    __throw_out_of_range();
  size_type __rlen = std::min(__n, __sz - __pos);
  traits_type::copy(__s, data() + __pos, __rlen);
  return __rlen;
}

template <class _CharT, class _Traits, class _Allocator>
inline void basic_string<_CharT, _Traits, _Allocator>::swap(basic_string& __str)

    noexcept



{
  ((void)0);



  if (!__is_long())
    __annotate_delete();
  if (this != &__str && !__str.__is_long())
    __str.__annotate_delete();
  std::swap(__r_.first(), __str.__r_.first());
  std::__swap_allocator(__alloc(), __str.__alloc());
  if (!__is_long())
    __annotate_new(__get_short_size());
  if (this != &__str && !__str.__is_long())
    __str.__annotate_new(__str.__get_short_size());
}



template <class _Traits>
struct __attribute__((__visibility__("hidden"))) __traits_eq {
  typedef typename _Traits::char_type char_type;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator()(const char_type& __x, const char_type& __y) noexcept {
    return _Traits::eq(__x, __y);
  }
};

template <class _CharT, class _Traits, class _Allocator>
                              typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::find(const value_type* __s, size_type __pos, size_type __n) const noexcept {
  ((void)0);
  return std::__str_find<value_type, size_type, traits_type, npos>(data(), size(), __s, __pos, __n);
}

template <class _CharT, class _Traits, class _Allocator>
inline typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::find(const basic_string& __str, size_type __pos) const noexcept {
  return std::__str_find<value_type, size_type, traits_type, npos>(data(), size(), __str.data(), __pos, __str.size());
}

template <class _CharT, class _Traits, class _Allocator>
template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> >
                              typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::find(const _Tp& __t, size_type __pos) const noexcept {
  __self_view __sv = __t;
  return std::__str_find<value_type, size_type, traits_type, npos>(data(), size(), __sv.data(), __pos, __sv.size());
}

template <class _CharT, class _Traits, class _Allocator>
inline typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::find(const value_type* __s, size_type __pos) const noexcept {
  ((void)0);
  return std::__str_find<value_type, size_type, traits_type, npos>(
      data(), size(), __s, __pos, traits_type::length(__s));
}

template <class _CharT, class _Traits, class _Allocator>
                              typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::find(value_type __c, size_type __pos) const noexcept {
  return std::__str_find<value_type, size_type, traits_type, npos>(data(), size(), __c, __pos);
}



template <class _CharT, class _Traits, class _Allocator>
                              typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::rfind(
    const value_type* __s, size_type __pos, size_type __n) const noexcept {
  ((void)0);
  return std::__str_rfind<value_type, size_type, traits_type, npos>(data(), size(), __s, __pos, __n);
}

template <class _CharT, class _Traits, class _Allocator>
inline typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::rfind(const basic_string& __str, size_type __pos) const noexcept {
  return std::__str_rfind<value_type, size_type, traits_type, npos>(data(), size(), __str.data(), __pos, __str.size());
}

template <class _CharT, class _Traits, class _Allocator>
template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> >
                              typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::rfind(const _Tp& __t, size_type __pos) const noexcept {
  __self_view __sv = __t;
  return std::__str_rfind<value_type, size_type, traits_type, npos>(data(), size(), __sv.data(), __pos, __sv.size());
}

template <class _CharT, class _Traits, class _Allocator>
inline typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::rfind(const value_type* __s, size_type __pos) const noexcept {
  ((void)0);
  return std::__str_rfind<value_type, size_type, traits_type, npos>(
      data(), size(), __s, __pos, traits_type::length(__s));
}

template <class _CharT, class _Traits, class _Allocator>
                              typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::rfind(value_type __c, size_type __pos) const noexcept {
  return std::__str_rfind<value_type, size_type, traits_type, npos>(data(), size(), __c, __pos);
}



template <class _CharT, class _Traits, class _Allocator>
                              typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::find_first_of(
    const value_type* __s, size_type __pos, size_type __n) const noexcept {
  ((void)0);
  return std::__str_find_first_of<value_type, size_type, traits_type, npos>(data(), size(), __s, __pos, __n);
}

template <class _CharT, class _Traits, class _Allocator>
inline typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::find_first_of(const basic_string& __str, size_type __pos) const noexcept {
  return std::__str_find_first_of<value_type, size_type, traits_type, npos>(
      data(), size(), __str.data(), __pos, __str.size());
}

template <class _CharT, class _Traits, class _Allocator>
template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> >
                              typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::find_first_of(const _Tp& __t, size_type __pos) const noexcept {
  __self_view __sv = __t;
  return std::__str_find_first_of<value_type, size_type, traits_type, npos>(
      data(), size(), __sv.data(), __pos, __sv.size());
}

template <class _CharT, class _Traits, class _Allocator>
inline typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::find_first_of(const value_type* __s, size_type __pos) const noexcept {
  ((void)0);
  return std::__str_find_first_of<value_type, size_type, traits_type, npos>(
      data(), size(), __s, __pos, traits_type::length(__s));
}

template <class _CharT, class _Traits, class _Allocator>
inline typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::find_first_of(value_type __c, size_type __pos) const noexcept {
  return find(__c, __pos);
}



template <class _CharT, class _Traits, class _Allocator>
inline typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::find_last_of(
    const value_type* __s, size_type __pos, size_type __n) const noexcept {
  ((void)0);
  return std::__str_find_last_of<value_type, size_type, traits_type, npos>(data(), size(), __s, __pos, __n);
}

template <class _CharT, class _Traits, class _Allocator>
inline typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::find_last_of(const basic_string& __str, size_type __pos) const noexcept {
  return std::__str_find_last_of<value_type, size_type, traits_type, npos>(
      data(), size(), __str.data(), __pos, __str.size());
}

template <class _CharT, class _Traits, class _Allocator>
template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> >
                              typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::find_last_of(const _Tp& __t, size_type __pos) const noexcept {
  __self_view __sv = __t;
  return std::__str_find_last_of<value_type, size_type, traits_type, npos>(
      data(), size(), __sv.data(), __pos, __sv.size());
}

template <class _CharT, class _Traits, class _Allocator>
inline typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::find_last_of(const value_type* __s, size_type __pos) const noexcept {
  ((void)0);
  return std::__str_find_last_of<value_type, size_type, traits_type, npos>(
      data(), size(), __s, __pos, traits_type::length(__s));
}

template <class _CharT, class _Traits, class _Allocator>
inline typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::find_last_of(value_type __c, size_type __pos) const noexcept {
  return rfind(__c, __pos);
}



template <class _CharT, class _Traits, class _Allocator>
                              typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::find_first_not_of(
    const value_type* __s, size_type __pos, size_type __n) const noexcept {
  ((void)0);
  return std::__str_find_first_not_of<value_type, size_type, traits_type, npos>(data(), size(), __s, __pos, __n);
}

template <class _CharT, class _Traits, class _Allocator>
inline typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::find_first_not_of(
    const basic_string& __str, size_type __pos) const noexcept {
  return std::__str_find_first_not_of<value_type, size_type, traits_type, npos>(
      data(), size(), __str.data(), __pos, __str.size());
}

template <class _CharT, class _Traits, class _Allocator>
template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> >
                              typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::find_first_not_of(const _Tp& __t, size_type __pos) const noexcept {
  __self_view __sv = __t;
  return std::__str_find_first_not_of<value_type, size_type, traits_type, npos>(
      data(), size(), __sv.data(), __pos, __sv.size());
}

template <class _CharT, class _Traits, class _Allocator>
inline typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::find_first_not_of(const value_type* __s, size_type __pos) const noexcept {
  ((void)0);
  return std::__str_find_first_not_of<value_type, size_type, traits_type, npos>(
      data(), size(), __s, __pos, traits_type::length(__s));
}

template <class _CharT, class _Traits, class _Allocator>
inline typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::find_first_not_of(value_type __c, size_type __pos) const noexcept {
  return std::__str_find_first_not_of<value_type, size_type, traits_type, npos>(data(), size(), __c, __pos);
}



template <class _CharT, class _Traits, class _Allocator>
                              typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::find_last_not_of(
    const value_type* __s, size_type __pos, size_type __n) const noexcept {
  ((void)0);
  return std::__str_find_last_not_of<value_type, size_type, traits_type, npos>(data(), size(), __s, __pos, __n);
}

template <class _CharT, class _Traits, class _Allocator>
inline typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::find_last_not_of(
    const basic_string& __str, size_type __pos) const noexcept {
  return std::__str_find_last_not_of<value_type, size_type, traits_type, npos>(
      data(), size(), __str.data(), __pos, __str.size());
}

template <class _CharT, class _Traits, class _Allocator>
template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> >
                              typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::find_last_not_of(const _Tp& __t, size_type __pos) const noexcept {
  __self_view __sv = __t;
  return std::__str_find_last_not_of<value_type, size_type, traits_type, npos>(
      data(), size(), __sv.data(), __pos, __sv.size());
}

template <class _CharT, class _Traits, class _Allocator>
inline typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::find_last_not_of(const value_type* __s, size_type __pos) const noexcept {
  ((void)0);
  return std::__str_find_last_not_of<value_type, size_type, traits_type, npos>(
      data(), size(), __s, __pos, traits_type::length(__s));
}

template <class _CharT, class _Traits, class _Allocator>
inline typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::find_last_not_of(value_type __c, size_type __pos) const noexcept {
  return std::__str_find_last_not_of<value_type, size_type, traits_type, npos>(data(), size(), __c, __pos);
}



template <class _CharT, class _Traits, class _Allocator>
template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> >
                              int basic_string<_CharT, _Traits, _Allocator>::compare(const _Tp& __t) const noexcept {
  __self_view __sv = __t;
  size_t __lhs_sz = size();
  size_t __rhs_sz = __sv.size();
  int __result = traits_type::compare(data(), __sv.data(), std::min(__lhs_sz, __rhs_sz));
  if (__result != 0)
    return __result;
  if (__lhs_sz < __rhs_sz)
    return -1;
  if (__lhs_sz > __rhs_sz)
    return 1;
  return 0;
}

template <class _CharT, class _Traits, class _Allocator>
inline int
basic_string<_CharT, _Traits, _Allocator>::compare(const basic_string& __str) const noexcept {
  return compare(__self_view(__str));
}

template <class _CharT, class _Traits, class _Allocator>
inline int basic_string<_CharT, _Traits, _Allocator>::compare(
    size_type __pos1, size_type __n1, const value_type* __s, size_type __n2) const {
  ((void)0);
  size_type __sz = size();
  if (__pos1 > __sz || __n2 == npos)
    __throw_out_of_range();
  size_type __rlen = std::min(__n1, __sz - __pos1);
  int __r = traits_type::compare(data() + __pos1, __s, std::min(__rlen, __n2));
  if (__r == 0) {
    if (__rlen < __n2)
      __r = -1;
    else if (__rlen > __n2)
      __r = 1;
  }
  return __r;
}

template <class _CharT, class _Traits, class _Allocator>
template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> >
                              int
basic_string<_CharT, _Traits, _Allocator>::compare(size_type __pos1, size_type __n1, const _Tp& __t) const {
  __self_view __sv = __t;
  return compare(__pos1, __n1, __sv.data(), __sv.size());
}

template <class _CharT, class _Traits, class _Allocator>
inline int
basic_string<_CharT, _Traits, _Allocator>::compare(size_type __pos1, size_type __n1, const basic_string& __str) const {
  return compare(__pos1, __n1, __str.data(), __str.size());
}

template <class _CharT, class _Traits, class _Allocator>
template <class _Tp,
          __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value &&
                            !__is_same_uncvref<_Tp, basic_string<_CharT, _Traits, _Allocator> >::value,
                        int> >
                              int basic_string<_CharT, _Traits, _Allocator>::compare(
    size_type __pos1, size_type __n1, const _Tp& __t, size_type __pos2, size_type __n2) const {
  __self_view __sv = __t;
  return __self_view(*this).substr(__pos1, __n1).compare(__sv.substr(__pos2, __n2));
}

template <class _CharT, class _Traits, class _Allocator>
                              int basic_string<_CharT, _Traits, _Allocator>::compare(
    size_type __pos1, size_type __n1, const basic_string& __str, size_type __pos2, size_type __n2) const {
  return compare(__pos1, __n1, __self_view(__str), __pos2, __n2);
}

template <class _CharT, class _Traits, class _Allocator>
                              int
basic_string<_CharT, _Traits, _Allocator>::compare(const value_type* __s) const noexcept {
  ((void)0);
  return compare(0, npos, __s, traits_type::length(__s));
}

template <class _CharT, class _Traits, class _Allocator>
                              int
basic_string<_CharT, _Traits, _Allocator>::compare(size_type __pos1, size_type __n1, const value_type* __s) const {
  ((void)0);
  return compare(__pos1, __n1, __s, traits_type::length(__s));
}



template <class _CharT, class _Traits, class _Allocator>
inline bool basic_string<_CharT, _Traits, _Allocator>::__invariants() const {
  if (size() > capacity())
    return false;
  if (capacity() < __min_cap - 1)
    return false;
  if (data() == nullptr)
    return false;
  if (!_Traits::eq(data()[size()], value_type()))
    return false;
  return true;
}



template <class _CharT, class _Traits, class _Allocator>
inline void basic_string<_CharT, _Traits, _Allocator>::__clear_and_shrink() noexcept {
  clear();
  if (__is_long()) {
    __annotate_delete();
    __alloc_traits::deallocate(__alloc(), __get_long_pointer(), capacity() + 1);
    __r_.first() = __rep();
  }
}



template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
operator==(const basic_string<_CharT, _Traits, _Allocator>& __lhs,
           const basic_string<_CharT, _Traits, _Allocator>& __rhs) noexcept {



  size_t __lhs_sz = __lhs.size();
  return __lhs_sz == __rhs.size() && _Traits::compare(__lhs.data(), __rhs.data(), __lhs_sz) == 0;

}

template <class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
operator==(const basic_string<char, char_traits<char>, _Allocator>& __lhs,
           const basic_string<char, char_traits<char>, _Allocator>& __rhs) noexcept {
  size_t __lhs_sz = __lhs.size();
  if (__lhs_sz != __rhs.size())
    return false;
  const char* __lp = __lhs.data();
  const char* __rp = __rhs.data();
  if (__lhs.__is_long())
    return char_traits<char>::compare(__lp, __rp, __lhs_sz) == 0;
  for (; __lhs_sz != 0; --__lhs_sz, ++__lp, ++__rp)
    if (*__lp != *__rp)
      return false;
  return true;
}


template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
operator==(const _CharT* __lhs, const basic_string<_CharT, _Traits, _Allocator>& __rhs) noexcept {
  typedef basic_string<_CharT, _Traits, _Allocator> _String;
  ((void)0);
  size_t __lhs_len = _Traits::length(__lhs);
  if (__lhs_len != __rhs.size())
    return false;
  return __rhs.compare(0, _String::npos, __lhs, __lhs_len) == 0;
}


template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
operator==(const basic_string<_CharT, _Traits, _Allocator>& __lhs, const _CharT* __rhs) noexcept {



  typedef basic_string<_CharT, _Traits, _Allocator> _String;
  ((void)0);
  size_t __rhs_len = _Traits::length(__rhs);
  if (__rhs_len != __lhs.size())
    return false;
  return __lhs.compare(0, _String::npos, __rhs, __rhs_len) == 0;

}
# 3779 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string" 3
template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator!=(const basic_string<_CharT, _Traits, _Allocator>& __lhs,
                                             const basic_string<_CharT, _Traits, _Allocator>& __rhs) noexcept {
  return !(__lhs == __rhs);
}

template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
operator!=(const _CharT* __lhs, const basic_string<_CharT, _Traits, _Allocator>& __rhs) noexcept {
  return !(__lhs == __rhs);
}

template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
operator!=(const basic_string<_CharT, _Traits, _Allocator>& __lhs, const _CharT* __rhs) noexcept {
  return !(__lhs == __rhs);
}



template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator<(const basic_string<_CharT, _Traits, _Allocator>& __lhs,
                                            const basic_string<_CharT, _Traits, _Allocator>& __rhs) noexcept {
  return __lhs.compare(__rhs) < 0;
}

template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
operator<(const basic_string<_CharT, _Traits, _Allocator>& __lhs, const _CharT* __rhs) noexcept {
  return __lhs.compare(__rhs) < 0;
}

template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
operator<(const _CharT* __lhs, const basic_string<_CharT, _Traits, _Allocator>& __rhs) noexcept {
  return __rhs.compare(__lhs) > 0;
}



template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator>(const basic_string<_CharT, _Traits, _Allocator>& __lhs,
                                            const basic_string<_CharT, _Traits, _Allocator>& __rhs) noexcept {
  return __rhs < __lhs;
}

template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
operator>(const basic_string<_CharT, _Traits, _Allocator>& __lhs, const _CharT* __rhs) noexcept {
  return __rhs < __lhs;
}

template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
operator>(const _CharT* __lhs, const basic_string<_CharT, _Traits, _Allocator>& __rhs) noexcept {
  return __rhs < __lhs;
}



template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator<=(const basic_string<_CharT, _Traits, _Allocator>& __lhs,
                                             const basic_string<_CharT, _Traits, _Allocator>& __rhs) noexcept {
  return !(__rhs < __lhs);
}

template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
operator<=(const basic_string<_CharT, _Traits, _Allocator>& __lhs, const _CharT* __rhs) noexcept {
  return !(__rhs < __lhs);
}

template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
operator<=(const _CharT* __lhs, const basic_string<_CharT, _Traits, _Allocator>& __rhs) noexcept {
  return !(__rhs < __lhs);
}



template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator>=(const basic_string<_CharT, _Traits, _Allocator>& __lhs,
                                             const basic_string<_CharT, _Traits, _Allocator>& __rhs) noexcept {
  return !(__lhs < __rhs);
}

template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
operator>=(const basic_string<_CharT, _Traits, _Allocator>& __lhs, const _CharT* __rhs) noexcept {
  return !(__lhs < __rhs);
}

template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
operator>=(const _CharT* __lhs, const basic_string<_CharT, _Traits, _Allocator>& __rhs) noexcept {
  return !(__lhs < __rhs);
}




template <class _CharT, class _Traits, class _Allocator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string<_CharT, _Traits, _Allocator>
operator+(const basic_string<_CharT, _Traits, _Allocator>& __lhs,
          const basic_string<_CharT, _Traits, _Allocator>& __rhs) {
  using _String = basic_string<_CharT, _Traits, _Allocator>;
  auto __lhs_sz = __lhs.size();
  auto __rhs_sz = __rhs.size();
  _String __r(__uninitialized_size_tag(),
              __lhs_sz + __rhs_sz,
              _String::__alloc_traits::select_on_container_copy_construction(__lhs.get_allocator()));
  auto __ptr = std::__to_address(__r.__get_pointer());
  _Traits::copy(__ptr, __lhs.data(), __lhs_sz);
  _Traits::copy(__ptr + __lhs_sz, __rhs.data(), __rhs_sz);
  _Traits::assign(__ptr + __lhs_sz + __rhs_sz, 1, _CharT());
  return __r;
}

template <class _CharT, class _Traits, class _Allocator>
__attribute__((__visibility__("hidden"))) basic_string<_CharT, _Traits, _Allocator>
operator+(const _CharT* __lhs, const basic_string<_CharT, _Traits, _Allocator>& __rhs) {
  using _String = basic_string<_CharT, _Traits, _Allocator>;
  auto __lhs_sz = _Traits::length(__lhs);
  auto __rhs_sz = __rhs.size();
  _String __r(__uninitialized_size_tag(),
              __lhs_sz + __rhs_sz,
              _String::__alloc_traits::select_on_container_copy_construction(__rhs.get_allocator()));
  auto __ptr = std::__to_address(__r.__get_pointer());
  _Traits::copy(__ptr, __lhs, __lhs_sz);
  _Traits::copy(__ptr + __lhs_sz, __rhs.data(), __rhs_sz);
  _Traits::assign(__ptr + __lhs_sz + __rhs_sz, 1, _CharT());
  return __r;
}

template <class _CharT, class _Traits, class _Allocator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string<_CharT, _Traits, _Allocator>
operator+(_CharT __lhs, const basic_string<_CharT, _Traits, _Allocator>& __rhs) {
  using _String = basic_string<_CharT, _Traits, _Allocator>;
  typename _String::size_type __rhs_sz = __rhs.size();
  _String __r(__uninitialized_size_tag(),
              __rhs_sz + 1,
              _String::__alloc_traits::select_on_container_copy_construction(__rhs.get_allocator()));
  auto __ptr = std::__to_address(__r.__get_pointer());
  _Traits::assign(__ptr, 1, __lhs);
  _Traits::copy(__ptr + 1, __rhs.data(), __rhs_sz);
  _Traits::assign(__ptr + 1 + __rhs_sz, 1, _CharT());
  return __r;
}

template <class _CharT, class _Traits, class _Allocator>
inline basic_string<_CharT, _Traits, _Allocator>
operator+(const basic_string<_CharT, _Traits, _Allocator>& __lhs, const _CharT* __rhs) {
  using _String = basic_string<_CharT, _Traits, _Allocator>;
  typename _String::size_type __lhs_sz = __lhs.size();
  typename _String::size_type __rhs_sz = _Traits::length(__rhs);
  _String __r(__uninitialized_size_tag(),
              __lhs_sz + __rhs_sz,
              _String::__alloc_traits::select_on_container_copy_construction(__lhs.get_allocator()));
  auto __ptr = std::__to_address(__r.__get_pointer());
  _Traits::copy(__ptr, __lhs.data(), __lhs_sz);
  _Traits::copy(__ptr + __lhs_sz, __rhs, __rhs_sz);
  _Traits::assign(__ptr + __lhs_sz + __rhs_sz, 1, _CharT());
  return __r;
}

template <class _CharT, class _Traits, class _Allocator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string<_CharT, _Traits, _Allocator>
operator+(const basic_string<_CharT, _Traits, _Allocator>& __lhs, _CharT __rhs) {
  using _String = basic_string<_CharT, _Traits, _Allocator>;
  typename _String::size_type __lhs_sz = __lhs.size();
  _String __r(__uninitialized_size_tag(),
              __lhs_sz + 1,
              _String::__alloc_traits::select_on_container_copy_construction(__lhs.get_allocator()));
  auto __ptr = std::__to_address(__r.__get_pointer());
  _Traits::copy(__ptr, __lhs.data(), __lhs_sz);
  _Traits::assign(__ptr + __lhs_sz, 1, __rhs);
  _Traits::assign(__ptr + 1 + __lhs_sz, 1, _CharT());
  return __r;
}



template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string<_CharT, _Traits, _Allocator>
operator+(basic_string<_CharT, _Traits, _Allocator>&& __lhs, const basic_string<_CharT, _Traits, _Allocator>& __rhs) {
  return std::move(__lhs.append(__rhs));
}

template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string<_CharT, _Traits, _Allocator>
operator+(const basic_string<_CharT, _Traits, _Allocator>& __lhs, basic_string<_CharT, _Traits, _Allocator>&& __rhs) {
  return std::move(__rhs.insert(0, __lhs));
}

template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string<_CharT, _Traits, _Allocator>
operator+(basic_string<_CharT, _Traits, _Allocator>&& __lhs, basic_string<_CharT, _Traits, _Allocator>&& __rhs) {
  return std::move(__lhs.append(__rhs));
}

template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string<_CharT, _Traits, _Allocator>
operator+(const _CharT* __lhs, basic_string<_CharT, _Traits, _Allocator>&& __rhs) {
  return std::move(__rhs.insert(0, __lhs));
}

template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string<_CharT, _Traits, _Allocator>
operator+(_CharT __lhs, basic_string<_CharT, _Traits, _Allocator>&& __rhs) {
  __rhs.insert(__rhs.begin(), __lhs);
  return std::move(__rhs);
}

template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string<_CharT, _Traits, _Allocator>
operator+(basic_string<_CharT, _Traits, _Allocator>&& __lhs, const _CharT* __rhs) {
  return std::move(__lhs.append(__rhs));
}

template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string<_CharT, _Traits, _Allocator>
operator+(basic_string<_CharT, _Traits, _Allocator>&& __lhs, _CharT __rhs) {
  __lhs.push_back(__rhs);
  return std::move(__lhs);
}





template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
swap(basic_string<_CharT, _Traits, _Allocator>& __lhs, basic_string<_CharT, _Traits, _Allocator>& __rhs)
    noexcept(noexcept(__lhs.swap(__rhs))) {
  __lhs.swap(__rhs);
}

__attribute__((__visibility__("default"))) int stoi(const string& __str, size_t* __idx = nullptr, int __base = 10);
__attribute__((__visibility__("default"))) long stol(const string& __str, size_t* __idx = nullptr, int __base = 10);
__attribute__((__visibility__("default"))) unsigned long stoul(const string& __str, size_t* __idx = nullptr, int __base = 10);
__attribute__((__visibility__("default"))) long long stoll(const string& __str, size_t* __idx = nullptr, int __base = 10);
__attribute__((__visibility__("default"))) unsigned long long stoull(const string& __str, size_t* __idx = nullptr, int __base = 10);

__attribute__((__visibility__("default"))) __attribute__((pcs("aapcs"))) float stof (const string& __str, size_t* __idx = nullptr);
__attribute__((__visibility__("default"))) __attribute__((pcs("aapcs"))) double stod (const string& __str, size_t* __idx = nullptr);
__attribute__((__visibility__("default"))) __attribute__((pcs("aapcs"))) long double stold(const string& __str, size_t* __idx = nullptr);

__attribute__((__visibility__("default"))) string to_string(int __val);
__attribute__((__visibility__("default"))) string to_string(unsigned __val);
__attribute__((__visibility__("default"))) string to_string(long __val);
__attribute__((__visibility__("default"))) string to_string(unsigned long __val);
__attribute__((__visibility__("default"))) string to_string(long long __val);
__attribute__((__visibility__("default"))) string to_string(unsigned long long __val);
__attribute__((__visibility__("default"))) __attribute__((pcs("aapcs"))) string to_string(float __val);
__attribute__((__visibility__("default"))) __attribute__((pcs("aapcs"))) string to_string(double __val);
__attribute__((__visibility__("default"))) __attribute__((pcs("aapcs"))) string to_string(long double __val);


__attribute__((__visibility__("default"))) int stoi(const wstring& __str, size_t* __idx = nullptr, int __base = 10);
__attribute__((__visibility__("default"))) long stol(const wstring& __str, size_t* __idx = nullptr, int __base = 10);
__attribute__((__visibility__("default"))) unsigned long stoul(const wstring& __str, size_t* __idx = nullptr, int __base = 10);
__attribute__((__visibility__("default"))) long long stoll(const wstring& __str, size_t* __idx = nullptr, int __base = 10);
__attribute__((__visibility__("default"))) unsigned long long stoull(const wstring& __str, size_t* __idx = nullptr, int __base = 10);

__attribute__((__visibility__("default"))) __attribute__((pcs("aapcs"))) float stof (const wstring& __str, size_t* __idx = nullptr);
__attribute__((__visibility__("default"))) __attribute__((pcs("aapcs"))) double stod (const wstring& __str, size_t* __idx = nullptr);
__attribute__((__visibility__("default"))) __attribute__((pcs("aapcs"))) long double stold(const wstring& __str, size_t* __idx = nullptr);

__attribute__((__visibility__("default"))) wstring to_wstring(int __val);
__attribute__((__visibility__("default"))) wstring to_wstring(unsigned __val);
__attribute__((__visibility__("default"))) wstring to_wstring(long __val);
__attribute__((__visibility__("default"))) wstring to_wstring(unsigned long __val);
__attribute__((__visibility__("default"))) wstring to_wstring(long long __val);
__attribute__((__visibility__("default"))) wstring to_wstring(unsigned long long __val);
__attribute__((__visibility__("default"))) __attribute__((pcs("aapcs"))) wstring to_wstring(float __val);
__attribute__((__visibility__("default"))) __attribute__((pcs("aapcs"))) wstring to_wstring(double __val);
__attribute__((__visibility__("default"))) __attribute__((pcs("aapcs"))) wstring to_wstring(long double __val);


template <class _CharT, class _Traits, class _Allocator>
__attribute__((__visibility__("default"))) const typename basic_string<_CharT, _Traits, _Allocator>::size_type
    basic_string<_CharT, _Traits, _Allocator>::npos;

template <class _CharT, class _Allocator>
struct __string_hash : public __unary_function<basic_string<_CharT, char_traits<_CharT>, _Allocator>, size_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_t
  operator()(const basic_string<_CharT, char_traits<_CharT>, _Allocator>& __val) const noexcept {
    return std::__do_string_hash(__val.data(), __val.data() + __val.size());
  }
};

template <class _Allocator>
struct hash<basic_string<char, char_traits<char>, _Allocator> > : __string_hash<char, _Allocator> {};






template <class _Allocator>
struct hash<basic_string<char16_t, char_traits<char16_t>, _Allocator> > : __string_hash<char16_t, _Allocator> {};

template <class _Allocator>
struct hash<basic_string<char32_t, char_traits<char32_t>, _Allocator> > : __string_hash<char32_t, _Allocator> {};


template <class _Allocator>
struct hash<basic_string<wchar_t, char_traits<wchar_t>, _Allocator> > : __string_hash<wchar_t, _Allocator> {};


template <class _CharT, class _Traits, class _Allocator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_ostream<_CharT, _Traits>&
operator<<(basic_ostream<_CharT, _Traits>& __os, const basic_string<_CharT, _Traits, _Allocator>& __str);

template <class _CharT, class _Traits, class _Allocator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_istream<_CharT, _Traits>&
operator>>(basic_istream<_CharT, _Traits>& __is, basic_string<_CharT, _Traits, _Allocator>& __str);

template <class _CharT, class _Traits, class _Allocator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_istream<_CharT, _Traits>&
getline(basic_istream<_CharT, _Traits>& __is, basic_string<_CharT, _Traits, _Allocator>& __str, _CharT __dlm);

template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_istream<_CharT, _Traits>&
getline(basic_istream<_CharT, _Traits>& __is, basic_string<_CharT, _Traits, _Allocator>& __str);

template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_istream<_CharT, _Traits>&
getline(basic_istream<_CharT, _Traits>&& __is, basic_string<_CharT, _Traits, _Allocator>& __str, _CharT __dlm);

template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_istream<_CharT, _Traits>&
getline(basic_istream<_CharT, _Traits>&& __is, basic_string<_CharT, _Traits, _Allocator>& __str);
# 4133 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string" 3
inline namespace literals {
inline namespace string_literals {
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string<char>
operator""s(const char* __str, size_t __len) {
  return basic_string<char>(__str, __len);
}


inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string<wchar_t>
operator""s(const wchar_t* __str, size_t __len) {
  return basic_string<wchar_t>(__str, __len);
}
# 4153 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string" 3
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string<char16_t>
operator""s(const char16_t* __str, size_t __len) {
  return basic_string<char16_t>(__str, __len);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_string<char32_t>
operator""s(const char32_t* __str, size_t __len) {
  return basic_string<char32_t>(__str, __len);
}
}
}
# 4176 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\string" 3
}}
# 40 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/parser_std_format_spec.h" 2 3
# 44 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/parser_std_format_spec.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 48 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/parser_std_format_spec.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 1171 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/parser_std_format_spec.h" 3
}}
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/formatter_output.h" 2 3
# 36 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/formatter_output.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 40 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/formatter_output.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 329 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/formatter_output.h" 3
}}
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/formatter_integral.h" 2 3







# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\array" 1 3
# 160 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\array" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 164 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\array" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp, size_t _Size>
struct array {

  using __self = array;
  using value_type = _Tp;
  using reference = value_type&;
  using const_reference = const value_type&;
  using iterator = value_type*;
  using const_iterator = const value_type*;
  using pointer = value_type*;
  using const_pointer = const value_type*;
  using size_type = size_t;
  using difference_type = ptrdiff_t;
  using reverse_iterator = std::reverse_iterator<iterator>;
  using const_reverse_iterator = std::reverse_iterator<const_iterator>;

  _Tp __elems_[_Size];


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void fill(const value_type& __u) {
    std::fill_n(data(), _Size, __u);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void swap(array& __a)
      noexcept(__is_nothrow_swappable<_Tp>::value) {
    std::swap_ranges(data(), data() + _Size, __a.data());
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr iterator begin() noexcept { return iterator(data()); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const_iterator begin() const noexcept {
    return const_iterator(data());
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr iterator end() noexcept { return iterator(data() + _Size); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const_iterator end() const noexcept {
    return const_iterator(data() + _Size);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr reverse_iterator rbegin() noexcept {
    return reverse_iterator(end());
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const_reverse_iterator rbegin() const noexcept {
    return const_reverse_iterator(end());
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr reverse_iterator rend() noexcept {
    return reverse_iterator(begin());
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const_reverse_iterator rend() const noexcept {
    return const_reverse_iterator(begin());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const_iterator cbegin() const noexcept { return begin(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const_iterator cend() const noexcept { return end(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const_reverse_iterator crbegin() const noexcept {
    return rbegin();
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const_reverse_iterator crend() const noexcept { return rend(); }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr size_type size() const noexcept { return _Size; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr size_type max_size() const noexcept { return _Size; }
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool empty() const noexcept {
    return _Size == 0;
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr reference operator[](size_type __n) noexcept {
    ((void)0);
    return __elems_[__n];
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const_reference operator[](size_type __n) const noexcept {
    ((void)0);
    return __elems_[__n];
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr reference at(size_type __n) {
    if (__n >= _Size)
      __throw_out_of_range("array::at");
    return __elems_[__n];
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const_reference at(size_type __n) const {
    if (__n >= _Size)
      __throw_out_of_range("array::at");
    return __elems_[__n];
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr reference front() noexcept { return (*this)[0]; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const_reference front() const noexcept { return (*this)[0]; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr reference back() noexcept { return (*this)[_Size - 1]; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const_reference back() const noexcept {
    return (*this)[_Size - 1];
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr value_type* data() noexcept { return __elems_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const value_type* data() const noexcept { return __elems_; }
};

template <class _Tp>
struct array<_Tp, 0> {

  typedef array __self;
  typedef _Tp value_type;
  typedef value_type& reference;
  typedef const value_type& const_reference;
  typedef value_type* iterator;
  typedef const value_type* const_iterator;
  typedef value_type* pointer;
  typedef const value_type* const_pointer;
  typedef size_t size_type;
  typedef ptrdiff_t difference_type;
  typedef std::reverse_iterator<iterator> reverse_iterator;
  typedef std::reverse_iterator<const_iterator> const_reverse_iterator;

  typedef __conditional_t<is_const<_Tp>::value, const __empty, __empty> _EmptyType;

  struct _ArrayInStructT {
    _Tp __data_[1];
  };
  alignas(_ArrayInStructT) _EmptyType __elems_[sizeof(_ArrayInStructT)];

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr value_type* data() noexcept { return nullptr; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const value_type* data() const noexcept { return nullptr; }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void fill(const value_type&) {
    static_assert(!is_const<_Tp>::value, "cannot fill zero-sized array of type 'const T'");
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void swap(array&) noexcept {
    static_assert(!is_const<_Tp>::value, "cannot swap zero-sized array of type 'const T'");
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr iterator begin() noexcept { return iterator(data()); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const_iterator begin() const noexcept {
    return const_iterator(data());
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr iterator end() noexcept { return iterator(data()); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const_iterator end() const noexcept {
    return const_iterator(data());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr reverse_iterator rbegin() noexcept {
    return reverse_iterator(end());
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const_reverse_iterator rbegin() const noexcept {
    return const_reverse_iterator(end());
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr reverse_iterator rend() noexcept {
    return reverse_iterator(begin());
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const_reverse_iterator rend() const noexcept {
    return const_reverse_iterator(begin());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const_iterator cbegin() const noexcept { return begin(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const_iterator cend() const noexcept { return end(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const_reverse_iterator crbegin() const noexcept {
    return rbegin();
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const_reverse_iterator crend() const noexcept { return rend(); }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr size_type size() const noexcept { return 0; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr size_type max_size() const noexcept { return 0; }
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr bool empty() const noexcept { return true; }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr reference operator[](size_type) noexcept {
    ((void)0);
    __libcpp_unreachable();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const_reference operator[](size_type) const noexcept {
    ((void)0);
    __libcpp_unreachable();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr reference at(size_type) {
    __throw_out_of_range("array<T, 0>::at");
    __libcpp_unreachable();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const_reference at(size_type) const {
    __throw_out_of_range("array<T, 0>::at");
    __libcpp_unreachable();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr reference front() noexcept {
    ((void)0);
    __libcpp_unreachable();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const_reference front() const noexcept {
    ((void)0);
    __libcpp_unreachable();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr reference back() noexcept {
    ((void)0);
    __libcpp_unreachable();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const_reference back() const noexcept {
    ((void)0);
    __libcpp_unreachable();
  }
};


template <class _Tp, class... _Args, class = enable_if_t<__all<_IsSame<_Tp, _Args>::value...>::value> >
array(_Tp, _Args...) -> array<_Tp, 1 + sizeof...(_Args)>;


template <class _Tp, size_t _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
operator==(const array<_Tp, _Size>& __x, const array<_Tp, _Size>& __y) {
  return std::equal(__x.begin(), __x.end(), __y.begin());
}



template <class _Tp, size_t _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator!=(const array<_Tp, _Size>& __x, const array<_Tp, _Size>& __y) {
  return !(__x == __y);
}

template <class _Tp, size_t _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator<(const array<_Tp, _Size>& __x, const array<_Tp, _Size>& __y) {
  return std::lexicographical_compare(__x.begin(), __x.end(), __y.begin(), __y.end());
}

template <class _Tp, size_t _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator>(const array<_Tp, _Size>& __x, const array<_Tp, _Size>& __y) {
  return __y < __x;
}

template <class _Tp, size_t _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator<=(const array<_Tp, _Size>& __x, const array<_Tp, _Size>& __y) {
  return !(__y < __x);
}

template <class _Tp, size_t _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator>=(const array<_Tp, _Size>& __x, const array<_Tp, _Size>& __y) {
  return !(__x < __y);
}
# 426 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\array" 3
template <class _Tp, size_t _Size, __enable_if_t<_Size == 0 || __is_swappable<_Tp>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void swap(array<_Tp, _Size>& __x, array<_Tp, _Size>& __y)
    noexcept(noexcept(__x.swap(__y))) {
  __x.swap(__y);
}

template <class _Tp, size_t _Size>
struct tuple_size<array<_Tp, _Size> > : public integral_constant<size_t, _Size> {};

template <size_t _Ip, class _Tp, size_t _Size>
struct tuple_element<_Ip, array<_Tp, _Size> > {
  static_assert(_Ip < _Size, "Index out of bounds in std::tuple_element<> (std::array)");
  typedef _Tp type;
};

template <size_t _Ip, class _Tp, size_t _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Tp& get(array<_Tp, _Size>& __a) noexcept {
  static_assert(_Ip < _Size, "Index out of bounds in std::get<> (std::array)");
  return __a.__elems_[_Ip];
}

template <size_t _Ip, class _Tp, size_t _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const _Tp& get(const array<_Tp, _Size>& __a) noexcept {
  static_assert(_Ip < _Size, "Index out of bounds in std::get<> (const std::array)");
  return __a.__elems_[_Ip];
}

template <size_t _Ip, class _Tp, size_t _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr _Tp&& get(array<_Tp, _Size>&& __a) noexcept {
  static_assert(_Ip < _Size, "Index out of bounds in std::get<> (std::array &&)");
  return std::move(__a.__elems_[_Ip]);
}

template <size_t _Ip, class _Tp, size_t _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr const _Tp&& get(const array<_Tp, _Size>&& __a) noexcept {
  static_assert(_Ip < _Size, "Index out of bounds in std::get<> (const std::array &&)");
  return std::move(__a.__elems_[_Ip]);
}
# 497 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\array" 3
}}
# 30 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/formatter_integral.h" 2 3





# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__locale" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__locale" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__locale_dir/locale_base_api.h" 1 3
# 26 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__locale_dir/locale_base_api.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__locale_dir/locale_base_api/arm.h" 1 3
# 10 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__locale_dir/locale_base_api/arm.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\clocale" 1 3
# 40 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\clocale" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\locale.h" 1 3
# 44 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\locale.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\locale.h" 1 3
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\locale.h" 3
      namespace std {

          extern "C" {
# 65 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\locale.h" 3
extern __attribute__((__nothrow__)) char *setlocale(int , const char * );
# 97 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\locale.h" 3
extern __attribute__((__nothrow__)) char *_setlocale_r(char * , int , const char * );
# 114 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\locale.h" 3
struct lconv {
  char *decimal_point;

  char *thousands_sep;


  char *grouping;


  char *int_curr_symbol;







  char *currency_symbol;

  char *mon_decimal_point;

  char *mon_thousands_sep;


  char *mon_grouping;


  char *positive_sign;


  char *negative_sign;


  char int_frac_digits;



  char frac_digits;


  char p_cs_precedes;


  char p_sep_by_space;



  char n_cs_precedes;


  char n_sep_by_space;



  char p_sign_posn;


  char n_sign_posn;
# 203 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\locale.h" 3
    union {
        char __int_p_cs_precedes;

        char int_p_cs_precedes;

    };
    union {
        char __int_n_cs_precedes;

        char int_n_cs_precedes;

    };
    union {
        char __int_p_sep_by_space;

        char int_p_sep_by_space;

    };
    union {
        char __int_n_sep_by_space;

        char int_n_sep_by_space;

    };
    union {
        char __int_p_sign_posn;

        char int_p_sign_posn;

    };
    union {
        char __int_n_sign_posn;

        char int_n_sign_posn;

    };
};




extern __attribute__((__nothrow__)) struct lconv *localeconv(void);
# 264 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\locale.h" 3
extern __attribute__((__nothrow__)) void _get_lconv(struct lconv * ) __attribute__((__nonnull__(1)));
# 278 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\locale.h" 3
struct __aeabi_lconv {
    char *decimal_point;
    char *thousands_sep;
    char *grouping;
    char *int_curr_symbol;
    char *currency_symbol;
    char *mon_decimal_point;
    char *mon_thousands_sep;
    char *mon_grouping;
    char *positive_sign;
    char *negative_sign;
    char int_frac_digits;
    char frac_digits;
    char p_cs_precedes;
    char p_sep_by_space;
    char n_cs_precedes;
    char n_sep_by_space;
    char p_sign_posn;
    char n_sign_posn;


    union {
        char __int_p_cs_precedes;

        char int_p_cs_precedes;

    };
    union {
        char __int_n_cs_precedes;

        char int_n_cs_precedes;

    };
    union {
        char __int_p_sep_by_space;

        char int_p_sep_by_space;

    };
    union {
        char __int_n_sep_by_space;

        char int_n_sep_by_space;

    };
    union {
        char __int_p_sign_posn;

        char int_p_sign_posn;

    };
    union {
        char __int_n_sign_posn;

        char int_n_sign_posn;

    };
};




extern __attribute__((__nothrow__)) struct __aeabi_lconv *__aeabi_localeconv(void);
extern __attribute__((__nothrow__)) void _get_aeabi_lconv(struct __aeabi_lconv * ) __attribute__((__nonnull__(1)));





         }
      }
# 358 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\locale.h" 3
      using ::std::setlocale;
      using ::std::_setlocale_r;
      using ::std::lconv;
      using ::std::localeconv;
      using ::std::_get_lconv;
      using ::std::__aeabi_lconv;
      using ::std::__aeabi_localeconv;
      using ::std::_get_aeabi_lconv;
# 48 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\locale.h" 2 3
# 41 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\clocale" 2 3
# 52 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\clocale" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

using ::lconv __attribute__((__using_if_exists__));
using ::setlocale __attribute__((__using_if_exists__));
using ::localeconv __attribute__((__using_if_exists__));

}}
# 11 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__locale_dir/locale_base_api/arm.h" 2 3

typedef void* locale_t;


typedef void *locale_t;
static inline locale_t duplocale(locale_t) {
  return 0;
}

static inline void freelocale(locale_t) {
}

static inline locale_t newlocale(int, const char *, locale_t) {
  return 0;
}

static inline locale_t uselocale(locale_t) {
  return 0;
}
# 50 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__locale_dir/locale_base_api/arm.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\wchar.h" 1 3
# 51 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__locale_dir/locale_base_api/arm.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__support/xlocale/__posix_l_fallback.h" 1 3
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__support/xlocale/__posix_l_fallback.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\wchar.h" 1 3
# 25 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__support/xlocale/__posix_l_fallback.h" 2 3




extern "C" {


inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) int isalnum_l(int __c, locale_t) { return ::isalnum(__c); }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) int isalpha_l(int __c, locale_t) { return ::isalpha(__c); }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) int isblank_l(int __c, locale_t) { return ::isblank(__c); }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) int iscntrl_l(int __c, locale_t) { return ::iscntrl(__c); }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) int isdigit_l(int __c, locale_t) { return ::isdigit(__c); }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) int isgraph_l(int __c, locale_t) { return ::isgraph(__c); }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) int islower_l(int __c, locale_t) { return ::islower(__c); }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) int isprint_l(int __c, locale_t) { return ::isprint(__c); }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) int ispunct_l(int __c, locale_t) { return ::ispunct(__c); }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) int isspace_l(int __c, locale_t) { return ::isspace(__c); }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) int isupper_l(int __c, locale_t) { return ::isupper(__c); }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) int isxdigit_l(int __c, locale_t) { return ::isxdigit(__c); }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) int toupper_l(int __c, locale_t) { return ::toupper(__c); }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) int tolower_l(int __c, locale_t) { return ::tolower(__c); }


inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) int iswalnum_l(wint_t __c, locale_t) { return ::iswalnum(__c); }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) int iswalpha_l(wint_t __c, locale_t) { return ::iswalpha(__c); }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) int iswblank_l(wint_t __c, locale_t) { return ::iswblank(__c); }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) int iswcntrl_l(wint_t __c, locale_t) { return ::iswcntrl(__c); }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) int iswdigit_l(wint_t __c, locale_t) { return ::iswdigit(__c); }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) int iswgraph_l(wint_t __c, locale_t) { return ::iswgraph(__c); }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) int iswlower_l(wint_t __c, locale_t) { return ::iswlower(__c); }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) int iswprint_l(wint_t __c, locale_t) { return ::iswprint(__c); }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) int iswpunct_l(wint_t __c, locale_t) { return ::iswpunct(__c); }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) int iswspace_l(wint_t __c, locale_t) { return ::iswspace(__c); }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) int iswupper_l(wint_t __c, locale_t) { return ::iswupper(__c); }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) int iswxdigit_l(wint_t __c, locale_t) { return ::iswxdigit(__c); }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) wint_t towupper_l(wint_t __c, locale_t) { return ::towupper(__c); }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) wint_t towlower_l(wint_t __c, locale_t) { return ::towlower(__c); }


inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) int strcoll_l(const char* __s1, const char* __s2, locale_t) {
  return ::strcoll(__s1, __s2);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) size_t strxfrm_l(char* __dest, const char* __src, size_t __n, locale_t) {
  return ::strxfrm(__dest, __src, __n);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) size_t
strftime_l(char* __s, size_t __max, const char* __format, const struct tm* __tm, locale_t) {
  return ::strftime(__s, __max, __format, __tm);
}


inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) int wcscoll_l(const wchar_t* __ws1, const wchar_t* __ws2, locale_t) {
  return ::wcscoll(__ws1, __ws2);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) size_t wcsxfrm_l(wchar_t* __dest, const wchar_t* __src, size_t __n, locale_t) {
  return ::wcsxfrm(__dest, __src, __n);
}



}
# 52 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__locale_dir/locale_base_api/arm.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__support/xlocale/__strtonum_fallback.h" 1 3
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__support/xlocale/__strtonum_fallback.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\stdlib.h" 1 3
# 21 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__support/xlocale/__strtonum_fallback.h" 2 3


# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\wchar.h" 1 3
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__support/xlocale/__strtonum_fallback.h" 2 3



extern "C" {


inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((pcs("aapcs"))) float
strtof_l(const char *__nptr, char **__endptr, locale_t) {
  return ::strtof(__nptr, __endptr);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((pcs("aapcs"))) double
strtod_l(const char *__nptr, char **__endptr, locale_t) {
  return ::strtod(__nptr, __endptr);
}


inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((pcs("aapcs"))) long double
strtold_l(const char *__nptr, char **__endptr, locale_t) {
  return ::strtold(__nptr, __endptr);
}


inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) long long strtoll_l(const char* __nptr, char** __endptr, int __base, locale_t) {
  return ::strtoll(__nptr, __endptr, __base);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) unsigned long long
strtoull_l(const char* __nptr, char** __endptr, int __base, locale_t) {
  return ::strtoull(__nptr, __endptr, __base);
}


inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) long long wcstoll_l(const wchar_t* __nptr, wchar_t** __endptr, int __base, locale_t) {
  return ::wcstoll(__nptr, __endptr, __base);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) unsigned long long
wcstoull_l(const wchar_t* __nptr, wchar_t** __endptr, int __base, locale_t) {
  return ::wcstoull(__nptr, __endptr, __base);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) long double wcstold_l(const wchar_t* __nptr, wchar_t** __endptr, locale_t) {
  return ::wcstold(__nptr, __endptr);
}



}
# 53 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__locale_dir/locale_base_api/arm.h" 2 3
# 27 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__locale_dir/locale_base_api.h" 2 3
# 37 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__locale_dir/locale_base_api.h" 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__locale" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__mutex/once_flag.h" 1 3
# 26 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__mutex/once_flag.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 30 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__mutex/once_flag.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

struct once_flag;



template <class _Callable, class... _Args>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void call_once(once_flag&, _Callable&&, _Args&&...);
# 50 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__mutex/once_flag.h" 3
struct once_flag {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr once_flag() noexcept : __state_(_Unset) {}
  once_flag(const once_flag&) = delete;
  once_flag& operator=(const once_flag&) = delete;




  typedef unsigned long _State_type;


  static const _State_type _Unset = 0;
  static const _State_type _Pending = 1;
  static const _State_type _Complete = ~_State_type(0);

private:
  _State_type __state_;


  template <class _Callable, class... _Args>
  friend void call_once(once_flag&, _Callable&&, _Args&&...);







};



template <class _Fp>
class __call_once_param {
  _Fp& __f_;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit __call_once_param(_Fp& __f) : __f_(__f) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void operator()() {
    typedef typename __make_tuple_indices<tuple_size<_Fp>::value, 1>::type _Index;
    __execute(_Index());
  }

private:
  template <size_t... _Indices>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __execute(__tuple_indices<_Indices...>) {
    std::__invoke(std::get<0>(std::move(__f_)), std::get<_Indices>(std::move(__f_))...);
  }
};
# 115 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__mutex/once_flag.h" 3
template <class _Fp>
void __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __call_once_proxy(void* __vp) {
  __call_once_param<_Fp>* __p = static_cast<__call_once_param<_Fp>*>(__vp);
  (*__p)();
}

__attribute__((__visibility__("default"))) void __call_once(volatile once_flag::_State_type&, void*, void (*)(void*));



template <class _Callable, class... _Args>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void call_once(once_flag& __flag, _Callable&& __func, _Args&&... __args) {
  if (__libcpp_acquire_load(&__flag.__state_) != once_flag::_Complete) {
    typedef tuple<_Callable&&, _Args&&...> _Gp;
    _Gp __f(std::forward<_Callable>(__func), std::forward<_Args>(__args)...);
    __call_once_param<_Gp> __p(__f);
    std::__call_once(__flag.__state_, &__p, &__call_once_proxy<_Gp>);
  }
}
# 155 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__mutex/once_flag.h" 3
}}
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__locale" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/no_destroy.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__utility/no_destroy.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

struct __uninitialized_tag {};







template <class _Tp>
struct __no_destroy {
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit __no_destroy(__uninitialized_tag) : __dummy_() {
    if (__libcpp_is_constant_evaluated()) {
      __dummy_ = char();
    }
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) ~__no_destroy() {

  }

  template <class... _Args>
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit __no_destroy(_Args&&... __args)
      : __obj_(std::forward<_Args>(__args)...) {}

  template <class... _Args>
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp& __emplace(_Args&&... __args) {
    new (&__obj_) _Tp(std::forward<_Args>(__args)...);
    return __obj_;
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp& __get() { return __obj_; }
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp const& __get() const { return __obj_; }

private:
  union {
    _Tp __obj_;
    char __dummy_;
  };
};

}}
# 21 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__locale" 2 3
# 39 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__locale" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

class __attribute__((__visibility__("default"))) locale;

template <class _Facet>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool has_facet(const locale&) noexcept;

template <class _Facet>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const _Facet& use_facet(const locale&);

class __attribute__((__visibility__("default"))) locale {
public:

  class __attribute__((__visibility__("default"))) facet;
  class __attribute__((__visibility__("default"))) id;

  typedef int category;

  static const category
      none = 0,
      collate = (1), ctype = (2), monetary = (4), numeric = (8),
      time = (16),

        messages = 0,



      all = collate | ctype | monetary | numeric | time | messages;


  locale() noexcept;
  locale(const locale&) noexcept;
  explicit locale(const char*);
  explicit locale(const string&);
  locale(const locale&, const char*, category);
  locale(const locale&, const string&, category);
  template <class _Facet>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) locale(const locale&, _Facet*);
  locale(const locale&, const locale&, category);

  ~locale();

  const locale& operator=(const locale&) noexcept;

  template <class _Facet>
  inline __attribute__((__visibility__("hidden"))) locale combine(const locale&) const;


  string name() const;
  bool operator==(const locale&) const;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator!=(const locale& __y) const { return !(*this == __y); }

  template <class _CharT, class _Traits, class _Allocator>
  inline __attribute__((__visibility__("hidden"))) bool
  operator()(const basic_string<_CharT, _Traits, _Allocator>&, const basic_string<_CharT, _Traits, _Allocator>&) const;


  static locale global(const locale&);
  static const locale& classic();

private:
  class __imp;
  __imp* __locale_;

  template <class>
  friend struct __no_destroy;
  struct __private_tag {};
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit locale(__private_tag, __imp* __loc) : __locale_(__loc) {}

  void __install_ctor(const locale&, facet*, long);
  static locale& __global();
  bool has_facet(id&) const;
  const facet* use_facet(id&) const;

  template <class _Facet>
  friend bool has_facet(const locale&) noexcept;
  template <class _Facet>
  friend const _Facet& use_facet(const locale&);
};

class __attribute__((__visibility__("default"))) locale::facet : public __shared_count {
protected:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit facet(size_t __refs = 0) : __shared_count(static_cast<long>(__refs) - 1) {}

  ~facet() override;




private:
  void __on_zero_shared() noexcept override;
};

class __attribute__((__visibility__("default"))) locale::id {
  once_flag __flag_;
  int32_t __id_;

  static int32_t __next_id;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr id() : __id_(0) {}
  void operator=(const id&) = delete;
  id(const id&) = delete;

public:
  long __get();

  friend class locale;
  friend class locale::__imp;
};

template <class _Facet>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) locale::locale(const locale& __other, _Facet* __f) {
  __install_ctor(__other, __f, __f ? __f->id.__get() : 0);
}

template <class _Facet>
locale locale::combine(const locale& __other) const {
  if (!std::has_facet<_Facet>(__other))
    __throw_runtime_error("locale::combine: locale missing facet");

  return locale(*this, &const_cast<_Facet&>(std::use_facet<_Facet>(__other)));
}

template <class _Facet>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool has_facet(const locale& __l) noexcept {
  return __l.has_facet(_Facet::id);
}

template <class _Facet>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const _Facet& use_facet(const locale& __l) {
  return static_cast<const _Facet&>(*__l.use_facet(_Facet::id));
}



template <class _CharT>
class collate : public locale::facet {
public:
  typedef _CharT char_type;
  typedef basic_string<char_type> string_type;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit collate(size_t __refs = 0) : locale::facet(__refs) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) int
  compare(const char_type* __lo1, const char_type* __hi1, const char_type* __lo2, const char_type* __hi2) const {
    return do_compare(__lo1, __hi1, __lo2, __hi2);
  }



  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__always_inline__)) string_type
  transform(const char_type* __lo, const char_type* __hi) const {
    return do_transform(__lo, __hi);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long hash(const char_type* __lo, const char_type* __hi) const { return do_hash(__lo, __hi); }

  static locale::id id;

protected:
  ~collate() override;
  virtual int
  do_compare(const char_type* __lo1, const char_type* __hi1, const char_type* __lo2, const char_type* __hi2) const;
  virtual string_type do_transform(const char_type* __lo, const char_type* __hi) const {
    return string_type(__lo, __hi);
  }
  virtual long do_hash(const char_type* __lo, const char_type* __hi) const;
};

template <class _CharT>
locale::id collate<_CharT>::id;

template <class _CharT>
collate<_CharT>::~collate() {}

template <class _CharT>
int collate<_CharT>::do_compare(
    const char_type* __lo1, const char_type* __hi1, const char_type* __lo2, const char_type* __hi2) const {
  for (; __lo2 != __hi2; ++__lo1, ++__lo2) {
    if (__lo1 == __hi1 || *__lo1 < *__lo2)
      return -1;
    if (*__lo2 < *__lo1)
      return 1;
  }
  return __lo1 != __hi1;
}

template <class _CharT>
long collate<_CharT>::do_hash(const char_type* __lo, const char_type* __hi) const {
  size_t __h = 0;
  const size_t __sr = 8 * sizeof(size_t) - 8;
  const size_t __mask = size_t(0xF) << (__sr + 4);
  for (const char_type* __p = __lo; __p != __hi; ++__p) {
    __h = (__h << 4) + static_cast<size_t>(*__p);
    size_t __g = __h & __mask;
    __h ^= __g | (__g >> __sr);
  }
  return static_cast<long>(__h);
}

extern template class __attribute__((__visibility__("default"))) collate<char>;

extern template class __attribute__((__visibility__("default"))) collate<wchar_t>;




template <class _CharT>
class collate_byname;

template <>
class __attribute__((__visibility__("default"))) collate_byname<char> : public collate<char> {
  locale_t __l_;

public:
  typedef char char_type;
  typedef basic_string<char_type> string_type;

  explicit collate_byname(const char* __n, size_t __refs = 0);
  explicit collate_byname(const string& __n, size_t __refs = 0);

protected:
  ~collate_byname() override;
  int do_compare(
      const char_type* __lo1, const char_type* __hi1, const char_type* __lo2, const char_type* __hi2) const override;
  string_type do_transform(const char_type* __lo, const char_type* __hi) const override;
};


template <>
class __attribute__((__visibility__("default"))) collate_byname<wchar_t> : public collate<wchar_t> {
  locale_t __l_;

public:
  typedef wchar_t char_type;
  typedef basic_string<char_type> string_type;

  explicit collate_byname(const char* __n, size_t __refs = 0);
  explicit collate_byname(const string& __n, size_t __refs = 0);

protected:
  ~collate_byname() override;

  int do_compare(
      const char_type* __lo1, const char_type* __hi1, const char_type* __lo2, const char_type* __hi2) const override;
  string_type do_transform(const char_type* __lo, const char_type* __hi) const override;
};


template <class _CharT, class _Traits, class _Allocator>
bool locale::operator()(const basic_string<_CharT, _Traits, _Allocator>& __x,
                        const basic_string<_CharT, _Traits, _Allocator>& __y) const {
  return std::use_facet<std::collate<_CharT> >(*this).compare(
             __x.data(), __x.data() + __x.size(), __y.data(), __y.data() + __y.size()) < 0;
}



class __attribute__((__visibility__("default"))) ctype_base {
public:

  typedef unsigned long mask;
  static const mask space = 1 << 0;
  static const mask print = 1 << 1;
  static const mask cntrl = 1 << 2;
  static const mask upper = 1 << 3;
  static const mask lower = 1 << 4;
  static const mask alpha = 1 << 5;
  static const mask digit = 1 << 6;
  static const mask punct = 1 << 7;
  static const mask xdigit = 1 << 8;
  static const mask blank = 1 << 9;





  static const mask __regex_word = 1 << 10;
# 444 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__locale" 3
  static const mask alnum = alpha | digit;
  static const mask graph = alnum | punct;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) ctype_base() {}

  static_assert((__regex_word & ~(std::make_unsigned<mask>::type)(space | print | cntrl | upper | lower | alpha |
                                                                  digit | punct | xdigit | blank)) == __regex_word,
                "__regex_word can't overlap other bits");
};

template <class _CharT>
class ctype;


template <>
class __attribute__((__visibility__("default"))) ctype<wchar_t> : public locale::facet, public ctype_base {
public:
  typedef wchar_t char_type;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit ctype(size_t __refs = 0) : locale::facet(__refs) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool is(mask __m, char_type __c) const { return do_is(__m, __c); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const char_type* is(const char_type* __low, const char_type* __high, mask* __vec) const {
    return do_is(__low, __high, __vec);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const char_type* scan_is(mask __m, const char_type* __low, const char_type* __high) const {
    return do_scan_is(__m, __low, __high);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const char_type* scan_not(mask __m, const char_type* __low, const char_type* __high) const {
    return do_scan_not(__m, __low, __high);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) char_type toupper(char_type __c) const { return do_toupper(__c); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const char_type* toupper(char_type* __low, const char_type* __high) const {
    return do_toupper(__low, __high);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) char_type tolower(char_type __c) const { return do_tolower(__c); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const char_type* tolower(char_type* __low, const char_type* __high) const {
    return do_tolower(__low, __high);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) char_type widen(char __c) const { return do_widen(__c); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const char* widen(const char* __low, const char* __high, char_type* __to) const {
    return do_widen(__low, __high, __to);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) char narrow(char_type __c, char __dfault) const { return do_narrow(__c, __dfault); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const char_type*
  narrow(const char_type* __low, const char_type* __high, char __dfault, char* __to) const {
    return do_narrow(__low, __high, __dfault, __to);
  }

  static locale::id id;

protected:
  ~ctype() override;
  virtual bool do_is(mask __m, char_type __c) const;
  virtual const char_type* do_is(const char_type* __low, const char_type* __high, mask* __vec) const;
  virtual const char_type* do_scan_is(mask __m, const char_type* __low, const char_type* __high) const;
  virtual const char_type* do_scan_not(mask __m, const char_type* __low, const char_type* __high) const;
  virtual char_type do_toupper(char_type) const;
  virtual const char_type* do_toupper(char_type* __low, const char_type* __high) const;
  virtual char_type do_tolower(char_type) const;
  virtual const char_type* do_tolower(char_type* __low, const char_type* __high) const;
  virtual char_type do_widen(char) const;
  virtual const char* do_widen(const char* __low, const char* __high, char_type* __dest) const;
  virtual char do_narrow(char_type, char __dfault) const;
  virtual const char_type*
  do_narrow(const char_type* __low, const char_type* __high, char __dfault, char* __dest) const;
};


template <>
class __attribute__((__visibility__("default"))) ctype<char> : public locale::facet, public ctype_base {
  const mask* __tab_;
  bool __del_;

public:
  typedef char char_type;

  explicit ctype(const mask* __tab = nullptr, bool __del = false, size_t __refs = 0);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool is(mask __m, char_type __c) const {
    return (__c == (__c & 0x7f)) ? (__tab_[static_cast<int>(__c)] & __m) !=0 : false;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const char_type* is(const char_type* __low, const char_type* __high, mask* __vec) const {
    for (; __low != __high; ++__low, ++__vec)
      *__vec = (*__low == (*__low & 0x7f)) ? __tab_[static_cast<int>(*__low)] : 0;
    return __low;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const char_type* scan_is(mask __m, const char_type* __low, const char_type* __high) const {
    for (; __low != __high; ++__low)
      if ((*__low == (*__low & 0x7f)) && (__tab_[static_cast<int>(*__low)] & __m))
        break;
    return __low;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const char_type* scan_not(mask __m, const char_type* __low, const char_type* __high) const {
    for (; __low != __high; ++__low)
      if (!(*__low == (*__low & 0x7f)) || !(__tab_[static_cast<int>(*__low)] & __m))
         break;
    return __low;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) char_type toupper(char_type __c) const { return do_toupper(__c); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const char_type* toupper(char_type* __low, const char_type* __high) const {
    return do_toupper(__low, __high);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) char_type tolower(char_type __c) const { return do_tolower(__c); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const char_type* tolower(char_type* __low, const char_type* __high) const {
    return do_tolower(__low, __high);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) char_type widen(char __c) const { return do_widen(__c); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const char* widen(const char* __low, const char* __high, char_type* __to) const {
    return do_widen(__low, __high, __to);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) char narrow(char_type __c, char __dfault) const { return do_narrow(__c, __dfault); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const char*
  narrow(const char_type* __low, const char_type* __high, char __dfault, char* __to) const {
    return do_narrow(__low, __high, __dfault, __to);
  }

  static locale::id id;




  static const size_t table_size = 256;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const mask* table() const noexcept { return __tab_; }
  static const mask* classic_table() noexcept;
# 605 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__locale" 3
protected:
  ~ctype() override;
  virtual char_type do_toupper(char_type __c) const;
  virtual const char_type* do_toupper(char_type* __low, const char_type* __high) const;
  virtual char_type do_tolower(char_type __c) const;
  virtual const char_type* do_tolower(char_type* __low, const char_type* __high) const;
  virtual char_type do_widen(char __c) const;
  virtual const char* do_widen(const char* __low, const char* __high, char_type* __to) const;
  virtual char do_narrow(char_type __c, char __dfault) const;
  virtual const char* do_narrow(const char_type* __low, const char_type* __high, char __dfault, char* __to) const;
};



template <class _CharT>
class ctype_byname;

template <>
class __attribute__((__visibility__("default"))) ctype_byname<char> : public ctype<char> {
  locale_t __l_;

public:
  explicit ctype_byname(const char*, size_t = 0);
  explicit ctype_byname(const string&, size_t = 0);

protected:
  ~ctype_byname() override;
  char_type do_toupper(char_type) const override;
  const char_type* do_toupper(char_type* __low, const char_type* __high) const override;
  char_type do_tolower(char_type) const override;
  const char_type* do_tolower(char_type* __low, const char_type* __high) const override;
};


template <>
class __attribute__((__visibility__("default"))) ctype_byname<wchar_t> : public ctype<wchar_t> {
  locale_t __l_;

public:
  explicit ctype_byname(const char*, size_t = 0);
  explicit ctype_byname(const string&, size_t = 0);

protected:
  ~ctype_byname() override;
  bool do_is(mask __m, char_type __c) const override;
  const char_type* do_is(const char_type* __low, const char_type* __high, mask* __vec) const override;
  const char_type* do_scan_is(mask __m, const char_type* __low, const char_type* __high) const override;
  const char_type* do_scan_not(mask __m, const char_type* __low, const char_type* __high) const override;
  char_type do_toupper(char_type) const override;
  const char_type* do_toupper(char_type* __low, const char_type* __high) const override;
  char_type do_tolower(char_type) const override;
  const char_type* do_tolower(char_type* __low, const char_type* __high) const override;
  char_type do_widen(char) const override;
  const char* do_widen(const char* __low, const char* __high, char_type* __dest) const override;
  char do_narrow(char_type, char __dfault) const override;
  const char_type*
  do_narrow(const char_type* __low, const char_type* __high, char __dfault, char* __dest) const override;
};


template <class _CharT>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool isspace(_CharT __c, const locale& __loc) {
  return std::use_facet<ctype<_CharT> >(__loc).is(ctype_base::space, __c);
}

template <class _CharT>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool isprint(_CharT __c, const locale& __loc) {
  return std::use_facet<ctype<_CharT> >(__loc).is(ctype_base::print, __c);
}

template <class _CharT>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool iscntrl(_CharT __c, const locale& __loc) {
  return std::use_facet<ctype<_CharT> >(__loc).is(ctype_base::cntrl, __c);
}

template <class _CharT>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool isupper(_CharT __c, const locale& __loc) {
  return std::use_facet<ctype<_CharT> >(__loc).is(ctype_base::upper, __c);
}

template <class _CharT>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool islower(_CharT __c, const locale& __loc) {
  return std::use_facet<ctype<_CharT> >(__loc).is(ctype_base::lower, __c);
}

template <class _CharT>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool isalpha(_CharT __c, const locale& __loc) {
  return std::use_facet<ctype<_CharT> >(__loc).is(ctype_base::alpha, __c);
}

template <class _CharT>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool isdigit(_CharT __c, const locale& __loc) {
  return std::use_facet<ctype<_CharT> >(__loc).is(ctype_base::digit, __c);
}

template <class _CharT>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool ispunct(_CharT __c, const locale& __loc) {
  return std::use_facet<ctype<_CharT> >(__loc).is(ctype_base::punct, __c);
}

template <class _CharT>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool isxdigit(_CharT __c, const locale& __loc) {
  return std::use_facet<ctype<_CharT> >(__loc).is(ctype_base::xdigit, __c);
}

template <class _CharT>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool isalnum(_CharT __c, const locale& __loc) {
  return std::use_facet<ctype<_CharT> >(__loc).is(ctype_base::alnum, __c);
}

template <class _CharT>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool isgraph(_CharT __c, const locale& __loc) {
  return std::use_facet<ctype<_CharT> >(__loc).is(ctype_base::graph, __c);
}

template <class _CharT>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool isblank(_CharT __c, const locale& __loc) {
  return std::use_facet<ctype<_CharT> >(__loc).is(ctype_base::blank, __c);
}

template <class _CharT>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _CharT toupper(_CharT __c, const locale& __loc) {
  return std::use_facet<ctype<_CharT> >(__loc).toupper(__c);
}

template <class _CharT>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _CharT tolower(_CharT __c, const locale& __loc) {
  return std::use_facet<ctype<_CharT> >(__loc).tolower(__c);
}



class __attribute__((__visibility__("default"))) codecvt_base {
public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) codecvt_base() {}
  enum result { ok, partial, error, noconv };
};



template <class _InternT, class _ExternT, class _StateT>
class codecvt;



template <>
class __attribute__((__visibility__("default"))) codecvt<char, char, mbstate_t> : public locale::facet, public codecvt_base {
public:
  typedef char intern_type;
  typedef char extern_type;
  typedef mbstate_t state_type;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit codecvt(size_t __refs = 0) : locale::facet(__refs) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) result
  out(state_type& __st,
      const intern_type* __frm,
      const intern_type* __frm_end,
      const intern_type*& __frm_nxt,
      extern_type* __to,
      extern_type* __to_end,
      extern_type*& __to_nxt) const {
    return do_out(__st, __frm, __frm_end, __frm_nxt, __to, __to_end, __to_nxt);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) result
  unshift(state_type& __st, extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const {
    return do_unshift(__st, __to, __to_end, __to_nxt);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) result
  in(state_type& __st,
     const extern_type* __frm,
     const extern_type* __frm_end,
     const extern_type*& __frm_nxt,
     intern_type* __to,
     intern_type* __to_end,
     intern_type*& __to_nxt) const {
    return do_in(__st, __frm, __frm_end, __frm_nxt, __to, __to_end, __to_nxt);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) int encoding() const noexcept { return do_encoding(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool always_noconv() const noexcept { return do_always_noconv(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) int
  length(state_type& __st, const extern_type* __frm, const extern_type* __end, size_t __mx) const {
    return do_length(__st, __frm, __end, __mx);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) int max_length() const noexcept { return do_max_length(); }

  static locale::id id;

protected:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit codecvt(const char*, size_t __refs = 0) : locale::facet(__refs) {}

  ~codecvt() override;

  virtual result
  do_out(state_type& __st,
         const intern_type* __frm,
         const intern_type* __frm_end,
         const intern_type*& __frm_nxt,
         extern_type* __to,
         extern_type* __to_end,
         extern_type*& __to_nxt) const;
  virtual result
  do_in(state_type& __st,
        const extern_type* __frm,
        const extern_type* __frm_end,
        const extern_type*& __frm_nxt,
        intern_type* __to,
        intern_type* __to_end,
        intern_type*& __to_nxt) const;
  virtual result do_unshift(state_type& __st, extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const;
  virtual int do_encoding() const noexcept;
  virtual bool do_always_noconv() const noexcept;
  virtual int do_length(state_type& __st, const extern_type* __frm, const extern_type* __end, size_t __mx) const;
  virtual int do_max_length() const noexcept;
};




template <>
class __attribute__((__visibility__("default"))) codecvt<wchar_t, char, mbstate_t> : public locale::facet, public codecvt_base {
  locale_t __l_;

public:
  typedef wchar_t intern_type;
  typedef char extern_type;
  typedef mbstate_t state_type;

  explicit codecvt(size_t __refs = 0);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) result
  out(state_type& __st,
      const intern_type* __frm,
      const intern_type* __frm_end,
      const intern_type*& __frm_nxt,
      extern_type* __to,
      extern_type* __to_end,
      extern_type*& __to_nxt) const {
    return do_out(__st, __frm, __frm_end, __frm_nxt, __to, __to_end, __to_nxt);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) result
  unshift(state_type& __st, extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const {
    return do_unshift(__st, __to, __to_end, __to_nxt);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) result
  in(state_type& __st,
     const extern_type* __frm,
     const extern_type* __frm_end,
     const extern_type*& __frm_nxt,
     intern_type* __to,
     intern_type* __to_end,
     intern_type*& __to_nxt) const {
    return do_in(__st, __frm, __frm_end, __frm_nxt, __to, __to_end, __to_nxt);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) int encoding() const noexcept { return do_encoding(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool always_noconv() const noexcept { return do_always_noconv(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) int
  length(state_type& __st, const extern_type* __frm, const extern_type* __end, size_t __mx) const {
    return do_length(__st, __frm, __end, __mx);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) int max_length() const noexcept { return do_max_length(); }

  static locale::id id;

protected:
  explicit codecvt(const char*, size_t __refs = 0);

  ~codecvt() override;

  virtual result
  do_out(state_type& __st,
         const intern_type* __frm,
         const intern_type* __frm_end,
         const intern_type*& __frm_nxt,
         extern_type* __to,
         extern_type* __to_end,
         extern_type*& __to_nxt) const;
  virtual result
  do_in(state_type& __st,
        const extern_type* __frm,
        const extern_type* __frm_end,
        const extern_type*& __frm_nxt,
        intern_type* __to,
        intern_type* __to_end,
        intern_type*& __to_nxt) const;
  virtual result do_unshift(state_type& __st, extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const;
  virtual int do_encoding() const noexcept;
  virtual bool do_always_noconv() const noexcept;
  virtual int do_length(state_type&, const extern_type* __frm, const extern_type* __end, size_t __mx) const;
  virtual int do_max_length() const noexcept;
};




template <>
class __attribute__((__visibility__("default"))) codecvt<char16_t, char, mbstate_t>
    : public locale::facet, public codecvt_base {
public:
  typedef char16_t intern_type;
  typedef char extern_type;
  typedef mbstate_t state_type;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit codecvt(size_t __refs = 0) : locale::facet(__refs) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) result
  out(state_type& __st,
      const intern_type* __frm,
      const intern_type* __frm_end,
      const intern_type*& __frm_nxt,
      extern_type* __to,
      extern_type* __to_end,
      extern_type*& __to_nxt) const {
    return do_out(__st, __frm, __frm_end, __frm_nxt, __to, __to_end, __to_nxt);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) result
  unshift(state_type& __st, extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const {
    return do_unshift(__st, __to, __to_end, __to_nxt);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) result
  in(state_type& __st,
     const extern_type* __frm,
     const extern_type* __frm_end,
     const extern_type*& __frm_nxt,
     intern_type* __to,
     intern_type* __to_end,
     intern_type*& __to_nxt) const {
    return do_in(__st, __frm, __frm_end, __frm_nxt, __to, __to_end, __to_nxt);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) int encoding() const noexcept { return do_encoding(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool always_noconv() const noexcept { return do_always_noconv(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) int
  length(state_type& __st, const extern_type* __frm, const extern_type* __end, size_t __mx) const {
    return do_length(__st, __frm, __end, __mx);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) int max_length() const noexcept { return do_max_length(); }

  static locale::id id;

protected:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit codecvt(const char*, size_t __refs = 0) : locale::facet(__refs) {}

  ~codecvt() override;

  virtual result
  do_out(state_type& __st,
         const intern_type* __frm,
         const intern_type* __frm_end,
         const intern_type*& __frm_nxt,
         extern_type* __to,
         extern_type* __to_end,
         extern_type*& __to_nxt) const;
  virtual result
  do_in(state_type& __st,
        const extern_type* __frm,
        const extern_type* __frm_end,
        const extern_type*& __frm_nxt,
        intern_type* __to,
        intern_type* __to_end,
        intern_type*& __to_nxt) const;
  virtual result do_unshift(state_type& __st, extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const;
  virtual int do_encoding() const noexcept;
  virtual bool do_always_noconv() const noexcept;
  virtual int do_length(state_type&, const extern_type* __frm, const extern_type* __end, size_t __mx) const;
  virtual int do_max_length() const noexcept;
};
# 1075 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__locale" 3
template <>
class __attribute__((__visibility__("default"))) codecvt<char32_t, char, mbstate_t>
    : public locale::facet, public codecvt_base {
public:
  typedef char32_t intern_type;
  typedef char extern_type;
  typedef mbstate_t state_type;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit codecvt(size_t __refs = 0) : locale::facet(__refs) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) result
  out(state_type& __st,
      const intern_type* __frm,
      const intern_type* __frm_end,
      const intern_type*& __frm_nxt,
      extern_type* __to,
      extern_type* __to_end,
      extern_type*& __to_nxt) const {
    return do_out(__st, __frm, __frm_end, __frm_nxt, __to, __to_end, __to_nxt);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) result
  unshift(state_type& __st, extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const {
    return do_unshift(__st, __to, __to_end, __to_nxt);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) result
  in(state_type& __st,
     const extern_type* __frm,
     const extern_type* __frm_end,
     const extern_type*& __frm_nxt,
     intern_type* __to,
     intern_type* __to_end,
     intern_type*& __to_nxt) const {
    return do_in(__st, __frm, __frm_end, __frm_nxt, __to, __to_end, __to_nxt);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) int encoding() const noexcept { return do_encoding(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool always_noconv() const noexcept { return do_always_noconv(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) int
  length(state_type& __st, const extern_type* __frm, const extern_type* __end, size_t __mx) const {
    return do_length(__st, __frm, __end, __mx);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) int max_length() const noexcept { return do_max_length(); }

  static locale::id id;

protected:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit codecvt(const char*, size_t __refs = 0) : locale::facet(__refs) {}

  ~codecvt() override;

  virtual result
  do_out(state_type& __st,
         const intern_type* __frm,
         const intern_type* __frm_end,
         const intern_type*& __frm_nxt,
         extern_type* __to,
         extern_type* __to_end,
         extern_type*& __to_nxt) const;
  virtual result
  do_in(state_type& __st,
        const extern_type* __frm,
        const extern_type* __frm_end,
        const extern_type*& __frm_nxt,
        intern_type* __to,
        intern_type* __to_end,
        intern_type*& __to_nxt) const;
  virtual result do_unshift(state_type& __st, extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const;
  virtual int do_encoding() const noexcept;
  virtual bool do_always_noconv() const noexcept;
  virtual int do_length(state_type&, const extern_type* __frm, const extern_type* __end, size_t __mx) const;
  virtual int do_max_length() const noexcept;
};
# 1238 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__locale" 3
template <class _InternT, class _ExternT, class _StateT>
class codecvt_byname : public codecvt<_InternT, _ExternT, _StateT> {
public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit codecvt_byname(const char* __nm, size_t __refs = 0)
      : codecvt<_InternT, _ExternT, _StateT>(__nm, __refs) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit codecvt_byname(const string& __nm, size_t __refs = 0)
      : codecvt<_InternT, _ExternT, _StateT>(__nm.c_str(), __refs) {}

protected:
  ~codecvt_byname() override;
};

#pragma GCC diagnostic push
# 1250 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__locale" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 1250 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__locale" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template <class _InternT, class _ExternT, class _StateT>
codecvt_byname<_InternT, _ExternT, _StateT>::~codecvt_byname() {}
#pragma GCC diagnostic pop

extern template class __attribute__((__visibility__("default"))) codecvt_byname<char, char, mbstate_t>;

extern template class __attribute__((__visibility__("default"))) codecvt_byname<wchar_t, char, mbstate_t>;

extern template class __attribute__((__visibility__("default")))
    codecvt_byname<char16_t, char, mbstate_t>;
extern template class __attribute__((__visibility__("default")))
    codecvt_byname<char32_t, char, mbstate_t>;





template <size_t _Np>
struct __narrow_to_utf8 {
  template <class _OutputIterator, class _CharT>
  _OutputIterator operator()(_OutputIterator __s, const _CharT* __wb, const _CharT* __we) const;
};

template <>
struct __narrow_to_utf8<8> {
  template <class _OutputIterator, class _CharT>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _OutputIterator operator()(_OutputIterator __s, const _CharT* __wb, const _CharT* __we) const {
    for (; __wb < __we; ++__wb, ++__s)
      *__s = *__wb;
    return __s;
  }
};

#pragma GCC diagnostic push
# 1284 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__locale" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 1284 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__locale" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template <>
struct __attribute__((__visibility__("default"))) __narrow_to_utf8<16> : public codecvt<char16_t, char, mbstate_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __narrow_to_utf8() : codecvt<char16_t, char, mbstate_t>(1) {}
#pragma GCC diagnostic pop

  ~__narrow_to_utf8() override;

  template <class _OutputIterator, class _CharT>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _OutputIterator operator()(_OutputIterator __s, const _CharT* __wb, const _CharT* __we) const {
    result __r = ok;
    mbstate_t __mb;
    while (__wb < __we && __r != error) {
      const int __sz = 32;
      char __buf[__sz];
      char* __bn;
      const char16_t* __wn = (const char16_t*)__wb;
      __r = do_out(__mb, (const char16_t*)__wb, (const char16_t*)__we, __wn, __buf, __buf + __sz, __bn);
      if (__r == codecvt_base::error || __wn == (const char16_t*)__wb)
        __throw_runtime_error("locale not supported");
      for (const char* __p = __buf; __p < __bn; ++__p, ++__s)
        *__s = *__p;
      __wb = (const _CharT*)__wn;
    }
    return __s;
  }
};

#pragma GCC diagnostic push
# 1312 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__locale" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 1312 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__locale" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template <>
struct __attribute__((__visibility__("default"))) __narrow_to_utf8<32> : public codecvt<char32_t, char, mbstate_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __narrow_to_utf8() : codecvt<char32_t, char, mbstate_t>(1) {}
#pragma GCC diagnostic pop

  ~__narrow_to_utf8() override;

  template <class _OutputIterator, class _CharT>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _OutputIterator operator()(_OutputIterator __s, const _CharT* __wb, const _CharT* __we) const {
    result __r = ok;
    mbstate_t __mb;
    while (__wb < __we && __r != error) {
      const int __sz = 32;
      char __buf[__sz];
      char* __bn;
      const char32_t* __wn = (const char32_t*)__wb;
      __r = do_out(__mb, (const char32_t*)__wb, (const char32_t*)__we, __wn, __buf, __buf + __sz, __bn);
      if (__r == codecvt_base::error || __wn == (const char32_t*)__wb)
        __throw_runtime_error("locale not supported");
      for (const char* __p = __buf; __p < __bn; ++__p, ++__s)
        *__s = *__p;
      __wb = (const _CharT*)__wn;
    }
    return __s;
  }
};

template <size_t _Np>
struct __widen_from_utf8 {
  template <class _OutputIterator>
  _OutputIterator operator()(_OutputIterator __s, const char* __nb, const char* __ne) const;
};

template <>
struct __widen_from_utf8<8> {
  template <class _OutputIterator>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _OutputIterator operator()(_OutputIterator __s, const char* __nb, const char* __ne) const {
    for (; __nb < __ne; ++__nb, ++__s)
      *__s = *__nb;
    return __s;
  }
};

#pragma GCC diagnostic push
# 1356 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__locale" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 1356 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__locale" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template <>
struct __attribute__((__visibility__("default"))) __widen_from_utf8<16> : public codecvt<char16_t, char, mbstate_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __widen_from_utf8() : codecvt<char16_t, char, mbstate_t>(1) {}
#pragma GCC diagnostic pop

  ~__widen_from_utf8() override;

  template <class _OutputIterator>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _OutputIterator operator()(_OutputIterator __s, const char* __nb, const char* __ne) const {
    result __r = ok;
    mbstate_t __mb;
    while (__nb < __ne && __r != error) {
      const int __sz = 32;
      char16_t __buf[__sz];
      char16_t* __bn;
      const char* __nn = __nb;
      __r = do_in(__mb, __nb, __ne - __nb > __sz ? __nb + __sz : __ne, __nn, __buf, __buf + __sz, __bn);
      if (__r == codecvt_base::error || __nn == __nb)
        __throw_runtime_error("locale not supported");
      for (const char16_t* __p = __buf; __p < __bn; ++__p, ++__s)
        *__s = *__p;
      __nb = __nn;
    }
    return __s;
  }
};

#pragma GCC diagnostic push
# 1384 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__locale" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 1384 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__locale" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template <>
struct __attribute__((__visibility__("default"))) __widen_from_utf8<32> : public codecvt<char32_t, char, mbstate_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __widen_from_utf8() : codecvt<char32_t, char, mbstate_t>(1) {}
#pragma GCC diagnostic pop

  ~__widen_from_utf8() override;

  template <class _OutputIterator>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _OutputIterator operator()(_OutputIterator __s, const char* __nb, const char* __ne) const {
    result __r = ok;
    mbstate_t __mb;
    while (__nb < __ne && __r != error) {
      const int __sz = 32;
      char32_t __buf[__sz];
      char32_t* __bn;
      const char* __nn = __nb;
      __r = do_in(__mb, __nb, __ne - __nb > __sz ? __nb + __sz : __ne, __nn, __buf, __buf + __sz, __bn);
      if (__r == codecvt_base::error || __nn == __nb)
        __throw_runtime_error("locale not supported");
      for (const char32_t* __p = __buf; __p < __bn; ++__p, ++__s)
        *__s = *__p;
      __nb = __nn;
    }
    return __s;
  }
};



template <class _CharT>
class numpunct;

template <>
class __attribute__((__visibility__("default"))) numpunct<char> : public locale::facet {
public:
  typedef char char_type;
  typedef basic_string<char_type> string_type;

  explicit numpunct(size_t __refs = 0);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) char_type decimal_point() const { return do_decimal_point(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) char_type thousands_sep() const { return do_thousands_sep(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) string grouping() const { return do_grouping(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) string_type truename() const { return do_truename(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) string_type falsename() const { return do_falsename(); }

  static locale::id id;

protected:
  ~numpunct() override;
  virtual char_type do_decimal_point() const;
  virtual char_type do_thousands_sep() const;
  virtual string do_grouping() const;
  virtual string_type do_truename() const;
  virtual string_type do_falsename() const;

  char_type __decimal_point_;
  char_type __thousands_sep_;
  string __grouping_;
};


template <>
class __attribute__((__visibility__("default"))) numpunct<wchar_t> : public locale::facet {
public:
  typedef wchar_t char_type;
  typedef basic_string<char_type> string_type;

  explicit numpunct(size_t __refs = 0);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) char_type decimal_point() const { return do_decimal_point(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) char_type thousands_sep() const { return do_thousands_sep(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) string grouping() const { return do_grouping(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) string_type truename() const { return do_truename(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) string_type falsename() const { return do_falsename(); }

  static locale::id id;

protected:
  ~numpunct() override;
  virtual char_type do_decimal_point() const;
  virtual char_type do_thousands_sep() const;
  virtual string do_grouping() const;
  virtual string_type do_truename() const;
  virtual string_type do_falsename() const;

  char_type __decimal_point_;
  char_type __thousands_sep_;
  string __grouping_;
};




template <class _CharT>
class numpunct_byname;

template <>
class __attribute__((__visibility__("default"))) numpunct_byname<char> : public numpunct<char> {
public:
  typedef char char_type;
  typedef basic_string<char_type> string_type;

  explicit numpunct_byname(const char* __nm, size_t __refs = 0);
  explicit numpunct_byname(const string& __nm, size_t __refs = 0);

protected:
  ~numpunct_byname() override;

private:
  void __init(const char*);
};


template <>
class __attribute__((__visibility__("default"))) numpunct_byname<wchar_t> : public numpunct<wchar_t> {
public:
  typedef wchar_t char_type;
  typedef basic_string<char_type> string_type;

  explicit numpunct_byname(const char* __nm, size_t __refs = 0);
  explicit numpunct_byname(const string& __nm, size_t __refs = 0);

protected:
  ~numpunct_byname() override;

private:
  void __init(const char*);
};


}}
# 36 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/formatter_integral.h" 2 3
# 40 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/formatter_integral.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 44 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/formatter_integral.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 441 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/formatter_integral.h" 3
}}
# 21 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/formatter_bool.h" 2 3
# 30 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/formatter_bool.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 75 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__format/formatter_bool.h" 3
}}
# 326 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\vector" 2 3
# 338 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\vector" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/temp_value.h" 1 3
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__memory/temp_value.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp, class _Alloc>
struct __temp_value {
  typedef allocator_traits<_Alloc> _Traits;




  union {
    _Tp __v;
  };

  _Alloc& __a;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp* __addr() {



    return std::addressof(__v);

  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp& get() { return *__addr(); }

  template <class... _Args>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((__no_sanitize__("cfi"))) __temp_value(_Alloc& __alloc, _Args&&... __args)
      : __a(__alloc) {
    _Traits::construct(__a, __addr(), std::forward<_Args>(__args)...);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) ~__temp_value() { _Traits::destroy(__a, __addr()); }
};

}}
# 339 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\vector" 2 3







# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__split_buffer" 1 3
# 41 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__split_buffer" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 45 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__split_buffer" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {





template <class _Tp, class _Allocator = allocator<_Tp> >
struct __split_buffer {
public:
  using value_type = _Tp;
  using allocator_type = _Allocator;
  using __alloc_rr = __libcpp_remove_reference_t<allocator_type>;
  using __alloc_traits = allocator_traits<__alloc_rr>;
  using reference = value_type&;
  using const_reference = const value_type&;
  using size_type = typename __alloc_traits::size_type;
  using difference_type = typename __alloc_traits::difference_type;
  using pointer = typename __alloc_traits::pointer;
  using const_pointer = typename __alloc_traits::const_pointer;
  using iterator = pointer;
  using const_iterator = const_pointer;

  pointer __first_;
  pointer __begin_;
  pointer __end_;
  __compressed_pair<pointer, allocator_type> __end_cap_;

  using __alloc_ref = __add_lvalue_reference_t<allocator_type>;
  using __alloc_const_ref = __add_lvalue_reference_t<allocator_type>;

  __split_buffer(const __split_buffer&) = delete;
  __split_buffer& operator=(const __split_buffer&) = delete;

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __split_buffer()
      noexcept(is_nothrow_default_constructible<allocator_type>::value)
      : __first_(nullptr), __begin_(nullptr), __end_(nullptr), __end_cap_(nullptr, __default_init_tag()) {}

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit __split_buffer(__alloc_rr& __a)
      : __first_(nullptr), __begin_(nullptr), __end_(nullptr), __end_cap_(nullptr, __a) {}

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit __split_buffer(const __alloc_rr& __a)
      : __first_(nullptr), __begin_(nullptr), __end_(nullptr), __end_cap_(nullptr, __a) {}

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
  __split_buffer(size_type __cap, size_type __start, __alloc_rr& __a);

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __split_buffer(__split_buffer&& __c)
      noexcept(is_nothrow_move_constructible<allocator_type>::value);

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __split_buffer(__split_buffer&& __c, const __alloc_rr& __a);

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __split_buffer& operator=(__split_buffer&& __c)
      noexcept((__alloc_traits::propagate_on_container_move_assignment::value && is_nothrow_move_assignable<allocator_type>::value) || !__alloc_traits::propagate_on_container_move_assignment::value);



                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) ~__split_buffer();

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __alloc_rr& __alloc() noexcept { return __end_cap_.second(); }
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const __alloc_rr& __alloc() const noexcept {
    return __end_cap_.second();
  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) pointer& __end_cap() noexcept { return __end_cap_.first(); }
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const pointer& __end_cap() const noexcept {
    return __end_cap_.first();
  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iterator begin() noexcept { return __begin_; }
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_iterator begin() const noexcept { return __begin_; }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iterator end() noexcept { return __end_; }
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_iterator end() const noexcept { return __end_; }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void clear() noexcept { __destruct_at_end(__begin_); }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type size() const {
    return static_cast<size_type>(__end_ - __begin_);
  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool empty() const { return __end_ == __begin_; }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type capacity() const {
    return static_cast<size_type>(__end_cap() - __first_);
  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type __front_spare() const {
    return static_cast<size_type>(__begin_ - __first_);
  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type __back_spare() const {
    return static_cast<size_type>(__end_cap() - __end_);
  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) reference front() { return *__begin_; }
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_reference front() const { return *__begin_; }
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) reference back() { return *(__end_ - 1); }
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_reference back() const { return *(__end_ - 1); }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void reserve(size_type __n);
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void shrink_to_fit() noexcept;
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void push_front(const_reference __x);
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void push_back(const_reference __x);
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void push_front(value_type&& __x);
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void push_back(value_type&& __x);

  template <class... _Args>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void emplace_back(_Args&&... __args);

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void pop_front() { __destruct_at_begin(__begin_ + 1); }
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void pop_back() { __destruct_at_end(__end_ - 1); }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __construct_at_end(size_type __n);
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __construct_at_end(size_type __n, const_reference __x);

  template <class _InputIter, __enable_if_t<__has_exactly_input_iterator_category<_InputIter>::value, int> = 0>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __construct_at_end(_InputIter __first, _InputIter __last);

  template <class _ForwardIterator, __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value, int> = 0>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
  __construct_at_end(_ForwardIterator __first, _ForwardIterator __last);

  template <class _Iterator, class _Sentinel>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
  __construct_at_end_with_sentinel(_Iterator __first, _Sentinel __last);

  template <class _Iterator>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
  __construct_at_end_with_size(_Iterator __first, size_type __n);

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __destruct_at_begin(pointer __new_begin) {
    __destruct_at_begin(__new_begin, is_trivially_destructible<value_type>());
  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __destruct_at_begin(pointer __new_begin, false_type);
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __destruct_at_begin(pointer __new_begin, true_type);

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __destruct_at_end(pointer __new_last) noexcept {
    __destruct_at_end(__new_last, false_type());
  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __destruct_at_end(pointer __new_last, false_type) noexcept;
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __destruct_at_end(pointer __new_last, true_type) noexcept;

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void swap(__split_buffer& __x)
      noexcept(!__alloc_traits::propagate_on_container_swap::value || __is_nothrow_swappable<__alloc_rr>::value);

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool __invariants() const;

private:
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __move_assign_alloc(__split_buffer& __c, true_type)
      noexcept(is_nothrow_move_assignable<allocator_type>::value) {
    __alloc() = std::move(__c.__alloc());
  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __move_assign_alloc(__split_buffer&, false_type) noexcept {}

  struct _ConstructTransaction {
                                  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit _ConstructTransaction(
        pointer* __p, size_type __n) noexcept
        : __pos_(*__p),
          __end_(*__p + __n),
          __dest_(__p) {}

                                  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) ~_ConstructTransaction() { *__dest_ = __pos_; }

    pointer __pos_;
    const pointer __end_;

  private:
    pointer* __dest_;
  };
};

template <class _Tp, class _Allocator>
                              bool __split_buffer<_Tp, _Allocator>::__invariants() const {
  if (__first_ == nullptr) {
    if (__begin_ != nullptr)
      return false;
    if (__end_ != nullptr)
      return false;
    if (__end_cap() != nullptr)
      return false;
  } else {
    if (__begin_ < __first_)
      return false;
    if (__end_ < __begin_)
      return false;
    if (__end_cap() < __end_)
      return false;
  }
  return true;
}






template <class _Tp, class _Allocator>
                              void __split_buffer<_Tp, _Allocator>::__construct_at_end(size_type __n) {
  _ConstructTransaction __tx(&this->__end_, __n);
  for (; __tx.__pos_ != __tx.__end_; ++__tx.__pos_) {
    __alloc_traits::construct(this->__alloc(), std::__to_address(__tx.__pos_));
  }
}







template <class _Tp, class _Allocator>
                              void
__split_buffer<_Tp, _Allocator>::__construct_at_end(size_type __n, const_reference __x) {
  _ConstructTransaction __tx(&this->__end_, __n);
  for (; __tx.__pos_ != __tx.__end_; ++__tx.__pos_) {
    __alloc_traits::construct(this->__alloc(), std::__to_address(__tx.__pos_), __x);
  }
}

template <class _Tp, class _Allocator>
template <class _InputIter, __enable_if_t<__has_exactly_input_iterator_category<_InputIter>::value, int> >
                              void
__split_buffer<_Tp, _Allocator>::__construct_at_end(_InputIter __first, _InputIter __last) {
  __construct_at_end_with_sentinel(__first, __last);
}

template <class _Tp, class _Allocator>
template <class _Iterator, class _Sentinel>
                              void
__split_buffer<_Tp, _Allocator>::__construct_at_end_with_sentinel(_Iterator __first, _Sentinel __last) {
  __alloc_rr& __a = this->__alloc();
  for (; __first != __last; ++__first) {
    if (__end_ == __end_cap()) {
      size_type __old_cap = __end_cap() - __first_;
      size_type __new_cap = std::max<size_type>(2 * __old_cap, 8);
      __split_buffer __buf(__new_cap, 0, __a);
      for (pointer __p = __begin_; __p != __end_; ++__p, (void)++__buf.__end_)
        __alloc_traits::construct(__buf.__alloc(), std::__to_address(__buf.__end_), std::move(*__p));
      swap(__buf);
    }
    __alloc_traits::construct(__a, std::__to_address(this->__end_), *__first);
    ++this->__end_;
  }
}
template <class _Tp, class _Allocator>
template <class _ForwardIterator, __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value, int> >
                              void
__split_buffer<_Tp, _Allocator>::__construct_at_end(_ForwardIterator __first, _ForwardIterator __last) {
  __construct_at_end_with_size(__first, std::distance(__first, __last));
}

template <class _Tp, class _Allocator>
template <class _ForwardIterator>
                              void
__split_buffer<_Tp, _Allocator>::__construct_at_end_with_size(_ForwardIterator __first, size_type __n) {
  _ConstructTransaction __tx(&this->__end_, __n);
  for (; __tx.__pos_ != __tx.__end_; ++__tx.__pos_, (void)++__first) {
    __alloc_traits::construct(this->__alloc(), std::__to_address(__tx.__pos_), *__first);
  }
}

template <class _Tp, class _Allocator>
                              inline void
__split_buffer<_Tp, _Allocator>::__destruct_at_begin(pointer __new_begin, false_type) {
  while (__begin_ != __new_begin)
    __alloc_traits::destroy(__alloc(), std::__to_address(__begin_++));
}

template <class _Tp, class _Allocator>
                              inline void
__split_buffer<_Tp, _Allocator>::__destruct_at_begin(pointer __new_begin, true_type) {
  __begin_ = __new_begin;
}

template <class _Tp, class _Allocator>
                              inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
__split_buffer<_Tp, _Allocator>::__destruct_at_end(pointer __new_last, false_type) noexcept {
  while (__new_last != __end_)
    __alloc_traits::destroy(__alloc(), std::__to_address(--__end_));
}

template <class _Tp, class _Allocator>
                              inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
__split_buffer<_Tp, _Allocator>::__destruct_at_end(pointer __new_last, true_type) noexcept {
  __end_ = __new_last;
}

template <class _Tp, class _Allocator>

__split_buffer<_Tp, _Allocator>::__split_buffer(size_type __cap, size_type __start, __alloc_rr& __a)
    : __end_cap_(nullptr, __a) {
  if (__cap == 0) {
    __first_ = nullptr;
  } else {
    auto __allocation = std::__allocate_at_least(__alloc(), __cap);
    __first_ = __allocation.ptr;
    __cap = __allocation.count;
  }
  __begin_ = __end_ = __first_ + __start;
  __end_cap() = __first_ + __cap;
}

template <class _Tp, class _Allocator>
                              __split_buffer<_Tp, _Allocator>::~__split_buffer() {
  clear();
  if (__first_)
    __alloc_traits::deallocate(__alloc(), __first_, capacity());
}

template <class _Tp, class _Allocator>
                              __split_buffer<_Tp, _Allocator>::__split_buffer(__split_buffer&& __c)
    noexcept(is_nothrow_move_constructible<allocator_type>::value)
    : __first_(std::move(__c.__first_)),
      __begin_(std::move(__c.__begin_)),
      __end_(std::move(__c.__end_)),
      __end_cap_(std::move(__c.__end_cap_)) {
  __c.__first_ = nullptr;
  __c.__begin_ = nullptr;
  __c.__end_ = nullptr;
  __c.__end_cap() = nullptr;
}

template <class _Tp, class _Allocator>

__split_buffer<_Tp, _Allocator>::__split_buffer(__split_buffer&& __c, const __alloc_rr& __a)
    : __end_cap_(nullptr, __a) {
  if (__a == __c.__alloc()) {
    __first_ = __c.__first_;
    __begin_ = __c.__begin_;
    __end_ = __c.__end_;
    __end_cap() = __c.__end_cap();
    __c.__first_ = nullptr;
    __c.__begin_ = nullptr;
    __c.__end_ = nullptr;
    __c.__end_cap() = nullptr;
  } else {
    auto __allocation = std::__allocate_at_least(__alloc(), __c.size());
    __first_ = __allocation.ptr;
    __begin_ = __end_ = __first_;
    __end_cap() = __first_ + __allocation.count;
    typedef move_iterator<iterator> _Ip;
    __construct_at_end(_Ip(__c.begin()), _Ip(__c.end()));
  }
}

template <class _Tp, class _Allocator>
                              __split_buffer<_Tp, _Allocator>&
__split_buffer<_Tp, _Allocator>::operator=(__split_buffer&& __c)
    noexcept((__alloc_traits::propagate_on_container_move_assignment::value && is_nothrow_move_assignable<allocator_type>::value) || !__alloc_traits::propagate_on_container_move_assignment::value) {


  clear();
  shrink_to_fit();
  __first_ = __c.__first_;
  __begin_ = __c.__begin_;
  __end_ = __c.__end_;
  __end_cap() = __c.__end_cap();
  __move_assign_alloc(__c, integral_constant<bool, __alloc_traits::propagate_on_container_move_assignment::value>());
  __c.__first_ = __c.__begin_ = __c.__end_ = __c.__end_cap() = nullptr;
  return *this;
}

template <class _Tp, class _Allocator>
                              void __split_buffer<_Tp, _Allocator>::swap(__split_buffer& __x)
    noexcept(!__alloc_traits::propagate_on_container_swap::value || __is_nothrow_swappable<__alloc_rr>::value) {
  std::swap(__first_, __x.__first_);
  std::swap(__begin_, __x.__begin_);
  std::swap(__end_, __x.__end_);
  std::swap(__end_cap(), __x.__end_cap());
  std::__swap_allocator(__alloc(), __x.__alloc());
}

template <class _Tp, class _Allocator>
                              void __split_buffer<_Tp, _Allocator>::reserve(size_type __n) {
  if (__n < capacity()) {
    __split_buffer<value_type, __alloc_rr&> __t(__n, 0, __alloc());
    __t.__construct_at_end(move_iterator<pointer>(__begin_), move_iterator<pointer>(__end_));
    std::swap(__first_, __t.__first_);
    std::swap(__begin_, __t.__begin_);
    std::swap(__end_, __t.__end_);
    std::swap(__end_cap(), __t.__end_cap());
  }
}

template <class _Tp, class _Allocator>
                              void __split_buffer<_Tp, _Allocator>::shrink_to_fit() noexcept {
  if (capacity() > size()) {



      __split_buffer<value_type, __alloc_rr&> __t(size(), 0, __alloc());
      __t.__construct_at_end(move_iterator<pointer>(__begin_), move_iterator<pointer>(__end_));
      __t.__end_ = __t.__begin_ + (__end_ - __begin_);
      std::swap(__first_, __t.__first_);
      std::swap(__begin_, __t.__begin_);
      std::swap(__end_, __t.__end_);
      std::swap(__end_cap(), __t.__end_cap());




  }
}

template <class _Tp, class _Allocator>
                              void __split_buffer<_Tp, _Allocator>::push_front(const_reference __x) {
  if (__begin_ == __first_) {
    if (__end_ < __end_cap()) {
      difference_type __d = __end_cap() - __end_;
      __d = (__d + 1) / 2;
      __begin_ = std::move_backward(__begin_, __end_, __end_ + __d);
      __end_ += __d;
    } else {
      size_type __c = std::max<size_type>(2 * static_cast<size_t>(__end_cap() - __first_), 1);
      __split_buffer<value_type, __alloc_rr&> __t(__c, (__c + 3) / 4, __alloc());
      __t.__construct_at_end(move_iterator<pointer>(__begin_), move_iterator<pointer>(__end_));
      std::swap(__first_, __t.__first_);
      std::swap(__begin_, __t.__begin_);
      std::swap(__end_, __t.__end_);
      std::swap(__end_cap(), __t.__end_cap());
    }
  }
  __alloc_traits::construct(__alloc(), std::__to_address(__begin_ - 1), __x);
  --__begin_;
}

template <class _Tp, class _Allocator>
                              void __split_buffer<_Tp, _Allocator>::push_front(value_type&& __x) {
  if (__begin_ == __first_) {
    if (__end_ < __end_cap()) {
      difference_type __d = __end_cap() - __end_;
      __d = (__d + 1) / 2;
      __begin_ = std::move_backward(__begin_, __end_, __end_ + __d);
      __end_ += __d;
    } else {
      size_type __c = std::max<size_type>(2 * static_cast<size_t>(__end_cap() - __first_), 1);
      __split_buffer<value_type, __alloc_rr&> __t(__c, (__c + 3) / 4, __alloc());
      __t.__construct_at_end(move_iterator<pointer>(__begin_), move_iterator<pointer>(__end_));
      std::swap(__first_, __t.__first_);
      std::swap(__begin_, __t.__begin_);
      std::swap(__end_, __t.__end_);
      std::swap(__end_cap(), __t.__end_cap());
    }
  }
  __alloc_traits::construct(__alloc(), std::__to_address(__begin_ - 1), std::move(__x));
  --__begin_;
}

template <class _Tp, class _Allocator>
                              inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
__split_buffer<_Tp, _Allocator>::push_back(const_reference __x) {
  if (__end_ == __end_cap()) {
    if (__begin_ > __first_) {
      difference_type __d = __begin_ - __first_;
      __d = (__d + 1) / 2;
      __end_ = std::move(__begin_, __end_, __begin_ - __d);
      __begin_ -= __d;
    } else {
      size_type __c = std::max<size_type>(2 * static_cast<size_t>(__end_cap() - __first_), 1);
      __split_buffer<value_type, __alloc_rr&> __t(__c, __c / 4, __alloc());
      __t.__construct_at_end(move_iterator<pointer>(__begin_), move_iterator<pointer>(__end_));
      std::swap(__first_, __t.__first_);
      std::swap(__begin_, __t.__begin_);
      std::swap(__end_, __t.__end_);
      std::swap(__end_cap(), __t.__end_cap());
    }
  }
  __alloc_traits::construct(__alloc(), std::__to_address(__end_), __x);
  ++__end_;
}

template <class _Tp, class _Allocator>
                              void __split_buffer<_Tp, _Allocator>::push_back(value_type&& __x) {
  if (__end_ == __end_cap()) {
    if (__begin_ > __first_) {
      difference_type __d = __begin_ - __first_;
      __d = (__d + 1) / 2;
      __end_ = std::move(__begin_, __end_, __begin_ - __d);
      __begin_ -= __d;
    } else {
      size_type __c = std::max<size_type>(2 * static_cast<size_t>(__end_cap() - __first_), 1);
      __split_buffer<value_type, __alloc_rr&> __t(__c, __c / 4, __alloc());
      __t.__construct_at_end(move_iterator<pointer>(__begin_), move_iterator<pointer>(__end_));
      std::swap(__first_, __t.__first_);
      std::swap(__begin_, __t.__begin_);
      std::swap(__end_, __t.__end_);
      std::swap(__end_cap(), __t.__end_cap());
    }
  }
  __alloc_traits::construct(__alloc(), std::__to_address(__end_), std::move(__x));
  ++__end_;
}

template <class _Tp, class _Allocator>
template <class... _Args>
                              void __split_buffer<_Tp, _Allocator>::emplace_back(_Args&&... __args) {
  if (__end_ == __end_cap()) {
    if (__begin_ > __first_) {
      difference_type __d = __begin_ - __first_;
      __d = (__d + 1) / 2;
      __end_ = std::move(__begin_, __end_, __begin_ - __d);
      __begin_ -= __d;
    } else {
      size_type __c = std::max<size_type>(2 * static_cast<size_t>(__end_cap() - __first_), 1);
      __split_buffer<value_type, __alloc_rr&> __t(__c, __c / 4, __alloc());
      __t.__construct_at_end(move_iterator<pointer>(__begin_), move_iterator<pointer>(__end_));
      std::swap(__first_, __t.__first_);
      std::swap(__begin_, __t.__begin_);
      std::swap(__end_, __t.__end_);
      std::swap(__end_cap(), __t.__end_cap());
    }
  }
  __alloc_traits::construct(__alloc(), std::__to_address(__end_), std::forward<_Args>(__args)...);
  ++__end_;
}

template <class _Tp, class _Allocator>
                              inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
swap(__split_buffer<_Tp, _Allocator>& __x, __split_buffer<_Tp, _Allocator>& __y) noexcept(noexcept(__x.swap(__y))) {
  __x.swap(__y);
}

}}
# 347 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\vector" 2 3
# 379 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\vector" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 383 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\vector" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp, class _Allocator >
class vector {
private:
  typedef allocator<_Tp> __default_allocator_type;

public:
  typedef vector __self;
  typedef _Tp value_type;
  typedef _Allocator allocator_type;
  typedef allocator_traits<allocator_type> __alloc_traits;
  typedef value_type& reference;
  typedef const value_type& const_reference;
  typedef typename __alloc_traits::size_type size_type;
  typedef typename __alloc_traits::difference_type difference_type;
  typedef typename __alloc_traits::pointer pointer;
  typedef typename __alloc_traits::const_pointer const_pointer;

  typedef __wrap_iter<pointer> iterator;
  typedef __wrap_iter<const_pointer> const_iterator;
  typedef std::reverse_iterator<iterator> reverse_iterator;
  typedef std::reverse_iterator<const_iterator> const_reverse_iterator;

  static_assert((is_same<typename allocator_type::value_type, value_type>::value),
                "Allocator::value_type must be same type as value_type");

  static_assert(is_same<allocator_type, __rebind_alloc<__alloc_traits, value_type> >::value,
                "[allocator.requirements] states that rebinding an allocator to the same type should result in the "
                "original allocator");

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) vector()
      noexcept(is_nothrow_default_constructible<allocator_type>::value) {}
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit vector(const allocator_type& __a)



      noexcept

      : __end_cap_(nullptr, __a) {
  }
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit vector(size_type __n);

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit vector(size_type __n, const allocator_type& __a);

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) vector(size_type __n, const value_type& __x);

  template <class = __enable_if_t<__is_allocator<_Allocator>::value> >
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
  vector(size_type __n, const value_type& __x, const allocator_type& __a)
      : __end_cap_(nullptr, __a) {
    if (__n > 0) {
      __vallocate(__n);
      __construct_at_end(__n, __x);
    }
  }

  template <class _InputIterator,
            __enable_if_t<__has_exactly_input_iterator_category<_InputIterator>::value &&
                              is_constructible<value_type, typename iterator_traits<_InputIterator>::reference>::value,
                          int> = 0>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) vector(_InputIterator __first, _InputIterator __last);
  template <class _InputIterator,
            __enable_if_t<__has_exactly_input_iterator_category<_InputIterator>::value &&
                              is_constructible<value_type, typename iterator_traits<_InputIterator>::reference>::value,
                          int> = 0>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
  vector(_InputIterator __first, _InputIterator __last, const allocator_type& __a);

  template <
      class _ForwardIterator,
      __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value &&
                        is_constructible<value_type, typename iterator_traits<_ForwardIterator>::reference>::value,
                    int> = 0>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) vector(_ForwardIterator __first, _ForwardIterator __last);

  template <
      class _ForwardIterator,
      __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value &&
                        is_constructible<value_type, typename iterator_traits<_ForwardIterator>::reference>::value,
                    int> = 0>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
  vector(_ForwardIterator __first, _ForwardIterator __last, const allocator_type& __a);
# 483 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\vector" 3
private:
  class __destroy_vector {
  public:
    constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __destroy_vector(vector& __vec) : __vec_(__vec) {}

                                  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void operator()() {
      if (__vec_.__begin_ != nullptr) {
        __vec_.__clear();
        __vec_.__annotate_delete();
        __alloc_traits::deallocate(__vec_.__alloc(), __vec_.__begin_, __vec_.capacity());
      }
    }

  private:
    vector& __vec_;
  };

public:
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) ~vector() { __destroy_vector (*this)(); }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) vector(const vector& __x);
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
  vector(const vector& __x, const __type_identity_t<allocator_type>& __a);
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) vector& operator=(const vector& __x);


                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) vector(initializer_list<value_type> __il);

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
  vector(initializer_list<value_type> __il, const allocator_type& __a);

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) vector& operator=(initializer_list<value_type> __il) {
    assign(__il.begin(), __il.end());
    return *this;
  }


                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) vector(vector&& __x)

      noexcept;




                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
  vector(vector&& __x, const __type_identity_t<allocator_type>& __a);
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) vector& operator=(vector&& __x)
      noexcept(__noexcept_move_assign_container<_Allocator, __alloc_traits>::value);

  template <class _InputIterator,
            __enable_if_t<__has_exactly_input_iterator_category<_InputIterator>::value &&
                              is_constructible<value_type, typename iterator_traits<_InputIterator>::reference>::value,
                          int> = 0>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void assign(_InputIterator __first, _InputIterator __last);
  template <
      class _ForwardIterator,
      __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value &&
                        is_constructible<value_type, typename iterator_traits<_ForwardIterator>::reference>::value,
                    int> = 0>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void assign(_ForwardIterator __first, _ForwardIterator __last);
# 557 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\vector" 3
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void assign(size_type __n, const_reference __u);


                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void assign(initializer_list<value_type> __il) {
    assign(__il.begin(), __il.end());
  }


                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) allocator_type get_allocator() const noexcept {
    return this->__alloc();
  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iterator begin() noexcept;
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_iterator begin() const noexcept;
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iterator end() noexcept;
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_iterator end() const noexcept;

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) reverse_iterator rbegin() noexcept {
    return reverse_iterator(end());
  }
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_reverse_iterator rbegin() const noexcept {
    return const_reverse_iterator(end());
  }
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) reverse_iterator rend() noexcept {
    return reverse_iterator(begin());
  }
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_reverse_iterator rend() const noexcept {
    return const_reverse_iterator(begin());
  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_iterator cbegin() const noexcept { return begin(); }
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_iterator cend() const noexcept { return end(); }
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_reverse_iterator crbegin() const noexcept {
    return rbegin();
  }
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_reverse_iterator crend() const noexcept { return rend(); }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type size() const noexcept {
    return static_cast<size_type>(this->__end_ - this->__begin_);
  }
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type capacity() const noexcept {
    return static_cast<size_type>(__end_cap() - this->__begin_);
  }
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool empty() const noexcept {
    return this->__begin_ == this->__end_;
  }
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type max_size() const noexcept;
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void reserve(size_type __n);
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void shrink_to_fit() noexcept;

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) reference operator[](size_type __n) noexcept;
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_reference operator[](size_type __n) const noexcept;
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) reference at(size_type __n);
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_reference at(size_type __n) const;

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) reference front() noexcept {
    ((void)0);
    return *this->__begin_;
  }
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_reference front() const noexcept {
    ((void)0);
    return *this->__begin_;
  }
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) reference back() noexcept {
    ((void)0);
    return *(this->__end_ - 1);
  }
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_reference back() const noexcept {
    ((void)0);
    return *(this->__end_ - 1);
  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) value_type* data() noexcept {
    return std::__to_address(this->__begin_);
  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const value_type* data() const noexcept {
    return std::__to_address(this->__begin_);
  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void push_back(const_reference __x);

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void push_back(value_type&& __x);

  template <class... _Args>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))

      reference
      emplace_back(_Args&&... __args);
# 658 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\vector" 3
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void pop_back();

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iterator insert(const_iterator __position, const_reference __x);

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iterator insert(const_iterator __position, value_type&& __x);
  template <class... _Args>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iterator emplace(const_iterator __position, _Args&&... __args);

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iterator
  insert(const_iterator __position, size_type __n, const_reference __x);

  template <class _InputIterator,
            __enable_if_t<__has_exactly_input_iterator_category<_InputIterator>::value &&
                              is_constructible< value_type, typename iterator_traits<_InputIterator>::reference>::value,
                          int> = 0>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iterator
  insert(const_iterator __position, _InputIterator __first, _InputIterator __last);
# 689 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\vector" 3
  template <
      class _ForwardIterator,
      __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value &&
                        is_constructible< value_type, typename iterator_traits<_ForwardIterator>::reference>::value,
                    int> = 0>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iterator
  insert(const_iterator __position, _ForwardIterator __first, _ForwardIterator __last);


                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iterator
  insert(const_iterator __position, initializer_list<value_type> __il) {
    return insert(__position, __il.begin(), __il.end());
  }


                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iterator erase(const_iterator __position);
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iterator erase(const_iterator __first, const_iterator __last);

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void clear() noexcept {
    size_type __old_size = size();
    __clear();
    __annotate_shrink(__old_size);
  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void resize(size_type __sz);
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void resize(size_type __sz, const_reference __x);

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void swap(vector&)

      noexcept;




                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool __invariants() const;

private:
  pointer __begin_ = nullptr;
  pointer __end_ = nullptr;
  __compressed_pair<pointer, allocator_type> __end_cap_ =
      __compressed_pair<pointer, allocator_type>(nullptr, __default_init_tag());
# 738 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\vector" 3
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __vallocate(size_type __n) {
    if (__n > max_size())
      __throw_length_error();
    auto __allocation = std::__allocate_at_least(__alloc(), __n);
    __begin_ = __allocation.ptr;
    __end_ = __allocation.ptr;
    __end_cap() = __begin_ + __allocation.count;
    __annotate_new(0);
  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __vdeallocate() noexcept;
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type __recommend(size_type __new_size) const;
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __construct_at_end(size_type __n);
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __construct_at_end(size_type __n, const_reference __x);

  template <class _InputIterator, class _Sentinel>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
  __init_with_size(_InputIterator __first, _Sentinel __last, size_type __n) {
    auto __guard = std::__make_exception_guard(__destroy_vector(*this));

    if (__n > 0) {
      __vallocate(__n);
      __construct_at_end(__first, __last, __n);
    }

    __guard.__complete();
  }

  template <class _InputIterator, class _Sentinel>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
  __init_with_sentinel(_InputIterator __first, _Sentinel __last) {
    auto __guard = std::__make_exception_guard(__destroy_vector(*this));

    for (; __first != __last; ++__first)
      emplace_back(*__first);

    __guard.__complete();
  }

  template <class _Iterator, class _Sentinel>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __assign_with_sentinel(_Iterator __first, _Sentinel __last);

  template <class _ForwardIterator, class _Sentinel>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
  __assign_with_size(_ForwardIterator __first, _Sentinel __last, difference_type __n);

  template <class _InputIterator, class _Sentinel>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iterator
  __insert_with_sentinel(const_iterator __position, _InputIterator __first, _Sentinel __last);

  template <class _Iterator, class _Sentinel>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iterator
  __insert_with_size(const_iterator __position, _Iterator __first, _Sentinel __last, difference_type __n);

  template <class _InputIterator, class _Sentinel>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
  __construct_at_end(_InputIterator __first, _Sentinel __last, size_type __n);

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __append(size_type __n);
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __append(size_type __n, const_reference __x);
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iterator __make_iter(pointer __p) noexcept {
    return iterator(__p);
  }
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_iterator __make_iter(const_pointer __p) const noexcept {
    return const_iterator(__p);
  }
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
  __swap_out_circular_buffer(__split_buffer<value_type, allocator_type&>& __v);
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) pointer
  __swap_out_circular_buffer(__split_buffer<value_type, allocator_type&>& __v, pointer __p);
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
  __move_range(pointer __from_s, pointer __from_e, pointer __to);
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __move_assign(vector& __c, true_type)
      noexcept(is_nothrow_move_assignable<allocator_type>::value);
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __move_assign(vector& __c, false_type)
      noexcept(__alloc_traits::is_always_equal::value);
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __destruct_at_end(pointer __new_last) noexcept {
    size_type __old_size = size();
    __base_destruct_at_end(__new_last);
    __annotate_shrink(__old_size);
  }

  template <class _Up>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline pointer __push_back_slow_path(_Up&& __x);

  template <class... _Args>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline pointer __emplace_back_slow_path(_Args&&... __args);
# 834 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\vector" 3
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __annotate_contiguous_container(
      const void* __old_mid, const void* __new_mid) const {
    (void)__old_mid;
    (void)__new_mid;







  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __annotate_new(size_type __current_size) const noexcept {
    (void)__current_size;



  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __annotate_delete() const noexcept {



  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __annotate_increase(size_type __n) const noexcept {
    (void)__n;



  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __annotate_shrink(size_type __old_size) const noexcept {
    (void)__old_size;



  }

  struct _ConstructTransaction {
                                  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit _ConstructTransaction(vector& __v, size_type __n)
        : __v_(__v), __pos_(__v.__end_), __new_end_(__v.__end_ + __n) {



    }
                                  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) ~_ConstructTransaction() {
      __v_.__end_ = __pos_;





    }

    vector& __v_;
    pointer __pos_;
    const_pointer const __new_end_;

  private:
    _ConstructTransaction(_ConstructTransaction const&) = delete;
    _ConstructTransaction& operator=(_ConstructTransaction const&) = delete;
  };

  template <class... _Args>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __construct_one_at_end(_Args&&... __args) {
    _ConstructTransaction __tx(*this, 1);
    __alloc_traits::construct(this->__alloc(), std::__to_address(__tx.__pos_), std::forward<_Args>(__args)...);
    ++__tx.__pos_;
  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) allocator_type& __alloc() noexcept {
    return this->__end_cap_.second();
  }
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const allocator_type& __alloc() const noexcept {
    return this->__end_cap_.second();
  }
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) pointer& __end_cap() noexcept {
    return this->__end_cap_.first();
  }
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const pointer& __end_cap() const noexcept {
    return this->__end_cap_.first();
  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __clear() noexcept {
    __base_destruct_at_end(this->__begin_);
  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __base_destruct_at_end(pointer __new_last) noexcept {
    pointer __soon_to_be_end = this->__end_;
    while (__new_last != __soon_to_be_end)
      __alloc_traits::destroy(__alloc(), std::__to_address(--__soon_to_be_end));
    this->__end_ = __new_last;
  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __copy_assign_alloc(const vector& __c) {
    __copy_assign_alloc(__c, integral_constant<bool, __alloc_traits::propagate_on_container_copy_assignment::value>());
  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __move_assign_alloc(vector& __c)
      noexcept(!__alloc_traits::propagate_on_container_move_assignment::value || is_nothrow_move_assignable<allocator_type>::value) {

    __move_assign_alloc(__c, integral_constant<bool, __alloc_traits::propagate_on_container_move_assignment::value>());
  }

  [[noreturn]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __throw_length_error() const { std::__throw_length_error("vector"); }

  [[noreturn]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __throw_out_of_range() const { std::__throw_out_of_range("vector"); }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __copy_assign_alloc(const vector& __c, true_type) {
    if (__alloc() != __c.__alloc()) {
      __clear();
      __annotate_delete();
      __alloc_traits::deallocate(__alloc(), this->__begin_, capacity());
      this->__begin_ = this->__end_ = __end_cap() = nullptr;
    }
    __alloc() = __c.__alloc();
  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __copy_assign_alloc(const vector&, false_type) {}

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __move_assign_alloc(vector& __c, true_type)
      noexcept(is_nothrow_move_assignable<allocator_type>::value) {
    __alloc() = std::move(__c.__alloc());
  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __move_assign_alloc(vector&, false_type) noexcept {}
};


template <class _InputIterator,
          class _Alloc = allocator<__iter_value_type<_InputIterator>>,
          class = enable_if_t<__has_input_iterator_category<_InputIterator>::value>,
          class = enable_if_t<__is_allocator<_Alloc>::value> >
vector(_InputIterator, _InputIterator) -> vector<__iter_value_type<_InputIterator>, _Alloc>;

template <class _InputIterator,
          class _Alloc,
          class = enable_if_t<__has_input_iterator_category<_InputIterator>::value>,
          class = enable_if_t<__is_allocator<_Alloc>::value> >
vector(_InputIterator, _InputIterator, _Alloc) -> vector<__iter_value_type<_InputIterator>, _Alloc>;
# 988 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\vector" 3
template <class _Tp, class _Allocator>
                              void
vector<_Tp, _Allocator>::__swap_out_circular_buffer(__split_buffer<value_type, allocator_type&>& __v) {
  __annotate_delete();
  auto __new_begin = __v.__begin_ - (__end_ - __begin_);
  std::__uninitialized_allocator_relocate(
      __alloc(), std::__to_address(__begin_), std::__to_address(__end_), std::__to_address(__new_begin));
  __v.__begin_ = __new_begin;
  __end_ = __begin_;
  std::swap(this->__begin_, __v.__begin_);
  std::swap(this->__end_, __v.__end_);
  std::swap(this->__end_cap(), __v.__end_cap());
  __v.__first_ = __v.__begin_;
  __annotate_new(size());
}





template <class _Tp, class _Allocator>
                              typename vector<_Tp, _Allocator>::pointer
vector<_Tp, _Allocator>::__swap_out_circular_buffer(__split_buffer<value_type, allocator_type&>& __v, pointer __p) {
  __annotate_delete();
  pointer __ret = __v.__begin_;



  std::__uninitialized_allocator_relocate(
      __alloc(), std::__to_address(__p), std::__to_address(__end_), std::__to_address(__v.__end_));
  __v.__end_ += (__end_ - __p);
  __end_ = __p;
  auto __new_begin = __v.__begin_ - (__p - __begin_);

  std::__uninitialized_allocator_relocate(
      __alloc(), std::__to_address(__begin_), std::__to_address(__p), std::__to_address(__new_begin));
  __v.__begin_ = __new_begin;
  __end_ = __begin_;

  std::swap(this->__begin_, __v.__begin_);
  std::swap(this->__end_, __v.__end_);
  std::swap(this->__end_cap(), __v.__end_cap());
  __v.__first_ = __v.__begin_;
  __annotate_new(size());
  return __ret;
}

template <class _Tp, class _Allocator>
                              void vector<_Tp, _Allocator>::__vdeallocate() noexcept {
  if (this->__begin_ != nullptr) {
    clear();
    __annotate_delete();
    __alloc_traits::deallocate(this->__alloc(), this->__begin_, capacity());
    this->__begin_ = this->__end_ = this->__end_cap() = nullptr;
  }
}

template <class _Tp, class _Allocator>
                              typename vector<_Tp, _Allocator>::size_type
vector<_Tp, _Allocator>::max_size() const noexcept {
  return std::min<size_type>(__alloc_traits::max_size(this->__alloc()), numeric_limits<difference_type>::max());
}


template <class _Tp, class _Allocator>
                              inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) typename vector<_Tp, _Allocator>::size_type
vector<_Tp, _Allocator>::__recommend(size_type __new_size) const {
  const size_type __ms = max_size();
  if (__new_size > __ms)
    this->__throw_length_error();
  const size_type __cap = capacity();
  if (__cap >= __ms / 2)
    return __ms;
  return std::max<size_type>(2 * __cap, __new_size);
}






template <class _Tp, class _Allocator>
                              void vector<_Tp, _Allocator>::__construct_at_end(size_type __n) {
  _ConstructTransaction __tx(*this, __n);
  const_pointer __new_end = __tx.__new_end_;
  for (pointer __pos = __tx.__pos_; __pos != __new_end; __tx.__pos_ = ++__pos) {
    __alloc_traits::construct(this->__alloc(), std::__to_address(__pos));
  }
}







template <class _Tp, class _Allocator>
                              inline void
vector<_Tp, _Allocator>::__construct_at_end(size_type __n, const_reference __x) {
  _ConstructTransaction __tx(*this, __n);
  const_pointer __new_end = __tx.__new_end_;
  for (pointer __pos = __tx.__pos_; __pos != __new_end; __tx.__pos_ = ++__pos) {
    __alloc_traits::construct(this->__alloc(), std::__to_address(__pos), __x);
  }
}

template <class _Tp, class _Allocator>
template <class _InputIterator, class _Sentinel>
                              void
vector<_Tp, _Allocator>::__construct_at_end(_InputIterator __first, _Sentinel __last, size_type __n) {
  _ConstructTransaction __tx(*this, __n);
  __tx.__pos_ = std::__uninitialized_allocator_copy(__alloc(), __first, __last, __tx.__pos_);
}





template <class _Tp, class _Allocator>
                              void vector<_Tp, _Allocator>::__append(size_type __n) {
  if (static_cast<size_type>(this->__end_cap() - this->__end_) >= __n)
    this->__construct_at_end(__n);
  else {
    allocator_type& __a = this->__alloc();
    __split_buffer<value_type, allocator_type&> __v(__recommend(size() + __n), size(), __a);
    __v.__construct_at_end(__n);
    __swap_out_circular_buffer(__v);
  }
}





template <class _Tp, class _Allocator>
                              void vector<_Tp, _Allocator>::__append(size_type __n, const_reference __x) {
  if (static_cast<size_type>(this->__end_cap() - this->__end_) >= __n)
    this->__construct_at_end(__n, __x);
  else {
    allocator_type& __a = this->__alloc();
    __split_buffer<value_type, allocator_type&> __v(__recommend(size() + __n), size(), __a);
    __v.__construct_at_end(__n, __x);
    __swap_out_circular_buffer(__v);
  }
}

template <class _Tp, class _Allocator>
                              vector<_Tp, _Allocator>::vector(size_type __n) {
  auto __guard = std::__make_exception_guard(__destroy_vector(*this));
  if (__n > 0) {
    __vallocate(__n);
    __construct_at_end(__n);
  }
  __guard.__complete();
}


template <class _Tp, class _Allocator>
                              vector<_Tp, _Allocator>::vector(size_type __n, const allocator_type& __a)
    : __end_cap_(nullptr, __a) {
  auto __guard = std::__make_exception_guard(__destroy_vector(*this));
  if (__n > 0) {
    __vallocate(__n);
    __construct_at_end(__n);
  }
  __guard.__complete();
}


template <class _Tp, class _Allocator>
                              vector<_Tp, _Allocator>::vector(size_type __n, const value_type& __x) {
  auto __guard = std::__make_exception_guard(__destroy_vector(*this));
  if (__n > 0) {
    __vallocate(__n);
    __construct_at_end(__n, __x);
  }
  __guard.__complete();
}

template <class _Tp, class _Allocator>
template <class _InputIterator,
          __enable_if_t<__has_exactly_input_iterator_category<_InputIterator>::value &&
                            is_constructible<_Tp, typename iterator_traits<_InputIterator>::reference>::value,
                        int> >
                              vector<_Tp, _Allocator>::vector(_InputIterator __first, _InputIterator __last) {
  __init_with_sentinel(__first, __last);
}

template <class _Tp, class _Allocator>
template <class _InputIterator,
          __enable_if_t<__has_exactly_input_iterator_category<_InputIterator>::value &&
                            is_constructible<_Tp, typename iterator_traits<_InputIterator>::reference>::value,
                        int> >

vector<_Tp, _Allocator>::vector(_InputIterator __first, _InputIterator __last, const allocator_type& __a)
    : __end_cap_(nullptr, __a) {
  __init_with_sentinel(__first, __last);
}

template <class _Tp, class _Allocator>
template <class _ForwardIterator,
          __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value &&
                            is_constructible<_Tp, typename iterator_traits<_ForwardIterator>::reference>::value,
                        int> >
                              vector<_Tp, _Allocator>::vector(_ForwardIterator __first, _ForwardIterator __last) {
  size_type __n = static_cast<size_type>(std::distance(__first, __last));
  __init_with_size(__first, __last, __n);
}

template <class _Tp, class _Allocator>
template <class _ForwardIterator,
          __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value &&
                            is_constructible<_Tp, typename iterator_traits<_ForwardIterator>::reference>::value,
                        int> >

vector<_Tp, _Allocator>::vector(_ForwardIterator __first, _ForwardIterator __last, const allocator_type& __a)
    : __end_cap_(nullptr, __a) {
  size_type __n = static_cast<size_type>(std::distance(__first, __last));
  __init_with_size(__first, __last, __n);
}

template <class _Tp, class _Allocator>
                              vector<_Tp, _Allocator>::vector(const vector& __x)
    : __end_cap_(nullptr, __alloc_traits::select_on_container_copy_construction(__x.__alloc())) {
  __init_with_size(__x.__begin_, __x.__end_, __x.size());
}

template <class _Tp, class _Allocator>

vector<_Tp, _Allocator>::vector(const vector& __x, const __type_identity_t<allocator_type>& __a)
    : __end_cap_(nullptr, __a) {
  __init_with_size(__x.__begin_, __x.__end_, __x.size());
}

template <class _Tp, class _Allocator>
                              inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) vector<_Tp, _Allocator>::vector(vector&& __x)

    noexcept



    : __end_cap_(nullptr, std::move(__x.__alloc())) {
  this->__begin_ = __x.__begin_;
  this->__end_ = __x.__end_;
  this->__end_cap() = __x.__end_cap();
  __x.__begin_ = __x.__end_ = __x.__end_cap() = nullptr;
}

template <class _Tp, class _Allocator>
                              inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
vector<_Tp, _Allocator>::vector(vector&& __x, const __type_identity_t<allocator_type>& __a)
    : __end_cap_(nullptr, __a) {
  if (__a == __x.__alloc()) {
    this->__begin_ = __x.__begin_;
    this->__end_ = __x.__end_;
    this->__end_cap() = __x.__end_cap();
    __x.__begin_ = __x.__end_ = __x.__end_cap() = nullptr;
  } else {
    typedef move_iterator<iterator> _Ip;
    auto __guard = std::__make_exception_guard(__destroy_vector(*this));
    assign(_Ip(__x.begin()), _Ip(__x.end()));
    __guard.__complete();
  }
}



template <class _Tp, class _Allocator>
                              inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
vector<_Tp, _Allocator>::vector(initializer_list<value_type> __il) {
  auto __guard = std::__make_exception_guard(__destroy_vector(*this));
  if (__il.size() > 0) {
    __vallocate(__il.size());
    __construct_at_end(__il.begin(), __il.end(), __il.size());
  }
  __guard.__complete();
}

template <class _Tp, class _Allocator>
                              inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
vector<_Tp, _Allocator>::vector(initializer_list<value_type> __il, const allocator_type& __a)
    : __end_cap_(nullptr, __a) {
  auto __guard = std::__make_exception_guard(__destroy_vector(*this));
  if (__il.size() > 0) {
    __vallocate(__il.size());
    __construct_at_end(__il.begin(), __il.end(), __il.size());
  }
  __guard.__complete();
}



template <class _Tp, class _Allocator>
                              inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) vector<_Tp, _Allocator>&
vector<_Tp, _Allocator>::operator=(vector&& __x)
    noexcept(__noexcept_move_assign_container<_Allocator, __alloc_traits>::value) {
  __move_assign(__x, integral_constant<bool, __alloc_traits::propagate_on_container_move_assignment::value>());
  return *this;
}

template <class _Tp, class _Allocator>
                              void vector<_Tp, _Allocator>::__move_assign(vector& __c, false_type)
    noexcept(__alloc_traits::is_always_equal::value) {
  if (__alloc() != __c.__alloc()) {
    typedef move_iterator<iterator> _Ip;
    assign(_Ip(__c.begin()), _Ip(__c.end()));
  } else
    __move_assign(__c, true_type());
}

template <class _Tp, class _Allocator>
                              void vector<_Tp, _Allocator>::__move_assign(vector& __c, true_type)
    noexcept(is_nothrow_move_assignable<allocator_type>::value) {
  __vdeallocate();
  __move_assign_alloc(__c);
  this->__begin_ = __c.__begin_;
  this->__end_ = __c.__end_;
  this->__end_cap() = __c.__end_cap();
  __c.__begin_ = __c.__end_ = __c.__end_cap() = nullptr;
}

template <class _Tp, class _Allocator>
                              inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) vector<_Tp, _Allocator>&
vector<_Tp, _Allocator>::operator=(const vector& __x) {
  if (this != std::addressof(__x)) {
    __copy_assign_alloc(__x);
    assign(__x.__begin_, __x.__end_);
  }
  return *this;
}

template <class _Tp, class _Allocator>
template <class _InputIterator,
          __enable_if_t<__has_exactly_input_iterator_category<_InputIterator>::value &&
                            is_constructible<_Tp, typename iterator_traits<_InputIterator>::reference>::value,
                        int> >
                              void vector<_Tp, _Allocator>::assign(_InputIterator __first, _InputIterator __last) {
  __assign_with_sentinel(__first, __last);
}

template <class _Tp, class _Allocator>
template <class _Iterator, class _Sentinel>
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
vector<_Tp, _Allocator>::__assign_with_sentinel(_Iterator __first, _Sentinel __last) {
  clear();
  for (; __first != __last; ++__first)
    emplace_back(*__first);
}

template <class _Tp, class _Allocator>
template <class _ForwardIterator,
          __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value &&
                            is_constructible<_Tp, typename iterator_traits<_ForwardIterator>::reference>::value,
                        int> >
                              void vector<_Tp, _Allocator>::assign(_ForwardIterator __first, _ForwardIterator __last) {
  __assign_with_size(__first, __last, std::distance(__first, __last));
}

template <class _Tp, class _Allocator>
template <class _ForwardIterator, class _Sentinel>
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
vector<_Tp, _Allocator>::__assign_with_size(_ForwardIterator __first, _Sentinel __last, difference_type __n) {
  size_type __new_size = static_cast<size_type>(__n);
  if (__new_size <= capacity()) {
    if (__new_size > size()) {
      _ForwardIterator __mid = std::next(__first, size());
      std::copy(__first, __mid, this->__begin_);
      __construct_at_end(__mid, __last, __new_size - size());
    } else {
      pointer __m = std::__copy<_ClassicAlgPolicy>(__first, __last, this->__begin_).second;
      this->__destruct_at_end(__m);
    }
  } else {
    __vdeallocate();
    __vallocate(__recommend(__new_size));
    __construct_at_end(__first, __last, __new_size);
  }
}

template <class _Tp, class _Allocator>
                              void vector<_Tp, _Allocator>::assign(size_type __n, const_reference __u) {
  if (__n <= capacity()) {
    size_type __s = size();
    std::fill_n(this->__begin_, std::min(__n, __s), __u);
    if (__n > __s)
      __construct_at_end(__n - __s, __u);
    else
      this->__destruct_at_end(this->__begin_ + __n);
  } else {
    __vdeallocate();
    __vallocate(__recommend(static_cast<size_type>(__n)));
    __construct_at_end(__n, __u);
  }
}

template <class _Tp, class _Allocator>
                              inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) typename vector<_Tp, _Allocator>::iterator
vector<_Tp, _Allocator>::begin() noexcept {
  return __make_iter(this->__begin_);
}

template <class _Tp, class _Allocator>
                              inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) typename vector<_Tp, _Allocator>::const_iterator
vector<_Tp, _Allocator>::begin() const noexcept {
  return __make_iter(this->__begin_);
}

template <class _Tp, class _Allocator>
                              inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) typename vector<_Tp, _Allocator>::iterator
vector<_Tp, _Allocator>::end() noexcept {
  return __make_iter(this->__end_);
}

template <class _Tp, class _Allocator>
                              inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) typename vector<_Tp, _Allocator>::const_iterator
vector<_Tp, _Allocator>::end() const noexcept {
  return __make_iter(this->__end_);
}

template <class _Tp, class _Allocator>
                              inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) typename vector<_Tp, _Allocator>::reference
vector<_Tp, _Allocator>::operator[](size_type __n) noexcept {
  ((void)0);
  return this->__begin_[__n];
}

template <class _Tp, class _Allocator>
                              inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) typename vector<_Tp, _Allocator>::const_reference
vector<_Tp, _Allocator>::operator[](size_type __n) const noexcept {
  ((void)0);
  return this->__begin_[__n];
}

template <class _Tp, class _Allocator>
                              typename vector<_Tp, _Allocator>::reference vector<_Tp, _Allocator>::at(size_type __n) {
  if (__n >= size())
    this->__throw_out_of_range();
  return this->__begin_[__n];
}

template <class _Tp, class _Allocator>
                              typename vector<_Tp, _Allocator>::const_reference
vector<_Tp, _Allocator>::at(size_type __n) const {
  if (__n >= size())
    this->__throw_out_of_range();
  return this->__begin_[__n];
}

template <class _Tp, class _Allocator>
                              void vector<_Tp, _Allocator>::reserve(size_type __n) {
  if (__n > capacity()) {
    if (__n > max_size())
      this->__throw_length_error();
    allocator_type& __a = this->__alloc();
    __split_buffer<value_type, allocator_type&> __v(__n, size(), __a);
    __swap_out_circular_buffer(__v);
  }
}

template <class _Tp, class _Allocator>
                              void vector<_Tp, _Allocator>::shrink_to_fit() noexcept {
  if (capacity() > size()) {



      allocator_type& __a = this->__alloc();
      __split_buffer<value_type, allocator_type&> __v(size(), size(), __a);
      __swap_out_circular_buffer(__v);




  }
}

template <class _Tp, class _Allocator>
template <class _Up>
                              typename vector<_Tp, _Allocator>::pointer
vector<_Tp, _Allocator>::__push_back_slow_path(_Up&& __x) {
  allocator_type& __a = this->__alloc();
  __split_buffer<value_type, allocator_type&> __v(__recommend(size() + 1), size(), __a);

  __alloc_traits::construct(__a, std::__to_address(__v.__end_), std::forward<_Up>(__x));
  __v.__end_++;
  __swap_out_circular_buffer(__v);
  return this->__end_;
}

template <class _Tp, class _Allocator>
                              inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
vector<_Tp, _Allocator>::push_back(const_reference __x) {
  pointer __end = this->__end_;
  if (__end < this->__end_cap()) {
    __construct_one_at_end(__x);
    ++__end;
  } else {
    __end = __push_back_slow_path(__x);
  }
  this->__end_ = __end;
}

template <class _Tp, class _Allocator>
                              inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void vector<_Tp, _Allocator>::push_back(value_type&& __x) {
  pointer __end = this->__end_;
  if (__end < this->__end_cap()) {
    __construct_one_at_end(std::move(__x));
    ++__end;
  } else {
    __end = __push_back_slow_path(std::move(__x));
  }
  this->__end_ = __end;
}

template <class _Tp, class _Allocator>
template <class... _Args>
                              typename vector<_Tp, _Allocator>::pointer
vector<_Tp, _Allocator>::__emplace_back_slow_path(_Args&&... __args) {
  allocator_type& __a = this->__alloc();
  __split_buffer<value_type, allocator_type&> __v(__recommend(size() + 1), size(), __a);

  __alloc_traits::construct(__a, std::__to_address(__v.__end_), std::forward<_Args>(__args)...);
  __v.__end_++;
  __swap_out_circular_buffer(__v);
  return this->__end_;
}

template <class _Tp, class _Allocator>
template <class... _Args>
                              inline

    typename vector<_Tp, _Allocator>::reference



    vector<_Tp, _Allocator>::emplace_back(_Args&&... __args) {
  pointer __end = this->__end_;
  if (__end < this->__end_cap()) {
    __construct_one_at_end(std::forward<_Args>(__args)...);
    ++__end;
  } else {
    __end = __emplace_back_slow_path(std::forward<_Args>(__args)...);
  }
  this->__end_ = __end;

  return *(__end - 1);

}

template <class _Tp, class _Allocator>
                              inline void vector<_Tp, _Allocator>::pop_back() {
  ((void)0);
  this->__destruct_at_end(this->__end_ - 1);
}

template <class _Tp, class _Allocator>
                              inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) typename vector<_Tp, _Allocator>::iterator
vector<_Tp, _Allocator>::erase(const_iterator __position) {
  ((void)0);

  difference_type __ps = __position - cbegin();
  pointer __p = this->__begin_ + __ps;
  this->__destruct_at_end(std::move(__p + 1, this->__end_, __p));
  return __make_iter(__p);
}

template <class _Tp, class _Allocator>
                              typename vector<_Tp, _Allocator>::iterator
vector<_Tp, _Allocator>::erase(const_iterator __first, const_iterator __last) {
  ((void)0);
  pointer __p = this->__begin_ + (__first - begin());
  if (__first != __last) {
    this->__destruct_at_end(std::move(__p + (__last - __first), this->__end_, __p));
  }
  return __make_iter(__p);
}

template <class _Tp, class _Allocator>
                              void
vector<_Tp, _Allocator>::__move_range(pointer __from_s, pointer __from_e, pointer __to) {
  pointer __old_last = this->__end_;
  difference_type __n = __old_last - __to;
  {
    pointer __i = __from_s + __n;
    _ConstructTransaction __tx(*this, __from_e - __i);
    for (pointer __pos = __tx.__pos_; __i < __from_e; ++__i, (void)++__pos, __tx.__pos_ = __pos) {
      __alloc_traits::construct(this->__alloc(), std::__to_address(__pos), std::move(*__i));
    }
  }
  std::move_backward(__from_s, __from_s + __n, __old_last);
}

template <class _Tp, class _Allocator>
                              typename vector<_Tp, _Allocator>::iterator
vector<_Tp, _Allocator>::insert(const_iterator __position, const_reference __x) {
  pointer __p = this->__begin_ + (__position - begin());

  if (!__libcpp_is_constant_evaluated() && this->__end_ < this->__end_cap()) {
    if (__p == this->__end_) {
      __construct_one_at_end(__x);
    } else {
      __move_range(__p, this->__end_, __p + 1);
      const_pointer __xr = pointer_traits<const_pointer>::pointer_to(__x);
      if (__p <= __xr && __xr < this->__end_)
        ++__xr;
      *__p = *__xr;
    }
  } else {
    allocator_type& __a = this->__alloc();
    __split_buffer<value_type, allocator_type&> __v(__recommend(size() + 1), __p - this->__begin_, __a);
    __v.push_back(__x);
    __p = __swap_out_circular_buffer(__v, __p);
  }
  return __make_iter(__p);
}

template <class _Tp, class _Allocator>
                              typename vector<_Tp, _Allocator>::iterator
vector<_Tp, _Allocator>::insert(const_iterator __position, value_type&& __x) {
  pointer __p = this->__begin_ + (__position - begin());
  if (this->__end_ < this->__end_cap()) {
    if (__p == this->__end_) {
      __construct_one_at_end(std::move(__x));
    } else {
      __move_range(__p, this->__end_, __p + 1);
      *__p = std::move(__x);
    }
  } else {
    allocator_type& __a = this->__alloc();
    __split_buffer<value_type, allocator_type&> __v(__recommend(size() + 1), __p - this->__begin_, __a);
    __v.push_back(std::move(__x));
    __p = __swap_out_circular_buffer(__v, __p);
  }
  return __make_iter(__p);
}

template <class _Tp, class _Allocator>
template <class... _Args>
                              typename vector<_Tp, _Allocator>::iterator
vector<_Tp, _Allocator>::emplace(const_iterator __position, _Args&&... __args) {
  pointer __p = this->__begin_ + (__position - begin());
  if (this->__end_ < this->__end_cap()) {
    if (__p == this->__end_) {
      __construct_one_at_end(std::forward<_Args>(__args)...);
    } else {
      __temp_value<value_type, _Allocator> __tmp(this->__alloc(), std::forward<_Args>(__args)...);
      __move_range(__p, this->__end_, __p + 1);
      *__p = std::move(__tmp.get());
    }
  } else {
    allocator_type& __a = this->__alloc();
    __split_buffer<value_type, allocator_type&> __v(__recommend(size() + 1), __p - this->__begin_, __a);
    __v.emplace_back(std::forward<_Args>(__args)...);
    __p = __swap_out_circular_buffer(__v, __p);
  }
  return __make_iter(__p);
}

template <class _Tp, class _Allocator>
                              typename vector<_Tp, _Allocator>::iterator
vector<_Tp, _Allocator>::insert(const_iterator __position, size_type __n, const_reference __x) {
  pointer __p = this->__begin_ + (__position - begin());
  if (__n > 0) {

    if (!__libcpp_is_constant_evaluated() && __n <= static_cast<size_type>(this->__end_cap() - this->__end_)) {
      size_type __old_n = __n;
      pointer __old_last = this->__end_;
      if (__n > static_cast<size_type>(this->__end_ - __p)) {
        size_type __cx = __n - (this->__end_ - __p);
        __construct_at_end(__cx, __x);
        __n -= __cx;
      }
      if (__n > 0) {
        __move_range(__p, __old_last, __p + __old_n);
        const_pointer __xr = pointer_traits<const_pointer>::pointer_to(__x);
        if (__p <= __xr && __xr < this->__end_)
          __xr += __old_n;
        std::fill_n(__p, __n, *__xr);
      }
    } else {
      allocator_type& __a = this->__alloc();
      __split_buffer<value_type, allocator_type&> __v(__recommend(size() + __n), __p - this->__begin_, __a);
      __v.__construct_at_end(__n, __x);
      __p = __swap_out_circular_buffer(__v, __p);
    }
  }
  return __make_iter(__p);
}
template <class _Tp, class _Allocator>
template <class _InputIterator,
          __enable_if_t<__has_exactly_input_iterator_category<_InputIterator>::value &&
                            is_constructible<_Tp, typename iterator_traits<_InputIterator>::reference>::value,
                        int> >
                              typename vector<_Tp, _Allocator>::iterator
vector<_Tp, _Allocator>::insert(const_iterator __position, _InputIterator __first, _InputIterator __last) {
  return __insert_with_sentinel(__position, __first, __last);
}

template <class _Tp, class _Allocator>
template <class _InputIterator, class _Sentinel>
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) typename vector<_Tp, _Allocator>::iterator
vector<_Tp, _Allocator>::__insert_with_sentinel(const_iterator __position, _InputIterator __first, _Sentinel __last) {
  difference_type __off = __position - begin();
  pointer __p = this->__begin_ + __off;
  allocator_type& __a = this->__alloc();
  pointer __old_last = this->__end_;
  for (; this->__end_ != this->__end_cap() && __first != __last; ++__first) {
    __construct_one_at_end(*__first);
  }
  __split_buffer<value_type, allocator_type&> __v(__a);
  if (__first != __last) {



      __v.__construct_at_end_with_sentinel(std::move(__first), std::move(__last));
      difference_type __old_size = __old_last - this->__begin_;
      difference_type __old_p = __p - this->__begin_;
      reserve(__recommend(size() + __v.size()));
      __p = this->__begin_ + __old_p;
      __old_last = this->__begin_ + __old_size;






  }
  __p = std::rotate(__p, __old_last, this->__end_);
  insert(__make_iter(__p), std::make_move_iterator(__v.begin()), std::make_move_iterator(__v.end()));
  return begin() + __off;
}

template <class _Tp, class _Allocator>
template <class _ForwardIterator,
          __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value &&
                            is_constructible<_Tp, typename iterator_traits<_ForwardIterator>::reference>::value,
                        int> >
                              typename vector<_Tp, _Allocator>::iterator
vector<_Tp, _Allocator>::insert(const_iterator __position, _ForwardIterator __first, _ForwardIterator __last) {
  return __insert_with_size(__position, __first, __last, std::distance(__first, __last));
}

template <class _Tp, class _Allocator>
template <class _Iterator, class _Sentinel>
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) typename vector<_Tp, _Allocator>::iterator
vector<_Tp, _Allocator>::__insert_with_size(
    const_iterator __position, _Iterator __first, _Sentinel __last, difference_type __n) {
  auto __insertion_size = __n;
  pointer __p = this->__begin_ + (__position - begin());
  if (__n > 0) {
    if (__n <= this->__end_cap() - this->__end_) {
      size_type __old_n = __n;
      pointer __old_last = this->__end_;
      _Iterator __m = std::next(__first, __n);
      difference_type __dx = this->__end_ - __p;
      if (__n > __dx) {
        __m = __first;
        difference_type __diff = this->__end_ - __p;
        std::advance(__m, __diff);
        __construct_at_end(__m, __last, __n - __diff);
        __n = __dx;
      }
      if (__n > 0) {
        __move_range(__p, __old_last, __p + __old_n);
        std::copy(__first, __m, __p);
      }
    } else {
      allocator_type& __a = this->__alloc();
      __split_buffer<value_type, allocator_type&> __v(__recommend(size() + __n), __p - this->__begin_, __a);
      __v.__construct_at_end_with_size(__first, __insertion_size);
      __p = __swap_out_circular_buffer(__v, __p);
    }
  }
  return __make_iter(__p);
}

template <class _Tp, class _Allocator>
                              void vector<_Tp, _Allocator>::resize(size_type __sz) {
  size_type __cs = size();
  if (__cs < __sz)
    this->__append(__sz - __cs);
  else if (__cs > __sz)
    this->__destruct_at_end(this->__begin_ + __sz);
}

template <class _Tp, class _Allocator>
                              void vector<_Tp, _Allocator>::resize(size_type __sz, const_reference __x) {
  size_type __cs = size();
  if (__cs < __sz)
    this->__append(__sz - __cs, __x);
  else if (__cs > __sz)
    this->__destruct_at_end(this->__begin_ + __sz);
}

template <class _Tp, class _Allocator>
                              void vector<_Tp, _Allocator>::swap(vector& __x)

    noexcept



{
  ((void)0);



  std::swap(this->__begin_, __x.__begin_);
  std::swap(this->__end_, __x.__end_);
  std::swap(this->__end_cap(), __x.__end_cap());
  std::__swap_allocator(
      this->__alloc(), __x.__alloc(), integral_constant<bool, __alloc_traits::propagate_on_container_swap::value>());
}

template <class _Tp, class _Allocator>
                              bool vector<_Tp, _Allocator>::__invariants() const {
  if (this->__begin_ == nullptr) {
    if (this->__end_ != nullptr || this->__end_cap() != nullptr)
      return false;
  } else {
    if (this->__begin_ > this->__end_)
      return false;
    if (this->__begin_ == this->__end_cap())
      return false;
    if (this->__end_ > this->__end_cap())
      return false;
  }
  return true;
}



template <class _Allocator>
class vector<bool, _Allocator>;

template <class _Allocator>
struct hash<vector<bool, _Allocator> >;

template <class _Allocator>
struct __has_storage_type<vector<bool, _Allocator> > {
  static const bool value = true;
};

template <class _Allocator>
class vector<bool, _Allocator> {
public:
  typedef vector __self;
  typedef bool value_type;
  typedef _Allocator allocator_type;
  typedef allocator_traits<allocator_type> __alloc_traits;
  typedef typename __alloc_traits::size_type size_type;
  typedef typename __alloc_traits::difference_type difference_type;
  typedef size_type __storage_type;
  typedef __bit_iterator<vector, false> pointer;
  typedef __bit_iterator<vector, true> const_pointer;
  typedef pointer iterator;
  typedef const_pointer const_iterator;
  typedef std::reverse_iterator<iterator> reverse_iterator;
  typedef std::reverse_iterator<const_iterator> const_reverse_iterator;

private:
  typedef __rebind_alloc<__alloc_traits, __storage_type> __storage_allocator;
  typedef allocator_traits<__storage_allocator> __storage_traits;
  typedef typename __storage_traits::pointer __storage_pointer;
  typedef typename __storage_traits::const_pointer __const_storage_pointer;

  __storage_pointer __begin_;
  size_type __size_;
  __compressed_pair<size_type, __storage_allocator> __cap_alloc_;

public:
  typedef __bit_reference<vector> reference;

  using const_reference = bool;




private:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type& __cap() noexcept { return __cap_alloc_.first(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const size_type& __cap() const noexcept {
    return __cap_alloc_.first();
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __storage_allocator& __alloc() noexcept {
    return __cap_alloc_.second();
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const __storage_allocator& __alloc() const noexcept {
    return __cap_alloc_.second();
  }

  static const unsigned __bits_per_word = static_cast<unsigned>(sizeof(__storage_type) * 8);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static size_type
  __internal_cap_to_external(size_type __n) noexcept {
    return __n * __bits_per_word;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static size_type
  __external_cap_to_internal(size_type __n) noexcept {
    return (__n - 1) / __bits_per_word + 1;
  }

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) vector()
      noexcept(is_nothrow_default_constructible<allocator_type>::value);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit vector(const allocator_type& __a)



      noexcept;


private:
  class __destroy_vector {
  public:
    constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __destroy_vector(vector& __vec) : __vec_(__vec) {}

                                  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void operator()() {
      if (__vec_.__begin_ != nullptr)
        __storage_traits::deallocate(__vec_.__alloc(), __vec_.__begin_, __vec_.__cap());
    }

  private:
    vector& __vec_;
  };

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) ~vector() { __destroy_vector (*this)(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit vector(size_type __n);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit vector(size_type __n, const allocator_type& __a);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) vector(size_type __n, const value_type& __v);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
  vector(size_type __n, const value_type& __v, const allocator_type& __a);
  template <class _InputIterator, __enable_if_t<__has_exactly_input_iterator_category<_InputIterator>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) vector(_InputIterator __first, _InputIterator __last);
  template <class _InputIterator, __enable_if_t<__has_exactly_input_iterator_category<_InputIterator>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
  vector(_InputIterator __first, _InputIterator __last, const allocator_type& __a);
  template <class _ForwardIterator, __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) vector(_ForwardIterator __first, _ForwardIterator __last);
  template <class _ForwardIterator, __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
  vector(_ForwardIterator __first, _ForwardIterator __last, const allocator_type& __a);
# 1947 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\vector" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) vector(const vector& __v);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) vector(const vector& __v, const allocator_type& __a);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) vector& operator=(const vector& __v);


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) vector(initializer_list<value_type> __il);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
  vector(initializer_list<value_type> __il, const allocator_type& __a);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) vector& operator=(initializer_list<value_type> __il) {
    assign(__il.begin(), __il.end());
    return *this;
  }



  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) vector(vector&& __v)

      noexcept;



  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
  vector(vector&& __v, const __type_identity_t<allocator_type>& __a);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) vector& operator=(vector&& __v)
      noexcept(__noexcept_move_assign_container<_Allocator, __alloc_traits>::value);

  template <class _InputIterator, __enable_if_t<__has_exactly_input_iterator_category<_InputIterator>::value, int> = 0>
  void __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) assign(_InputIterator __first, _InputIterator __last);
  template <class _ForwardIterator, __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value, int> = 0>
  void __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) assign(_ForwardIterator __first, _ForwardIterator __last);
# 1992 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\vector" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void assign(size_type __n, const value_type& __x);


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void assign(initializer_list<value_type> __il) {
    assign(__il.begin(), __il.end());
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) allocator_type get_allocator() const noexcept {
    return allocator_type(this->__alloc());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type max_size() const noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type capacity() const noexcept {
    return __internal_cap_to_external(__cap());
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type size() const noexcept { return __size_; }
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool empty() const noexcept {
    return __size_ == 0;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void reserve(size_type __n);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void shrink_to_fit() noexcept;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iterator begin() noexcept { return __make_iter(0); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_iterator begin() const noexcept { return __make_iter(0); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iterator end() noexcept { return __make_iter(__size_); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_iterator end() const noexcept {
    return __make_iter(__size_);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) reverse_iterator rbegin() noexcept {
    return reverse_iterator(end());
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_reverse_iterator rbegin() const noexcept {
    return const_reverse_iterator(end());
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) reverse_iterator rend() noexcept {
    return reverse_iterator(begin());
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_reverse_iterator rend() const noexcept {
    return const_reverse_iterator(begin());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_iterator cbegin() const noexcept { return __make_iter(0); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_iterator cend() const noexcept {
    return __make_iter(__size_);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_reverse_iterator crbegin() const noexcept {
    return rbegin();
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_reverse_iterator crend() const noexcept { return rend(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) reference operator[](size_type __n) { return __make_ref(__n); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_reference operator[](size_type __n) const {
    return __make_ref(__n);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) reference at(size_type __n);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_reference at(size_type __n) const;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) reference front() { return __make_ref(0); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_reference front() const { return __make_ref(0); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) reference back() { return __make_ref(__size_ - 1); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_reference back() const { return __make_ref(__size_ - 1); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void push_back(const value_type& __x);

  template <class... _Args>

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) reference emplace_back(_Args&&... __args)



  {
    push_back(value_type(std::forward<_Args>(__args)...));

    return this->back();

  }
# 2079 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\vector" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void pop_back() { --__size_; }


  template <class... _Args>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iterator emplace(const_iterator __position, _Args&&... __args) {
    return insert(__position, value_type(std::forward<_Args>(__args)...));
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iterator insert(const_iterator __position, const value_type& __x);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iterator
  insert(const_iterator __position, size_type __n, const value_type& __x);
  template <class _InputIterator, __enable_if_t<__has_exactly_input_iterator_category<_InputIterator>::value, int> = 0>
  iterator __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
  insert(const_iterator __position, _InputIterator __first, _InputIterator __last);
  template <class _ForwardIterator, __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value, int> = 0>
  iterator __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
  insert(const_iterator __position, _ForwardIterator __first, _ForwardIterator __last);
# 2112 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\vector" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iterator
  insert(const_iterator __position, initializer_list<value_type> __il) {
    return insert(__position, __il.begin(), __il.end());
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iterator erase(const_iterator __position);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iterator erase(const_iterator __first, const_iterator __last);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void clear() noexcept { __size_ = 0; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void swap(vector&)

      noexcept;



  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static void swap(reference __x, reference __y) noexcept {
    std::swap(__x, __y);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void resize(size_type __sz, value_type __x = false);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void flip() noexcept;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool __invariants() const;

private:
  [[noreturn]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __throw_length_error() const { std::__throw_length_error("vector"); }

  [[noreturn]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __throw_out_of_range() const { std::__throw_out_of_range("vector"); }

  template <class _InputIterator, class _Sentinel>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
  __init_with_size(_InputIterator __first, _Sentinel __last, size_type __n) {
    auto __guard = std::__make_exception_guard(__destroy_vector(*this));

    if (__n > 0) {
      __vallocate(__n);
      __construct_at_end(std::move(__first), std::move(__last), __n);
    }

    __guard.__complete();
  }

  template <class _InputIterator, class _Sentinel>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
  __init_with_sentinel(_InputIterator __first, _Sentinel __last) {



      for (; __first != __last; ++__first)
        push_back(*__first);







  }

  template <class _Iterator, class _Sentinel>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __assign_with_sentinel(_Iterator __first, _Sentinel __last);

  template <class _ForwardIterator, class _Sentinel>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
  __assign_with_size(_ForwardIterator __first, _Sentinel __last, difference_type __ns);

  template <class _InputIterator, class _Sentinel>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iterator
  __insert_with_sentinel(const_iterator __position, _InputIterator __first, _Sentinel __last);

  template <class _Iterator, class _Sentinel>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iterator
  __insert_with_size(const_iterator __position, _Iterator __first, _Sentinel __last, difference_type __n);
# 2195 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\vector" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __vallocate(size_type __n) {
    if (__n > max_size())
      __throw_length_error();
    auto __allocation = std::__allocate_at_least(__alloc(), __external_cap_to_internal(__n));
    __begin_ = __allocation.ptr;
    __size_ = 0;
    __cap() = __allocation.count;
    if (__libcpp_is_constant_evaluated()) {
      for (size_type __i = 0; __i != __cap(); ++__i)
        std::__construct_at(std::__to_address(__begin_) + __i);
    }
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __vdeallocate() noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) static size_type __align_it(size_type __new_size) noexcept {
    return (__new_size + (__bits_per_word - 1)) & ~((size_type)__bits_per_word - 1);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_type __recommend(size_type __new_size) const;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __construct_at_end(size_type __n, bool __x);
  template <class _InputIterator, class _Sentinel>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
  __construct_at_end(_InputIterator __first, _Sentinel __last, size_type __n);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __append(size_type __n, const_reference __x);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) reference __make_ref(size_type __pos) noexcept {
    return reference(__begin_ + __pos / __bits_per_word, __storage_type(1) << __pos % __bits_per_word);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_reference __make_ref(size_type __pos) const noexcept {
    return __bit_const_reference<vector>(
        __begin_ + __pos / __bits_per_word, __storage_type(1) << __pos % __bits_per_word);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iterator __make_iter(size_type __pos) noexcept {
    return iterator(__begin_ + __pos / __bits_per_word, static_cast<unsigned>(__pos % __bits_per_word));
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const_iterator __make_iter(size_type __pos) const noexcept {
    return const_iterator(__begin_ + __pos / __bits_per_word, static_cast<unsigned>(__pos % __bits_per_word));
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iterator __const_iterator_cast(const_iterator __p) noexcept {
    return begin() + (__p - cbegin());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __copy_assign_alloc(const vector& __v) {
    __copy_assign_alloc(
        __v, integral_constant<bool, __storage_traits::propagate_on_container_copy_assignment::value>());
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __copy_assign_alloc(const vector& __c, true_type) {
    if (__alloc() != __c.__alloc())
      __vdeallocate();
    __alloc() = __c.__alloc();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __copy_assign_alloc(const vector&, false_type) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __move_assign(vector& __c, false_type);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __move_assign(vector& __c, true_type)
      noexcept(is_nothrow_move_assignable<allocator_type>::value);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __move_assign_alloc(vector& __c)
      noexcept(!__storage_traits::propagate_on_container_move_assignment::value || is_nothrow_move_assignable<allocator_type>::value) {

    __move_assign_alloc(
        __c, integral_constant<bool, __storage_traits::propagate_on_container_move_assignment::value>());
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __move_assign_alloc(vector& __c, true_type)
      noexcept(is_nothrow_move_assignable<allocator_type>::value) {
    __alloc() = std::move(__c.__alloc());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __move_assign_alloc(vector&, false_type) noexcept {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_t __hash_code() const noexcept;

  friend class __bit_reference<vector>;
  friend class __bit_const_reference<vector>;
  friend class __bit_iterator<vector, false>;
  friend class __bit_iterator<vector, true>;
  friend struct __bit_array<vector>;
  friend struct hash<vector>;
};

template <class _Allocator>
                              void vector<bool, _Allocator>::__vdeallocate() noexcept {
  if (this->__begin_ != nullptr) {
    __storage_traits::deallocate(this->__alloc(), this->__begin_, __cap());
    this->__begin_ = nullptr;
    this->__size_ = this->__cap() = 0;
  }
}

template <class _Allocator>
                              typename vector<bool, _Allocator>::size_type
vector<bool, _Allocator>::max_size() const noexcept {
  size_type __amax = __storage_traits::max_size(__alloc());
  size_type __nmax = numeric_limits<size_type>::max() / 2;
  if (__nmax / __bits_per_word <= __amax)
    return __nmax;
  return __internal_cap_to_external(__amax);
}


template <class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) typename vector<bool, _Allocator>::size_type
vector<bool, _Allocator>::__recommend(size_type __new_size) const {
  const size_type __ms = max_size();
  if (__new_size > __ms)
    this->__throw_length_error();
  const size_type __cap = capacity();
  if (__cap >= __ms / 2)
    return __ms;
  return std::max(2 * __cap, __align_it(__new_size));
}





template <class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
vector<bool, _Allocator>::__construct_at_end(size_type __n, bool __x) {
  size_type __old_size = this->__size_;
  this->__size_ += __n;
  if (__old_size == 0 || ((__old_size - 1) / __bits_per_word) != ((this->__size_ - 1) / __bits_per_word)) {
    if (this->__size_ <= __bits_per_word)
      this->__begin_[0] = __storage_type(0);
    else
      this->__begin_[(this->__size_ - 1) / __bits_per_word] = __storage_type(0);
  }
  std::fill_n(__make_iter(__old_size), __n, __x);
}

template <class _Allocator>
template <class _InputIterator, class _Sentinel>
                              void
vector<bool, _Allocator>::__construct_at_end(_InputIterator __first, _Sentinel __last, size_type __n) {
  size_type __old_size = this->__size_;
  this->__size_ += __n;
  if (__old_size == 0 || ((__old_size - 1) / __bits_per_word) != ((this->__size_ - 1) / __bits_per_word)) {
    if (this->__size_ <= __bits_per_word)
      this->__begin_[0] = __storage_type(0);
    else
      this->__begin_[(this->__size_ - 1) / __bits_per_word] = __storage_type(0);
  }
  std::__copy<_ClassicAlgPolicy>(__first, __last, __make_iter(__old_size));
}

template <class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) vector<bool, _Allocator>::vector()
    noexcept(is_nothrow_default_constructible<allocator_type>::value)
    : __begin_(nullptr), __size_(0), __cap_alloc_(0, __default_init_tag()) {}

template <class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) vector<bool, _Allocator>::vector(const allocator_type& __a)



        noexcept

    : __begin_(nullptr), __size_(0), __cap_alloc_(0, static_cast<__storage_allocator>(__a)) {
}

template <class _Allocator>
                              vector<bool, _Allocator>::vector(size_type __n)
    : __begin_(nullptr), __size_(0), __cap_alloc_(0, __default_init_tag()) {
  if (__n > 0) {
    __vallocate(__n);
    __construct_at_end(__n, false);
  }
}


template <class _Allocator>
                              vector<bool, _Allocator>::vector(size_type __n, const allocator_type& __a)
    : __begin_(nullptr), __size_(0), __cap_alloc_(0, static_cast<__storage_allocator>(__a)) {
  if (__n > 0) {
    __vallocate(__n);
    __construct_at_end(__n, false);
  }
}


template <class _Allocator>
                              vector<bool, _Allocator>::vector(size_type __n, const value_type& __x)
    : __begin_(nullptr), __size_(0), __cap_alloc_(0, __default_init_tag()) {
  if (__n > 0) {
    __vallocate(__n);
    __construct_at_end(__n, __x);
  }
}

template <class _Allocator>

vector<bool, _Allocator>::vector(size_type __n, const value_type& __x, const allocator_type& __a)
    : __begin_(nullptr), __size_(0), __cap_alloc_(0, static_cast<__storage_allocator>(__a)) {
  if (__n > 0) {
    __vallocate(__n);
    __construct_at_end(__n, __x);
  }
}

template <class _Allocator>
template <class _InputIterator, __enable_if_t<__has_exactly_input_iterator_category<_InputIterator>::value, int> >
                              vector<bool, _Allocator>::vector(_InputIterator __first, _InputIterator __last)
    : __begin_(nullptr), __size_(0), __cap_alloc_(0, __default_init_tag()) {
  __init_with_sentinel(__first, __last);
}

template <class _Allocator>
template <class _InputIterator, __enable_if_t<__has_exactly_input_iterator_category<_InputIterator>::value, int> >

vector<bool, _Allocator>::vector(_InputIterator __first, _InputIterator __last, const allocator_type& __a)
    : __begin_(nullptr), __size_(0), __cap_alloc_(0, static_cast<__storage_allocator>(__a)) {
  __init_with_sentinel(__first, __last);
}

template <class _Allocator>
template <class _ForwardIterator, __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value, int> >
                              vector<bool, _Allocator>::vector(_ForwardIterator __first, _ForwardIterator __last)
    : __begin_(nullptr), __size_(0), __cap_alloc_(0, __default_init_tag()) {
  auto __n = static_cast<size_type>(std::distance(__first, __last));
  __init_with_size(__first, __last, __n);
}

template <class _Allocator>
template <class _ForwardIterator, __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value, int> >

vector<bool, _Allocator>::vector(_ForwardIterator __first, _ForwardIterator __last, const allocator_type& __a)
    : __begin_(nullptr), __size_(0), __cap_alloc_(0, static_cast<__storage_allocator>(__a)) {
  auto __n = static_cast<size_type>(std::distance(__first, __last));
  __init_with_size(__first, __last, __n);
}



template <class _Allocator>
                              vector<bool, _Allocator>::vector(initializer_list<value_type> __il)
    : __begin_(nullptr), __size_(0), __cap_alloc_(0, __default_init_tag()) {
  size_type __n = static_cast<size_type>(__il.size());
  if (__n > 0) {
    __vallocate(__n);
    __construct_at_end(__il.begin(), __il.end(), __n);
  }
}

template <class _Allocator>

vector<bool, _Allocator>::vector(initializer_list<value_type> __il, const allocator_type& __a)
    : __begin_(nullptr), __size_(0), __cap_alloc_(0, static_cast<__storage_allocator>(__a)) {
  size_type __n = static_cast<size_type>(__il.size());
  if (__n > 0) {
    __vallocate(__n);
    __construct_at_end(__il.begin(), __il.end(), __n);
  }
}



template <class _Allocator>
                              vector<bool, _Allocator>::vector(const vector& __v)
    : __begin_(nullptr),
      __size_(0),
      __cap_alloc_(0, __storage_traits::select_on_container_copy_construction(__v.__alloc())) {
  if (__v.size() > 0) {
    __vallocate(__v.size());
    __construct_at_end(__v.begin(), __v.end(), __v.size());
  }
}

template <class _Allocator>
                              vector<bool, _Allocator>::vector(const vector& __v, const allocator_type& __a)
    : __begin_(nullptr), __size_(0), __cap_alloc_(0, __a) {
  if (__v.size() > 0) {
    __vallocate(__v.size());
    __construct_at_end(__v.begin(), __v.end(), __v.size());
  }
}

template <class _Allocator>
                              vector<bool, _Allocator>& vector<bool, _Allocator>::operator=(const vector& __v) {
  if (this != std::addressof(__v)) {
    __copy_assign_alloc(__v);
    if (__v.__size_) {
      if (__v.__size_ > capacity()) {
        __vdeallocate();
        __vallocate(__v.__size_);
      }
      std::copy(__v.__begin_, __v.__begin_ + __external_cap_to_internal(__v.__size_), __begin_);
    }
    __size_ = __v.__size_;
  }
  return *this;
}

template <class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) vector<bool, _Allocator>::vector(vector&& __v)

    noexcept



    : __begin_(__v.__begin_),
      __size_(__v.__size_),
      __cap_alloc_(std::move(__v.__cap_alloc_)) {
  __v.__begin_ = nullptr;
  __v.__size_ = 0;
  __v.__cap() = 0;
}

template <class _Allocator>

vector<bool, _Allocator>::vector(vector&& __v, const __type_identity_t<allocator_type>& __a)
    : __begin_(nullptr), __size_(0), __cap_alloc_(0, __a) {
  if (__a == allocator_type(__v.__alloc())) {
    this->__begin_ = __v.__begin_;
    this->__size_ = __v.__size_;
    this->__cap() = __v.__cap();
    __v.__begin_ = nullptr;
    __v.__cap() = __v.__size_ = 0;
  } else if (__v.size() > 0) {
    __vallocate(__v.size());
    __construct_at_end(__v.begin(), __v.end(), __v.size());
  }
}

template <class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) vector<bool, _Allocator>&
vector<bool, _Allocator>::operator=(vector&& __v)
    noexcept(__noexcept_move_assign_container<_Allocator, __alloc_traits>::value) {
  __move_assign(__v, integral_constant<bool, __storage_traits::propagate_on_container_move_assignment::value>());
  return *this;
}

template <class _Allocator>
                              void vector<bool, _Allocator>::__move_assign(vector& __c, false_type) {
  if (__alloc() != __c.__alloc())
    assign(__c.begin(), __c.end());
  else
    __move_assign(__c, true_type());
}

template <class _Allocator>
                              void vector<bool, _Allocator>::__move_assign(vector& __c, true_type)
    noexcept(is_nothrow_move_assignable<allocator_type>::value) {
  __vdeallocate();
  __move_assign_alloc(__c);
  this->__begin_ = __c.__begin_;
  this->__size_ = __c.__size_;
  this->__cap() = __c.__cap();
  __c.__begin_ = nullptr;
  __c.__cap() = __c.__size_ = 0;
}

template <class _Allocator>
                              void vector<bool, _Allocator>::assign(size_type __n, const value_type& __x) {
  __size_ = 0;
  if (__n > 0) {
    size_type __c = capacity();
    if (__n <= __c)
      __size_ = __n;
    else {
      vector __v(get_allocator());
      __v.reserve(__recommend(__n));
      __v.__size_ = __n;
      swap(__v);
    }
    std::fill_n(begin(), __n, __x);
  }
}

template <class _Allocator>
template <class _InputIterator, __enable_if_t<__has_exactly_input_iterator_category<_InputIterator>::value, int> >
                              void vector<bool, _Allocator>::assign(_InputIterator __first, _InputIterator __last) {
  __assign_with_sentinel(__first, __last);
}

template <class _Allocator>
template <class _Iterator, class _Sentinel>
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
vector<bool, _Allocator>::__assign_with_sentinel(_Iterator __first, _Sentinel __last) {
  clear();
  for (; __first != __last; ++__first)
    push_back(*__first);
}

template <class _Allocator>
template <class _ForwardIterator, __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value, int> >
                              void vector<bool, _Allocator>::assign(_ForwardIterator __first, _ForwardIterator __last) {
  __assign_with_size(__first, __last, std::distance(__first, __last));
}

template <class _Allocator>
template <class _ForwardIterator, class _Sentinel>
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
vector<bool, _Allocator>::__assign_with_size(_ForwardIterator __first, _Sentinel __last, difference_type __ns) {
  ((void)0);

  clear();

  const size_t __n = static_cast<size_type>(__ns);
  if (__n) {
    if (__n > capacity()) {
      __vdeallocate();
      __vallocate(__n);
    }
    __construct_at_end(__first, __last, __n);
  }
}

template <class _Allocator>
                              void vector<bool, _Allocator>::reserve(size_type __n) {
  if (__n > capacity()) {
    if (__n > max_size())
      this->__throw_length_error();
    vector __v(this->get_allocator());
    __v.__vallocate(__n);
    __v.__construct_at_end(this->begin(), this->end(), this->size());
    swap(__v);
  }
}

template <class _Allocator>
                              void vector<bool, _Allocator>::shrink_to_fit() noexcept {
  if (__external_cap_to_internal(size()) > __cap()) {



      vector(*this, allocator_type(__alloc())).swap(*this);




  }
}

template <class _Allocator>
typename vector<bool, _Allocator>::reference vector<bool, _Allocator>::at(size_type __n) {
  if (__n >= size())
    this->__throw_out_of_range();
  return (*this)[__n];
}

template <class _Allocator>
typename vector<bool, _Allocator>::const_reference vector<bool, _Allocator>::at(size_type __n) const {
  if (__n >= size())
    this->__throw_out_of_range();
  return (*this)[__n];
}

template <class _Allocator>
                              void vector<bool, _Allocator>::push_back(const value_type& __x) {
  if (this->__size_ == this->capacity())
    reserve(__recommend(this->__size_ + 1));
  ++this->__size_;
  back() = __x;
}

template <class _Allocator>
                              typename vector<bool, _Allocator>::iterator
vector<bool, _Allocator>::insert(const_iterator __position, const value_type& __x) {
  iterator __r;
  if (size() < capacity()) {
    const_iterator __old_end = end();
    ++__size_;
    std::copy_backward(__position, __old_end, end());
    __r = __const_iterator_cast(__position);
  } else {
    vector __v(get_allocator());
    __v.reserve(__recommend(__size_ + 1));
    __v.__size_ = __size_ + 1;
    __r = std::copy(cbegin(), __position, __v.begin());
    std::copy_backward(__position, cend(), __v.end());
    swap(__v);
  }
  *__r = __x;
  return __r;
}

template <class _Allocator>
                              typename vector<bool, _Allocator>::iterator
vector<bool, _Allocator>::insert(const_iterator __position, size_type __n, const value_type& __x) {
  iterator __r;
  size_type __c = capacity();
  if (__n <= __c && size() <= __c - __n) {
    const_iterator __old_end = end();
    __size_ += __n;
    std::copy_backward(__position, __old_end, end());
    __r = __const_iterator_cast(__position);
  } else {
    vector __v(get_allocator());
    __v.reserve(__recommend(__size_ + __n));
    __v.__size_ = __size_ + __n;
    __r = std::copy(cbegin(), __position, __v.begin());
    std::copy_backward(__position, cend(), __v.end());
    swap(__v);
  }
  std::fill_n(__r, __n, __x);
  return __r;
}

template <class _Allocator>
template <class _InputIterator, __enable_if_t<__has_exactly_input_iterator_category<_InputIterator>::value, int> >
                              typename vector<bool, _Allocator>::iterator
vector<bool, _Allocator>::insert(const_iterator __position, _InputIterator __first, _InputIterator __last) {
  return __insert_with_sentinel(__position, __first, __last);
}

template <class _Allocator>
template <class _InputIterator, class _Sentinel>
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) typename vector<bool, _Allocator>::iterator
vector<bool, _Allocator>::__insert_with_sentinel(const_iterator __position, _InputIterator __first, _Sentinel __last) {
  difference_type __off = __position - begin();
  iterator __p = __const_iterator_cast(__position);
  iterator __old_end = end();
  for (; size() != capacity() && __first != __last; ++__first) {
    ++this->__size_;
    back() = *__first;
  }
  vector __v(get_allocator());
  if (__first != __last) {



      __v.__assign_with_sentinel(std::move(__first), std::move(__last));
      difference_type __old_size = static_cast<difference_type>(__old_end - begin());
      difference_type __old_p = __p - begin();
      reserve(__recommend(size() + __v.size()));
      __p = begin() + __old_p;
      __old_end = begin() + __old_size;






  }
  __p = std::rotate(__p, __old_end, end());
  insert(__p, __v.begin(), __v.end());
  return begin() + __off;
}

template <class _Allocator>
template <class _ForwardIterator, __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value, int> >
                              typename vector<bool, _Allocator>::iterator
vector<bool, _Allocator>::insert(const_iterator __position, _ForwardIterator __first, _ForwardIterator __last) {
  return __insert_with_size(__position, __first, __last, std::distance(__first, __last));
}

template <class _Allocator>
template <class _ForwardIterator, class _Sentinel>
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) typename vector<bool, _Allocator>::iterator
vector<bool, _Allocator>::__insert_with_size(
    const_iterator __position, _ForwardIterator __first, _Sentinel __last, difference_type __n_signed) {
  ((void)0);
  const size_type __n = static_cast<size_type>(__n_signed);
  iterator __r;
  size_type __c = capacity();
  if (__n <= __c && size() <= __c - __n) {
    const_iterator __old_end = end();
    __size_ += __n;
    std::copy_backward(__position, __old_end, end());
    __r = __const_iterator_cast(__position);
  } else {
    vector __v(get_allocator());
    __v.reserve(__recommend(__size_ + __n));
    __v.__size_ = __size_ + __n;
    __r = std::copy(cbegin(), __position, __v.begin());
    std::copy_backward(__position, cend(), __v.end());
    swap(__v);
  }
  std::__copy<_ClassicAlgPolicy>(__first, __last, __r);
  return __r;
}

template <class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) typename vector<bool, _Allocator>::iterator
vector<bool, _Allocator>::erase(const_iterator __position) {
  iterator __r = __const_iterator_cast(__position);
  std::copy(__position + 1, this->cend(), __r);
  --__size_;
  return __r;
}

template <class _Allocator>
                              typename vector<bool, _Allocator>::iterator
vector<bool, _Allocator>::erase(const_iterator __first, const_iterator __last) {
  iterator __r = __const_iterator_cast(__first);
  difference_type __d = __last - __first;
  std::copy(__last, this->cend(), __r);
  __size_ -= __d;
  return __r;
}

template <class _Allocator>
                              void vector<bool, _Allocator>::swap(vector& __x)

    noexcept



{
  std::swap(this->__begin_, __x.__begin_);
  std::swap(this->__size_, __x.__size_);
  std::swap(this->__cap(), __x.__cap());
  std::__swap_allocator(
      this->__alloc(), __x.__alloc(), integral_constant<bool, __alloc_traits::propagate_on_container_swap::value>());
}

template <class _Allocator>
                              void vector<bool, _Allocator>::resize(size_type __sz, value_type __x) {
  size_type __cs = size();
  if (__cs < __sz) {
    iterator __r;
    size_type __c = capacity();
    size_type __n = __sz - __cs;
    if (__n <= __c && __cs <= __c - __n) {
      __r = end();
      __size_ += __n;
    } else {
      vector __v(get_allocator());
      __v.reserve(__recommend(__size_ + __n));
      __v.__size_ = __size_ + __n;
      __r = std::copy(cbegin(), cend(), __v.begin());
      swap(__v);
    }
    std::fill_n(__r, __n, __x);
  } else
    __size_ = __sz;
}

template <class _Allocator>
                              void vector<bool, _Allocator>::flip() noexcept {

  size_type __n = __size_;
  __storage_pointer __p = __begin_;
  for (; __n >= __bits_per_word; ++__p, __n -= __bits_per_word)
    *__p = ~*__p;

  if (__n > 0) {
    __storage_type __m = ~__storage_type(0) >> (__bits_per_word - __n);
    __storage_type __b = *__p & __m;
    *__p &= ~__m;
    *__p |= ~__b & __m;
  }
}

template <class _Allocator>
                              bool vector<bool, _Allocator>::__invariants() const {
  if (this->__begin_ == nullptr) {
    if (this->__size_ != 0 || this->__cap() != 0)
      return false;
  } else {
    if (this->__cap() == 0)
      return false;
    if (this->__size_ > this->capacity())
      return false;
  }
  return true;
}

template <class _Allocator>
                              size_t vector<bool, _Allocator>::__hash_code() const noexcept {
  size_t __h = 0;

  size_type __n = __size_;
  __storage_pointer __p = __begin_;
  for (; __n >= __bits_per_word; ++__p, __n -= __bits_per_word)
    __h ^= *__p;

  if (__n > 0) {
    const __storage_type __m = ~__storage_type(0) >> (__bits_per_word - __n);
    __h ^= *__p & __m;
  }
  return __h;
}

template <class _Allocator>
struct hash<vector<bool, _Allocator> >
    : public __unary_function<vector<bool, _Allocator>, size_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_t
  operator()(const vector<bool, _Allocator>& __vec) const noexcept {
    return __vec.__hash_code();
  }
};

template <class _Tp, class _Allocator>
                              inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool
operator==(const vector<_Tp, _Allocator>& __x, const vector<_Tp, _Allocator>& __y) {
  const typename vector<_Tp, _Allocator>::size_type __sz = __x.size();
  return __sz == __y.size() && std::equal(__x.begin(), __x.end(), __y.begin());
}



template <class _Tp, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator!=(const vector<_Tp, _Allocator>& __x, const vector<_Tp, _Allocator>& __y) {
  return !(__x == __y);
}

template <class _Tp, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator<(const vector<_Tp, _Allocator>& __x, const vector<_Tp, _Allocator>& __y) {
  return std::lexicographical_compare(__x.begin(), __x.end(), __y.begin(), __y.end());
}

template <class _Tp, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator>(const vector<_Tp, _Allocator>& __x, const vector<_Tp, _Allocator>& __y) {
  return __y < __x;
}

template <class _Tp, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator>=(const vector<_Tp, _Allocator>& __x, const vector<_Tp, _Allocator>& __y) {
  return !(__x < __y);
}

template <class _Tp, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator<=(const vector<_Tp, _Allocator>& __x, const vector<_Tp, _Allocator>& __y) {
  return !(__y < __x);
}
# 2921 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\vector" 3
template <class _Tp, class _Allocator>
                              inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void
swap(vector<_Tp, _Allocator>& __x, vector<_Tp, _Allocator>& __y) noexcept(noexcept(__x.swap(__y))) {
  __x.swap(__y);
}
# 2974 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\vector" 3
}}


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
namespace pmr {
template <class _ValueT>
using vector = std::vector<_ValueT, polymorphic_allocator<_ValueT>>;
}
}}
# 2992 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\vector" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\locale" 1 3
# 210 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\locale" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\ios" 1 3
# 224 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\ios" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__system_error/error_category.h" 1 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__system_error/error_category.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

class __attribute__((__visibility__("default"))) error_condition;
class __attribute__((__visibility__("default"))) error_code;

class __attribute__((__visibility__("hidden"))) __do_message;

class __attribute__((__visibility__("default"))) error_category {
public:
  virtual ~error_category() noexcept;




  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) constexpr error_category() noexcept = default;

  error_category(const error_category&) = delete;
  error_category& operator=(const error_category&) = delete;

  virtual const char* name() const noexcept = 0;
  virtual error_condition default_error_condition(int __ev) const noexcept;
  virtual bool equivalent(int __code, const error_condition& __condition) const noexcept;
  virtual bool equivalent(const error_code& __code, int __condition) const noexcept;
  virtual string message(int __ev) const = 0;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator==(const error_category& __rhs) const noexcept { return this == &__rhs; }
# 56 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__system_error/error_category.h" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator!=(const error_category& __rhs) const noexcept { return !(*this == __rhs); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator<(const error_category& __rhs) const noexcept { return this < &__rhs; }



  friend class __attribute__((__visibility__("hidden"))) __do_message;
};

class __attribute__((__visibility__("hidden"))) __do_message : public error_category {
public:
  string message(int __ev) const override;
};

__attribute__((__const__)) __attribute__((__visibility__("default"))) const error_category& generic_category() noexcept;
__attribute__((__const__)) __attribute__((__visibility__("default"))) const error_category& system_category() noexcept;

}}
# 225 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\ios" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__system_error/error_code.h" 1 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__system_error/error_code.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__system_error/error_condition.h" 1 3
# 24 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__system_error/error_condition.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
struct is_error_condition_enum : public false_type {};


template <class _Tp>
inline constexpr bool is_error_condition_enum_v = is_error_condition_enum<_Tp>::value;


template <>
struct is_error_condition_enum<errc> : true_type {};






namespace __adl_only {


void make_error_condition() = delete;
}

class __attribute__((__visibility__("default"))) error_condition {
  int __val_;
  const error_category* __cat_;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) error_condition() noexcept : __val_(0), __cat_(&generic_category()) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) error_condition(int __val, const error_category& __cat) noexcept
      : __val_(__val),
        __cat_(&__cat) {}

  template <class _Ep, __enable_if_t<is_error_condition_enum<_Ep>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) error_condition(_Ep __e) noexcept {
    using __adl_only::make_error_condition;
    *this = make_error_condition(__e);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void assign(int __val, const error_category& __cat) noexcept {
    __val_ = __val;
    __cat_ = &__cat;
  }

  template <class _Ep, __enable_if_t<is_error_condition_enum<_Ep>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) error_condition& operator=(_Ep __e) noexcept {
    using __adl_only::make_error_condition;
    *this = make_error_condition(__e);
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void clear() noexcept {
    __val_ = 0;
    __cat_ = &generic_category();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) int value() const noexcept { return __val_; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const error_category& category() const noexcept { return *__cat_; }
  string message() const;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit operator bool() const noexcept { return __val_ != 0; }
};

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) error_condition make_error_condition(errc __e) noexcept {
  return error_condition(static_cast<int>(__e), generic_category());
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator==(const error_condition& __x, const error_condition& __y) noexcept {
  return __x.category() == __y.category() && __x.value() == __y.value();
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator!=(const error_condition& __x, const error_condition& __y) noexcept {
  return !(__x == __y);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator<(const error_condition& __x, const error_condition& __y) noexcept {
  return __x.category() < __y.category() || (__x.category() == __y.category() && __x.value() < __y.value());
}
# 121 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__system_error/error_condition.h" 3
template <>
struct hash<error_condition> : public __unary_function<error_condition, size_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_t operator()(const error_condition& __ec) const noexcept {
    return static_cast<size_t>(__ec.value());
  }
};

}}
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__system_error/error_code.h" 2 3
# 25 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__system_error/error_code.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _Tp>
struct is_error_code_enum : public false_type {};


template <class _Tp>
inline constexpr bool is_error_code_enum_v = is_error_code_enum<_Tp>::value;


namespace __adl_only {


void make_error_code() = delete;
}

class __attribute__((__visibility__("default"))) error_code {
  int __val_;
  const error_category* __cat_;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) error_code() noexcept : __val_(0), __cat_(&system_category()) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) error_code(int __val, const error_category& __cat) noexcept : __val_(__val), __cat_(&__cat) {}

  template <class _Ep, __enable_if_t<is_error_code_enum<_Ep>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) error_code(_Ep __e) noexcept {
    using __adl_only::make_error_code;
    *this = make_error_code(__e);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void assign(int __val, const error_category& __cat) noexcept {
    __val_ = __val;
    __cat_ = &__cat;
  }

  template <class _Ep, __enable_if_t<is_error_code_enum<_Ep>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) error_code& operator=(_Ep __e) noexcept {
    using __adl_only::make_error_code;
    *this = make_error_code(__e);
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void clear() noexcept {
    __val_ = 0;
    __cat_ = &system_category();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) int value() const noexcept { return __val_; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const error_category& category() const noexcept { return *__cat_; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) error_condition default_error_condition() const noexcept {
    return __cat_->default_error_condition(__val_);
  }

  string message() const;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit operator bool() const noexcept { return __val_ != 0; }
};

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) error_code make_error_code(errc __e) noexcept {
  return error_code(static_cast<int>(__e), generic_category());
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator==(const error_code& __x, const error_code& __y) noexcept {
  return __x.category() == __y.category() && __x.value() == __y.value();
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator==(const error_code& __x, const error_condition& __y) noexcept {
  return __x.category().equivalent(__x.value(), __y) || __y.category().equivalent(__x, __y.value());
}


inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator==(const error_condition& __x, const error_code& __y) noexcept {
  return __y == __x;
}




inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator!=(const error_code& __x, const error_code& __y) noexcept {
  return !(__x == __y);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator!=(const error_code& __x, const error_condition& __y) noexcept {
  return !(__x == __y);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator!=(const error_condition& __x, const error_code& __y) noexcept {
  return !(__x == __y);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator<(const error_code& __x, const error_code& __y) noexcept {
  return __x.category() < __y.category() || (__x.category() == __y.category() && __x.value() < __y.value());
}
# 134 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__system_error/error_code.h" 3
template <>
struct hash<error_code> : public __unary_function<error_code, size_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_t operator()(const error_code& __ec) const noexcept {
    return static_cast<size_t>(__ec.value());
  }
};

}}
# 226 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\ios" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__system_error/system_error.h" 1 3
# 22 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__system_error/system_error.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

class __attribute__((__visibility__("default"))) system_error : public runtime_error {
  error_code __ec_;

public:
  system_error(error_code __ec, const string& __what_arg);
  system_error(error_code __ec, const char* __what_arg);
  system_error(error_code __ec);
  system_error(int __ev, const error_category& __ecat, const string& __what_arg);
  system_error(int __ev, const error_category& __ecat, const char* __what_arg);
  system_error(int __ev, const error_category& __ecat);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) system_error(const system_error&) noexcept = default;
  ~system_error() noexcept override;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) const error_code& code() const noexcept { return __ec_; }
};

[[noreturn]] __attribute__((__visibility__("default"))) void __throw_system_error(int __ev, const char* __what_arg);
[[noreturn]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline void __throw_system_error(error_code __ec, const char* __what_arg) {



  ::std::__libcpp_verbose_abort("system_error was thrown in -fno-exceptions mode with error %i and message \"%s\"", __ec.value(), __what_arg);


}

}}
# 228 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\ios" 2 3
# 243 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\ios" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 247 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\ios" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

typedef ptrdiff_t streamsize;

class __attribute__((__visibility__("default"))) ios_base {
public:
  class __attribute__((__visibility__("default"))) failure;

  typedef unsigned int fmtflags;
  static const fmtflags boolalpha = 0x0001;
  static const fmtflags dec = 0x0002;
  static const fmtflags fixed = 0x0004;
  static const fmtflags hex = 0x0008;
  static const fmtflags internal = 0x0010;
  static const fmtflags left = 0x0020;
  static const fmtflags oct = 0x0040;
  static const fmtflags right = 0x0080;
  static const fmtflags scientific = 0x0100;
  static const fmtflags showbase = 0x0200;
  static const fmtflags showpoint = 0x0400;
  static const fmtflags showpos = 0x0800;
  static const fmtflags skipws = 0x1000;
  static const fmtflags unitbuf = 0x2000;
  static const fmtflags uppercase = 0x4000;
  static const fmtflags adjustfield = left | right | internal;
  static const fmtflags basefield = dec | oct | hex;
  static const fmtflags floatfield = scientific | fixed;

  typedef unsigned int iostate;
  static const iostate badbit = 0x1;
  static const iostate eofbit = 0x2;
  static const iostate failbit = 0x4;
  static const iostate goodbit = 0x0;

  typedef unsigned int openmode;
  static const openmode app = 0x01;
  static const openmode ate = 0x02;
  static const openmode binary = 0x04;
  static const openmode in = 0x08;
  static const openmode out = 0x10;
  static const openmode trunc = 0x20;




  enum seekdir { beg, cur, end };
# 304 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\ios" 3
  class __attribute__((__visibility__("default"))) Init;


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) fmtflags flags() const;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) fmtflags flags(fmtflags __fmtfl);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) fmtflags setf(fmtflags __fmtfl);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) fmtflags setf(fmtflags __fmtfl, fmtflags __mask);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void unsetf(fmtflags __mask);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) streamsize precision() const;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) streamsize precision(streamsize __prec);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) streamsize width() const;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) streamsize width(streamsize __wide);


  locale imbue(const locale& __loc);
  locale getloc() const;


  static int xalloc();
  long& iword(int __index);
  void*& pword(int __index);


  virtual ~ios_base();


  enum event { erase_event, imbue_event, copyfmt_event };
  typedef void (*event_callback)(event, ios_base&, int __index);
  void register_callback(event_callback __fn, int __index);

  ios_base(const ios_base&) = delete;
  ios_base& operator=(const ios_base&) = delete;

  static bool sync_with_stdio(bool __sync = true);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iostate rdstate() const;
  void clear(iostate __state = goodbit);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void setstate(iostate __state);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool good() const;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool eof() const;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool fail() const;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool bad() const;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iostate exceptions() const;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void exceptions(iostate __iostate);

  void __set_badbit_and_consider_rethrow();
  void __set_failbit_and_consider_rethrow();

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __setstate_nothrow(iostate __state) {
    if (__rdbuf_)
      __rdstate_ |= __state;
    else
      __rdstate_ |= __state | ios_base::badbit;
  }

protected:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) ios_base() {
  }

  void init(void* __sb);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void* rdbuf() const { return __rdbuf_; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void rdbuf(void* __sb) {
    __rdbuf_ = __sb;
    clear();
  }

  void __call_callbacks(event);
  void copyfmt(const ios_base&);
  void move(ios_base&);
  void swap(ios_base&) noexcept;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void set_rdbuf(void* __sb) { __rdbuf_ = __sb; }

private:

  fmtflags __fmtflags_;
  streamsize __precision_;
  streamsize __width_;
  iostate __rdstate_;
  iostate __exceptions_;
  void* __rdbuf_;
  void* __loc_;
  event_callback* __fn_;
  int* __index_;
  size_t __event_size_;
  size_t __event_cap_;





  static int __xindex_;

  long* __iarray_;
  size_t __iarray_size_;
  size_t __iarray_cap_;
  void** __parray_;
  size_t __parray_size_;
  size_t __parray_cap_;
};


enum class io_errc{stream = 1};


template <>
struct is_error_code_enum<io_errc> : public true_type {};






__attribute__((__visibility__("default"))) const error_category& iostream_category() noexcept;

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) error_code make_error_code(io_errc __e) noexcept {
  return error_code(static_cast<int>(__e), iostream_category());
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) error_condition make_error_condition(io_errc __e) noexcept {
  return error_condition(static_cast<int>(__e), iostream_category());
}

class __attribute__((__visibility__("default"))) ios_base::failure : public system_error {
public:
  explicit failure(const string& __msg, const error_code& __ec = io_errc::stream);
  explicit failure(const char* __msg, const error_code& __ec = io_errc::stream);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) failure(const failure&) noexcept = default;
  ~failure() noexcept override;
};

[[noreturn]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __throw_failure(char const* __msg) {



  ::std::__libcpp_verbose_abort("ios_base::failure was thrown in -fno-exceptions mode with message \"%s\"", __msg);

}

class __attribute__((__visibility__("default"))) ios_base::Init {
public:
  Init();
  ~Init();
};



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) ios_base::fmtflags ios_base::flags() const { return __fmtflags_; }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) ios_base::fmtflags ios_base::flags(fmtflags __fmtfl) {
  fmtflags __r = __fmtflags_;
  __fmtflags_ = __fmtfl;
  return __r;
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) ios_base::fmtflags ios_base::setf(fmtflags __fmtfl) {
  fmtflags __r = __fmtflags_;
  __fmtflags_ |= __fmtfl;
  return __r;
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void ios_base::unsetf(fmtflags __mask) { __fmtflags_ &= ~__mask; }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) ios_base::fmtflags ios_base::setf(fmtflags __fmtfl, fmtflags __mask) {
  fmtflags __r = __fmtflags_;
  unsetf(__mask);
  __fmtflags_ |= __fmtfl & __mask;
  return __r;
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) streamsize ios_base::precision() const { return __precision_; }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) streamsize ios_base::precision(streamsize __prec) {
  streamsize __r = __precision_;
  __precision_ = __prec;
  return __r;
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) streamsize ios_base::width() const { return __width_; }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) streamsize ios_base::width(streamsize __wide) {
  streamsize __r = __width_;
  __width_ = __wide;
  return __r;
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) ios_base::iostate ios_base::rdstate() const { return __rdstate_; }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void ios_base::setstate(iostate __state) { clear(__rdstate_ | __state); }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool ios_base::good() const { return __rdstate_ == 0; }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool ios_base::eof() const { return (__rdstate_ & eofbit) != 0; }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool ios_base::fail() const { return (__rdstate_ & (failbit | badbit)) != 0; }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool ios_base::bad() const { return (__rdstate_ & badbit) != 0; }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) ios_base::iostate ios_base::exceptions() const { return __exceptions_; }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void ios_base::exceptions(iostate __iostate) {
  __exceptions_ = __iostate;
  clear(__rdstate_);
}

template <class _CharT, class _Traits>
class basic_ios : public ios_base {
public:

  typedef _CharT char_type;
  typedef _Traits traits_type;

  typedef typename traits_type::int_type int_type;
  typedef typename traits_type::pos_type pos_type;
  typedef typename traits_type::off_type off_type;

  static_assert((is_same<_CharT, typename traits_type::char_type>::value),
                "traits_type::char_type must be the same type as CharT");






  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit operator bool() const { return !fail(); }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool operator!() const { return fail(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iostate rdstate() const { return ios_base::rdstate(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void clear(iostate __state = goodbit) { ios_base::clear(__state); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void setstate(iostate __state) { ios_base::setstate(__state); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool good() const { return ios_base::good(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool eof() const { return ios_base::eof(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool fail() const { return ios_base::fail(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) bool bad() const { return ios_base::bad(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iostate exceptions() const { return ios_base::exceptions(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void exceptions(iostate __iostate) { ios_base::exceptions(__iostate); }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit basic_ios(basic_streambuf<char_type, traits_type>* __sb);
  ~basic_ios() override;


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_ostream<char_type, traits_type>* tie() const;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_ostream<char_type, traits_type>* tie(basic_ostream<char_type, traits_type>* __tiestr);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_streambuf<char_type, traits_type>* rdbuf() const;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_streambuf<char_type, traits_type>* rdbuf(basic_streambuf<char_type, traits_type>* __sb);

  basic_ios& copyfmt(const basic_ios& __rhs);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) char_type fill() const;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) char_type fill(char_type __ch);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) locale imbue(const locale& __loc);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) char narrow(char_type __c, char __dfault) const;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) char_type widen(char __c) const;

protected:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_ios() {
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void init(basic_streambuf<char_type, traits_type>* __sb);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void move(basic_ios& __rhs);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void move(basic_ios&& __rhs) { move(__rhs); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void swap(basic_ios& __rhs) noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void set_rdbuf(basic_streambuf<char_type, traits_type>* __sb);

private:
  basic_ostream<char_type, traits_type>* __tie_;
  mutable int_type __fill_;
};

template <class _CharT, class _Traits>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_ios<_CharT, _Traits>::basic_ios(basic_streambuf<char_type, traits_type>* __sb) {
  init(__sb);
}

template <class _CharT, class _Traits>
basic_ios<_CharT, _Traits>::~basic_ios() {}

template <class _CharT, class _Traits>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void basic_ios<_CharT, _Traits>::init(basic_streambuf<char_type, traits_type>* __sb) {
  ios_base::init(__sb);
  __tie_ = nullptr;
  __fill_ = traits_type::eof();
}

template <class _CharT, class _Traits>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_ostream<_CharT, _Traits>* basic_ios<_CharT, _Traits>::tie() const {
  return __tie_;
}

template <class _CharT, class _Traits>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_ostream<_CharT, _Traits>*
basic_ios<_CharT, _Traits>::tie(basic_ostream<char_type, traits_type>* __tiestr) {
  basic_ostream<char_type, traits_type>* __r = __tie_;
  __tie_ = __tiestr;
  return __r;
}

template <class _CharT, class _Traits>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_streambuf<_CharT, _Traits>* basic_ios<_CharT, _Traits>::rdbuf() const {
  return static_cast<basic_streambuf<char_type, traits_type>*>(ios_base::rdbuf());
}

template <class _CharT, class _Traits>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_streambuf<_CharT, _Traits>*
basic_ios<_CharT, _Traits>::rdbuf(basic_streambuf<char_type, traits_type>* __sb) {
  basic_streambuf<char_type, traits_type>* __r = rdbuf();
  ios_base::rdbuf(__sb);
  return __r;
}

template <class _CharT, class _Traits>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) locale basic_ios<_CharT, _Traits>::imbue(const locale& __loc) {
  locale __r = getloc();
  ios_base::imbue(__loc);
  if (rdbuf())
    rdbuf()->pubimbue(__loc);
  return __r;
}

template <class _CharT, class _Traits>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) char basic_ios<_CharT, _Traits>::narrow(char_type __c, char __dfault) const {
  return std::use_facet<ctype<char_type> >(getloc()).narrow(__c, __dfault);
}

template <class _CharT, class _Traits>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _CharT basic_ios<_CharT, _Traits>::widen(char __c) const {
  return std::use_facet<ctype<char_type> >(getloc()).widen(__c);
}

template <class _CharT, class _Traits>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _CharT basic_ios<_CharT, _Traits>::fill() const {
  if (traits_type::eq_int_type(traits_type::eof(), __fill_))
    __fill_ = widen(' ');
  return __fill_;
}

template <class _CharT, class _Traits>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _CharT basic_ios<_CharT, _Traits>::fill(char_type __ch) {
  if (traits_type::eq_int_type(traits_type::eof(), __fill_))
    __fill_ = widen(' ');
  char_type __r = __fill_;
  __fill_ = __ch;
  return __r;
}

template <class _CharT, class _Traits>
basic_ios<_CharT, _Traits>& basic_ios<_CharT, _Traits>::copyfmt(const basic_ios& __rhs) {
  if (this != &__rhs) {
    __call_callbacks(erase_event);
    ios_base::copyfmt(__rhs);
    __tie_ = __rhs.__tie_;
    __fill_ = __rhs.__fill_;
    __call_callbacks(copyfmt_event);
    exceptions(__rhs.exceptions());
  }
  return *this;
}

template <class _CharT, class _Traits>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void basic_ios<_CharT, _Traits>::move(basic_ios& __rhs) {
  ios_base::move(__rhs);
  __tie_ = __rhs.__tie_;
  __rhs.__tie_ = nullptr;
  __fill_ = __rhs.__fill_;
}

template <class _CharT, class _Traits>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void basic_ios<_CharT, _Traits>::swap(basic_ios& __rhs) noexcept {
  ios_base::swap(__rhs);
  std::swap(__tie_, __rhs.__tie_);
  std::swap(__fill_, __rhs.__fill_);
}

template <class _CharT, class _Traits>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void basic_ios<_CharT, _Traits>::set_rdbuf(basic_streambuf<char_type, traits_type>* __sb) {
  ios_base::set_rdbuf(__sb);
}

extern template class __attribute__((__visibility__("default"))) basic_ios<char>;


extern template class __attribute__((__visibility__("default"))) basic_ios<wchar_t>;


__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline ios_base& boolalpha(ios_base& __str) {
  __str.setf(ios_base::boolalpha);
  return __str;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline ios_base& noboolalpha(ios_base& __str) {
  __str.unsetf(ios_base::boolalpha);
  return __str;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline ios_base& showbase(ios_base& __str) {
  __str.setf(ios_base::showbase);
  return __str;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline ios_base& noshowbase(ios_base& __str) {
  __str.unsetf(ios_base::showbase);
  return __str;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline ios_base& showpoint(ios_base& __str) {
  __str.setf(ios_base::showpoint);
  return __str;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline ios_base& noshowpoint(ios_base& __str) {
  __str.unsetf(ios_base::showpoint);
  return __str;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline ios_base& showpos(ios_base& __str) {
  __str.setf(ios_base::showpos);
  return __str;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline ios_base& noshowpos(ios_base& __str) {
  __str.unsetf(ios_base::showpos);
  return __str;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline ios_base& skipws(ios_base& __str) {
  __str.setf(ios_base::skipws);
  return __str;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline ios_base& noskipws(ios_base& __str) {
  __str.unsetf(ios_base::skipws);
  return __str;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline ios_base& uppercase(ios_base& __str) {
  __str.setf(ios_base::uppercase);
  return __str;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline ios_base& nouppercase(ios_base& __str) {
  __str.unsetf(ios_base::uppercase);
  return __str;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline ios_base& unitbuf(ios_base& __str) {
  __str.setf(ios_base::unitbuf);
  return __str;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline ios_base& nounitbuf(ios_base& __str) {
  __str.unsetf(ios_base::unitbuf);
  return __str;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline ios_base& internal(ios_base& __str) {
  __str.setf(ios_base::internal, ios_base::adjustfield);
  return __str;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline ios_base& left(ios_base& __str) {
  __str.setf(ios_base::left, ios_base::adjustfield);
  return __str;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline ios_base& right(ios_base& __str) {
  __str.setf(ios_base::right, ios_base::adjustfield);
  return __str;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline ios_base& dec(ios_base& __str) {
  __str.setf(ios_base::dec, ios_base::basefield);
  return __str;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline ios_base& hex(ios_base& __str) {
  __str.setf(ios_base::hex, ios_base::basefield);
  return __str;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline ios_base& oct(ios_base& __str) {
  __str.setf(ios_base::oct, ios_base::basefield);
  return __str;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline ios_base& fixed(ios_base& __str) {
  __str.setf(ios_base::fixed, ios_base::floatfield);
  return __str;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline ios_base& scientific(ios_base& __str) {
  __str.setf(ios_base::scientific, ios_base::floatfield);
  return __str;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline ios_base& hexfloat(ios_base& __str) {
  __str.setf(ios_base::fixed | ios_base::scientific, ios_base::floatfield);
  return __str;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline ios_base& defaultfloat(ios_base& __str) {
  __str.unsetf(ios_base::floatfield);
  return __str;
}

}}
# 836 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\ios" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\mutex" 1 3
# 192 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\mutex" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__condition_variable/condition_variable.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__condition_variable/condition_variable.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__mutex/mutex.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__mutex/mutex.h" 3
# 19 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__condition_variable/condition_variable.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__mutex/unique_lock.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__mutex/unique_lock.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__mutex/tag_types.h" 1 3
# 16 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__mutex/tag_types.h" 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__mutex/unique_lock.h" 2 3
# 23 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__mutex/unique_lock.h" 3
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__condition_variable/condition_variable.h" 2 3
# 30 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__condition_variable/condition_variable.h" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 34 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__condition_variable/condition_variable.h" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 97 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__condition_variable/condition_variable.h" 3
template <class _Rep, class _Period, __enable_if_t<is_floating_point<_Rep>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) chrono::nanoseconds __safe_nanosecond_cast(chrono::duration<_Rep, _Period> __d) {
  using namespace chrono;
  using __ratio = ratio_divide<_Period, nano>;
  using __ns_rep = nanoseconds::rep;
  _Rep __result_float = __d.count() * __ratio::num / __ratio::den;

  _Rep __result_max = numeric_limits<__ns_rep>::max();
  if (__result_float >= __result_max) {
    return nanoseconds::max();
  }

  _Rep __result_min = numeric_limits<__ns_rep>::min();
  if (__result_float <= __result_min) {
    return nanoseconds::min();
  }

  return nanoseconds(static_cast<__ns_rep>(__result_float));
}

template <class _Rep, class _Period, __enable_if_t<!is_floating_point<_Rep>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) chrono::nanoseconds __safe_nanosecond_cast(chrono::duration<_Rep, _Period> __d) {
  using namespace chrono;
  if (__d.count() == 0) {
    return nanoseconds(0);
  }

  using __ratio = ratio_divide<_Period, nano>;
  using __ns_rep = nanoseconds::rep;
  __ns_rep __result_max = numeric_limits<__ns_rep>::max();
  if (__d.count() > 0 && __d.count() > __result_max / __ratio::num) {
    return nanoseconds::max();
  }

  __ns_rep __result_min = numeric_limits<__ns_rep>::min();
  if (__d.count() < 0 && __d.count() < __result_min / __ratio::num) {
    return nanoseconds::min();
  }

  __ns_rep __result = __d.count() * __ratio::num / __ratio::den;
  if (__result == 0) {
    return nanoseconds(1);
  }

  return nanoseconds(__result);
}
# 243 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__condition_variable/condition_variable.h" 3
}}
# 193 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\mutex" 2 3


# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__mutex/lock_guard.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__mutex/lock_guard.h" 3
# 196 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\mutex" 2 3




# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__thread/id.h" 1 3
# 21 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__thread/id.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 119 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__thread/id.h" 3
}}
# 201 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\mutex" 2 3
# 212 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\mutex" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 216 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\mutex" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 512 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\mutex" 3
}}
# 526 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\mutex" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\system_error" 1 3
# 163 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\system_error" 3
# 527 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\mutex" 2 3
# 837 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\ios" 2 3
# 211 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\locale" 2 3


# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\streambuf" 1 3
# 120 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\streambuf" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 124 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\streambuf" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

template <class _CharT, class _Traits>
class basic_streambuf {
public:

  typedef _CharT char_type;
  typedef _Traits traits_type;
  typedef typename traits_type::int_type int_type;
  typedef typename traits_type::pos_type pos_type;
  typedef typename traits_type::off_type off_type;

  static_assert((is_same<_CharT, typename traits_type::char_type>::value),
                "traits_type::char_type must be the same type as CharT");

  virtual ~basic_streambuf();


  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) locale pubimbue(const locale& __loc) {
    imbue(__loc);
    locale __r = __loc_;
    __loc_ = __loc;
    return __r;
  }

  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) locale getloc() const { return __loc_; }


  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) basic_streambuf* pubsetbuf(char_type* __s, streamsize __n) {
    return setbuf(__s, __n);
  }

  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) pos_type
  pubseekoff(off_type __off, ios_base::seekdir __way, ios_base::openmode __which = ios_base::in | ios_base::out) {
    return seekoff(__off, __way, __which);
  }

  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) pos_type
  pubseekpos(pos_type __sp, ios_base::openmode __which = ios_base::in | ios_base::out) {
    return seekpos(__sp, __which);
  }

  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) int pubsync() { return sync(); }



  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) streamsize in_avail() {
    if (__ninp_ < __einp_)
      return static_cast<streamsize>(__einp_ - __ninp_);
    return showmanyc();
  }

  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) int_type snextc() {
    if (sbumpc() == traits_type::eof())
      return traits_type::eof();
    return sgetc();
  }

  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) int_type sbumpc() {
    if (__ninp_ == __einp_)
      return uflow();
    return traits_type::to_int_type(*__ninp_++);
  }

  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) int_type sgetc() {
    if (__ninp_ == __einp_)
      return underflow();
    return traits_type::to_int_type(*__ninp_);
  }

  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) streamsize sgetn(char_type* __s, streamsize __n) { return xsgetn(__s, __n); }


  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) int_type sputbackc(char_type __c) {
    if (__binp_ == __ninp_ || !traits_type::eq(__c, __ninp_[-1]))
      return pbackfail(traits_type::to_int_type(__c));
    return traits_type::to_int_type(*--__ninp_);
  }

  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) int_type sungetc() {
    if (__binp_ == __ninp_)
      return pbackfail();
    return traits_type::to_int_type(*--__ninp_);
  }


  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) int_type sputc(char_type __c) {
    if (__nout_ == __eout_)
      return overflow(traits_type::to_int_type(__c));
    *__nout_++ = __c;
    return traits_type::to_int_type(__c);
  }

  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) streamsize sputn(const char_type* __s, streamsize __n) {
    return xsputn(__s, __n);
  }

protected:
  basic_streambuf();
  basic_streambuf(const basic_streambuf& __rhs);
  basic_streambuf& operator=(const basic_streambuf& __rhs);
  void swap(basic_streambuf& __rhs);


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) char_type* eback() const { return __binp_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) char_type* gptr() const { return __ninp_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) char_type* egptr() const { return __einp_; }

  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void gbump(int __n) { __ninp_ += __n; }

  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void setg(char_type* __gbeg, char_type* __gnext, char_type* __gend) {
    __binp_ = __gbeg;
    __ninp_ = __gnext;
    __einp_ = __gend;
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) char_type* pbase() const { return __bout_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) char_type* pptr() const { return __nout_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) char_type* epptr() const { return __eout_; }

  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void pbump(int __n) { __nout_ += __n; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __pbump(streamsize __n) { __nout_ += __n; }

  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void setp(char_type* __pbeg, char_type* __pend) {
    __bout_ = __nout_ = __pbeg;
    __eout_ = __pend;
  }



  virtual void imbue(const locale& __loc);


  virtual basic_streambuf* setbuf(char_type* __s, streamsize __n);
  virtual pos_type
  seekoff(off_type __off, ios_base::seekdir __way, ios_base::openmode __which = ios_base::in | ios_base::out);
  virtual pos_type seekpos(pos_type __sp, ios_base::openmode __which = ios_base::in | ios_base::out);
  virtual int sync();


  virtual streamsize showmanyc();
  virtual streamsize xsgetn(char_type* __s, streamsize __n);
  virtual int_type underflow();
  virtual int_type uflow();


  virtual int_type pbackfail(int_type __c = traits_type::eof());


  virtual streamsize xsputn(const char_type* __s, streamsize __n);
  virtual int_type overflow(int_type __c = traits_type::eof());

private:
  locale __loc_;
  char_type* __binp_;
  char_type* __ninp_;
  char_type* __einp_;
  char_type* __bout_;
  char_type* __nout_;
  char_type* __eout_;
};

template <class _CharT, class _Traits>
basic_streambuf<_CharT, _Traits>::~basic_streambuf() {}

template <class _CharT, class _Traits>
basic_streambuf<_CharT, _Traits>::basic_streambuf()
    : __binp_(nullptr), __ninp_(nullptr), __einp_(nullptr), __bout_(nullptr), __nout_(nullptr), __eout_(nullptr) {}

template <class _CharT, class _Traits>
basic_streambuf<_CharT, _Traits>::basic_streambuf(const basic_streambuf& __sb)
    : __loc_(__sb.__loc_),
      __binp_(__sb.__binp_),
      __ninp_(__sb.__ninp_),
      __einp_(__sb.__einp_),
      __bout_(__sb.__bout_),
      __nout_(__sb.__nout_),
      __eout_(__sb.__eout_) {}

template <class _CharT, class _Traits>
basic_streambuf<_CharT, _Traits>& basic_streambuf<_CharT, _Traits>::operator=(const basic_streambuf& __sb) {
  __loc_ = __sb.__loc_;
  __binp_ = __sb.__binp_;
  __ninp_ = __sb.__ninp_;
  __einp_ = __sb.__einp_;
  __bout_ = __sb.__bout_;
  __nout_ = __sb.__nout_;
  __eout_ = __sb.__eout_;
  return *this;
}

template <class _CharT, class _Traits>
void basic_streambuf<_CharT, _Traits>::swap(basic_streambuf& __sb) {
  std::swap(__loc_, __sb.__loc_);
  std::swap(__binp_, __sb.__binp_);
  std::swap(__ninp_, __sb.__ninp_);
  std::swap(__einp_, __sb.__einp_);
  std::swap(__bout_, __sb.__bout_);
  std::swap(__nout_, __sb.__nout_);
  std::swap(__eout_, __sb.__eout_);
}

template <class _CharT, class _Traits>
void basic_streambuf<_CharT, _Traits>::imbue(const locale&) {}

template <class _CharT, class _Traits>
basic_streambuf<_CharT, _Traits>* basic_streambuf<_CharT, _Traits>::setbuf(char_type*, streamsize) {
  return this;
}

template <class _CharT, class _Traits>
typename basic_streambuf<_CharT, _Traits>::pos_type
basic_streambuf<_CharT, _Traits>::seekoff(off_type, ios_base::seekdir, ios_base::openmode) {
  return pos_type(off_type(-1));
}

template <class _CharT, class _Traits>
typename basic_streambuf<_CharT, _Traits>::pos_type
basic_streambuf<_CharT, _Traits>::seekpos(pos_type, ios_base::openmode) {
  return pos_type(off_type(-1));
}

template <class _CharT, class _Traits>
int basic_streambuf<_CharT, _Traits>::sync() {
  return 0;
}

template <class _CharT, class _Traits>
streamsize basic_streambuf<_CharT, _Traits>::showmanyc() {
  return 0;
}

template <class _CharT, class _Traits>
streamsize basic_streambuf<_CharT, _Traits>::xsgetn(char_type* __s, streamsize __n) {
  const int_type __eof = traits_type::eof();
  int_type __c;
  streamsize __i = 0;
  while (__i < __n) {
    if (__ninp_ < __einp_) {
      const streamsize __len = std::min(static_cast<streamsize>(0x7fffffff), std::min(__einp_ - __ninp_, __n - __i));
      traits_type::copy(__s, __ninp_, __len);
      __s += __len;
      __i += __len;
      this->gbump(__len);
    } else if ((__c = uflow()) != __eof) {
      *__s = traits_type::to_char_type(__c);
      ++__s;
      ++__i;
    } else
      break;
  }
  return __i;
}

template <class _CharT, class _Traits>
typename basic_streambuf<_CharT, _Traits>::int_type basic_streambuf<_CharT, _Traits>::underflow() {
  return traits_type::eof();
}

template <class _CharT, class _Traits>
typename basic_streambuf<_CharT, _Traits>::int_type basic_streambuf<_CharT, _Traits>::uflow() {
  if (underflow() == traits_type::eof())
    return traits_type::eof();
  return traits_type::to_int_type(*__ninp_++);
}

template <class _CharT, class _Traits>
typename basic_streambuf<_CharT, _Traits>::int_type basic_streambuf<_CharT, _Traits>::pbackfail(int_type) {
  return traits_type::eof();
}

template <class _CharT, class _Traits>
streamsize basic_streambuf<_CharT, _Traits>::xsputn(const char_type* __s, streamsize __n) {
  streamsize __i = 0;
  int_type __eof = traits_type::eof();
  while (__i < __n) {
    if (__nout_ >= __eout_) {
      if (overflow(traits_type::to_int_type(*__s)) == __eof)
        break;
      ++__s;
      ++__i;
    } else {
      streamsize __chunk_size = std::min(__eout_ - __nout_, __n - __i);
      traits_type::copy(__nout_, __s, __chunk_size);
      __nout_ += __chunk_size;
      __s += __chunk_size;
      __i += __chunk_size;
    }
  }
  return __i;
}

template <class _CharT, class _Traits>
typename basic_streambuf<_CharT, _Traits>::int_type basic_streambuf<_CharT, _Traits>::overflow(int_type) {
  return traits_type::eof();
}

extern template class __attribute__((__visibility__("default"))) basic_streambuf<char>;


extern template class __attribute__((__visibility__("default"))) basic_streambuf<wchar_t>;


}}
# 214 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\locale" 2 3
# 234 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\locale" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__locale_dir/locale_base_api/bsd_locale_fallbacks.h" 1 3
# 17 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__locale_dir/locale_base_api/bsd_locale_fallbacks.h" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__locale_dir/locale_base_api/locale_guard.h" 1 3
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__locale_dir/locale_base_api/locale_guard.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {


struct __libcpp_locale_guard {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __libcpp_locale_guard(locale_t& __loc) : __old_loc_(uselocale(__loc)) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) ~__libcpp_locale_guard() {
    if (__old_loc_)
      uselocale(__old_loc_);
  }

  locale_t __old_loc_;

private:
  __libcpp_locale_guard(__libcpp_locale_guard const&);
  __libcpp_locale_guard& operator=(__libcpp_locale_guard const&);
};
# 77 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__locale_dir/locale_base_api/locale_guard.h" 3
}}
# 18 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__locale_dir/locale_base_api/bsd_locale_fallbacks.h" 2 3

# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdarg.h" 1 3
# 21 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdarg.h" 3
      namespace std {

          extern "C" {
# 40 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdarg.h" 3
  typedef __builtin_va_list va_list;
# 128 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdarg.h" 3
         }
      }




     typedef ::std:: va_list __gnuc_va_list;
# 143 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\stdarg.h" 3
      using ::std::va_list;
# 20 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__locale_dir/locale_base_api/bsd_locale_fallbacks.h" 2 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\stdlib.h" 1 3
# 21 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__locale_dir/locale_base_api/bsd_locale_fallbacks.h" 2 3
# 28 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__locale_dir/locale_base_api/bsd_locale_fallbacks.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) decltype(( __aeabi_MB_CUR_MAX() )) __libcpp_mb_cur_max_l(locale_t __l) {
  __libcpp_locale_guard __current(__l);
  return ( __aeabi_MB_CUR_MAX() );
}


inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) wint_t __libcpp_btowc_l(int __c, locale_t __l) {
  __libcpp_locale_guard __current(__l);
  return btowc(__c);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) int __libcpp_wctob_l(wint_t __c, locale_t __l) {
  __libcpp_locale_guard __current(__l);
  return wctob(__c);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_t
__libcpp_wcsnrtombs_l(char* __dest, const wchar_t** __src, size_t __nwc, size_t __len, mbstate_t* __ps, locale_t __l) {
  __libcpp_locale_guard __current(__l);

  return _wcsnrtombs(__dest, __src, __nwc, __len, __ps);



}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_t __libcpp_wcrtomb_l(char* __s, wchar_t __wc, mbstate_t* __ps, locale_t __l) {
  __libcpp_locale_guard __current(__l);
  return wcrtomb(__s, __wc, __ps);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_t
__libcpp_mbsnrtowcs_l(wchar_t* __dest, const char** __src, size_t __nms, size_t __len, mbstate_t* __ps, locale_t __l) {
  __libcpp_locale_guard __current(__l);

  return _mbsnrtowcs(__dest, __src, __nms, __len, __ps);



}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_t
__libcpp_mbrtowc_l(wchar_t* __pwc, const char* __s, size_t __n, mbstate_t* __ps, locale_t __l) {
  __libcpp_locale_guard __current(__l);
  return mbrtowc(__pwc, __s, __n, __ps);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) int __libcpp_mbtowc_l(wchar_t* __pwc, const char* __pmb, size_t __max, locale_t __l) {
  __libcpp_locale_guard __current(__l);
  return mbtowc(__pwc, __pmb, __max);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_t __libcpp_mbrlen_l(const char* __s, size_t __n, mbstate_t* __ps, locale_t __l) {
  __libcpp_locale_guard __current(__l);
  return mbrlen(__s, __n, __ps);
}


inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) lconv* __libcpp_localeconv_l(locale_t __l) {
  __libcpp_locale_guard __current(__l);
  return localeconv();
}


inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_t
__libcpp_mbsrtowcs_l(wchar_t* __dest, const char** __src, size_t __len, mbstate_t* __ps, locale_t __l) {
  __libcpp_locale_guard __current(__l);
  return mbsrtowcs(__dest, __src, __len, __ps);
}


inline __attribute__((__format__(__printf__, 4, 5))) int __libcpp_snprintf_l(
    char* __s, size_t __n, locale_t __l, const char* __format, ...) {
  va_list __va;
  __builtin_va_start(__va, __format);
  __libcpp_locale_guard __current(__l);

  int __res = __ARM_vsnprintf(__s, __n, __format, __va);



  __builtin_va_end(__va);
  return __res;
}

inline __attribute__((__format__(__printf__, 3, 4))) int __libcpp_asprintf_l(
    char** __s, locale_t __l, const char* __format, ...) {
  va_list __va;
  __builtin_va_start(__va, __format);
  __libcpp_locale_guard __current(__l);

  int __res = __ARM_vasprintf(__s, __format, __va);



  __builtin_va_end(__va);
  return __res;
}

inline __attribute__((__format__(__scanf__, 3, 4))) int __libcpp_sscanf_l(
    const char* __s, locale_t __l, const char* __format, ...) {
  va_list __va;
  __builtin_va_start(__va, __format);
  __libcpp_locale_guard __current(__l);

  int __res = __ARM_vsscanf(__s, __format, __va);



  __builtin_va_end(__va);
  return __res;
}

}}
# 235 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\locale" 2 3
# 239 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\locale" 3



# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\__undef_macros" 1 3
# 243 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\locale" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {
# 253 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\locale" 3
__attribute__((__visibility__("default"))) locale_t __cloc();
# 275 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\locale" 3
template <class _InputIterator, class _ForwardIterator, class _Ctype>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _ForwardIterator __scan_keyword(
    _InputIterator& __b,
    _InputIterator __e,
    _ForwardIterator __kb,
    _ForwardIterator __ke,
    const _Ctype& __ct,
    ios_base::iostate& __err,
    bool __case_sensitive = true) {
  typedef typename iterator_traits<_InputIterator>::value_type _CharT;
  size_t __nkw = static_cast<size_t>(std::distance(__kb, __ke));
  const unsigned char __doesnt_match = '\0';
  const unsigned char __might_match = '\1';
  const unsigned char __does_match = '\2';
  unsigned char __statbuf[100];
  unsigned char* __status = __statbuf;
  unique_ptr<unsigned char, void (*)(void*)> __stat_hold(nullptr, free);
  if (__nkw > sizeof(__statbuf)) {
    __status = (unsigned char*)malloc(__nkw);
    if (__status == nullptr)
      __throw_bad_alloc();
    __stat_hold.reset(__status);
  }
  size_t __n_might_match = __nkw;
  size_t __n_does_match = 0;

  unsigned char* __st = __status;
  for (_ForwardIterator __ky = __kb; __ky != __ke; ++__ky, (void)++__st) {
    if (!__ky->empty())
      *__st = __might_match;
    else {
      *__st = __does_match;
      --__n_might_match;
      ++__n_does_match;
    }
  }

  for (size_t __indx = 0; __b != __e && __n_might_match > 0; ++__indx) {

    _CharT __c = *__b;
    if (!__case_sensitive)
      __c = __ct.toupper(__c);
    bool __consume = false;






    __st = __status;
    for (_ForwardIterator __ky = __kb; __ky != __ke; ++__ky, (void)++__st) {
      if (*__st == __might_match) {
        _CharT __kc = (*__ky)[__indx];
        if (!__case_sensitive)
          __kc = __ct.toupper(__kc);
        if (__c == __kc) {
          __consume = true;
          if (__ky->size() == __indx + 1) {
            *__st = __does_match;
            --__n_might_match;
            ++__n_does_match;
          }
        } else {
          *__st = __doesnt_match;
          --__n_might_match;
        }
      }
    }

    if (__consume) {
      ++__b;



      if (__n_might_match + __n_does_match > 1) {
        __st = __status;
        for (_ForwardIterator __ky = __kb; __ky != __ke; ++__ky, (void)++__st) {
          if (*__st == __does_match && __ky->size() != __indx + 1) {
            *__st = __doesnt_match;
            --__n_does_match;
          }
        }
      }
    }
  }

  if (__b == __e)
    __err |= ios_base::eofbit;

  for (__st = __status; __kb != __ke; ++__kb, (void)++__st)
    if (*__st == __does_match)
      break;
  if (__kb == __ke)
    __err |= ios_base::failbit;
  return __kb;
}

struct __attribute__((__visibility__("default"))) __num_get_base {
  static const int __num_get_buf_sz = 40;

  static int __get_base(ios_base&);
  static const char __src[33];
};

__attribute__((__visibility__("default"))) void
__check_grouping(const string& __grouping, unsigned* __g, unsigned* __g_end, ios_base::iostate& __err);

template <class _CharT>
struct __num_get : protected __num_get_base {
  static string __stage2_float_prep(ios_base& __iob, _CharT* __atoms, _CharT& __decimal_point, _CharT& __thousands_sep);

  static int __stage2_float_loop(
      _CharT __ct,
      bool& __in_units,
      char& __exp,
      char* __a,
      char*& __a_end,
      _CharT __decimal_point,
      _CharT __thousands_sep,
      const string& __grouping,
      unsigned* __g,
      unsigned*& __g_end,
      unsigned& __dc,
      _CharT* __atoms);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
  static int __stage2_float_loop(
      _CharT __ct,
      bool& __in_units,
      char& __exp,
      char* __a,
      char*& __a_end,
      _CharT __decimal_point,
      _CharT __thousands_sep,
      const string& __grouping,
      unsigned* __g,
      unsigned*& __g_end,
      unsigned& __dc,
      _CharT* __atoms,
      bool& __hex);
# 431 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\locale" 3
  static string __stage2_int_prep(ios_base& __iob, _CharT& __thousands_sep) {
    locale __loc = __iob.getloc();
    const numpunct<_CharT>& __np = use_facet<numpunct<_CharT> >(__loc);
    __thousands_sep = __np.thousands_sep();
    return __np.grouping();
  }

  const _CharT* __do_widen(ios_base& __iob, _CharT* __atoms) const { return __do_widen_p(__iob, __atoms); }

  static int __stage2_int_loop(
      _CharT __ct,
      int __base,
      char* __a,
      char*& __a_end,
      unsigned& __dc,
      _CharT __thousands_sep,
      const string& __grouping,
      unsigned* __g,
      unsigned*& __g_end,
      const _CharT* __atoms);

private:
  template <typename _Tp>
  const _Tp* __do_widen_p(ios_base& __iob, _Tp* __atoms) const {
    locale __loc = __iob.getloc();
    use_facet<ctype<_Tp> >(__loc).widen(__src, __src + 26, __atoms);
    return __atoms;
  }

  const char* __do_widen_p(ios_base& __iob, char* __atoms) const {
    (void)__iob;
    (void)__atoms;
    return __src;
  }

};
# 479 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\locale" 3
template <class _CharT>
string __num_get<_CharT>::__stage2_float_prep(
    ios_base& __iob, _CharT* __atoms, _CharT& __decimal_point, _CharT& __thousands_sep) {
  locale __loc = __iob.getloc();
  std::use_facet<ctype<_CharT> >(__loc).widen(__src, __src + 32, __atoms);
  const numpunct<_CharT>& __np = std::use_facet<numpunct<_CharT> >(__loc);
  __decimal_point = __np.decimal_point();
  __thousands_sep = __np.thousands_sep();
  return __np.grouping();
}

template <class _CharT>
int





__num_get<_CharT>::__stage2_int_loop(_CharT __ct, int __base, char* __a, char*& __a_end,
                  unsigned& __dc, _CharT __thousands_sep, const string& __grouping,
                  unsigned* __g, unsigned*& __g_end, const _CharT* __atoms)


{
  if (__a_end == __a && (__ct == __atoms[24] || __ct == __atoms[25])) {
    *__a_end++ = __ct == __atoms[24] ? '+' : '-';
    __dc = 0;
    return 0;
  }
  if (__grouping.size() != 0 && __ct == __thousands_sep) {
    if (__g_end - __g < __num_get_buf_sz) {
      *__g_end++ = __dc;
      __dc = 0;
    }
    return 0;
  }
  ptrdiff_t __f = std::find(__atoms, __atoms + 26, __ct) - __atoms;
  if (__f >= 24)
    return -1;
  switch (__base) {
  case 8:
  case 10:
    if (__f >= __base)
      return -1;
    break;
  case 16:
    if (__f < 22)
      break;
    if (__a_end != __a && __a_end - __a <= 2 && __a_end[-1] == '0') {
      __dc = 0;
      *__a_end++ = __src[__f];
      return 0;
    }
    return -1;
  }
  *__a_end++ = __src[__f];
  ++__dc;
  return 0;
}

template <class _CharT>
int __num_get<_CharT>::__stage2_float_loop(
    _CharT __ct,
    bool& __in_units,
    char& __exp,
    char* __a,
    char*& __a_end,
    _CharT __decimal_point,
    _CharT __thousands_sep,
    const string& __grouping,
    unsigned* __g,
    unsigned*& __g_end,
    unsigned& __dc,
    _CharT* __atoms) {
  if (__ct == __decimal_point) {
    if (!__in_units)
      return -1;
    __in_units = false;
    *__a_end++ = '.';
    if (__grouping.size() != 0 && __g_end - __g < __num_get_buf_sz)
      *__g_end++ = __dc;
    return 0;
  }
  if (__ct == __thousands_sep && __grouping.size() != 0) {
    if (!__in_units)
      return -1;
    if (__g_end - __g < __num_get_buf_sz) {
      *__g_end++ = __dc;
      __dc = 0;
    }
    return 0;
  }
  ptrdiff_t __f = std::find(__atoms, __atoms + 32, __ct) - __atoms;
  if (__f >= 32)
    return -1;
  char __x = __src[__f];
  if (__x == '-' || __x == '+') {
    if (__a_end == __a || (std::toupper(__a_end[-1]) == std::toupper(__exp))) {
      *__a_end++ = __x;
      return 0;
    }
    return -1;
  }
  if (__x == 'x' || __x == 'X')
    __exp = 'P';
  else if (std::toupper(__x) == __exp) {
    __exp = std::tolower(__exp);
    if (__in_units) {
      __in_units = false;
      if (__grouping.size() != 0 && __g_end - __g < __num_get_buf_sz)
        *__g_end++ = __dc;
    }
  }
  *__a_end++ = __x;
  if (__f >= 22)
    return 0;
  ++__dc;
  return 0;
}

template <class _CharT>
int
__num_get<_CharT>::__stage2_float_loop(_CharT __ct, bool& __in_units, char& __exp, char* __a, char*& __a_end,
                    _CharT __decimal_point, _CharT __thousands_sep, const string& __grouping,
                    unsigned* __g, unsigned*& __g_end, unsigned& __dc, _CharT* __atoms, bool& __hex)
{


    if (__ct == __decimal_point)
    {
        if (!__in_units)
            return -1;
        __in_units = false;
        *__a_end++ = '.';
        if (__grouping.size() != 0 && __g_end-__g < __num_get_buf_sz)
            *__g_end++ = __dc;
        return 0;
    }
    if (__ct == __thousands_sep && __grouping.size() != 0)
    {
        if (!__in_units)
            return -1;
        if (__g_end-__g < __num_get_buf_sz)
        {
            *__g_end++ = __dc;
            __dc = 0;
        }
        return 0;
    }
    ptrdiff_t __f = find(__atoms, __atoms + 32, __ct) - __atoms;
    const bool __is_digit = __hex ? __f < 22 : __f < 10;
    const bool __first = __a_end == __a;
    if (__f >= 32)
        return -1;
    char __x = __src[__f];
    char __X = ((__x)&0x5F);


    if (__x == '-' || __x == '+')
    {

        if (!__first && ((__a_end[-1])&0x5F) != (__exp & 0x7F))
            return -1;
    }
    else if (__x == 'x' || __x == 'X')
    {

        if (__first)
            return -1;

        if (__a_end[-1] != __atoms[0])
            return -1;

        if (__hex)
            return -1;

        if (__exp & (char) 0x80)
            return -1;
        __hex = true;
        __exp = 'P';
    }
    else if (__X == __exp)
    {

        if (__first)
            return -1;

        __exp |= (char) 0x80;
        if (__in_units)
        {
            __in_units = false;
            if (__grouping.size() != 0 && __g_end-__g < __num_get_buf_sz)
                *__g_end++ = __dc;
        }
    }
    else if (!__is_digit)
    {





        if (__first)
        {

            if (__X != 'I' && __X != 'N')
                return -1;
        }
        else
        {
            char __prev =
                __src[find(__atoms, __atoms + 32, __a_end[-1]) - __atoms];
            char __PREV = ((__prev)&0x5F);


            if (__X == 'I')
            {
                if (__prev != '+' && __prev != '-' && __PREV != 'N')
                    return -1;
            }
            else if (__X == 'N')
            {
                if (__prev != '+' && __prev != '-' && __PREV != 'I' &&
                    __PREV != 'A')
                    return -1;
            }
            else if (__X == 'F')
            {
                if (__PREV != 'N')
                    return -1;
            }
            else if (__X == 'A')
            {
                if (__PREV != 'N')
                    return -1;
            }
            else if (!__is_digit)
            {
                return -1;
            }
        }
    }


    *__a_end++ = __x;

    if (__is_digit)
        ++__dc;

    return 0;

}

extern template struct __attribute__((__visibility__("default"))) __num_get<char>;

extern template struct __attribute__((__visibility__("default"))) __num_get<wchar_t>;


template <class _CharT, class _InputIterator = istreambuf_iterator<_CharT> >
class num_get : public locale::facet, private __num_get<_CharT> {
public:
  typedef _CharT char_type;
  typedef _InputIterator iter_type;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit num_get(size_t __refs = 0) : locale::facet(__refs) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iter_type
  get(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, bool& __v) const {
    return do_get(__b, __e, __iob, __err, __v);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iter_type
  get(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, long& __v) const {
    return do_get(__b, __e, __iob, __err, __v);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iter_type
  get(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, long long& __v) const {
    return do_get(__b, __e, __iob, __err, __v);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iter_type
  get(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, unsigned short& __v) const {
    return do_get(__b, __e, __iob, __err, __v);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iter_type
  get(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, unsigned int& __v) const {
    return do_get(__b, __e, __iob, __err, __v);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iter_type
  get(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, unsigned long& __v) const {
    return do_get(__b, __e, __iob, __err, __v);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iter_type
  get(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, unsigned long long& __v) const {
    return do_get(__b, __e, __iob, __err, __v);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iter_type
  get(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, float& __v) const {
    return do_get(__b, __e, __iob, __err, __v);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iter_type
  get(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, double& __v) const {
    return do_get(__b, __e, __iob, __err, __v);
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iter_type
  get(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, long double& __v) const {
    return do_get(__b, __e, __iob, __err, __v);
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iter_type
  get(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, void*& __v) const {
    return do_get(__b, __e, __iob, __err, __v);
  }

  static locale::id id;

protected:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) ~num_get() override {}

  template <class _Fp>
  inline __attribute__((__visibility__("hidden"))) iter_type
  __do_get_floating_point(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, _Fp& __v) const;

  template <class _Signed>
  inline __attribute__((__visibility__("hidden"))) iter_type
  __do_get_signed(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, _Signed& __v) const;

  template <class _Unsigned>
  inline __attribute__((__visibility__("hidden"))) iter_type
  __do_get_unsigned(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, _Unsigned& __v) const;

  virtual iter_type do_get(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, bool& __v) const;

  virtual iter_type do_get(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, long& __v) const {
    return this->__do_get_signed(__b, __e, __iob, __err, __v);
  }

  virtual iter_type
  do_get(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, long long& __v) const {
    return this->__do_get_signed(__b, __e, __iob, __err, __v);
  }

  virtual iter_type
  do_get(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, unsigned short& __v) const {
    return this->__do_get_unsigned(__b, __e, __iob, __err, __v);
  }

  virtual iter_type
  do_get(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, unsigned int& __v) const {
    return this->__do_get_unsigned(__b, __e, __iob, __err, __v);
  }

  virtual iter_type
  do_get(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, unsigned long& __v) const {
    return this->__do_get_unsigned(__b, __e, __iob, __err, __v);
  }

  virtual iter_type
  do_get(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, unsigned long long& __v) const {
    return this->__do_get_unsigned(__b, __e, __iob, __err, __v);
  }

  virtual iter_type do_get(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, float& __v) const {
    return this->__do_get_floating_point(__b, __e, __iob, __err, __v);
  }

  virtual iter_type do_get(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, double& __v) const {
    return this->__do_get_floating_point(__b, __e, __iob, __err, __v);
  }


  virtual iter_type
  do_get(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, long double& __v) const {
    return this->__do_get_floating_point(__b, __e, __iob, __err, __v);
  }


  virtual iter_type do_get(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, void*& __v) const;
};

template <class _CharT, class _InputIterator>
locale::id num_get<_CharT, _InputIterator>::id;

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp
__num_get_signed_integral(const char* __a, const char* __a_end, ios_base::iostate& __err, int __base) {
  if (__a != __a_end) {
    __libcpp_remove_reference_t<decltype((*::std:: __aeabi_errno_addr()))> __save_errno = (*::std:: __aeabi_errno_addr());
    (*::std:: __aeabi_errno_addr()) = 0;
    char* __p2;
    long long __ll = strtoll_l(__a, &__p2, __base, __cloc());
    __libcpp_remove_reference_t<decltype((*::std:: __aeabi_errno_addr()))> __current_errno = (*::std:: __aeabi_errno_addr());
    if (__current_errno == 0)
      (*::std:: __aeabi_errno_addr()) = __save_errno;
    if (__p2 != __a_end) {
      __err = ios_base::failbit;
      return 0;
    } else if (__current_errno == 2 || __ll < numeric_limits<_Tp>::min() || numeric_limits<_Tp>::max() < __ll) {
      __err = ios_base::failbit;
      if (__ll > 0)
        return numeric_limits<_Tp>::max();
      else
        return numeric_limits<_Tp>::min();
    }
    return static_cast<_Tp>(__ll);
  }
  __err = ios_base::failbit;
  return 0;
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _Tp
__num_get_unsigned_integral(const char* __a, const char* __a_end, ios_base::iostate& __err, int __base) {
  if (__a != __a_end) {
    const bool __negate = *__a == '-';
    if (__negate && ++__a == __a_end) {
      __err = ios_base::failbit;
      return 0;
    }
    __libcpp_remove_reference_t<decltype((*::std:: __aeabi_errno_addr()))> __save_errno = (*::std:: __aeabi_errno_addr());
    (*::std:: __aeabi_errno_addr()) = 0;
    char* __p2;
    unsigned long long __ll = strtoull_l(__a, &__p2, __base, __cloc());
    __libcpp_remove_reference_t<decltype((*::std:: __aeabi_errno_addr()))> __current_errno = (*::std:: __aeabi_errno_addr());
    if (__current_errno == 0)
      (*::std:: __aeabi_errno_addr()) = __save_errno;
    if (__p2 != __a_end) {
      __err = ios_base::failbit;
      return 0;
    } else if (__current_errno == 2 || numeric_limits<_Tp>::max() < __ll) {
      __err = ios_base::failbit;
      return numeric_limits<_Tp>::max();
    }
    _Tp __res = static_cast<_Tp>(__ll);
    if (__negate)
      __res = -__res;
    return __res;
  }
  __err = ios_base::failbit;
  return 0;
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((pcs("aapcs"))) _Tp __do_strtod(const char* __a, char** __p2);

template <>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) float __do_strtod<float>(const char* __a, char** __p2) {
  return strtof_l(__a, __p2, __cloc());
}

template <>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) double __do_strtod<double>(const char* __a, char** __p2) {
  return strtod_l(__a, __p2, __cloc());
}


template <>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) long double __do_strtod<long double>(const char* __a, char** __p2) {
  return strtold_l(__a, __p2, __cloc());
}


template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((pcs("aapcs"))) _Tp __num_get_float(const char* __a, const char* __a_end, ios_base::iostate& __err) {
  if (__a != __a_end) {
    __libcpp_remove_reference_t<decltype((*::std:: __aeabi_errno_addr()))> __save_errno = (*::std:: __aeabi_errno_addr());
    (*::std:: __aeabi_errno_addr()) = 0;
    char* __p2;
    _Tp __ld = std::__do_strtod<_Tp>(__a, &__p2);
    __libcpp_remove_reference_t<decltype((*::std:: __aeabi_errno_addr()))> __current_errno = (*::std:: __aeabi_errno_addr());
    if (__current_errno == 0)
      (*::std:: __aeabi_errno_addr()) = __save_errno;
    if (__p2 != __a_end) {
      __err = ios_base::failbit;
      return 0;
    } else if (__current_errno == 2)
      __err = ios_base::failbit;
    return __ld;
  }
  __err = ios_base::failbit;
  return 0;
}

template <class _CharT, class _InputIterator>
_InputIterator num_get<_CharT, _InputIterator>::do_get(
    iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, bool& __v) const {
  if ((__iob.flags() & ios_base::boolalpha) == 0) {
    long __lv = -1;
    __b = do_get(__b, __e, __iob, __err, __lv);
    switch (__lv) {
    case 0:
      __v = false;
      break;
    case 1:
      __v = true;
      break;
    default:
      __v = true;
      __err = ios_base::failbit;
      break;
    }
    return __b;
  }
  const ctype<_CharT>& __ct = std::use_facet<ctype<_CharT> >(__iob.getloc());
  const numpunct<_CharT>& __np = std::use_facet<numpunct<_CharT> >(__iob.getloc());
  typedef typename numpunct<_CharT>::string_type string_type;
  const string_type __names[2] = {__np.truename(), __np.falsename()};
  const string_type* __i = std::__scan_keyword(__b, __e, __names, __names + 2, __ct, __err);
  __v = __i == __names;
  return __b;
}



template <class _CharT, class _InputIterator>
template <class _Signed>
_InputIterator num_get<_CharT, _InputIterator>::__do_get_signed(
    iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, _Signed& __v) const {

  int __base = this->__get_base(__iob);

  char_type __thousands_sep;
  const int __atoms_size = 26;

  char_type __atoms1[__atoms_size];
  const char_type* __atoms = this->__do_widen(__iob, __atoms1);
  string __grouping = this->__stage2_int_prep(__iob, __thousands_sep);




  string __buf;
  __buf.resize(__buf.capacity());
  char* __a = &__buf[0];
  char* __a_end = __a;
  unsigned __g[__num_get_base::__num_get_buf_sz];
  unsigned* __g_end = __g;
  unsigned __dc = 0;
  for (; __b != __e; ++__b) {
    if (__a_end == __a + __buf.size()) {
      size_t __tmp = __buf.size();
      __buf.resize(2 * __buf.size());
      __buf.resize(__buf.capacity());
      __a = &__buf[0];
      __a_end = __a + __tmp;
    }
    if (this->__stage2_int_loop(*__b, __base, __a, __a_end, __dc, __thousands_sep, __grouping, __g, __g_end, __atoms))
      break;
  }
  if (__grouping.size() != 0 && __g_end - __g < __num_get_base::__num_get_buf_sz)
    *__g_end++ = __dc;

  __v = std::__num_get_signed_integral<_Signed>(__a, __a_end, __err, __base);

  __check_grouping(__grouping, __g, __g_end, __err);

  if (__b == __e)
    __err |= ios_base::eofbit;
  return __b;
}



template <class _CharT, class _InputIterator>
template <class _Unsigned>
_InputIterator num_get<_CharT, _InputIterator>::__do_get_unsigned(
    iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, _Unsigned& __v) const {

  int __base = this->__get_base(__iob);

  char_type __thousands_sep;
  const int __atoms_size = 26;

  char_type __atoms1[__atoms_size];
  const char_type* __atoms = this->__do_widen(__iob, __atoms1);
  string __grouping = this->__stage2_int_prep(__iob, __thousands_sep);




  string __buf;
  __buf.resize(__buf.capacity());
  char* __a = &__buf[0];
  char* __a_end = __a;
  unsigned __g[__num_get_base::__num_get_buf_sz];
  unsigned* __g_end = __g;
  unsigned __dc = 0;
  for (; __b != __e; ++__b) {
    if (__a_end == __a + __buf.size()) {
      size_t __tmp = __buf.size();
      __buf.resize(2 * __buf.size());
      __buf.resize(__buf.capacity());
      __a = &__buf[0];
      __a_end = __a + __tmp;
    }
    if (this->__stage2_int_loop(*__b, __base, __a, __a_end, __dc, __thousands_sep, __grouping, __g, __g_end, __atoms))
      break;
  }
  if (__grouping.size() != 0 && __g_end - __g < __num_get_base::__num_get_buf_sz)
    *__g_end++ = __dc;

  __v = std::__num_get_unsigned_integral<_Unsigned>(__a, __a_end, __err, __base);

  __check_grouping(__grouping, __g, __g_end, __err);

  if (__b == __e)
    __err |= ios_base::eofbit;
  return __b;
}



template <class _CharT, class _InputIterator>
template <class _Fp>
_InputIterator num_get<_CharT, _InputIterator>::__do_get_floating_point(
    iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, _Fp& __v) const {


  char_type __atoms[32];
  char_type __decimal_point;
  char_type __thousands_sep;
  string __grouping = this->__stage2_float_prep(__iob, __atoms, __decimal_point, __thousands_sep);
  string __buf;
  __buf.resize(__buf.capacity());
  char* __a = &__buf[0];
  char* __a_end = __a;
  unsigned __g[__num_get_base::__num_get_buf_sz];
  unsigned* __g_end = __g;
  unsigned __dc = 0;
  bool __in_units = true;
  char __exp = 'E';
  bool __hex = false;
  for (; __b != __e; ++__b) {
    if (__a_end == __a + __buf.size()) {
      size_t __tmp = __buf.size();
      __buf.resize(2 * __buf.size());
      __buf.resize(__buf.capacity());
      __a = &__buf[0];
      __a_end = __a + __tmp;
    }
    if (this->__stage2_float_loop(
            *__b,
            __in_units,
            __exp,
            __a,
            __a_end,
            __decimal_point,
            __thousands_sep,
            __grouping,
            __g,
            __g_end,
            __dc,
            __atoms,
     __hex))
      break;
  }
  if (__grouping.size() != 0 && __in_units && __g_end - __g < __num_get_base::__num_get_buf_sz)
    *__g_end++ = __dc;

  __v = std::__num_get_float<_Fp>(__a, __a_end, __err);

  __check_grouping(__grouping, __g, __g_end, __err);

  if (__b == __e)
    __err |= ios_base::eofbit;
  return __b;
}

template <class _CharT, class _InputIterator>
_InputIterator num_get<_CharT, _InputIterator>::do_get(
    iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, void*& __v) const {

  int __base = 16;

  char_type __atoms[26];
  char_type __thousands_sep = char_type();
  string __grouping;
  std::use_facet<ctype<_CharT> >(__iob.getloc()).widen(__num_get_base::__src, __num_get_base::__src + 26, __atoms);
  string __buf;
  __buf.resize(__buf.capacity());
  char* __a = &__buf[0];
  char* __a_end = __a;
  unsigned __g[__num_get_base::__num_get_buf_sz];
  unsigned* __g_end = __g;
  unsigned __dc = 0;
  for (; __b != __e; ++__b) {
    if (__a_end == __a + __buf.size()) {
      size_t __tmp = __buf.size();
      __buf.resize(2 * __buf.size());
      __buf.resize(__buf.capacity());
      __a = &__buf[0];
      __a_end = __a + __tmp;
    }
    if (this->__stage2_int_loop(*__b, __base, __a, __a_end, __dc, __thousands_sep, __grouping, __g, __g_end, __atoms))
      break;
  }

  __buf.resize(__a_end - __a);
  if (__libcpp_sscanf_l(__buf.c_str(), __cloc(), "%p", &__v) != 1)
    __err = ios_base::failbit;

  if (__b == __e)
    __err |= ios_base::eofbit;
  return __b;
}

extern template class __attribute__((__visibility__("default"))) num_get<char>;

extern template class __attribute__((__visibility__("default"))) num_get<wchar_t>;


struct __attribute__((__visibility__("default"))) __num_put_base {
protected:
  static void __format_int(char* __fmt, const char* __len, bool __signd, ios_base::fmtflags __flags);
  static bool __format_float(char* __fmt, const char* __len, ios_base::fmtflags __flags);
  static char* __identify_padding(char* __nb, char* __ne, const ios_base& __iob);
};

template <class _CharT>
struct __num_put : protected __num_put_base {
  static void __widen_and_group_int(
      char* __nb, char* __np, char* __ne, _CharT* __ob, _CharT*& __op, _CharT*& __oe, const locale& __loc);
  static void __widen_and_group_float(
      char* __nb, char* __np, char* __ne, _CharT* __ob, _CharT*& __op, _CharT*& __oe, const locale& __loc);
};

template <class _CharT>
void __num_put<_CharT>::__widen_and_group_int(
    char* __nb, char* __np, char* __ne, _CharT* __ob, _CharT*& __op, _CharT*& __oe, const locale& __loc) {
  const ctype<_CharT>& __ct = std::use_facet<ctype<_CharT> >(__loc);
  const numpunct<_CharT>& __npt = std::use_facet<numpunct<_CharT> >(__loc);
  string __grouping = __npt.grouping();
  if (__grouping.empty()) {
    __ct.widen(__nb, __ne, __ob);
    __oe = __ob + (__ne - __nb);
  } else {
    __oe = __ob;
    char* __nf = __nb;
    if (*__nf == '-' || *__nf == '+')
      *__oe++ = __ct.widen(*__nf++);
    if (__ne - __nf >= 2 && __nf[0] == '0' && (__nf[1] == 'x' || __nf[1] == 'X')) {
      *__oe++ = __ct.widen(*__nf++);
      *__oe++ = __ct.widen(*__nf++);
    }
    std::reverse(__nf, __ne);
    _CharT __thousands_sep = __npt.thousands_sep();
    unsigned __dc = 0;
    unsigned __dg = 0;
    for (char* __p = __nf; __p < __ne; ++__p) {
      if (static_cast<unsigned>(__grouping[__dg]) > 0 && __dc == static_cast<unsigned>(__grouping[__dg])) {
        *__oe++ = __thousands_sep;
        __dc = 0;
        if (__dg < __grouping.size() - 1)
          ++__dg;
      }
      *__oe++ = __ct.widen(*__p);
      ++__dc;
    }
    std::reverse(__ob + (__nf - __nb), __oe);
  }
  if (__np == __ne)
    __op = __oe;
  else
    __op = __ob + (__np - __nb);
}

template <class _CharT>
void __num_put<_CharT>::__widen_and_group_float(
    char* __nb, char* __np, char* __ne, _CharT* __ob, _CharT*& __op, _CharT*& __oe, const locale& __loc) {
  const ctype<_CharT>& __ct = std::use_facet<ctype<_CharT> >(__loc);
  const numpunct<_CharT>& __npt = std::use_facet<numpunct<_CharT> >(__loc);
  string __grouping = __npt.grouping();
  __oe = __ob;
  char* __nf = __nb;
  if (*__nf == '-' || *__nf == '+')
    *__oe++ = __ct.widen(*__nf++);
  char* __ns;
  if (__ne - __nf >= 2 && __nf[0] == '0' && (__nf[1] == 'x' || __nf[1] == 'X')) {
    *__oe++ = __ct.widen(*__nf++);
    *__oe++ = __ct.widen(*__nf++);
    for (__ns = __nf; __ns < __ne; ++__ns)
      if (!isxdigit_l(*__ns, __cloc()))
        break;
  } else {
    for (__ns = __nf; __ns < __ne; ++__ns)
      if (!isdigit_l(*__ns, __cloc()))
        break;
  }
  if (__grouping.empty()) {
    __ct.widen(__nf, __ns, __oe);
    __oe += __ns - __nf;
  } else {
    std::reverse(__nf, __ns);
    _CharT __thousands_sep = __npt.thousands_sep();
    unsigned __dc = 0;
    unsigned __dg = 0;
    for (char* __p = __nf; __p < __ns; ++__p) {
      if (__grouping[__dg] > 0 && __dc == static_cast<unsigned>(__grouping[__dg])) {
        *__oe++ = __thousands_sep;
        __dc = 0;
        if (__dg < __grouping.size() - 1)
          ++__dg;
      }
      *__oe++ = __ct.widen(*__p);
      ++__dc;
    }
    std::reverse(__ob + (__nf - __nb), __oe);
  }
  for (__nf = __ns; __nf < __ne; ++__nf) {
    if (*__nf == '.') {
      *__oe++ = __npt.decimal_point();
      ++__nf;
      break;
    } else
      *__oe++ = __ct.widen(*__nf);
  }
  __ct.widen(__nf, __ne, __oe);
  __oe += __ne - __nf;
  if (__np == __ne)
    __op = __oe;
  else
    __op = __ob + (__np - __nb);
}

extern template struct __attribute__((__visibility__("default"))) __num_put<char>;

extern template struct __attribute__((__visibility__("default"))) __num_put<wchar_t>;


template <class _CharT, class _OutputIterator = ostreambuf_iterator<_CharT> >
class num_put : public locale::facet, private __num_put<_CharT> {
public:
  typedef _CharT char_type;
  typedef _OutputIterator iter_type;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit num_put(size_t __refs = 0) : locale::facet(__refs) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iter_type put(iter_type __s, ios_base& __iob, char_type __fl, bool __v) const {
    return do_put(__s, __iob, __fl, __v);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iter_type put(iter_type __s, ios_base& __iob, char_type __fl, long __v) const {
    return do_put(__s, __iob, __fl, __v);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iter_type put(iter_type __s, ios_base& __iob, char_type __fl, long long __v) const {
    return do_put(__s, __iob, __fl, __v);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iter_type put(iter_type __s, ios_base& __iob, char_type __fl, unsigned long __v) const {
    return do_put(__s, __iob, __fl, __v);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iter_type put(iter_type __s, ios_base& __iob, char_type __fl, unsigned long long __v) const {
    return do_put(__s, __iob, __fl, __v);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((pcs("aapcs"))) iter_type put(iter_type __s, ios_base& __iob, char_type __fl, double __v) const {
    return do_put(__s, __iob, __fl, __v);
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __attribute__((pcs("aapcs"))) iter_type put(iter_type __s, ios_base& __iob, char_type __fl, long double __v) const {
    return do_put(__s, __iob, __fl, __v);
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iter_type put(iter_type __s, ios_base& __iob, char_type __fl, const void* __v) const {
    return do_put(__s, __iob, __fl, __v);
  }

  static locale::id id;

protected:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) ~num_put() override {}

  virtual iter_type do_put(iter_type __s, ios_base& __iob, char_type __fl, bool __v) const;
  virtual iter_type do_put(iter_type __s, ios_base& __iob, char_type __fl, long __v) const;
  virtual iter_type do_put(iter_type __s, ios_base& __iob, char_type __fl, long long __v) const;
  virtual iter_type do_put(iter_type __s, ios_base& __iob, char_type __fl, unsigned long) const;
  virtual iter_type do_put(iter_type __s, ios_base& __iob, char_type __fl, unsigned long long) const;
  __attribute__((pcs("aapcs")))
  virtual iter_type do_put(iter_type __s, ios_base& __iob, char_type __fl, double __v) const;

  __attribute__((pcs("aapcs")))
  virtual iter_type do_put(iter_type __s, ios_base& __iob, char_type __fl, long double __v) const;

  virtual iter_type do_put(iter_type __s, ios_base& __iob, char_type __fl, const void* __v) const;

  template <class _Integral>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline _OutputIterator
  __do_put_integral(iter_type __s, ios_base& __iob, char_type __fl, _Integral __v, char const* __len) const;

  template <class _Float>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline _OutputIterator
  __do_put_floating_point(iter_type __s, ios_base& __iob, char_type __fl, _Float __v, char const* __len) const;
};

template <class _CharT, class _OutputIterator>
locale::id num_put<_CharT, _OutputIterator>::id;

template <class _CharT, class _OutputIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) _OutputIterator __pad_and_output(
    _OutputIterator __s, const _CharT* __ob, const _CharT* __op, const _CharT* __oe, ios_base& __iob, _CharT __fl) {
  streamsize __sz = __oe - __ob;
  streamsize __ns = __iob.width();
  if (__ns > __sz)
    __ns -= __sz;
  else
    __ns = 0;
  for (; __ob < __op; ++__ob, ++__s)
    *__s = *__ob;
  for (; __ns; --__ns, ++__s)
    *__s = __fl;
  for (; __ob < __oe; ++__ob, ++__s)
    *__s = *__ob;
  __iob.width(0);
  return __s;
}

template <class _CharT, class _Traits>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) ostreambuf_iterator<_CharT, _Traits> __pad_and_output(
    ostreambuf_iterator<_CharT, _Traits> __s,
    const _CharT* __ob,
    const _CharT* __op,
    const _CharT* __oe,
    ios_base& __iob,
    _CharT __fl) {
  if (__s.__sbuf_ == nullptr)
    return __s;
  streamsize __sz = __oe - __ob;
  streamsize __ns = __iob.width();
  if (__ns > __sz)
    __ns -= __sz;
  else
    __ns = 0;
  streamsize __np = __op - __ob;
  if (__np > 0) {
    if (__s.__sbuf_->sputn(__ob, __np) != __np) {
      __s.__sbuf_ = nullptr;
      return __s;
    }
  }
  if (__ns > 0) {
    basic_string<_CharT, _Traits> __sp(__ns, __fl);
    if (__s.__sbuf_->sputn(__sp.data(), __ns) != __ns) {
      __s.__sbuf_ = nullptr;
      return __s;
    }
  }
  __np = __oe - __op;
  if (__np > 0) {
    if (__s.__sbuf_->sputn(__op, __np) != __np) {
      __s.__sbuf_ = nullptr;
      return __s;
    }
  }
  __iob.width(0);
  return __s;
}

template <class _CharT, class _OutputIterator>
_OutputIterator
num_put<_CharT, _OutputIterator>::do_put(iter_type __s, ios_base& __iob, char_type __fl, bool __v) const {
  if ((__iob.flags() & ios_base::boolalpha) == 0)
    return do_put(__s, __iob, __fl, (unsigned long)__v);
  const numpunct<char_type>& __np = std::use_facet<numpunct<char_type> >(__iob.getloc());
  typedef typename numpunct<char_type>::string_type string_type;
  string_type __nm = __v ? __np.truename() : __np.falsename();
  for (typename string_type::iterator __i = __nm.begin(); __i != __nm.end(); ++__i, ++__s)
    *__s = *__i;
  return __s;
}

template <class _CharT, class _OutputIterator>
template <class _Integral>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline _OutputIterator num_put<_CharT, _OutputIterator>::__do_put_integral(
    iter_type __s, ios_base& __iob, char_type __fl, _Integral __v, char const* __len) const {

  char __fmt[8] = {'%', 0};
  this->__format_int(__fmt + 1, __len, is_signed<_Integral>::value, __iob.flags());


  using _Unsigned = typename make_unsigned<_Integral>::type;
  constexpr const unsigned __nbuf =
      (numeric_limits<_Unsigned>::digits / 3)
      + ((numeric_limits<_Unsigned>::digits % 3) != 0)
      + 2;
  char __nar[__nbuf];
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wformat-nonliteral"

  int __nc = __libcpp_snprintf_l(__nar, sizeof(__nar), __cloc(), __fmt, __v);
#pragma clang diagnostic pop
  char* __ne = __nar + __nc;
  char* __np = this->__identify_padding(__nar, __ne, __iob);

  char_type __o[2 * (__nbuf - 1) - 1];
  char_type* __op;
  char_type* __oe;
  this->__widen_and_group_int(__nar, __np, __ne, __o, __op, __oe, __iob.getloc());


  return std::__pad_and_output(__s, __o, __op, __oe, __iob, __fl);
}

template <class _CharT, class _OutputIterator>
_OutputIterator
num_put<_CharT, _OutputIterator>::do_put(iter_type __s, ios_base& __iob, char_type __fl, long __v) const {
  return this->__do_put_integral(__s, __iob, __fl, __v, "l");
}

template <class _CharT, class _OutputIterator>
_OutputIterator
num_put<_CharT, _OutputIterator>::do_put(iter_type __s, ios_base& __iob, char_type __fl, long long __v) const {
  return this->__do_put_integral(__s, __iob, __fl, __v, "ll");
}

template <class _CharT, class _OutputIterator>
_OutputIterator
num_put<_CharT, _OutputIterator>::do_put(iter_type __s, ios_base& __iob, char_type __fl, unsigned long __v) const {
  return this->__do_put_integral(__s, __iob, __fl, __v, "l");
}

template <class _CharT, class _OutputIterator>
_OutputIterator
num_put<_CharT, _OutputIterator>::do_put(iter_type __s, ios_base& __iob, char_type __fl, unsigned long long __v) const {
  return this->__do_put_integral(__s, __iob, __fl, __v, "ll");
}

template <class _CharT, class _OutputIterator>
template <class _Float>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) inline _OutputIterator num_put<_CharT, _OutputIterator>::__do_put_floating_point(
    iter_type __s, ios_base& __iob, char_type __fl, _Float __v, char const* __len) const {

  char __fmt[8] = {'%', 0};
  bool __specify_precision = this->__format_float(__fmt + 1, __len, __iob.flags());
  const unsigned __nbuf = 30;
  char __nar[__nbuf];
  char* __nb = __nar;
  int __nc;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wformat-nonliteral"

  if (__specify_precision)
    __nc = __libcpp_snprintf_l(__nb, __nbuf, __cloc(), __fmt, (int)__iob.precision(), __v);
  else
    __nc = __libcpp_snprintf_l(__nb, __nbuf, __cloc(), __fmt, __v);
  unique_ptr<char, void (*)(void*)> __nbh(nullptr, free);
  if (__nc > static_cast<int>(__nbuf - 1)) {
    if (__specify_precision)
      __nc = __libcpp_asprintf_l(&__nb, __cloc(), __fmt, (int)__iob.precision(), __v);
    else
      __nc = __libcpp_asprintf_l(&__nb, __cloc(), __fmt, __v);
    if (__nc == -1)
      __throw_bad_alloc();
    __nbh.reset(__nb);
  }
#pragma clang diagnostic pop
  char* __ne = __nb + __nc;
  char* __np = this->__identify_padding(__nb, __ne, __iob);

  char_type __o[2 * (__nbuf - 1) - 1];
  char_type* __ob = __o;
  unique_ptr<char_type, void (*)(void*)> __obh(0, free);
  if (__nb != __nar) {
    __ob = (char_type*)malloc(2 * static_cast<size_t>(__nc) * sizeof(char_type));
    if (__ob == 0)
      __throw_bad_alloc();
    __obh.reset(__ob);
  }
  char_type* __op;
  char_type* __oe;
  this->__widen_and_group_float(__nb, __np, __ne, __ob, __op, __oe, __iob.getloc());


  __s = std::__pad_and_output(__s, __ob, __op, __oe, __iob, __fl);
  return __s;
}

template <class _CharT, class _OutputIterator>
_OutputIterator
num_put<_CharT, _OutputIterator>::do_put(iter_type __s, ios_base& __iob, char_type __fl, double __v) const {
  return this->__do_put_floating_point(__s, __iob, __fl, __v, "");
}


template <class _CharT, class _OutputIterator>
_OutputIterator
num_put<_CharT, _OutputIterator>::do_put(iter_type __s, ios_base& __iob, char_type __fl, long double __v) const {
  return this->__do_put_floating_point(__s, __iob, __fl, __v, "L");
}


template <class _CharT, class _OutputIterator>
_OutputIterator
num_put<_CharT, _OutputIterator>::do_put(iter_type __s, ios_base& __iob, char_type __fl, const void* __v) const {

  const unsigned __nbuf = 20;
  char __nar[__nbuf];
  int __nc = __libcpp_snprintf_l(__nar, sizeof(__nar), __cloc(), "%p", __v);
  char* __ne = __nar + __nc;
  char* __np = this->__identify_padding(__nar, __ne, __iob);

  char_type __o[2 * (__nbuf - 1) - 1];
  char_type* __op;
  char_type* __oe;
  const ctype<char_type>& __ct = std::use_facet<ctype<char_type> >(__iob.getloc());
  __ct.widen(__nar, __ne, __o);
  __oe = __o + (__ne - __nar);
  if (__np == __ne)
    __op = __oe;
  else
    __op = __o + (__np - __nar);


  return std::__pad_and_output(__s, __o, __op, __oe, __iob, __fl);
}

extern template class __attribute__((__visibility__("default"))) num_put<char>;

extern template class __attribute__((__visibility__("default"))) num_put<wchar_t>;


template <class _CharT, class _InputIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) int __get_up_to_n_digits(
    _InputIterator& __b, _InputIterator __e, ios_base::iostate& __err, const ctype<_CharT>& __ct, int __n) {

  if (__b == __e) {
    __err |= ios_base::eofbit | ios_base::failbit;
    return 0;
  }

  _CharT __c = *__b;
  if (!__ct.is(ctype_base::digit, __c)) {
    __err |= ios_base::failbit;
    return 0;
  }
  int __r = __ct.narrow(__c, 0) - '0';
  for (++__b, (void)--__n; __b != __e && __n > 0; ++__b, (void)--__n) {

    __c = *__b;
    if (!__ct.is(ctype_base::digit, __c))
      return __r;
    __r = __r * 10 + __ct.narrow(__c, 0) - '0';
  }
  if (__b == __e)
    __err |= ios_base::eofbit;
  return __r;
}

class __attribute__((__visibility__("default"))) time_base {
public:
  enum dateorder { no_order, dmy, mdy, ymd, ydm };
};

template <class _CharT>
class __time_get_c_storage {
protected:
  typedef basic_string<_CharT> string_type;

  virtual const string_type* __weeks() const;
  virtual const string_type* __months() const;
  virtual const string_type* __am_pm() const;
  virtual const string_type& __c() const;
  virtual const string_type& __r() const;
  virtual const string_type& __x() const;
  virtual const string_type& __X() const;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) ~__time_get_c_storage() {}
};

template <>
__attribute__((__visibility__("default"))) const string* __time_get_c_storage<char>::__weeks() const;
template <>
__attribute__((__visibility__("default"))) const string* __time_get_c_storage<char>::__months() const;
template <>
__attribute__((__visibility__("default"))) const string* __time_get_c_storage<char>::__am_pm() const;
template <>
__attribute__((__visibility__("default"))) const string& __time_get_c_storage<char>::__c() const;
template <>
__attribute__((__visibility__("default"))) const string& __time_get_c_storage<char>::__r() const;
template <>
__attribute__((__visibility__("default"))) const string& __time_get_c_storage<char>::__x() const;
template <>
__attribute__((__visibility__("default"))) const string& __time_get_c_storage<char>::__X() const;


template <>
__attribute__((__visibility__("default"))) const wstring* __time_get_c_storage<wchar_t>::__weeks() const;
template <>
__attribute__((__visibility__("default"))) const wstring* __time_get_c_storage<wchar_t>::__months() const;
template <>
__attribute__((__visibility__("default"))) const wstring* __time_get_c_storage<wchar_t>::__am_pm() const;
template <>
__attribute__((__visibility__("default"))) const wstring& __time_get_c_storage<wchar_t>::__c() const;
template <>
__attribute__((__visibility__("default"))) const wstring& __time_get_c_storage<wchar_t>::__r() const;
template <>
__attribute__((__visibility__("default"))) const wstring& __time_get_c_storage<wchar_t>::__x() const;
template <>
__attribute__((__visibility__("default"))) const wstring& __time_get_c_storage<wchar_t>::__X() const;


template <class _CharT, class _InputIterator = istreambuf_iterator<_CharT> >
class time_get : public locale::facet, public time_base, private __time_get_c_storage<_CharT> {
public:
  typedef _CharT char_type;
  typedef _InputIterator iter_type;
  typedef time_base::dateorder dateorder;
  typedef basic_string<char_type> string_type;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit time_get(size_t __refs = 0) : locale::facet(__refs) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) dateorder date_order() const { return this->do_date_order(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iter_type
  get_time(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, tm* __tm) const {
    return do_get_time(__b, __e, __iob, __err, __tm);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iter_type
  get_date(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, tm* __tm) const {
    return do_get_date(__b, __e, __iob, __err, __tm);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iter_type
  get_weekday(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, tm* __tm) const {
    return do_get_weekday(__b, __e, __iob, __err, __tm);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iter_type
  get_monthname(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, tm* __tm) const {
    return do_get_monthname(__b, __e, __iob, __err, __tm);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iter_type
  get_year(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, tm* __tm) const {
    return do_get_year(__b, __e, __iob, __err, __tm);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iter_type
  get(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, tm* __tm, char __fmt, char __mod = 0)
      const {
    return do_get(__b, __e, __iob, __err, __tm, __fmt, __mod);
  }

  iter_type
  get(iter_type __b,
      iter_type __e,
      ios_base& __iob,
      ios_base::iostate& __err,
      tm* __tm,
      const char_type* __fmtb,
      const char_type* __fmte) const;

  static locale::id id;

protected:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) ~time_get() override {}

  virtual dateorder do_date_order() const;
  virtual iter_type
  do_get_time(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, tm* __tm) const;
  virtual iter_type
  do_get_date(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, tm* __tm) const;
  virtual iter_type
  do_get_weekday(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, tm* __tm) const;
  virtual iter_type
  do_get_monthname(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, tm* __tm) const;
  virtual iter_type
  do_get_year(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, tm* __tm) const;
  virtual iter_type do_get(
      iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, tm* __tm, char __fmt, char __mod) const;

private:
  void __get_white_space(iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const;
  void __get_percent(iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const;

  void __get_weekdayname(
      int& __m, iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const;
  void __get_monthname(
      int& __m, iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const;
  void __get_day(int& __d, iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const;
  void
  __get_month(int& __m, iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const;
  void
  __get_year(int& __y, iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const;
  void
  __get_year4(int& __y, iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const;
  void
  __get_hour(int& __d, iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const;
  void
  __get_12_hour(int& __h, iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const;
  void
  __get_am_pm(int& __h, iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const;
  void
  __get_minute(int& __m, iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const;
  void
  __get_second(int& __s, iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const;
  void
  __get_weekday(int& __w, iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const;
  void __get_day_year_num(
      int& __w, iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const;
};

template <class _CharT, class _InputIterator>
locale::id time_get<_CharT, _InputIterator>::id;



template <class _CharT, class _InputIterator>
void time_get<_CharT, _InputIterator>::__get_weekdayname(
    int& __w, iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const {

  const string_type* __wk = this->__weeks();
  ptrdiff_t __i = std::__scan_keyword(__b, __e, __wk, __wk + 14, __ct, __err, false) - __wk;
  if (__i < 14)
    __w = __i % 7;
}

template <class _CharT, class _InputIterator>
void time_get<_CharT, _InputIterator>::__get_monthname(
    int& __m, iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const {

  const string_type* __month = this->__months();
  ptrdiff_t __i = std::__scan_keyword(__b, __e, __month, __month + 24, __ct, __err, false) - __month;
  if (__i < 24)
    __m = __i % 12;
}

template <class _CharT, class _InputIterator>
void time_get<_CharT, _InputIterator>::__get_day(
    int& __d, iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const {
  int __t = std::__get_up_to_n_digits(__b, __e, __err, __ct, 2);
  if (!(__err & ios_base::failbit) && 1 <= __t && __t <= 31)
    __d = __t;
  else
    __err |= ios_base::failbit;
}

template <class _CharT, class _InputIterator>
void time_get<_CharT, _InputIterator>::__get_month(
    int& __m, iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const {
  int __t = std::__get_up_to_n_digits(__b, __e, __err, __ct, 2) - 1;
  if (!(__err & ios_base::failbit) && 0 <= __t && __t <= 11)
    __m = __t;
  else
    __err |= ios_base::failbit;
}

template <class _CharT, class _InputIterator>
void time_get<_CharT, _InputIterator>::__get_year(
    int& __y, iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const {
  int __t = std::__get_up_to_n_digits(__b, __e, __err, __ct, 4);
  if (!(__err & ios_base::failbit)) {
    if (__t < 69)
      __t += 2000;
    else if (69 <= __t && __t <= 99)
      __t += 1900;
    __y = __t - 1900;
  }
}

template <class _CharT, class _InputIterator>
void time_get<_CharT, _InputIterator>::__get_year4(
    int& __y, iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const {
  int __t = std::__get_up_to_n_digits(__b, __e, __err, __ct, 4);
  if (!(__err & ios_base::failbit))
    __y = __t - 1900;
}

template <class _CharT, class _InputIterator>
void time_get<_CharT, _InputIterator>::__get_hour(
    int& __h, iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const {
  int __t = std::__get_up_to_n_digits(__b, __e, __err, __ct, 2);
  if (!(__err & ios_base::failbit) && __t <= 23)
    __h = __t;
  else
    __err |= ios_base::failbit;
}

template <class _CharT, class _InputIterator>
void time_get<_CharT, _InputIterator>::__get_12_hour(
    int& __h, iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const {
  int __t = std::__get_up_to_n_digits(__b, __e, __err, __ct, 2);
  if (!(__err & ios_base::failbit) && 1 <= __t && __t <= 12)
    __h = __t;
  else
    __err |= ios_base::failbit;
}

template <class _CharT, class _InputIterator>
void time_get<_CharT, _InputIterator>::__get_minute(
    int& __m, iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const {
  int __t = std::__get_up_to_n_digits(__b, __e, __err, __ct, 2);
  if (!(__err & ios_base::failbit) && __t <= 59)
    __m = __t;
  else
    __err |= ios_base::failbit;
}

template <class _CharT, class _InputIterator>
void time_get<_CharT, _InputIterator>::__get_second(
    int& __s, iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const {
  int __t = std::__get_up_to_n_digits(__b, __e, __err, __ct, 2);
  if (!(__err & ios_base::failbit) && __t <= 60)
    __s = __t;
  else
    __err |= ios_base::failbit;
}

template <class _CharT, class _InputIterator>
void time_get<_CharT, _InputIterator>::__get_weekday(
    int& __w, iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const {
  int __t = std::__get_up_to_n_digits(__b, __e, __err, __ct, 1);
  if (!(__err & ios_base::failbit) && __t <= 6)
    __w = __t;
  else
    __err |= ios_base::failbit;
}

template <class _CharT, class _InputIterator>
void time_get<_CharT, _InputIterator>::__get_day_year_num(
    int& __d, iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const {
  int __t = std::__get_up_to_n_digits(__b, __e, __err, __ct, 3);
  if (!(__err & ios_base::failbit) && __t <= 365)
    __d = __t;
  else
    __err |= ios_base::failbit;
}

template <class _CharT, class _InputIterator>
void time_get<_CharT, _InputIterator>::__get_white_space(
    iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const {
  for (; __b != __e && __ct.is(ctype_base::space, *__b); ++__b)
    ;
  if (__b == __e)
    __err |= ios_base::eofbit;
}

template <class _CharT, class _InputIterator>
void time_get<_CharT, _InputIterator>::__get_am_pm(
    int& __h, iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const {
  const string_type* __ap = this->__am_pm();
  if (__ap[0].size() + __ap[1].size() == 0) {
    __err |= ios_base::failbit;
    return;
  }
  ptrdiff_t __i = std::__scan_keyword(__b, __e, __ap, __ap + 2, __ct, __err, false) - __ap;
  if (__i == 0 && __h == 12)
    __h = 0;
  else if (__i == 1 && __h < 12)
    __h += 12;
}

template <class _CharT, class _InputIterator>
void time_get<_CharT, _InputIterator>::__get_percent(
    iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const {
  if (__b == __e) {
    __err |= ios_base::eofbit | ios_base::failbit;
    return;
  }
  if (__ct.narrow(*__b, 0) != '%')
    __err |= ios_base::failbit;
  else if (++__b == __e)
    __err |= ios_base::eofbit;
}



template <class _CharT, class _InputIterator>
_InputIterator time_get<_CharT, _InputIterator>::get(
    iter_type __b,
    iter_type __e,
    ios_base& __iob,
    ios_base::iostate& __err,
    tm* __tm,
    const char_type* __fmtb,
    const char_type* __fmte) const {
  const ctype<char_type>& __ct = std::use_facet<ctype<char_type> >(__iob.getloc());
  __err = ios_base::goodbit;
  while (__fmtb != __fmte && __err == ios_base::goodbit) {
    if (__b == __e) {
      __err = ios_base::failbit;
      break;
    }
    if (__ct.narrow(*__fmtb, 0) == '%') {
      if (++__fmtb == __fmte) {
        __err = ios_base::failbit;
        break;
      }
      char __cmd = __ct.narrow(*__fmtb, 0);
      char __opt = '\0';
      if (__cmd == 'E' || __cmd == '0') {
        if (++__fmtb == __fmte) {
          __err = ios_base::failbit;
          break;
        }
        __opt = __cmd;
        __cmd = __ct.narrow(*__fmtb, 0);
      }
      __b = do_get(__b, __e, __iob, __err, __tm, __cmd, __opt);
      ++__fmtb;
    } else if (__ct.is(ctype_base::space, *__fmtb)) {
      for (++__fmtb; __fmtb != __fmte && __ct.is(ctype_base::space, *__fmtb); ++__fmtb)
        ;
      for (; __b != __e && __ct.is(ctype_base::space, *__b); ++__b)
        ;
    } else if (__ct.toupper(*__b) == __ct.toupper(*__fmtb)) {
      ++__b;
      ++__fmtb;
    } else
      __err = ios_base::failbit;
  }
  if (__b == __e)
    __err |= ios_base::eofbit;
  return __b;
}

template <class _CharT, class _InputIterator>
typename time_get<_CharT, _InputIterator>::dateorder time_get<_CharT, _InputIterator>::do_date_order() const {
  return mdy;
}

template <class _CharT, class _InputIterator>
_InputIterator time_get<_CharT, _InputIterator>::do_get_time(
    iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, tm* __tm) const {
  const char_type __fmt[] = {'%', 'H', ':', '%', 'M', ':', '%', 'S'};
  return get(__b, __e, __iob, __err, __tm, __fmt, __fmt + sizeof(__fmt) / sizeof(__fmt[0]));
}

template <class _CharT, class _InputIterator>
_InputIterator time_get<_CharT, _InputIterator>::do_get_date(
    iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, tm* __tm) const {
  const string_type& __fmt = this->__x();
  return get(__b, __e, __iob, __err, __tm, __fmt.data(), __fmt.data() + __fmt.size());
}

template <class _CharT, class _InputIterator>
_InputIterator time_get<_CharT, _InputIterator>::do_get_weekday(
    iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, tm* __tm) const {
  const ctype<char_type>& __ct = std::use_facet<ctype<char_type> >(__iob.getloc());
  __get_weekdayname(__tm->tm_wday, __b, __e, __err, __ct);
  return __b;
}

template <class _CharT, class _InputIterator>
_InputIterator time_get<_CharT, _InputIterator>::do_get_monthname(
    iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, tm* __tm) const {
  const ctype<char_type>& __ct = std::use_facet<ctype<char_type> >(__iob.getloc());
  __get_monthname(__tm->tm_mon, __b, __e, __err, __ct);
  return __b;
}

template <class _CharT, class _InputIterator>
_InputIterator time_get<_CharT, _InputIterator>::do_get_year(
    iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, tm* __tm) const {
  const ctype<char_type>& __ct = std::use_facet<ctype<char_type> >(__iob.getloc());
  __get_year(__tm->tm_year, __b, __e, __err, __ct);
  return __b;
}

template <class _CharT, class _InputIterator>
_InputIterator time_get<_CharT, _InputIterator>::do_get(
    iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, tm* __tm, char __fmt, char) const {
  __err = ios_base::goodbit;
  const ctype<char_type>& __ct = std::use_facet<ctype<char_type> >(__iob.getloc());
  switch (__fmt) {
  case 'a':
  case 'A':
    __get_weekdayname(__tm->tm_wday, __b, __e, __err, __ct);
    break;
  case 'b':
  case 'B':
  case 'h':
    __get_monthname(__tm->tm_mon, __b, __e, __err, __ct);
    break;
  case 'c': {
    const string_type& __fm = this->__c();
    __b = get(__b, __e, __iob, __err, __tm, __fm.data(), __fm.data() + __fm.size());
  } break;
  case 'd':
  case 'e':
    __get_day(__tm->tm_mday, __b, __e, __err, __ct);
    break;
  case 'D': {
    const char_type __fm[] = {'%', 'm', '/', '%', 'd', '/', '%', 'y'};
    __b = get(__b, __e, __iob, __err, __tm, __fm, __fm + sizeof(__fm) / sizeof(__fm[0]));
  } break;
  case 'F': {
    const char_type __fm[] = {'%', 'Y', '-', '%', 'm', '-', '%', 'd'};
    __b = get(__b, __e, __iob, __err, __tm, __fm, __fm + sizeof(__fm) / sizeof(__fm[0]));
  } break;
  case 'H':
    __get_hour(__tm->tm_hour, __b, __e, __err, __ct);
    break;
  case 'I':
    __get_12_hour(__tm->tm_hour, __b, __e, __err, __ct);
    break;
  case 'j':
    __get_day_year_num(__tm->tm_yday, __b, __e, __err, __ct);
    break;
  case 'm':
    __get_month(__tm->tm_mon, __b, __e, __err, __ct);
    break;
  case 'M':
    __get_minute(__tm->tm_min, __b, __e, __err, __ct);
    break;
  case 'n':
  case 't':
    __get_white_space(__b, __e, __err, __ct);
    break;
  case 'p':
    __get_am_pm(__tm->tm_hour, __b, __e, __err, __ct);
    break;
  case 'r': {
    const char_type __fm[] = {'%', 'I', ':', '%', 'M', ':', '%', 'S', ' ', '%', 'p'};
    __b = get(__b, __e, __iob, __err, __tm, __fm, __fm + sizeof(__fm) / sizeof(__fm[0]));
  } break;
  case 'R': {
    const char_type __fm[] = {'%', 'H', ':', '%', 'M'};
    __b = get(__b, __e, __iob, __err, __tm, __fm, __fm + sizeof(__fm) / sizeof(__fm[0]));
  } break;
  case 'S':
    __get_second(__tm->tm_sec, __b, __e, __err, __ct);
    break;
  case 'T': {
    const char_type __fm[] = {'%', 'H', ':', '%', 'M', ':', '%', 'S'};
    __b = get(__b, __e, __iob, __err, __tm, __fm, __fm + sizeof(__fm) / sizeof(__fm[0]));
  } break;
  case 'w':
    __get_weekday(__tm->tm_wday, __b, __e, __err, __ct);
    break;
  case 'x':
    return do_get_date(__b, __e, __iob, __err, __tm);
  case 'X': {
    const string_type& __fm = this->__X();
    __b = get(__b, __e, __iob, __err, __tm, __fm.data(), __fm.data() + __fm.size());
  } break;
  case 'y':
    __get_year(__tm->tm_year, __b, __e, __err, __ct);
    break;
  case 'Y':
    __get_year4(__tm->tm_year, __b, __e, __err, __ct);
    break;
  case '%':
    __get_percent(__b, __e, __err, __ct);
    break;
  default:
    __err |= ios_base::failbit;
  }
  return __b;
}

extern template class __attribute__((__visibility__("default"))) time_get<char>;

extern template class __attribute__((__visibility__("default"))) time_get<wchar_t>;


class __attribute__((__visibility__("default"))) __time_get {
protected:
  locale_t __loc_;

  __time_get(const char* __nm);
  __time_get(const string& __nm);
  ~__time_get();
};

template <class _CharT>
class __time_get_storage : public __time_get {
protected:
  typedef basic_string<_CharT> string_type;

  string_type __weeks_[14];
  string_type __months_[24];
  string_type __am_pm_[2];
  string_type __c_;
  string_type __r_;
  string_type __x_;
  string_type __X_;

  explicit __time_get_storage(const char* __nm);
  explicit __time_get_storage(const string& __nm);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) ~__time_get_storage() {}

  time_base::dateorder __do_date_order() const;

private:
  void init(const ctype<_CharT>&);
  string_type __analyze(char __fmt, const ctype<_CharT>&);
};
# 2202 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\locale" 3
template <> __attribute__((__visibility__("default"))) time_base::dateorder __time_get_storage<char>::__do_date_order() const; template <> __attribute__((__visibility__("default"))) __time_get_storage<char>::__time_get_storage(const char*); template <> __attribute__((__visibility__("default"))) __time_get_storage<char>::__time_get_storage(const string&); template <> __attribute__((__visibility__("default"))) void __time_get_storage<char>::init(const ctype<char>&); template <> __attribute__((__visibility__("default"))) __time_get_storage<char>::string_type __time_get_storage<char>::__analyze( char, const ctype<char>&); extern template __attribute__((__visibility__("default"))) time_base::dateorder __time_get_storage<char>::__do_date_order() const; extern template __attribute__((__visibility__("default"))) __time_get_storage<char>::__time_get_storage(const char*); extern template __attribute__((__visibility__("default"))) __time_get_storage<char>::__time_get_storage(const string&); extern template __attribute__((__visibility__("default"))) void __time_get_storage<char>::init(const ctype<char>&); extern template __attribute__((__visibility__("default"))) __time_get_storage<char>::string_type __time_get_storage<char>::__analyze(char, const ctype<char>&);

template <> __attribute__((__visibility__("default"))) time_base::dateorder __time_get_storage<wchar_t>::__do_date_order() const; template <> __attribute__((__visibility__("default"))) __time_get_storage<wchar_t>::__time_get_storage(const char*); template <> __attribute__((__visibility__("default"))) __time_get_storage<wchar_t>::__time_get_storage(const string&); template <> __attribute__((__visibility__("default"))) void __time_get_storage<wchar_t>::init(const ctype<wchar_t>&); template <> __attribute__((__visibility__("default"))) __time_get_storage<wchar_t>::string_type __time_get_storage<wchar_t>::__analyze( char, const ctype<wchar_t>&); extern template __attribute__((__visibility__("default"))) time_base::dateorder __time_get_storage<wchar_t>::__do_date_order() const; extern template __attribute__((__visibility__("default"))) __time_get_storage<wchar_t>::__time_get_storage(const char*); extern template __attribute__((__visibility__("default"))) __time_get_storage<wchar_t>::__time_get_storage(const string&); extern template __attribute__((__visibility__("default"))) void __time_get_storage<wchar_t>::init(const ctype<wchar_t>&); extern template __attribute__((__visibility__("default"))) __time_get_storage<wchar_t>::string_type __time_get_storage<wchar_t>::__analyze(char, const ctype<wchar_t>&);



template <class _CharT, class _InputIterator = istreambuf_iterator<_CharT> >
class time_get_byname
    : public time_get<_CharT, _InputIterator>,
      private __time_get_storage<_CharT> {
public:
  typedef time_base::dateorder dateorder;
  typedef _InputIterator iter_type;
  typedef _CharT char_type;
  typedef basic_string<char_type> string_type;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit time_get_byname(const char* __nm, size_t __refs = 0)
      : time_get<_CharT, _InputIterator>(__refs), __time_get_storage<_CharT>(__nm) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit time_get_byname(const string& __nm, size_t __refs = 0)
      : time_get<_CharT, _InputIterator>(__refs), __time_get_storage<_CharT>(__nm) {}

protected:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) ~time_get_byname() override {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) dateorder do_date_order() const override { return this->__do_date_order(); }

private:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) const string_type* __weeks() const override { return this->__weeks_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) const string_type* __months() const override { return this->__months_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) const string_type* __am_pm() const override { return this->__am_pm_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) const string_type& __c() const override { return this->__c_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) const string_type& __r() const override { return this->__r_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) const string_type& __x() const override { return this->__x_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) const string_type& __X() const override { return this->__X_; }
};

extern template class __attribute__((__visibility__("default"))) time_get_byname<char>;

extern template class __attribute__((__visibility__("default"))) time_get_byname<wchar_t>;


class __attribute__((__visibility__("default"))) __time_put {
  locale_t __loc_;

protected:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __time_put() : __loc_(__cloc()) {}
  __time_put(const char* __nm);
  __time_put(const string& __nm);
  ~__time_put();
  void __do_put(char* __nb, char*& __ne, const tm* __tm, char __fmt, char __mod) const;

  void __do_put(wchar_t* __wb, wchar_t*& __we, const tm* __tm, char __fmt, char __mod) const;

};

template <class _CharT, class _OutputIterator = ostreambuf_iterator<_CharT> >
class time_put : public locale::facet, private __time_put {
public:
  typedef _CharT char_type;
  typedef _OutputIterator iter_type;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit time_put(size_t __refs = 0) : locale::facet(__refs) {}

  iter_type
  put(iter_type __s, ios_base& __iob, char_type __fl, const tm* __tm, const char_type* __pb, const char_type* __pe)
      const;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iter_type
  put(iter_type __s, ios_base& __iob, char_type __fl, const tm* __tm, char __fmt, char __mod = 0) const {
    return do_put(__s, __iob, __fl, __tm, __fmt, __mod);
  }

  static locale::id id;

protected:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) ~time_put() override {}
  virtual iter_type do_put(iter_type __s, ios_base&, char_type, const tm* __tm, char __fmt, char __mod) const;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit time_put(const char* __nm, size_t __refs) : locale::facet(__refs), __time_put(__nm) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit time_put(const string& __nm, size_t __refs)
      : locale::facet(__refs), __time_put(__nm) {}
};

template <class _CharT, class _OutputIterator>
locale::id time_put<_CharT, _OutputIterator>::id;

template <class _CharT, class _OutputIterator>
_OutputIterator time_put<_CharT, _OutputIterator>::put(
    iter_type __s, ios_base& __iob, char_type __fl, const tm* __tm, const char_type* __pb, const char_type* __pe)
    const {
  const ctype<char_type>& __ct = std::use_facet<ctype<char_type> >(__iob.getloc());
  for (; __pb != __pe; ++__pb) {
    if (__ct.narrow(*__pb, 0) == '%') {
      if (++__pb == __pe) {
        *__s++ = __pb[-1];
        break;
      }
      char __mod = 0;
      char __fmt = __ct.narrow(*__pb, 0);
      if (__fmt == 'E' || __fmt == 'O') {
        if (++__pb == __pe) {
          *__s++ = __pb[-2];
          *__s++ = __pb[-1];
          break;
        }
        __mod = __fmt;
        __fmt = __ct.narrow(*__pb, 0);
      }
      __s = do_put(__s, __iob, __fl, __tm, __fmt, __mod);
    } else
      *__s++ = *__pb;
  }
  return __s;
}

template <class _CharT, class _OutputIterator>
_OutputIterator time_put<_CharT, _OutputIterator>::do_put(
    iter_type __s, ios_base&, char_type, const tm* __tm, char __fmt, char __mod) const {
  char_type __nar[100];
  char_type* __nb = __nar;
  char_type* __ne = __nb + 100;
  __do_put(__nb, __ne, __tm, __fmt, __mod);
  return std::copy(__nb, __ne, __s);
}

extern template class __attribute__((__visibility__("default"))) time_put<char>;

extern template class __attribute__((__visibility__("default"))) time_put<wchar_t>;


template <class _CharT, class _OutputIterator = ostreambuf_iterator<_CharT> >
class time_put_byname : public time_put<_CharT, _OutputIterator> {
public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit time_put_byname(const char* __nm, size_t __refs = 0)
      : time_put<_CharT, _OutputIterator>(__nm, __refs) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit time_put_byname(const string& __nm, size_t __refs = 0)
      : time_put<_CharT, _OutputIterator>(__nm, __refs) {}

protected:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) ~time_put_byname() override {}
};

extern template class __attribute__((__visibility__("default"))) time_put_byname<char>;

extern template class __attribute__((__visibility__("default"))) time_put_byname<wchar_t>;




class __attribute__((__visibility__("default"))) money_base {
public:
  enum part { none, space, symbol, sign, value };
  struct pattern {
    char field[4];
  };

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) money_base() {}
};



template <class _CharT, bool _International = false>
class moneypunct : public locale::facet, public money_base {
public:
  typedef _CharT char_type;
  typedef basic_string<char_type> string_type;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit moneypunct(size_t __refs = 0) : locale::facet(__refs) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) char_type decimal_point() const { return do_decimal_point(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) char_type thousands_sep() const { return do_thousands_sep(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) string grouping() const { return do_grouping(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) string_type curr_symbol() const { return do_curr_symbol(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) string_type positive_sign() const { return do_positive_sign(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) string_type negative_sign() const { return do_negative_sign(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) int frac_digits() const { return do_frac_digits(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) pattern pos_format() const { return do_pos_format(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) pattern neg_format() const { return do_neg_format(); }

  static locale::id id;
  static const bool intl = _International;

protected:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) ~moneypunct() override {}

  virtual char_type do_decimal_point() const { return numeric_limits<char_type>::max(); }
  virtual char_type do_thousands_sep() const { return numeric_limits<char_type>::max(); }
  virtual string do_grouping() const { return string(); }
  virtual string_type do_curr_symbol() const { return string_type(); }
  virtual string_type do_positive_sign() const { return string_type(); }
  virtual string_type do_negative_sign() const { return string_type(1, '-'); }
  virtual int do_frac_digits() const { return 0; }
  virtual pattern do_pos_format() const {
    pattern __p = {{symbol, sign, none, value}};
    return __p;
  }
  virtual pattern do_neg_format() const {
    pattern __p = {{symbol, sign, none, value}};
    return __p;
  }
};

template <class _CharT, bool _International>
locale::id moneypunct<_CharT, _International>::id;

template <class _CharT, bool _International>
const bool moneypunct<_CharT, _International>::intl;

extern template class __attribute__((__visibility__("default"))) moneypunct<char, false>;
extern template class __attribute__((__visibility__("default"))) moneypunct<char, true>;

extern template class __attribute__((__visibility__("default"))) moneypunct<wchar_t, false>;
extern template class __attribute__((__visibility__("default"))) moneypunct<wchar_t, true>;




template <class _CharT, bool _International = false>
class moneypunct_byname : public moneypunct<_CharT, _International> {
public:
  typedef money_base::pattern pattern;
  typedef _CharT char_type;
  typedef basic_string<char_type> string_type;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit moneypunct_byname(const char* __nm, size_t __refs = 0)
      : moneypunct<_CharT, _International>(__refs) {
    init(__nm);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit moneypunct_byname(const string& __nm, size_t __refs = 0)
      : moneypunct<_CharT, _International>(__refs) {
    init(__nm.c_str());
  }

protected:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) ~moneypunct_byname() override {}

  char_type do_decimal_point() const override { return __decimal_point_; }
  char_type do_thousands_sep() const override { return __thousands_sep_; }
  string do_grouping() const override { return __grouping_; }
  string_type do_curr_symbol() const override { return __curr_symbol_; }
  string_type do_positive_sign() const override { return __positive_sign_; }
  string_type do_negative_sign() const override { return __negative_sign_; }
  int do_frac_digits() const override { return __frac_digits_; }
  pattern do_pos_format() const override { return __pos_format_; }
  pattern do_neg_format() const override { return __neg_format_; }

private:
  char_type __decimal_point_;
  char_type __thousands_sep_;
  string __grouping_;
  string_type __curr_symbol_;
  string_type __positive_sign_;
  string_type __negative_sign_;
  int __frac_digits_;
  pattern __pos_format_;
  pattern __neg_format_;

  void init(const char*);
};

template <>
__attribute__((__visibility__("default"))) void moneypunct_byname<char, false>::init(const char*);
template <>
__attribute__((__visibility__("default"))) void moneypunct_byname<char, true>::init(const char*);
extern template class __attribute__((__visibility__("default"))) moneypunct_byname<char, false>;
extern template class __attribute__((__visibility__("default"))) moneypunct_byname<char, true>;


template <>
__attribute__((__visibility__("default"))) void moneypunct_byname<wchar_t, false>::init(const char*);
template <>
__attribute__((__visibility__("default"))) void moneypunct_byname<wchar_t, true>::init(const char*);
extern template class __attribute__((__visibility__("default"))) moneypunct_byname<wchar_t, false>;
extern template class __attribute__((__visibility__("default"))) moneypunct_byname<wchar_t, true>;




template <class _CharT>
class __money_get {
protected:
  typedef _CharT char_type;
  typedef basic_string<char_type> string_type;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __money_get() {}

  static void __gather_info(
      bool __intl,
      const locale& __loc,
      money_base::pattern& __pat,
      char_type& __dp,
      char_type& __ts,
      string& __grp,
      string_type& __sym,
      string_type& __psn,
      string_type& __nsn,
      int& __fd);
};

template <class _CharT>
void __money_get<_CharT>::__gather_info(
    bool __intl,
    const locale& __loc,
    money_base::pattern& __pat,
    char_type& __dp,
    char_type& __ts,
    string& __grp,
    string_type& __sym,
    string_type& __psn,
    string_type& __nsn,
    int& __fd) {
  if (__intl) {
    const moneypunct<char_type, true>& __mp = std::use_facet<moneypunct<char_type, true> >(__loc);
    __pat = __mp.neg_format();
    __nsn = __mp.negative_sign();
    __psn = __mp.positive_sign();
    __dp = __mp.decimal_point();
    __ts = __mp.thousands_sep();
    __grp = __mp.grouping();
    __sym = __mp.curr_symbol();
    __fd = __mp.frac_digits();
  } else {
    const moneypunct<char_type, false>& __mp = std::use_facet<moneypunct<char_type, false> >(__loc);
    __pat = __mp.neg_format();
    __nsn = __mp.negative_sign();
    __psn = __mp.positive_sign();
    __dp = __mp.decimal_point();
    __ts = __mp.thousands_sep();
    __grp = __mp.grouping();
    __sym = __mp.curr_symbol();
    __fd = __mp.frac_digits();
  }
}

extern template class __attribute__((__visibility__("default"))) __money_get<char>;

extern template class __attribute__((__visibility__("default"))) __money_get<wchar_t>;


template <class _CharT, class _InputIterator = istreambuf_iterator<_CharT> >
class money_get : public locale::facet, private __money_get<_CharT> {
public:
  typedef _CharT char_type;
  typedef _InputIterator iter_type;
  typedef basic_string<char_type> string_type;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit money_get(size_t __refs = 0) : locale::facet(__refs) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iter_type
  get(iter_type __b, iter_type __e, bool __intl, ios_base& __iob, ios_base::iostate& __err, long double& __v) const {
    return do_get(__b, __e, __intl, __iob, __err, __v);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iter_type
  get(iter_type __b, iter_type __e, bool __intl, ios_base& __iob, ios_base::iostate& __err, string_type& __v) const {
    return do_get(__b, __e, __intl, __iob, __err, __v);
  }

  static locale::id id;

protected:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) ~money_get() override {}

  virtual iter_type
  do_get(iter_type __b, iter_type __e, bool __intl, ios_base& __iob, ios_base::iostate& __err, long double& __v) const;
  virtual iter_type
  do_get(iter_type __b, iter_type __e, bool __intl, ios_base& __iob, ios_base::iostate& __err, string_type& __v) const;

private:
  static bool __do_get(
      iter_type& __b,
      iter_type __e,
      bool __intl,
      const locale& __loc,
      ios_base::fmtflags __flags,
      ios_base::iostate& __err,
      bool& __neg,
      const ctype<char_type>& __ct,
      unique_ptr<char_type, void (*)(void*)>& __wb,
      char_type*& __wn,
      char_type* __we);
};

template <class _CharT, class _InputIterator>
locale::id money_get<_CharT, _InputIterator>::id;

__attribute__((__visibility__("default"))) void __do_nothing(void*);

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void __double_or_nothing(unique_ptr<_Tp, void (*)(void*)>& __b, _Tp*& __n, _Tp*& __e) {
  bool __owns = __b.get_deleter() != __do_nothing;
  size_t __cur_cap = static_cast<size_t>(__e - __b.get()) * sizeof(_Tp);
  size_t __new_cap = __cur_cap < numeric_limits<size_t>::max() / 2 ? 2 * __cur_cap : numeric_limits<size_t>::max();
  if (__new_cap == 0)
    __new_cap = sizeof(_Tp);
  size_t __n_off = static_cast<size_t>(__n - __b.get());
  _Tp* __t = (_Tp*)std::realloc(__owns ? __b.get() : 0, __new_cap);
  if (__t == 0)
    __throw_bad_alloc();
  if (__owns)
    __b.release();
  __b = unique_ptr<_Tp, void (*)(void*)>(__t, free);
  __new_cap /= sizeof(_Tp);
  __n = __b.get() + __n_off;
  __e = __b.get() + __new_cap;
}


template <class _CharT, class _InputIterator>
bool money_get<_CharT, _InputIterator>::__do_get(
    iter_type& __b,
    iter_type __e,
    bool __intl,
    const locale& __loc,
    ios_base::fmtflags __flags,
    ios_base::iostate& __err,
    bool& __neg,
    const ctype<char_type>& __ct,
    unique_ptr<char_type, void (*)(void*)>& __wb,
    char_type*& __wn,
    char_type* __we) {
  if (__b == __e) {
    __err |= ios_base::failbit;
    return false;
  }
  const unsigned __bz = 100;
  unsigned __gbuf[__bz];
  unique_ptr<unsigned, void (*)(void*)> __gb(__gbuf, __do_nothing);
  unsigned* __gn = __gb.get();
  unsigned* __ge = __gn + __bz;
  money_base::pattern __pat;
  char_type __dp;
  char_type __ts;
  string __grp;
  string_type __sym;
  string_type __psn;
  string_type __nsn;


  string_type __spaces;
  int __fd;
  __money_get<_CharT>::__gather_info(__intl, __loc, __pat, __dp, __ts, __grp, __sym, __psn, __nsn, __fd);
  const string_type* __trailing_sign = 0;
  __wn = __wb.get();
  for (unsigned __p = 0; __p < 4 && __b != __e; ++__p) {
    switch (__pat.field[__p]) {
    case money_base::space:
      if (__p != 3) {
        if (__ct.is(ctype_base::space, *__b))
          __spaces.push_back(*__b++);
        else {
          __err |= ios_base::failbit;
          return false;
        }
      }
      [[fallthrough]];
    case money_base::none:
      if (__p != 3) {
        while (__b != __e && __ct.is(ctype_base::space, *__b))
          __spaces.push_back(*__b++);
      }
      break;
    case money_base::sign:
      if (__psn.size() > 0 && *__b == __psn[0]) {
        ++__b;
        __neg = false;
        if (__psn.size() > 1)
          __trailing_sign = &__psn;
        break;
      }
      if (__nsn.size() > 0 && *__b == __nsn[0]) {
        ++__b;
        __neg = true;
        if (__nsn.size() > 1)
          __trailing_sign = &__nsn;
        break;
      }
      if (__psn.size() > 0 && __nsn.size() > 0) {
        __err |= ios_base::failbit;
        return false;
      }
      if (__psn.size() == 0 && __nsn.size() == 0)

        break;
      __neg = (__nsn.size() == 0);
      break;
    case money_base::symbol: {
      bool __more_needed =
          __trailing_sign || (__p < 2) || (__p == 2 && __pat.field[3] != static_cast<char>(money_base::none));
      bool __sb = (__flags & ios_base::showbase) != 0;
      if (__sb || __more_needed) {
        typename string_type::const_iterator __sym_space_end = __sym.begin();
        if (__p > 0 && (__pat.field[__p - 1] == money_base::none || __pat.field[__p - 1] == money_base::space)) {


          while (__sym_space_end != __sym.end() && __ct.is(ctype_base::space, *__sym_space_end))
            ++__sym_space_end;
          const size_t __num_spaces = __sym_space_end - __sym.begin();
          if (__num_spaces > __spaces.size() ||
              !std::equal(__spaces.end() - __num_spaces, __spaces.end(), __sym.begin())) {



            __sym_space_end = __sym.begin();
          }
        }
        typename string_type::const_iterator __sym_curr_char = __sym_space_end;
        while (__sym_curr_char != __sym.end() && __b != __e && *__b == *__sym_curr_char) {
          ++__b;
          ++__sym_curr_char;
        }
        if (__sb && __sym_curr_char != __sym.end()) {
          __err |= ios_base::failbit;
          return false;
        }
      }
    } break;
    case money_base::value: {
      unsigned __ng = 0;
      for (; __b != __e; ++__b) {
        char_type __c = *__b;
        if (__ct.is(ctype_base::digit, __c)) {
          if (__wn == __we)
            std::__double_or_nothing(__wb, __wn, __we);
          *__wn++ = __c;
          ++__ng;
        } else if (__grp.size() > 0 && __ng > 0 && __c == __ts) {
          if (__gn == __ge)
            std::__double_or_nothing(__gb, __gn, __ge);
          *__gn++ = __ng;
          __ng = 0;
        } else
          break;
      }
      if (__gb.get() != __gn && __ng > 0) {
        if (__gn == __ge)
          std::__double_or_nothing(__gb, __gn, __ge);
        *__gn++ = __ng;
      }
      if (__fd > 0) {
        if (__b == __e || *__b != __dp) {
          __err |= ios_base::failbit;
          return false;
        }
        for (++__b; __fd > 0; --__fd, ++__b) {
          if (__b == __e || !__ct.is(ctype_base::digit, *__b)) {
            __err |= ios_base::failbit;
            return false;
          }
          if (__wn == __we)
            std::__double_or_nothing(__wb, __wn, __we);
          *__wn++ = *__b;
        }
      }
      if (__wn == __wb.get()) {
        __err |= ios_base::failbit;
        return false;
      }
    } break;
    }
  }
  if (__trailing_sign) {
    for (unsigned __i = 1; __i < __trailing_sign->size(); ++__i, ++__b) {
      if (__b == __e || *__b != (*__trailing_sign)[__i]) {
        __err |= ios_base::failbit;
        return false;
      }
    }
  }
  if (__gb.get() != __gn) {
    ios_base::iostate __et = ios_base::goodbit;
    __check_grouping(__grp, __gb.get(), __gn, __et);
    if (__et) {
      __err |= ios_base::failbit;
      return false;
    }
  }
  return true;
}

template <class _CharT, class _InputIterator>
_InputIterator money_get<_CharT, _InputIterator>::do_get(
    iter_type __b, iter_type __e, bool __intl, ios_base& __iob, ios_base::iostate& __err, long double& __v) const {
  const int __bz = 100;
  char_type __wbuf[__bz];
  unique_ptr<char_type, void (*)(void*)> __wb(__wbuf, __do_nothing);
  char_type* __wn;
  char_type* __we = __wbuf + __bz;
  locale __loc = __iob.getloc();
  const ctype<char_type>& __ct = std::use_facet<ctype<char_type> >(__loc);
  bool __neg = false;
  if (__do_get(__b, __e, __intl, __loc, __iob.flags(), __err, __neg, __ct, __wb, __wn, __we)) {
    const char __src[] = "0123456789";
    char_type __atoms[sizeof(__src) - 1];
    __ct.widen(__src, __src + (sizeof(__src) - 1), __atoms);
    char __nbuf[__bz];
    char* __nc = __nbuf;
    unique_ptr<char, void (*)(void*)> __h(nullptr, free);
    if (__wn - __wb.get() > __bz - 2) {
      __h.reset((char*)malloc(static_cast<size_t>(__wn - __wb.get() + 2)));
      if (__h.get() == nullptr)
        __throw_bad_alloc();
      __nc = __h.get();
    }
    if (__neg)
      *__nc++ = '-';
    for (const char_type* __w = __wb.get(); __w < __wn; ++__w, ++__nc)
      *__nc = __src[std::find(__atoms, std::end(__atoms), *__w) - __atoms];
    *__nc = char();
    if (sscanf(__nbuf, "%Lf", &__v) != 1)
      __throw_runtime_error("money_get error");
  }
  if (__b == __e)
    __err |= ios_base::eofbit;
  return __b;
}

template <class _CharT, class _InputIterator>
_InputIterator money_get<_CharT, _InputIterator>::do_get(
    iter_type __b, iter_type __e, bool __intl, ios_base& __iob, ios_base::iostate& __err, string_type& __v) const {
  const int __bz = 100;
  char_type __wbuf[__bz];
  unique_ptr<char_type, void (*)(void*)> __wb(__wbuf, __do_nothing);
  char_type* __wn;
  char_type* __we = __wbuf + __bz;
  locale __loc = __iob.getloc();
  const ctype<char_type>& __ct = std::use_facet<ctype<char_type> >(__loc);
  bool __neg = false;
  if (__do_get(__b, __e, __intl, __loc, __iob.flags(), __err, __neg, __ct, __wb, __wn, __we)) {
    __v.clear();
    if (__neg)
      __v.push_back(__ct.widen('-'));
    char_type __z = __ct.widen('0');
    char_type* __w;
    for (__w = __wb.get(); __w < __wn - 1; ++__w)
      if (*__w != __z)
        break;
    __v.append(__w, __wn);
  }
  if (__b == __e)
    __err |= ios_base::eofbit;
  return __b;
}

extern template class __attribute__((__visibility__("default"))) money_get<char>;

extern template class __attribute__((__visibility__("default"))) money_get<wchar_t>;




template <class _CharT>
class __money_put {
protected:
  typedef _CharT char_type;
  typedef basic_string<char_type> string_type;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) __money_put() {}

  static void __gather_info(
      bool __intl,
      bool __neg,
      const locale& __loc,
      money_base::pattern& __pat,
      char_type& __dp,
      char_type& __ts,
      string& __grp,
      string_type& __sym,
      string_type& __sn,
      int& __fd);
  static void __format(
      char_type* __mb,
      char_type*& __mi,
      char_type*& __me,
      ios_base::fmtflags __flags,
      const char_type* __db,
      const char_type* __de,
      const ctype<char_type>& __ct,
      bool __neg,
      const money_base::pattern& __pat,
      char_type __dp,
      char_type __ts,
      const string& __grp,
      const string_type& __sym,
      const string_type& __sn,
      int __fd);
};

template <class _CharT>
void __money_put<_CharT>::__gather_info(
    bool __intl,
    bool __neg,
    const locale& __loc,
    money_base::pattern& __pat,
    char_type& __dp,
    char_type& __ts,
    string& __grp,
    string_type& __sym,
    string_type& __sn,
    int& __fd) {
  if (__intl) {
    const moneypunct<char_type, true>& __mp = std::use_facet<moneypunct<char_type, true> >(__loc);
    if (__neg) {
      __pat = __mp.neg_format();
      __sn = __mp.negative_sign();
    } else {
      __pat = __mp.pos_format();
      __sn = __mp.positive_sign();
    }
    __dp = __mp.decimal_point();
    __ts = __mp.thousands_sep();
    __grp = __mp.grouping();
    __sym = __mp.curr_symbol();
    __fd = __mp.frac_digits();
  } else {
    const moneypunct<char_type, false>& __mp = std::use_facet<moneypunct<char_type, false> >(__loc);
    if (__neg) {
      __pat = __mp.neg_format();
      __sn = __mp.negative_sign();
    } else {
      __pat = __mp.pos_format();
      __sn = __mp.positive_sign();
    }
    __dp = __mp.decimal_point();
    __ts = __mp.thousands_sep();
    __grp = __mp.grouping();
    __sym = __mp.curr_symbol();
    __fd = __mp.frac_digits();
  }
}

template <class _CharT>
void __money_put<_CharT>::__format(
    char_type* __mb,
    char_type*& __mi,
    char_type*& __me,
    ios_base::fmtflags __flags,
    const char_type* __db,
    const char_type* __de,
    const ctype<char_type>& __ct,
    bool __neg,
    const money_base::pattern& __pat,
    char_type __dp,
    char_type __ts,
    const string& __grp,
    const string_type& __sym,
    const string_type& __sn,
    int __fd) {
  __me = __mb;
  for (char __p : __pat.field) {
    switch (__p) {
    case money_base::none:
      __mi = __me;
      break;
    case money_base::space:
      __mi = __me;
      *__me++ = __ct.widen(' ');
      break;
    case money_base::sign:
      if (!__sn.empty())
        *__me++ = __sn[0];
      break;
    case money_base::symbol:
      if (!__sym.empty() && (__flags & ios_base::showbase))
        __me = std::copy(__sym.begin(), __sym.end(), __me);
      break;
    case money_base::value: {

      char_type* __t = __me;

      if (__neg)
        ++__db;

      const char_type* __d;
      for (__d = __db; __d < __de; ++__d)
        if (!__ct.is(ctype_base::digit, *__d))
          break;

      if (__fd > 0) {
        int __f;
        for (__f = __fd; __d > __db && __f > 0; --__f)
          *__me++ = *--__d;
        char_type __z = __f > 0 ? __ct.widen('0') : char_type();
        for (; __f > 0; --__f)
          *__me++ = __z;
        *__me++ = __dp;
      }

      if (__d == __db) {
        *__me++ = __ct.widen('0');
      } else {
        unsigned __ng = 0;
        unsigned __ig = 0;
        unsigned __gl = __grp.empty() ? numeric_limits<unsigned>::max() : static_cast<unsigned>(__grp[__ig]);
        while (__d != __db) {
          if (__ng == __gl) {
            *__me++ = __ts;
            __ng = 0;
            if (++__ig < __grp.size())
              __gl = __grp[__ig] == numeric_limits<char>::max()
                       ? numeric_limits<unsigned>::max()
                       : static_cast<unsigned>(__grp[__ig]);
          }
          *__me++ = *--__d;
          ++__ng;
        }
      }

      std::reverse(__t, __me);
    } break;
    }
  }

  if (__sn.size() > 1)
    __me = std::copy(__sn.begin() + 1, __sn.end(), __me);

  if ((__flags & ios_base::adjustfield) == ios_base::left)
    __mi = __me;
  else if ((__flags & ios_base::adjustfield) != ios_base::internal)
    __mi = __mb;
}

extern template class __attribute__((__visibility__("default"))) __money_put<char>;

extern template class __attribute__((__visibility__("default"))) __money_put<wchar_t>;


template <class _CharT, class _OutputIterator = ostreambuf_iterator<_CharT> >
class money_put : public locale::facet, private __money_put<_CharT> {
public:
  typedef _CharT char_type;
  typedef _OutputIterator iter_type;
  typedef basic_string<char_type> string_type;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit money_put(size_t __refs = 0) : locale::facet(__refs) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iter_type
  put(iter_type __s, bool __intl, ios_base& __iob, char_type __fl, long double __units) const {
    return do_put(__s, __intl, __iob, __fl, __units);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) iter_type
  put(iter_type __s, bool __intl, ios_base& __iob, char_type __fl, const string_type& __digits) const {
    return do_put(__s, __intl, __iob, __fl, __digits);
  }

  static locale::id id;

protected:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) ~money_put() override {}

  virtual iter_type do_put(iter_type __s, bool __intl, ios_base& __iob, char_type __fl, long double __units) const;
  virtual iter_type
  do_put(iter_type __s, bool __intl, ios_base& __iob, char_type __fl, const string_type& __digits) const;
};

template <class _CharT, class _OutputIterator>
locale::id money_put<_CharT, _OutputIterator>::id;

template <class _CharT, class _OutputIterator>
_OutputIterator money_put<_CharT, _OutputIterator>::do_put(
    iter_type __s, bool __intl, ios_base& __iob, char_type __fl, long double __units) const {

  const size_t __bs = 100;
  char __buf[__bs];
  char* __bb = __buf;
  char_type __digits[__bs];
  char_type* __db = __digits;

    int __n = __ARM_snprintf(__bb, __bs, "%.0Lf", __units);



  unique_ptr<char, void (*)(void*)> __hn(nullptr, free);
  unique_ptr<char_type, void (*)(void*)> __hd(0, free);

  if (static_cast<size_t>(__n) > __bs - 1) {
    __n = __libcpp_asprintf_l(&__bb, __cloc(), "%.0Lf", __units);
    if (__n == -1)
      __throw_bad_alloc();
    __hn.reset(__bb);
    __hd.reset((char_type*)malloc(static_cast<size_t>(__n) * sizeof(char_type)));
    if (__hd == nullptr)
      __throw_bad_alloc();
    __db = __hd.get();
  }

  locale __loc = __iob.getloc();
  const ctype<char_type>& __ct = std::use_facet<ctype<char_type> >(__loc);
  __ct.widen(__bb, __bb + __n, __db);
  bool __neg = __n > 0 && __bb[0] == '-';
  money_base::pattern __pat;
  char_type __dp;
  char_type __ts;
  string __grp;
  string_type __sym;
  string_type __sn;
  int __fd;
  this->__gather_info(__intl, __neg, __loc, __pat, __dp, __ts, __grp, __sym, __sn, __fd);

  char_type __mbuf[__bs];
  char_type* __mb = __mbuf;
  unique_ptr<char_type, void (*)(void*)> __hw(0, free);
  size_t __exn = __n > __fd ? (static_cast<size_t>(__n) - static_cast<size_t>(__fd)) * 2 + __sn.size() + __sym.size() +
                                  static_cast<size_t>(__fd) + 1
                            : __sn.size() + __sym.size() + static_cast<size_t>(__fd) + 2;
  if (__exn > __bs) {
    __hw.reset((char_type*)malloc(__exn * sizeof(char_type)));
    __mb = __hw.get();
    if (__mb == 0)
      __throw_bad_alloc();
  }

  char_type* __mi;
  char_type* __me;
  this->__format(
      __mb, __mi, __me, __iob.flags(), __db, __db + __n, __ct, __neg, __pat, __dp, __ts, __grp, __sym, __sn, __fd);
  return std::__pad_and_output(__s, __mb, __mi, __me, __iob, __fl);
}

template <class _CharT, class _OutputIterator>
_OutputIterator money_put<_CharT, _OutputIterator>::do_put(
    iter_type __s, bool __intl, ios_base& __iob, char_type __fl, const string_type& __digits) const {

  locale __loc = __iob.getloc();
  const ctype<char_type>& __ct = std::use_facet<ctype<char_type> >(__loc);
  bool __neg = __digits.size() > 0 && __digits[0] == __ct.widen('-');
  money_base::pattern __pat;
  char_type __dp;
  char_type __ts;
  string __grp;
  string_type __sym;
  string_type __sn;
  int __fd;
  this->__gather_info(__intl, __neg, __loc, __pat, __dp, __ts, __grp, __sym, __sn, __fd);

  char_type __mbuf[100];
  char_type* __mb = __mbuf;
  unique_ptr<char_type, void (*)(void*)> __h(0, free);
  size_t __exn =
      static_cast<int>(__digits.size()) > __fd
          ? (__digits.size() - static_cast<size_t>(__fd)) * 2 + __sn.size() + __sym.size() + static_cast<size_t>(__fd) +
                1
          : __sn.size() + __sym.size() + static_cast<size_t>(__fd) + 2;
  if (__exn > 100) {
    __h.reset((char_type*)malloc(__exn * sizeof(char_type)));
    __mb = __h.get();
    if (__mb == 0)
      __throw_bad_alloc();
  }

  char_type* __mi;
  char_type* __me;
  this->__format(
      __mb,
      __mi,
      __me,
      __iob.flags(),
      __digits.data(),
      __digits.data() + __digits.size(),
      __ct,
      __neg,
      __pat,
      __dp,
      __ts,
      __grp,
      __sym,
      __sn,
      __fd);
  return std::__pad_and_output(__s, __mb, __mi, __me, __iob, __fl);
}

extern template class __attribute__((__visibility__("default"))) money_put<char>;

extern template class __attribute__((__visibility__("default"))) money_put<wchar_t>;




class __attribute__((__visibility__("default"))) messages_base {
public:
  typedef intptr_t catalog;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) messages_base() {}
};

template <class _CharT>
class messages : public locale::facet, public messages_base {
public:
  typedef _CharT char_type;
  typedef basic_string<_CharT> string_type;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit messages(size_t __refs = 0) : locale::facet(__refs) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) catalog open(const basic_string<char>& __nm, const locale& __loc) const {
    return do_open(__nm, __loc);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) string_type get(catalog __c, int __set, int __msgid, const string_type& __dflt) const {
    return do_get(__c, __set, __msgid, __dflt);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) void close(catalog __c) const { do_close(__c); }

  static locale::id id;

protected:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) ~messages() override {}

  virtual catalog do_open(const basic_string<char>&, const locale&) const;
  virtual string_type do_get(catalog, int __set, int __msgid, const string_type& __dflt) const;
  virtual void do_close(catalog) const;
};

template <class _CharT>
locale::id messages<_CharT>::id;

template <class _CharT>
typename messages<_CharT>::catalog messages<_CharT>::do_open(const basic_string<char>& __nm, const locale&) const {



  (void)__nm;
  return -1;

}

template <class _CharT>
typename messages<_CharT>::string_type
messages<_CharT>::do_get(catalog __c, int __set, int __msgid, const string_type& __dflt) const {
# 3245 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\locale" 3
  (void)__c;
  (void)__set;
  (void)__msgid;
  return __dflt;

}

template <class _CharT>
void messages<_CharT>::do_close(catalog __c) const {



  (void)__c;

}

extern template class __attribute__((__visibility__("default"))) messages<char>;

extern template class __attribute__((__visibility__("default"))) messages<wchar_t>;


template <class _CharT>
class messages_byname : public messages<_CharT> {
public:
  typedef messages_base::catalog catalog;
  typedef basic_string<_CharT> string_type;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit messages_byname(const char*, size_t __refs = 0) : messages<_CharT>(__refs) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit messages_byname(const string&, size_t __refs = 0) : messages<_CharT>(__refs) {}

protected:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) ~messages_byname() override {}
};

extern template class __attribute__((__visibility__("default"))) messages_byname<char>;

extern template class __attribute__((__visibility__("default"))) messages_byname<wchar_t>;


template <class _Codecvt,
          class _Elem = wchar_t,
          class _WideAlloc = allocator<_Elem>,
          class _ByteAlloc = allocator<char> >
class __attribute__((__deprecated__)) wstring_convert {
public:
  typedef basic_string<char, char_traits<char>, _ByteAlloc> byte_string;
  typedef basic_string<_Elem, char_traits<_Elem>, _WideAlloc> wide_string;
  typedef typename _Codecvt::state_type state_type;
  typedef typename wide_string::traits_type::int_type int_type;

private:
  byte_string __byte_err_string_;
  wide_string __wide_err_string_;
  _Codecvt* __cvtptr_;
  state_type __cvtstate_;
  size_t __cvtcount_;

  wstring_convert(const wstring_convert& __wc);
  wstring_convert& operator=(const wstring_convert& __wc);

public:

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) wstring_convert() : wstring_convert(new _Codecvt) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) explicit wstring_convert(_Codecvt* __pcvt);




  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) wstring_convert(_Codecvt* __pcvt, state_type __state);
  explicit __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
  wstring_convert(const byte_string& __byte_err, const wide_string& __wide_err = wide_string());

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) wstring_convert(wstring_convert&& __wc);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) ~wstring_convert();

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) wide_string from_bytes(char __byte) { return from_bytes(&__byte, &__byte + 1); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) wide_string from_bytes(const char* __ptr) {
    return from_bytes(__ptr, __ptr + char_traits<char>::length(__ptr));
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) wide_string from_bytes(const byte_string& __str) {
    return from_bytes(__str.data(), __str.data() + __str.size());
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) wide_string from_bytes(const char* __first, const char* __last);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) byte_string to_bytes(_Elem __wchar) { return to_bytes(&__wchar, &__wchar + 1); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) byte_string to_bytes(const _Elem* __wptr) {
    return to_bytes(__wptr, __wptr + char_traits<_Elem>::length(__wptr));
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) byte_string to_bytes(const wide_string& __wstr) {
    return to_bytes(__wstr.data(), __wstr.data() + __wstr.size());
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) byte_string to_bytes(const _Elem* __first, const _Elem* __last);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) size_t converted() const noexcept { return __cvtcount_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) state_type state() const { return __cvtstate_; }
};

#pragma GCC diagnostic push
# 3344 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\locale" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 3344 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\locale" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template <class _Codecvt, class _Elem, class _WideAlloc, class _ByteAlloc>
inline wstring_convert<_Codecvt, _Elem, _WideAlloc, _ByteAlloc>::wstring_convert(_Codecvt* __pcvt)
    : __cvtptr_(__pcvt), __cvtstate_(), __cvtcount_(0) {}
#pragma GCC diagnostic pop

template <class _Codecvt, class _Elem, class _WideAlloc, class _ByteAlloc>
inline wstring_convert<_Codecvt, _Elem, _WideAlloc, _ByteAlloc>::wstring_convert(_Codecvt* __pcvt, state_type __state)
    : __cvtptr_(__pcvt), __cvtstate_(__state), __cvtcount_(0) {}

template <class _Codecvt, class _Elem, class _WideAlloc, class _ByteAlloc>
wstring_convert<_Codecvt, _Elem, _WideAlloc, _ByteAlloc>::wstring_convert(
    const byte_string& __byte_err, const wide_string& __wide_err)
    : __byte_err_string_(__byte_err), __wide_err_string_(__wide_err), __cvtstate_(), __cvtcount_(0) {
  __cvtptr_ = new _Codecvt;
}



template <class _Codecvt, class _Elem, class _WideAlloc, class _ByteAlloc>
inline wstring_convert<_Codecvt, _Elem, _WideAlloc, _ByteAlloc>::wstring_convert(wstring_convert&& __wc)
    : __byte_err_string_(std::move(__wc.__byte_err_string_)),
      __wide_err_string_(std::move(__wc.__wide_err_string_)),
      __cvtptr_(__wc.__cvtptr_),
      __cvtstate_(__wc.__cvtstate_),
      __cvtcount_(__wc.__cvtcount_) {
  __wc.__cvtptr_ = nullptr;
}



#pragma GCC diagnostic push
# 3375 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\locale" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 3375 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\locale" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template <class _Codecvt, class _Elem, class _WideAlloc, class _ByteAlloc>
wstring_convert<_Codecvt, _Elem, _WideAlloc, _ByteAlloc>::~wstring_convert() {
  delete __cvtptr_;
}

template <class _Codecvt, class _Elem, class _WideAlloc, class _ByteAlloc>
typename wstring_convert<_Codecvt, _Elem, _WideAlloc, _ByteAlloc>::wide_string
wstring_convert<_Codecvt, _Elem, _WideAlloc, _ByteAlloc>::from_bytes(const char* __frm, const char* __frm_end) {
#pragma GCC diagnostic pop
  __cvtcount_ = 0;
  if (__cvtptr_ != nullptr) {
    wide_string __ws(2 * (__frm_end - __frm), _Elem());
    if (__frm != __frm_end)
      __ws.resize(__ws.capacity());
    codecvt_base::result __r = codecvt_base::ok;
    state_type __st = __cvtstate_;
    if (__frm != __frm_end) {
      _Elem* __to = &__ws[0];
      _Elem* __to_end = __to + __ws.size();
      const char* __frm_nxt;
      do {
        _Elem* __to_nxt;
        __r = __cvtptr_->in(__st, __frm, __frm_end, __frm_nxt, __to, __to_end, __to_nxt);
        __cvtcount_ += __frm_nxt - __frm;
        if (__frm_nxt == __frm) {
          __r = codecvt_base::error;
        } else if (__r == codecvt_base::noconv) {
          __ws.resize(__to - &__ws[0]);

          __ws.append((const _Elem*)__frm, (const _Elem*)__frm_end);
          __frm = __frm_nxt;
          __r = codecvt_base::ok;
        } else if (__r == codecvt_base::ok) {
          __ws.resize(__to_nxt - &__ws[0]);
          __frm = __frm_nxt;
        } else if (__r == codecvt_base::partial) {
          ptrdiff_t __s = __to_nxt - &__ws[0];
          __ws.resize(2 * __s);
          __to = &__ws[0] + __s;
          __to_end = &__ws[0] + __ws.size();
          __frm = __frm_nxt;
        }
      } while (__r == codecvt_base::partial && __frm_nxt < __frm_end);
    }
    if (__r == codecvt_base::ok)
      return __ws;
  }

  if (__wide_err_string_.empty())
    __throw_range_error("wstring_convert: from_bytes error");

  return __wide_err_string_;
}

template <class _Codecvt, class _Elem, class _WideAlloc, class _ByteAlloc>
typename wstring_convert<_Codecvt, _Elem, _WideAlloc, _ByteAlloc>::byte_string
wstring_convert<_Codecvt, _Elem, _WideAlloc, _ByteAlloc>::to_bytes(const _Elem* __frm, const _Elem* __frm_end) {
  __cvtcount_ = 0;
  if (__cvtptr_ != nullptr) {
    byte_string __bs(2 * (__frm_end - __frm), char());
    if (__frm != __frm_end)
      __bs.resize(__bs.capacity());
    codecvt_base::result __r = codecvt_base::ok;
    state_type __st = __cvtstate_;
    if (__frm != __frm_end) {
      char* __to = &__bs[0];
      char* __to_end = __to + __bs.size();
      const _Elem* __frm_nxt;
      do {
        char* __to_nxt;
        __r = __cvtptr_->out(__st, __frm, __frm_end, __frm_nxt, __to, __to_end, __to_nxt);
        __cvtcount_ += __frm_nxt - __frm;
        if (__frm_nxt == __frm) {
          __r = codecvt_base::error;
        } else if (__r == codecvt_base::noconv) {
          __bs.resize(__to - &__bs[0]);

          __bs.append((const char*)__frm, (const char*)__frm_end);
          __frm = __frm_nxt;
          __r = codecvt_base::ok;
        } else if (__r == codecvt_base::ok) {
          __bs.resize(__to_nxt - &__bs[0]);
          __frm = __frm_nxt;
        } else if (__r == codecvt_base::partial) {
          ptrdiff_t __s = __to_nxt - &__bs[0];
          __bs.resize(2 * __s);
          __to = &__bs[0] + __s;
          __to_end = &__bs[0] + __bs.size();
          __frm = __frm_nxt;
        }
      } while (__r == codecvt_base::partial && __frm_nxt < __frm_end);
    }
    if (__r == codecvt_base::ok) {
      size_t __s = __bs.size();
      __bs.resize(__bs.capacity());
      char* __to = &__bs[0] + __s;
      char* __to_end = __to + __bs.size();
      do {
        char* __to_nxt;
        __r = __cvtptr_->unshift(__st, __to, __to_end, __to_nxt);
        if (__r == codecvt_base::noconv) {
          __bs.resize(__to - &__bs[0]);
          __r = codecvt_base::ok;
        } else if (__r == codecvt_base::ok) {
          __bs.resize(__to_nxt - &__bs[0]);
        } else if (__r == codecvt_base::partial) {
          ptrdiff_t __sp = __to_nxt - &__bs[0];
          __bs.resize(2 * __sp);
          __to = &__bs[0] + __sp;
          __to_end = &__bs[0] + __bs.size();
        }
      } while (__r == codecvt_base::partial);
      if (__r == codecvt_base::ok)
        return __bs;
    }
  }

  if (__byte_err_string_.empty())
    __throw_range_error("wstring_convert: to_bytes error");

  return __byte_err_string_;
}

template <class _Codecvt, class _Elem = wchar_t, class _Tr = char_traits<_Elem> >
class __attribute__((__deprecated__)) wbuffer_convert : public basic_streambuf<_Elem, _Tr> {
public:

  typedef _Elem char_type;
  typedef _Tr traits_type;
  typedef typename traits_type::int_type int_type;
  typedef typename traits_type::pos_type pos_type;
  typedef typename traits_type::off_type off_type;
  typedef typename _Codecvt::state_type state_type;

private:
  char* __extbuf_;
  const char* __extbufnext_;
  const char* __extbufend_;
  char __extbuf_min_[8];
  size_t __ebs_;
  char_type* __intbuf_;
  size_t __ibs_;
  streambuf* __bufptr_;
  _Codecvt* __cv_;
  state_type __st_;
  ios_base::openmode __cm_;
  bool __owns_eb_;
  bool __owns_ib_;
  bool __always_noconv_;

  wbuffer_convert(const wbuffer_convert&);
  wbuffer_convert& operator=(const wbuffer_convert&);

public:

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) wbuffer_convert() : wbuffer_convert(nullptr) {}
  explicit __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000")))
  wbuffer_convert(streambuf* __bytebuf, _Codecvt* __pcvt = new _Codecvt, state_type __state = state_type());





  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) ~wbuffer_convert();

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) streambuf* rdbuf() const { return __bufptr_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) streambuf* rdbuf(streambuf* __bytebuf) {
    streambuf* __r = __bufptr_;
    __bufptr_ = __bytebuf;
    return __r;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("nn190000"))) state_type state() const { return __st_; }

protected:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) virtual int_type underflow();
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) virtual int_type pbackfail(int_type __c = traits_type::eof());
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) virtual int_type overflow(int_type __c = traits_type::eof());
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) virtual basic_streambuf<char_type, traits_type>* setbuf(char_type* __s, streamsize __n);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) virtual pos_type
  seekoff(off_type __off, ios_base::seekdir __way, ios_base::openmode __wch = ios_base::in | ios_base::out);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) virtual pos_type
  seekpos(pos_type __sp, ios_base::openmode __wch = ios_base::in | ios_base::out);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) virtual int sync();

private:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) bool __read_mode();
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) void __write_mode();
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) wbuffer_convert* __close();
};

#pragma GCC diagnostic push
# 3567 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\locale" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 3567 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\locale" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template <class _Codecvt, class _Elem, class _Tr>
wbuffer_convert<_Codecvt, _Elem, _Tr>::wbuffer_convert(streambuf* __bytebuf, _Codecvt* __pcvt, state_type __state)
    : __extbuf_(nullptr),
      __extbufnext_(nullptr),
      __extbufend_(nullptr),
      __ebs_(0),
      __intbuf_(0),
      __ibs_(0),
      __bufptr_(__bytebuf),
      __cv_(__pcvt),
      __st_(__state),
      __cm_(0),
      __owns_eb_(false),
      __owns_ib_(false),
      __always_noconv_(__cv_ ? __cv_->always_noconv() : false) {
  setbuf(0, 4096);
}

template <class _Codecvt, class _Elem, class _Tr>
wbuffer_convert<_Codecvt, _Elem, _Tr>::~wbuffer_convert() {
  __close();
  delete __cv_;
  if (__owns_eb_)
    delete[] __extbuf_;
  if (__owns_ib_)
    delete[] __intbuf_;
}

template <class _Codecvt, class _Elem, class _Tr>
typename wbuffer_convert<_Codecvt, _Elem, _Tr>::int_type wbuffer_convert<_Codecvt, _Elem, _Tr>::underflow() {
#pragma GCC diagnostic pop
  if (__cv_ == 0 || __bufptr_ == nullptr)
    return traits_type::eof();
  bool __initial = __read_mode();
  char_type __1buf;
  if (this->gptr() == 0)
    this->setg(&__1buf, &__1buf + 1, &__1buf + 1);
  const size_t __unget_sz = __initial ? 0 : std::min<size_t>((this->egptr() - this->eback()) / 2, 4);
  int_type __c = traits_type::eof();
  if (this->gptr() == this->egptr()) {
    std::memmove(this->eback(), this->egptr() - __unget_sz, __unget_sz * sizeof(char_type));
    if (__always_noconv_) {
      streamsize __nmemb = static_cast<streamsize>(this->egptr() - this->eback() - __unget_sz);
      __nmemb = __bufptr_->sgetn((char*)this->eback() + __unget_sz, __nmemb);
      if (__nmemb != 0) {
        this->setg(this->eback(), this->eback() + __unget_sz, this->eback() + __unget_sz + __nmemb);
        __c = *this->gptr();
      }
    } else {
      if (__extbufend_ != __extbufnext_) {
        ((void)0);
        ((void)0);
        std::memmove(__extbuf_, __extbufnext_, __extbufend_ - __extbufnext_);
      }
      __extbufnext_ = __extbuf_ + (__extbufend_ - __extbufnext_);
      __extbufend_ = __extbuf_ + (__extbuf_ == __extbuf_min_ ? sizeof(__extbuf_min_) : __ebs_);
      streamsize __nmemb = std::min(static_cast<streamsize>(this->egptr() - this->eback() - __unget_sz),
                                    static_cast<streamsize>(__extbufend_ - __extbufnext_));
      codecvt_base::result __r;


      streamsize __nr = __bufptr_->sgetn(const_cast<char*>(__extbufnext_), __nmemb);
      if (__nr != 0) {
        __extbufend_ = __extbufnext_ + __nr;
        char_type* __inext;
        __r = __cv_->in(
            __st_, __extbuf_, __extbufend_, __extbufnext_, this->eback() + __unget_sz, this->egptr(), __inext);
        if (__r == codecvt_base::noconv) {
          this->setg((char_type*)__extbuf_, (char_type*)__extbuf_, (char_type*)const_cast<char*>(__extbufend_));
          __c = *this->gptr();
        } else if (__inext != this->eback() + __unget_sz) {
          this->setg(this->eback(), this->eback() + __unget_sz, __inext);
          __c = *this->gptr();
        }
      }
    }
  } else
    __c = *this->gptr();
  if (this->eback() == &__1buf)
    this->setg(0, 0, 0);
  return __c;
}

#pragma GCC diagnostic push
# 3651 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\locale" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 3651 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\locale" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template <class _Codecvt, class _Elem, class _Tr>
typename wbuffer_convert<_Codecvt, _Elem, _Tr>::int_type
wbuffer_convert<_Codecvt, _Elem, _Tr>::pbackfail(int_type __c) {
#pragma GCC diagnostic pop
  if (__cv_ != 0 && __bufptr_ && this->eback() < this->gptr()) {
    if (traits_type::eq_int_type(__c, traits_type::eof())) {
      this->gbump(-1);
      return traits_type::not_eof(__c);
    }
    if (traits_type::eq(traits_type::to_char_type(__c), this->gptr()[-1])) {
      this->gbump(-1);
      *this->gptr() = traits_type::to_char_type(__c);
      return __c;
    }
  }
  return traits_type::eof();
}

#pragma GCC diagnostic push
# 3670 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\locale" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 3670 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\locale" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template <class _Codecvt, class _Elem, class _Tr>
typename wbuffer_convert<_Codecvt, _Elem, _Tr>::int_type wbuffer_convert<_Codecvt, _Elem, _Tr>::overflow(int_type __c) {
#pragma GCC diagnostic pop
  if (__cv_ == 0 || !__bufptr_)
    return traits_type::eof();
  __write_mode();
  char_type __1buf;
  char_type* __pb_save = this->pbase();
  char_type* __epb_save = this->epptr();
  if (!traits_type::eq_int_type(__c, traits_type::eof())) {
    if (this->pptr() == 0)
      this->setp(&__1buf, &__1buf + 1);
    *this->pptr() = traits_type::to_char_type(__c);
    this->pbump(1);
  }
  if (this->pptr() != this->pbase()) {
    if (__always_noconv_) {
      streamsize __nmemb = static_cast<streamsize>(this->pptr() - this->pbase());
      if (__bufptr_->sputn((const char*)this->pbase(), __nmemb) != __nmemb)
        return traits_type::eof();
    } else {
      char* __extbe = __extbuf_;
      codecvt_base::result __r;
      do {
        const char_type* __e;
        __r = __cv_->out(__st_, this->pbase(), this->pptr(), __e, __extbuf_, __extbuf_ + __ebs_, __extbe);
        if (__e == this->pbase())
          return traits_type::eof();
        if (__r == codecvt_base::noconv) {
          streamsize __nmemb = static_cast<size_t>(this->pptr() - this->pbase());
          if (__bufptr_->sputn((const char*)this->pbase(), __nmemb) != __nmemb)
            return traits_type::eof();
        } else if (__r == codecvt_base::ok || __r == codecvt_base::partial) {
          streamsize __nmemb = static_cast<size_t>(__extbe - __extbuf_);
          if (__bufptr_->sputn(__extbuf_, __nmemb) != __nmemb)
            return traits_type::eof();
          if (__r == codecvt_base::partial) {
            this->setp(const_cast<char_type*>(__e), this->pptr());
            this->__pbump(this->epptr() - this->pbase());
          }
        } else
          return traits_type::eof();
      } while (__r == codecvt_base::partial);
    }
    this->setp(__pb_save, __epb_save);
  }
  return traits_type::not_eof(__c);
}

#pragma GCC diagnostic push
# 3720 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\locale" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 3720 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\locale" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template <class _Codecvt, class _Elem, class _Tr>
basic_streambuf<_Elem, _Tr>* wbuffer_convert<_Codecvt, _Elem, _Tr>::setbuf(char_type* __s, streamsize __n) {
#pragma GCC diagnostic pop
  this->setg(0, 0, 0);
  this->setp(0, 0);
  if (__owns_eb_)
    delete[] __extbuf_;
  if (__owns_ib_)
    delete[] __intbuf_;
  __ebs_ = __n;
  if (__ebs_ > sizeof(__extbuf_min_)) {
    if (__always_noconv_ && __s) {
      __extbuf_ = (char*)__s;
      __owns_eb_ = false;
    } else {
      __extbuf_ = new char[__ebs_];
      __owns_eb_ = true;
    }
  } else {
    __extbuf_ = __extbuf_min_;
    __ebs_ = sizeof(__extbuf_min_);
    __owns_eb_ = false;
  }
  if (!__always_noconv_) {
    __ibs_ = max<streamsize>(__n, sizeof(__extbuf_min_));
    if (__s && __ibs_ >= sizeof(__extbuf_min_)) {
      __intbuf_ = __s;
      __owns_ib_ = false;
    } else {
      __intbuf_ = new char_type[__ibs_];
      __owns_ib_ = true;
    }
  } else {
    __ibs_ = 0;
    __intbuf_ = 0;
    __owns_ib_ = false;
  }
  return this;
}

#pragma GCC diagnostic push
# 3761 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\locale" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 3761 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\locale" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template <class _Codecvt, class _Elem, class _Tr>
typename wbuffer_convert<_Codecvt, _Elem, _Tr>::pos_type
wbuffer_convert<_Codecvt, _Elem, _Tr>::seekoff(off_type __off, ios_base::seekdir __way, ios_base::openmode __om) {
  int __width = __cv_->encoding();
  if (__cv_ == 0 || !__bufptr_ || (__width <= 0 && __off != 0) || sync())
    return pos_type(off_type(-1));

  if (__way != ios_base::beg && __way != ios_base::cur && __way != ios_base::end)
    return pos_type(off_type(-1));
  pos_type __r = __bufptr_->pubseekoff(__width * __off, __way, __om);
  __r.state(__st_);
  return __r;
}

template <class _Codecvt, class _Elem, class _Tr>
typename wbuffer_convert<_Codecvt, _Elem, _Tr>::pos_type
wbuffer_convert<_Codecvt, _Elem, _Tr>::seekpos(pos_type __sp, ios_base::openmode __wch) {
  if (__cv_ == 0 || !__bufptr_ || sync())
    return pos_type(off_type(-1));
  if (__bufptr_->pubseekpos(__sp, __wch) == pos_type(off_type(-1)))
    return pos_type(off_type(-1));
  return __sp;
}

template <class _Codecvt, class _Elem, class _Tr>
int wbuffer_convert<_Codecvt, _Elem, _Tr>::sync() {
#pragma GCC diagnostic pop
  if (__cv_ == 0 || !__bufptr_)
    return 0;
  if (__cm_ & ios_base::out) {
    if (this->pptr() != this->pbase())
      if (overflow() == traits_type::eof())
        return -1;
    codecvt_base::result __r;
    do {
      char* __extbe;
      __r = __cv_->unshift(__st_, __extbuf_, __extbuf_ + __ebs_, __extbe);
      streamsize __nmemb = static_cast<streamsize>(__extbe - __extbuf_);
      if (__bufptr_->sputn(__extbuf_, __nmemb) != __nmemb)
        return -1;
    } while (__r == codecvt_base::partial);
    if (__r == codecvt_base::error)
      return -1;
    if (__bufptr_->pubsync())
      return -1;
  } else if (__cm_ & ios_base::in) {
    off_type __c;
    if (__always_noconv_)
      __c = this->egptr() - this->gptr();
    else {
      int __width = __cv_->encoding();
      __c = __extbufend_ - __extbufnext_;
      if (__width > 0)
        __c += __width * (this->egptr() - this->gptr());
      else {
        if (this->gptr() != this->egptr()) {
          std::reverse(this->gptr(), this->egptr());
          codecvt_base::result __r;
          const char_type* __e = this->gptr();
          char* __extbe;
          do {
            __r = __cv_->out(__st_, __e, this->egptr(), __e, __extbuf_, __extbuf_ + __ebs_, __extbe);
            switch (__r) {
            case codecvt_base::noconv:
              __c += this->egptr() - this->gptr();
              break;
            case codecvt_base::ok:
            case codecvt_base::partial:
              __c += __extbe - __extbuf_;
              break;
            default:
              return -1;
            }
          } while (__r == codecvt_base::partial);
        }
      }
    }
    if (__bufptr_->pubseekoff(-__c, ios_base::cur, __cm_) == pos_type(off_type(-1)))
      return -1;
    this->setg(0, 0, 0);
    __cm_ = 0;
  }
  return 0;
}

#pragma GCC diagnostic push
# 3847 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\locale" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 3847 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\locale" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template <class _Codecvt, class _Elem, class _Tr>
bool wbuffer_convert<_Codecvt, _Elem, _Tr>::__read_mode() {
  if (!(__cm_ & ios_base::in)) {
    this->setp(0, 0);
    if (__always_noconv_)
      this->setg((char_type*)__extbuf_, (char_type*)__extbuf_ + __ebs_, (char_type*)__extbuf_ + __ebs_);
    else
      this->setg(__intbuf_, __intbuf_ + __ibs_, __intbuf_ + __ibs_);
    __cm_ = ios_base::in;
    return true;
  }
  return false;
}

template <class _Codecvt, class _Elem, class _Tr>
void wbuffer_convert<_Codecvt, _Elem, _Tr>::__write_mode() {
  if (!(__cm_ & ios_base::out)) {
    this->setg(0, 0, 0);
    if (__ebs_ > sizeof(__extbuf_min_)) {
      if (__always_noconv_)
        this->setp((char_type*)__extbuf_, (char_type*)__extbuf_ + (__ebs_ - 1));
      else
        this->setp(__intbuf_, __intbuf_ + (__ibs_ - 1));
    } else
      this->setp(0, 0);
    __cm_ = ios_base::out;
  }
}

template <class _Codecvt, class _Elem, class _Tr>
wbuffer_convert<_Codecvt, _Elem, _Tr>* wbuffer_convert<_Codecvt, _Elem, _Tr>::__close() {
  wbuffer_convert* __rt = nullptr;
  if (__cv_ != nullptr && __bufptr_ != nullptr) {
    __rt = this;
    if ((__cm_ & ios_base::out) && sync())
      __rt = nullptr;
  }
  return __rt;
}

#pragma GCC diagnostic pop

}}
# 3899 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\locale" 3
# 1 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cstdarg" 1 3
# 47 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\cstdarg" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __2 {

using ::va_list __attribute__((__using_if_exists__));

}}
# 3900 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\locale" 2 3
# 2993 "C:\\Keil_v5\\ARM\\ARMCLANG\\bin\\..\\include\\libcxx\\vector" 2 3
# 5 "../Model/Labels.cpp" 2


static const char *labelsVec[] __attribute__((aligned(16), section("labels"))) =
{






    "call",
    "fist",
    "like",
    "mute",
    "ok",
    "one",
    "palm",
    "peace",
    "stop",
    "three",
    "no_gesture"
# 107 "../Model/Labels.cpp"
};

bool GetLabelsVector(std::vector<std::string> &labels)
{
    constexpr size_t labelsSz = 11;
    labels.clear();

    if (!labelsSz)
    {
        return false;
    }

    labels.reserve(labelsSz);

    for (size_t i = 0; i < labelsSz; ++i)
    {
        labels.emplace_back(labelsVec[i]);
    }

    return true;
}

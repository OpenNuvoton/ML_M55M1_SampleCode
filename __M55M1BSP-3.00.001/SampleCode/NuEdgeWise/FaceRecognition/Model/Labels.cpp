/*
 * Copyright (c) 2022, Arm Limited and affiliates.
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*********************    Autogenerated file. DO NOT EDIT *******************
 * Generated from gen_labels_cpp.py tool and visual_wake_word_labels.txt file.
 * Date: 2022-04-14 09:45:40.393796
 ***************************************************************************/

#include "BufAttributes.hpp"
#include "Labels.hpp"

#include <vector>
#include <string>
#include <iostream>

#include "LabelFileReader.h"


bool ParserLabelVectorFromFile(
	const char *szFileName,
    std::vector<S_LABEL_INFO> &LabelInfo,
    size_t *found_label_count)
{
	char *szLineBuf;
	int32_t i32LineLen;

	std::string delimiter = ":";
    LabelInfo.clear();

    size_t pos = 0;
    std::string token;

	if(!LabelFileReader_Initialize(szFileName))
		return false;

	int params = 0;
	while(1)
	{
		i32LineLen = 0;
		szLineBuf = LabelFileReader_ReadLine(&i32LineLen);

		if(i32LineLen == 0)
			break;

		std::string szLineData(szLineBuf, i32LineLen);
		
		printf("the label line data %s \n", szLineData.c_str());

        S_LABEL_INFO sNewLabel;

        pos = 0;
        sNewLabel.szLable.clear();
        sNewLabel.fParam.clear();

		params = 0;
        while ((pos = szLineData.find(delimiter)) != std::string::npos)
        {
            token = szLineData.substr(0, pos);

            if (sNewLabel.szLable.size() == 0)      //Get label string
            {
                sNewLabel.szLable = token;
            }
            else            // Get param
            {
                sNewLabel.fParam.push_back(stof(token));
				//printf("The param [%d]%s \n", params, token.c_str());
				params++;
				
            }

            szLineData.erase(0, pos + delimiter.length());
			
        }

		printf("The label name is %s and param size is %d \n", sNewLabel.szLable.c_str(), sNewLabel.fParam.size());

        LabelInfo.push_back(sNewLabel);
	}

	LabelFileReader_Finish();

    if (found_label_count)
        * found_label_count = LabelInfo.size();
	
	return true;
}


